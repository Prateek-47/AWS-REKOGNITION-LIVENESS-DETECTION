{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport const createAggregatedClient = (commands, Client) => {\n  for (const command of Object.keys(commands)) {\n    const CommandCtor = commands[command];\n\n    const methodImpl = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (args, optionsOrCb, cb) {\n        const command = new CommandCtor(args);\n\n        if (typeof optionsOrCb === \"function\") {\n          this.send(command, optionsOrCb);\n        } else if (typeof cb === \"function\") {\n          if (typeof optionsOrCb !== \"object\") throw new Error(`Expected http options but got ${typeof optionsOrCb}`);\n          this.send(command, optionsOrCb || {}, cb);\n        } else {\n          return this.send(command, optionsOrCb);\n        }\n      });\n\n      return function methodImpl(_x, _x2, _x3) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, \"\");\n    Client.prototype[methodName] = methodImpl;\n  }\n};","map":{"version":3,"names":["createAggregatedClient","commands","Client","command","Object","keys","CommandCtor","methodImpl","args","optionsOrCb","cb","send","Error","methodName","toLowerCase","slice","replace","prototype"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/smithy-client/dist-es/create-aggregated-client.js"],"sourcesContent":["export const createAggregatedClient = (commands, Client) => {\n    for (const command of Object.keys(commands)) {\n        const CommandCtor = commands[command];\n        const methodImpl = async function (args, optionsOrCb, cb) {\n            const command = new CommandCtor(args);\n            if (typeof optionsOrCb === \"function\") {\n                this.send(command, optionsOrCb);\n            }\n            else if (typeof cb === \"function\") {\n                if (typeof optionsOrCb !== \"object\")\n                    throw new Error(`Expected http options but got ${typeof optionsOrCb}`);\n                this.send(command, optionsOrCb || {}, cb);\n            }\n            else {\n                return this.send(command, optionsOrCb);\n            }\n        };\n        const methodName = (command[0].toLowerCase() + command.slice(1)).replace(/Command$/, \"\");\n        Client.prototype[methodName] = methodImpl;\n    }\n};\n"],"mappings":";AAAA,OAAO,MAAMA,sBAAsB,GAAG,CAACC,QAAD,EAAWC,MAAX,KAAsB;EACxD,KAAK,MAAMC,OAAX,IAAsBC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAAtB,EAA6C;IACzC,MAAMK,WAAW,GAAGL,QAAQ,CAACE,OAAD,CAA5B;;IACA,MAAMI,UAAU;MAAA,6BAAG,WAAgBC,IAAhB,EAAsBC,WAAtB,EAAmCC,EAAnC,EAAuC;QACtD,MAAMP,OAAO,GAAG,IAAIG,WAAJ,CAAgBE,IAAhB,CAAhB;;QACA,IAAI,OAAOC,WAAP,KAAuB,UAA3B,EAAuC;UACnC,KAAKE,IAAL,CAAUR,OAAV,EAAmBM,WAAnB;QACH,CAFD,MAGK,IAAI,OAAOC,EAAP,KAAc,UAAlB,EAA8B;UAC/B,IAAI,OAAOD,WAAP,KAAuB,QAA3B,EACI,MAAM,IAAIG,KAAJ,CAAW,iCAAgC,OAAOH,WAAY,EAA9D,CAAN;UACJ,KAAKE,IAAL,CAAUR,OAAV,EAAmBM,WAAW,IAAI,EAAlC,EAAsCC,EAAtC;QACH,CAJI,MAKA;UACD,OAAO,KAAKC,IAAL,CAAUR,OAAV,EAAmBM,WAAnB,CAAP;QACH;MACJ,CAbe;;MAAA,gBAAVF,UAAU;QAAA;MAAA;IAAA,GAAhB;;IAcA,MAAMM,UAAU,GAAG,CAACV,OAAO,CAAC,CAAD,CAAP,CAAWW,WAAX,KAA2BX,OAAO,CAACY,KAAR,CAAc,CAAd,CAA5B,EAA8CC,OAA9C,CAAsD,UAAtD,EAAkE,EAAlE,CAAnB;IACAd,MAAM,CAACe,SAAP,CAAiBJ,UAAjB,IAA+BN,UAA/B;EACH;AACJ,CApBM"},"metadata":{},"sourceType":"module"}