{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmFunc;\n\nfunction setupFunc(backend) {\n  wasmFunc = backend.wasm.cwrap(AddN, null\n  /* void */\n  , ['array', 'number', 'number', 'number']);\n}\n\nfunction addn(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const out = backend.makeOutput(inputs[0].shape, inputs[0].dtype); // Short-circuit zero-sized tensors.\n\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n\n  const inputIds = inputs.map(x => backend.dataIdMap.get(x.dataId).id);\n  const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmFunc(inputIdsBytes, inputIds.length, CppDType[out.dtype], outId);\n  return out;\n}\n\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: addn\n};","map":{"version":3,"names":["AddN","util","CppDType","wasmFunc","setupFunc","backend","wasm","cwrap","addn","args","inputs","out","makeOutput","shape","dtype","sizeFromShape","inputIds","map","x","dataIdMap","get","dataId","id","inputIdsBytes","Uint8Array","Int32Array","buffer","outId","length","addNConfig","kernelName","backendName","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/AddN.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmFunc;\nfunction setupFunc(backend) {\n    wasmFunc = backend.wasm.cwrap(AddN, null /* void */, [\n        'array',\n        'number',\n        'number',\n        'number',\n    ]);\n}\nfunction addn(args) {\n    const { inputs, backend } = args;\n    const out = backend.makeOutput(inputs[0].shape, inputs[0].dtype);\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(out.shape) === 0) {\n        return out;\n    }\n    const inputIds = inputs.map(x => backend.dataIdMap.get(x.dataId).id);\n    const inputIdsBytes = new Uint8Array(new Int32Array(inputIds).buffer);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmFunc(inputIdsBytes, inputIds.length, CppDType[out.dtype], outId);\n    return out;\n}\nexport const addNConfig = {\n    kernelName: AddN,\n    backendName: 'wasm',\n    setupFunc,\n    kernelFunc: addn,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,EAAeC,IAAf,QAA2B,uBAA3B;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,IAAIC,QAAJ;;AACA,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;EACxBF,QAAQ,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBP,IAAnB,EAAyB;EAAK;EAA9B,EAA0C,CACjD,OADiD,EAEjD,QAFiD,EAGjD,QAHiD,EAIjD,QAJiD,CAA1C,CAAX;AAMH;;AACD,SAASQ,IAAT,CAAcC,IAAd,EAAoB;EAChB,MAAM;IAAEC,MAAF;IAAUL;EAAV,IAAsBI,IAA5B;EACA,MAAME,GAAG,GAAGN,OAAO,CAACO,UAAR,CAAmBF,MAAM,CAAC,CAAD,CAAN,CAAUG,KAA7B,EAAoCH,MAAM,CAAC,CAAD,CAAN,CAAUI,KAA9C,CAAZ,CAFgB,CAGhB;;EACA,IAAIb,IAAI,CAACc,aAAL,CAAmBJ,GAAG,CAACE,KAAvB,MAAkC,CAAtC,EAAyC;IACrC,OAAOF,GAAP;EACH;;EACD,MAAMK,QAAQ,GAAGN,MAAM,CAACO,GAAP,CAAWC,CAAC,IAAIb,OAAO,CAACc,SAAR,CAAkBC,GAAlB,CAAsBF,CAAC,CAACG,MAAxB,EAAgCC,EAAhD,CAAjB;EACA,MAAMC,aAAa,GAAG,IAAIC,UAAJ,CAAe,IAAIC,UAAJ,CAAeT,QAAf,EAAyBU,MAAxC,CAAtB;EACA,MAAMC,KAAK,GAAGtB,OAAO,CAACc,SAAR,CAAkBC,GAAlB,CAAsBT,GAAG,CAACU,MAA1B,EAAkCC,EAAhD;EACAnB,QAAQ,CAACoB,aAAD,EAAgBP,QAAQ,CAACY,MAAzB,EAAiC1B,QAAQ,CAACS,GAAG,CAACG,KAAL,CAAzC,EAAsDa,KAAtD,CAAR;EACA,OAAOhB,GAAP;AACH;;AACD,OAAO,MAAMkB,UAAU,GAAG;EACtBC,UAAU,EAAE9B,IADU;EAEtB+B,WAAW,EAAE,MAFS;EAGtB3B,SAHsB;EAItB4B,UAAU,EAAExB;AAJU,CAAnB"},"metadata":{},"sourceType":"module"}