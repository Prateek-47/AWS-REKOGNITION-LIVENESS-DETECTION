{"ast":null,"code":"import { useState as $9gyGR$useState } from \"react\";\nimport { useLayoutEffect as $9gyGR$useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\n\nfunction $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {\n  const [size, setSize] = $9gyGR$useState(undefined);\n  $9gyGR$useLayoutEffect(() => {\n    if (element) {\n      // provide size as early as possible\n      setSize({\n        width: element.offsetWidth,\n        height: element.offsetHeight\n      });\n      const resizeObserver = new ResizeObserver(entries => {\n        if (!Array.isArray(entries)) return; // Since we only observe the one element, we don't need to loop over the\n        // array\n\n        if (!entries.length) return;\n        const entry = entries[0];\n        let width;\n        let height;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize']; // iron out differences between browsers\n\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate it ourselves to get the correct border box.\n          width = element.offsetWidth;\n          height = element.offsetHeight;\n        }\n\n        setSize({\n          width: width,\n          height: height\n        });\n      });\n      resizeObserver.observe(element, {\n        box: 'border-box'\n      });\n      return () => resizeObserver.unobserve(element);\n    } else // We only want to reset to `undefined` when the element becomes `null`,\n      // not if it changes to another element.\n      setSize(undefined);\n  }, [element]);\n  return size;\n}\n\nexport { $db6c3485150b8e66$export$1ab7ae714698c4b8 as useSize };","map":{"version":3,"names":["useState","$9gyGR$useState","useLayoutEffect","$9gyGR$useLayoutEffect","$db6c3485150b8e66$export$1ab7ae714698c4b8","element","size","setSize","undefined","width","offsetWidth","height","offsetHeight","resizeObserver","ResizeObserver","entries","Array","isArray","length","entry","borderSizeEntry","borderSize","observe","box","unobserve","useSize"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@radix-ui/react-use-size/dist/index.module.js"],"sourcesContent":["import {useState as $9gyGR$useState} from \"react\";\nimport {useLayoutEffect as $9gyGR$useLayoutEffect} from \"@radix-ui/react-use-layout-effect\";\n\n\n\nfunction $db6c3485150b8e66$export$1ab7ae714698c4b8(element) {\n    const [size, setSize] = $9gyGR$useState(undefined);\n    $9gyGR$useLayoutEffect(()=>{\n        if (element) {\n            // provide size as early as possible\n            setSize({\n                width: element.offsetWidth,\n                height: element.offsetHeight\n            });\n            const resizeObserver = new ResizeObserver((entries)=>{\n                if (!Array.isArray(entries)) return;\n                 // Since we only observe the one element, we don't need to loop over the\n                // array\n                if (!entries.length) return;\n                const entry = entries[0];\n                let width;\n                let height;\n                if ('borderBoxSize' in entry) {\n                    const borderSizeEntry = entry['borderBoxSize']; // iron out differences between browsers\n                    const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n                    width = borderSize['inlineSize'];\n                    height = borderSize['blockSize'];\n                } else {\n                    // for browsers that don't support `borderBoxSize`\n                    // we calculate it ourselves to get the correct border box.\n                    width = element.offsetWidth;\n                    height = element.offsetHeight;\n                }\n                setSize({\n                    width: width,\n                    height: height\n                });\n            });\n            resizeObserver.observe(element, {\n                box: 'border-box'\n            });\n            return ()=>resizeObserver.unobserve(element)\n            ;\n        } else // We only want to reset to `undefined` when the element becomes `null`,\n        // not if it changes to another element.\n        setSize(undefined);\n    }, [\n        element\n    ]);\n    return size;\n}\n\n\n\n\nexport {$db6c3485150b8e66$export$1ab7ae714698c4b8 as useSize};\n"],"mappings":"AAAA,SAAQA,QAAQ,IAAIC,eAApB,QAA0C,OAA1C;AACA,SAAQC,eAAe,IAAIC,sBAA3B,QAAwD,mCAAxD;;AAIA,SAASC,yCAAT,CAAmDC,OAAnD,EAA4D;EACxD,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,eAAe,CAACO,SAAD,CAAvC;EACAL,sBAAsB,CAAC,MAAI;IACvB,IAAIE,OAAJ,EAAa;MACT;MACAE,OAAO,CAAC;QACJE,KAAK,EAAEJ,OAAO,CAACK,WADX;QAEJC,MAAM,EAAEN,OAAO,CAACO;MAFZ,CAAD,CAAP;MAIA,MAAMC,cAAc,GAAG,IAAIC,cAAJ,CAAoBC,OAAD,IAAW;QACjD,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6B,OADoB,CAEhD;QACD;;QACA,IAAI,CAACA,OAAO,CAACG,MAAb,EAAqB;QACrB,MAAMC,KAAK,GAAGJ,OAAO,CAAC,CAAD,CAArB;QACA,IAAIN,KAAJ;QACA,IAAIE,MAAJ;;QACA,IAAI,mBAAmBQ,KAAvB,EAA8B;UAC1B,MAAMC,eAAe,GAAGD,KAAK,CAAC,eAAD,CAA7B,CAD0B,CACsB;;UAChD,MAAME,UAAU,GAAGL,KAAK,CAACC,OAAN,CAAcG,eAAd,IAAiCA,eAAe,CAAC,CAAD,CAAhD,GAAsDA,eAAzE;UACAX,KAAK,GAAGY,UAAU,CAAC,YAAD,CAAlB;UACAV,MAAM,GAAGU,UAAU,CAAC,WAAD,CAAnB;QACH,CALD,MAKO;UACH;UACA;UACAZ,KAAK,GAAGJ,OAAO,CAACK,WAAhB;UACAC,MAAM,GAAGN,OAAO,CAACO,YAAjB;QACH;;QACDL,OAAO,CAAC;UACJE,KAAK,EAAEA,KADH;UAEJE,MAAM,EAAEA;QAFJ,CAAD,CAAP;MAIH,CAvBsB,CAAvB;MAwBAE,cAAc,CAACS,OAAf,CAAuBjB,OAAvB,EAAgC;QAC5BkB,GAAG,EAAE;MADuB,CAAhC;MAGA,OAAO,MAAIV,cAAc,CAACW,SAAf,CAAyBnB,OAAzB,CAAX;IAEH,CAnCD,MAmCO;MACP;MACAE,OAAO,CAACC,SAAD,CAAP;EACH,CAvCqB,EAuCnB,CACCH,OADD,CAvCmB,CAAtB;EA0CA,OAAOC,IAAP;AACH;;AAKD,SAAQF,yCAAyC,IAAIqB,OAArD"},"metadata":{},"sourceType":"module"}