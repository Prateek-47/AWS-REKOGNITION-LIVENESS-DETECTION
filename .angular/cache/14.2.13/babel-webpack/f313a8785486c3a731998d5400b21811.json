{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\nexport const resolveAwsAuthConfig = input => {\n  const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  const {\n    signingEscapePath = true,\n    systemClockOffset = input.systemClockOffset || 0,\n    sha256\n  } = input;\n  let signer;\n\n  if (input.signer) {\n    signer = normalizeProvider(input.signer);\n  } else if (input.regionInfoProvider) {\n    signer = () => normalizeProvider(input.region)().then( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (region) {\n        return [(yield input.regionInfoProvider(region, {\n          useFipsEndpoint: yield input.useFipsEndpoint(),\n          useDualstackEndpoint: yield input.useDualstackEndpoint()\n        })) || {}, region];\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()).then(([regionInfo, region]) => {\n      const {\n        signingRegion,\n        signingService\n      } = regionInfo;\n      input.signingRegion = input.signingRegion || signingRegion || region;\n      input.signingName = input.signingName || signingService || input.serviceId;\n      const params = { ...input,\n        credentials: normalizedCreds,\n        region: input.signingRegion,\n        service: input.signingName,\n        sha256,\n        uriEscapePath: signingEscapePath\n      };\n      const SignerCtor = input.signerConstructor || SignatureV4;\n      return new SignerCtor(params);\n    });\n  } else {\n    signer = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (authScheme) {\n        authScheme = Object.assign({}, {\n          name: \"sigv4\",\n          signingName: input.signingName || input.defaultSigningName,\n          signingRegion: yield normalizeProvider(input.region)(),\n          properties: {}\n        }, authScheme);\n        const signingRegion = authScheme.signingRegion;\n        const signingService = authScheme.signingName;\n        input.signingRegion = input.signingRegion || signingRegion;\n        input.signingName = input.signingName || signingService || input.serviceId;\n        const params = { ...input,\n          credentials: normalizedCreds,\n          region: input.signingRegion,\n          service: input.signingName,\n          sha256,\n          uriEscapePath: signingEscapePath\n        };\n        const SignerCtor = input.signerConstructor || SignatureV4;\n        return new SignerCtor(params);\n      });\n\n      return function signer(_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n\n  return { ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer\n  };\n};\nexport const resolveSigV4AuthConfig = input => {\n  const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);\n  const {\n    signingEscapePath = true,\n    systemClockOffset = input.systemClockOffset || 0,\n    sha256\n  } = input;\n  let signer;\n\n  if (input.signer) {\n    signer = normalizeProvider(input.signer);\n  } else {\n    signer = normalizeProvider(new SignatureV4({\n      credentials: normalizedCreds,\n      region: input.region,\n      service: input.signingName,\n      sha256,\n      uriEscapePath: signingEscapePath\n    }));\n  }\n\n  return { ...input,\n    systemClockOffset,\n    signingEscapePath,\n    credentials: normalizedCreds,\n    signer\n  };\n};\n\nconst normalizeCredentialProvider = credentials => {\n  if (typeof credentials === \"function\") {\n    return memoize(credentials, credentials => credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, credentials => credentials.expiration !== undefined);\n  }\n\n  return normalizeProvider(credentials);\n};","map":{"version":3,"names":["memoize","SignatureV4","normalizeProvider","CREDENTIAL_EXPIRE_WINDOW","resolveAwsAuthConfig","input","normalizedCreds","credentials","normalizeCredentialProvider","credentialDefaultProvider","signingEscapePath","systemClockOffset","sha256","signer","regionInfoProvider","region","then","useFipsEndpoint","useDualstackEndpoint","regionInfo","signingRegion","signingService","signingName","serviceId","params","service","uriEscapePath","SignerCtor","signerConstructor","authScheme","Object","assign","name","defaultSigningName","properties","resolveSigV4AuthConfig","expiration","undefined","getTime","Date","now"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/middleware-signing/dist-es/awsAuthConfiguration.js"],"sourcesContent":["import { memoize } from \"@aws-sdk/property-provider\";\nimport { SignatureV4 } from \"@aws-sdk/signature-v4\";\nimport { normalizeProvider } from \"@aws-sdk/util-middleware\";\nconst CREDENTIAL_EXPIRE_WINDOW = 300000;\nexport const resolveAwsAuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else if (input.regionInfoProvider) {\n        signer = () => normalizeProvider(input.region)()\n            .then(async (region) => [\n            (await input.regionInfoProvider(region, {\n                useFipsEndpoint: await input.useFipsEndpoint(),\n                useDualstackEndpoint: await input.useDualstackEndpoint(),\n            })) || {},\n            region,\n        ])\n            .then(([regionInfo, region]) => {\n            const { signingRegion, signingService } = regionInfo;\n            input.signingRegion = input.signingRegion || signingRegion || region;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        });\n    }\n    else {\n        signer = async (authScheme) => {\n            authScheme = Object.assign({}, {\n                name: \"sigv4\",\n                signingName: input.signingName || input.defaultSigningName,\n                signingRegion: await normalizeProvider(input.region)(),\n                properties: {},\n            }, authScheme);\n            const signingRegion = authScheme.signingRegion;\n            const signingService = authScheme.signingName;\n            input.signingRegion = input.signingRegion || signingRegion;\n            input.signingName = input.signingName || signingService || input.serviceId;\n            const params = {\n                ...input,\n                credentials: normalizedCreds,\n                region: input.signingRegion,\n                service: input.signingName,\n                sha256,\n                uriEscapePath: signingEscapePath,\n            };\n            const SignerCtor = input.signerConstructor || SignatureV4;\n            return new SignerCtor(params);\n        };\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nexport const resolveSigV4AuthConfig = (input) => {\n    const normalizedCreds = input.credentials\n        ? normalizeCredentialProvider(input.credentials)\n        : input.credentialDefaultProvider(input);\n    const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;\n    let signer;\n    if (input.signer) {\n        signer = normalizeProvider(input.signer);\n    }\n    else {\n        signer = normalizeProvider(new SignatureV4({\n            credentials: normalizedCreds,\n            region: input.region,\n            service: input.signingName,\n            sha256,\n            uriEscapePath: signingEscapePath,\n        }));\n    }\n    return {\n        ...input,\n        systemClockOffset,\n        signingEscapePath,\n        credentials: normalizedCreds,\n        signer,\n    };\n};\nconst normalizeCredentialProvider = (credentials) => {\n    if (typeof credentials === \"function\") {\n        return memoize(credentials, (credentials) => credentials.expiration !== undefined &&\n            credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials) => credentials.expiration !== undefined);\n    }\n    return normalizeProvider(credentials);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}