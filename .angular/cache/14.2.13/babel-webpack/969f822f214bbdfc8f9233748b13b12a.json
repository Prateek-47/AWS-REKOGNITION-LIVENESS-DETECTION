{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { Amplify } from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\n\nvar ServiceWorkerClass =\n/** @class */\nfunction () {\n  function ServiceWorkerClass() {\n    // The AWS Amplify logger\n    this._logger = new Logger('ServiceWorker');\n  }\n\n  Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n    /**\n     * Get the currently active service worker\n     */\n    get: function () {\n      return this._serviceWorker;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Register the service-worker.js file in the browser\n   * Make sure the service-worker.js is part of the build\n   * for example with Angular, modify the angular-cli.json file\n   * and add to \"assets\" array \"service-worker.js\"\n   * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n   * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   * @returns {Promise}\n   *\t- resolve(ServiceWorkerRegistration)\n   *\t- reject(Error)\n   **/\n\n  ServiceWorkerClass.prototype.register = function (filePath, scope) {\n    var _this = this;\n\n    if (filePath === void 0) {\n      filePath = '/service-worker.js';\n    }\n\n    if (scope === void 0) {\n      scope = '/';\n    }\n\n    this._logger.debug(\"registering \".concat(filePath));\n\n    this._logger.debug(\"registering service worker with scope \".concat(scope));\n\n    return new Promise(function (resolve, reject) {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          scope: scope\n        }).then(function (registration) {\n          if (registration.installing) {\n            _this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            _this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            _this._serviceWorker = registration.active;\n          }\n\n          _this._registration = registration;\n\n          _this._setupListeners();\n\n          _this._logger.debug(\"Service Worker Registration Success: \".concat(registration));\n\n          return resolve(registration);\n        }).catch(function (error) {\n          _this._logger.debug(\"Service Worker Registration Failed \".concat(error));\n\n          return reject(error);\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Enable web push notifications. If not subscribed, a new subscription will\n   * be created and registered.\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\n   * \tPush Server Libraries: https://github.com/web-push-libs/\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n   * @param publicKey\n   * @returns {Promise}\n   * \t- resolve(PushSubscription)\n   *  - reject(Error)\n   */\n\n\n  ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n    var _this = this;\n\n    if (!this._registration) throw new Error('Service Worker not registered');\n    this._publicKey = publicKey;\n    return new Promise(function (resolve, reject) {\n      if (browserOrNode().isBrowser) {\n        _this._registration.pushManager.getSubscription().then(function (subscription) {\n          if (subscription) {\n            _this._subscription = subscription;\n\n            _this._logger.debug(\"User is subscribed to push: \".concat(JSON.stringify(subscription)));\n\n            resolve(subscription);\n          } else {\n            _this._logger.debug(\"User is NOT subscribed to push\");\n\n            return _this._registration.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey: _this._urlB64ToUint8Array(publicKey)\n            }).then(function (subscription) {\n              _this._subscription = subscription;\n\n              _this._logger.debug(\"User subscribed: \".concat(JSON.stringify(subscription)));\n\n              resolve(subscription);\n            }).catch(function (error) {\n              _this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        return reject(new Error('Service Worker not available'));\n      }\n    });\n  };\n  /**\n   * Convert a base64 encoded string to a Uint8 array for the push server key\n   * @param base64String\n   */\n\n\n  ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n    var padding = '='.repeat((4 - base64String.length % 4) % 4);\n    var base64 = (base64String + padding).replace(/\\-/g, '+').replace(/_/g, '/');\n    var rawData = window.atob(base64);\n    var outputArray = new Uint8Array(rawData.length);\n\n    for (var i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n\n    return outputArray;\n  };\n  /**\n   * Send a message to the service worker. The service worker needs\n   * to implement `self.addEventListener('message') to handle the\n   * message. This ***currently*** does not work in Safari or IE.\n   * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n   *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n   * @returns {Promise}\n   **/\n\n\n  ServiceWorkerClass.prototype.send = function (message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  };\n  /**\n   * Listen for service worker state change and message events\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n   **/\n\n\n  ServiceWorkerClass.prototype._setupListeners = function () {\n    var _this = this;\n\n    this._serviceWorker.addEventListener('statechange', function (event) {\n      var currentState = _this._serviceWorker.state;\n\n      _this._logger.debug(\"ServiceWorker statechange: \".concat(currentState));\n\n      if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n        Amplify.Analytics.record({\n          name: 'ServiceWorker',\n          attributes: {\n            state: currentState\n          }\n        });\n      }\n    });\n\n    this._serviceWorker.addEventListener('message', function (event) {\n      _this._logger.debug(\"ServiceWorker message event: \".concat(event));\n    });\n  };\n\n  return ServiceWorkerClass;\n}();\n\nexport { ServiceWorkerClass };","map":{"version":3,"names":["ConsoleLogger","Logger","browserOrNode","Amplify","ServiceWorkerClass","_logger","Object","defineProperty","prototype","get","_serviceWorker","enumerable","configurable","register","filePath","scope","_this","debug","concat","Promise","resolve","reject","navigator","serviceWorker","then","registration","installing","waiting","active","_registration","_setupListeners","catch","error","Error","enablePush","publicKey","_publicKey","isBrowser","pushManager","getSubscription","subscription","_subscription","JSON","stringify","subscribe","userVisibleOnly","applicationServerKey","_urlB64ToUint8Array","base64String","padding","repeat","length","base64","replace","rawData","window","atob","outputArray","Uint8Array","i","charCodeAt","send","message","postMessage","addEventListener","event","currentState","state","Analytics","record","name","attributes"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/core/lib-esm/ServiceWorker/ServiceWorker.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '../Logger';\nimport { browserOrNode } from '../JS';\nimport { Amplify } from '../Amplify';\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nvar ServiceWorkerClass = /** @class */ (function () {\n    function ServiceWorkerClass() {\n        // The AWS Amplify logger\n        this._logger = new Logger('ServiceWorker');\n    }\n    Object.defineProperty(ServiceWorkerClass.prototype, \"serviceWorker\", {\n        /**\n         * Get the currently active service worker\n         */\n        get: function () {\n            return this._serviceWorker;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Register the service-worker.js file in the browser\n     * Make sure the service-worker.js is part of the build\n     * for example with Angular, modify the angular-cli.json file\n     * and add to \"assets\" array \"service-worker.js\"\n     * @param {string} - (optional) Service worker file. Defaults to \"/service-worker.js\"\n     * @param {string} - (optional) The service worker scope. Defaults to \"/\"\n     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n     * @returns {Promise}\n     *\t- resolve(ServiceWorkerRegistration)\n     *\t- reject(Error)\n     **/\n    ServiceWorkerClass.prototype.register = function (filePath, scope) {\n        var _this = this;\n        if (filePath === void 0) { filePath = '/service-worker.js'; }\n        if (scope === void 0) { scope = '/'; }\n        this._logger.debug(\"registering \".concat(filePath));\n        this._logger.debug(\"registering service worker with scope \".concat(scope));\n        return new Promise(function (resolve, reject) {\n            if (navigator && 'serviceWorker' in navigator) {\n                navigator.serviceWorker\n                    .register(filePath, {\n                    scope: scope,\n                })\n                    .then(function (registration) {\n                    if (registration.installing) {\n                        _this._serviceWorker = registration.installing;\n                    }\n                    else if (registration.waiting) {\n                        _this._serviceWorker = registration.waiting;\n                    }\n                    else if (registration.active) {\n                        _this._serviceWorker = registration.active;\n                    }\n                    _this._registration = registration;\n                    _this._setupListeners();\n                    _this._logger.debug(\"Service Worker Registration Success: \".concat(registration));\n                    return resolve(registration);\n                })\n                    .catch(function (error) {\n                    _this._logger.debug(\"Service Worker Registration Failed \".concat(error));\n                    return reject(error);\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Enable web push notifications. If not subscribed, a new subscription will\n     * be created and registered.\n     * \tTest Push Server: https://web-push-codelab.glitch.me/\n     * \tPush Server Libraries: https://github.com/web-push-libs/\n     * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n     * @param publicKey\n     * @returns {Promise}\n     * \t- resolve(PushSubscription)\n     *  - reject(Error)\n     */\n    ServiceWorkerClass.prototype.enablePush = function (publicKey) {\n        var _this = this;\n        if (!this._registration)\n            throw new Error('Service Worker not registered');\n        this._publicKey = publicKey;\n        return new Promise(function (resolve, reject) {\n            if (browserOrNode().isBrowser) {\n                _this._registration.pushManager.getSubscription().then(function (subscription) {\n                    if (subscription) {\n                        _this._subscription = subscription;\n                        _this._logger.debug(\"User is subscribed to push: \".concat(JSON.stringify(subscription)));\n                        resolve(subscription);\n                    }\n                    else {\n                        _this._logger.debug(\"User is NOT subscribed to push\");\n                        return _this._registration.pushManager\n                            .subscribe({\n                            userVisibleOnly: true,\n                            applicationServerKey: _this._urlB64ToUint8Array(publicKey),\n                        })\n                            .then(function (subscription) {\n                            _this._subscription = subscription;\n                            _this._logger.debug(\"User subscribed: \".concat(JSON.stringify(subscription)));\n                            resolve(subscription);\n                        })\n                            .catch(function (error) {\n                            _this._logger.error(error);\n                        });\n                    }\n                });\n            }\n            else {\n                return reject(new Error('Service Worker not available'));\n            }\n        });\n    };\n    /**\n     * Convert a base64 encoded string to a Uint8 array for the push server key\n     * @param base64String\n     */\n    ServiceWorkerClass.prototype._urlB64ToUint8Array = function (base64String) {\n        var padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n        var base64 = (base64String + padding)\n            .replace(/\\-/g, '+')\n            .replace(/_/g, '/');\n        var rawData = window.atob(base64);\n        var outputArray = new Uint8Array(rawData.length);\n        for (var i = 0; i < rawData.length; ++i) {\n            outputArray[i] = rawData.charCodeAt(i);\n        }\n        return outputArray;\n    };\n    /**\n     * Send a message to the service worker. The service worker needs\n     * to implement `self.addEventListener('message') to handle the\n     * message. This ***currently*** does not work in Safari or IE.\n     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker\n     *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n     * @returns {Promise}\n     **/\n    ServiceWorkerClass.prototype.send = function (message) {\n        if (this._serviceWorker) {\n            this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n        }\n    };\n    /**\n     * Listen for service worker state change and message events\n     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n     **/\n    ServiceWorkerClass.prototype._setupListeners = function () {\n        var _this = this;\n        this._serviceWorker.addEventListener('statechange', function (event) {\n            var currentState = _this._serviceWorker.state;\n            _this._logger.debug(\"ServiceWorker statechange: \".concat(currentState));\n            if (Amplify.Analytics && typeof Amplify.Analytics.record === 'function') {\n                Amplify.Analytics.record({\n                    name: 'ServiceWorker',\n                    attributes: {\n                        state: currentState,\n                    },\n                });\n            }\n        });\n        this._serviceWorker.addEventListener('message', function (event) {\n            _this._logger.debug(\"ServiceWorker message event: \".concat(event));\n        });\n    };\n    return ServiceWorkerClass;\n}());\nexport { ServiceWorkerClass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}