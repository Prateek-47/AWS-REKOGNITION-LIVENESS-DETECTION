{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport class AdaptiveRetryStrategy {\n  constructor(maxAttemptsProvider, options) {\n    this.maxAttemptsProvider = maxAttemptsProvider;\n    this.mode = RETRY_MODES.ADAPTIVE;\n    const {\n      rateLimiter\n    } = options ?? {};\n    this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\n    this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);\n  }\n\n  acquireInitialRetryToken(retryTokenScope) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.rateLimiter.getSendToken();\n      return _this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);\n    })();\n  }\n\n  refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.rateLimiter.updateClientSendingRate(errorInfo);\n\n      return _this2.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\n    })();\n  }\n\n  recordSuccess(token) {\n    this.rateLimiter.updateClientSendingRate({});\n    this.standardRetryStrategy.recordSuccess(token);\n  }\n\n}","map":{"version":3,"names":["RETRY_MODES","DefaultRateLimiter","StandardRetryStrategy","AdaptiveRetryStrategy","constructor","maxAttemptsProvider","options","mode","ADAPTIVE","rateLimiter","standardRetryStrategy","acquireInitialRetryToken","retryTokenScope","getSendToken","refreshRetryTokenForRetry","tokenToRenew","errorInfo","updateClientSendingRate","recordSuccess","token"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/util-retry/dist-es/AdaptiveRetryStrategy.js"],"sourcesContent":["import { RETRY_MODES } from \"./config\";\nimport { DefaultRateLimiter } from \"./DefaultRateLimiter\";\nimport { StandardRetryStrategy } from \"./StandardRetryStrategy\";\nexport class AdaptiveRetryStrategy {\n    constructor(maxAttemptsProvider, options) {\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = RETRY_MODES.ADAPTIVE;\n        const { rateLimiter } = options ?? {};\n        this.rateLimiter = rateLimiter ?? new DefaultRateLimiter();\n        this.standardRetryStrategy = new StandardRetryStrategy(maxAttemptsProvider);\n    }\n    async acquireInitialRetryToken(retryTokenScope) {\n        await this.rateLimiter.getSendToken();\n        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);\n    }\n    async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {\n        this.rateLimiter.updateClientSendingRate(errorInfo);\n        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);\n    }\n    recordSuccess(token) {\n        this.rateLimiter.updateClientSendingRate({});\n        this.standardRetryStrategy.recordSuccess(token);\n    }\n}\n"],"mappings":";AAAA,SAASA,WAAT,QAA4B,UAA5B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,OAAO,MAAMC,qBAAN,CAA4B;EAC/BC,WAAW,CAACC,mBAAD,EAAsBC,OAAtB,EAA+B;IACtC,KAAKD,mBAAL,GAA2BA,mBAA3B;IACA,KAAKE,IAAL,GAAYP,WAAW,CAACQ,QAAxB;IACA,MAAM;MAAEC;IAAF,IAAkBH,OAAO,IAAI,EAAnC;IACA,KAAKG,WAAL,GAAmBA,WAAW,IAAI,IAAIR,kBAAJ,EAAlC;IACA,KAAKS,qBAAL,GAA6B,IAAIR,qBAAJ,CAA0BG,mBAA1B,CAA7B;EACH;;EACKM,wBAAwB,CAACC,eAAD,EAAkB;IAAA;;IAAA;MAC5C,MAAM,KAAI,CAACH,WAAL,CAAiBI,YAAjB,EAAN;MACA,OAAO,KAAI,CAACH,qBAAL,CAA2BC,wBAA3B,CAAoDC,eAApD,CAAP;IAF4C;EAG/C;;EACKE,yBAAyB,CAACC,YAAD,EAAeC,SAAf,EAA0B;IAAA;;IAAA;MACrD,MAAI,CAACP,WAAL,CAAiBQ,uBAAjB,CAAyCD,SAAzC;;MACA,OAAO,MAAI,CAACN,qBAAL,CAA2BI,yBAA3B,CAAqDC,YAArD,EAAmEC,SAAnE,CAAP;IAFqD;EAGxD;;EACDE,aAAa,CAACC,KAAD,EAAQ;IACjB,KAAKV,WAAL,CAAiBQ,uBAAjB,CAAyC,EAAzC;IACA,KAAKP,qBAAL,CAA2BQ,aAA3B,CAAyCC,KAAzC;EACH;;AAnB8B"},"metadata":{},"sourceType":"module"}