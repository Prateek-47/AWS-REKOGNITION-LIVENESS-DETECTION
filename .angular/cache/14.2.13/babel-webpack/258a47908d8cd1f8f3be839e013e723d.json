{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types'; // Must match enum in MirrorPad.cc\n\nvar MirrorPaddingMode;\n\n(function (MirrorPaddingMode) {\n  MirrorPaddingMode[MirrorPaddingMode[\"reflect\"] = 0] = \"reflect\";\n  MirrorPaddingMode[MirrorPaddingMode[\"symmetric\"] = 1] = \"symmetric\";\n})(MirrorPaddingMode || (MirrorPaddingMode = {}));\n\nlet wasmMirrorPad;\n\nfunction setup(backend) {\n  wasmMirrorPad = backend.wasm.cwrap(MirrorPad, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'array', 'array', 'number', 'number']);\n}\n\nfunction mirrorPad(args) {\n  const {\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      paddings,\n      mode\n    }\n  } = args;\n  const outShape = paddings.map((p, i) => p[0]\n  /* beforePad */\n  + x.shape[i] + p[1]\n  /* afterPad */\n  );\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const out = backend.makeOutput(outShape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const prePaddingsFlat = paddings.map(padTuple => padTuple[0]);\n  const postPaddingsFlat = paddings.map(padTuple => padTuple[1]);\n  const prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n  const postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n  wasmMirrorPad(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes, postPaddingsBytes, MirrorPaddingMode[mode], outId);\n  return out;\n}\n\nexport const mirrorPadConfig = {\n  kernelName: MirrorPad,\n  backendName: 'wasm',\n  kernelFunc: mirrorPad,\n  setupFunc: setup\n};","map":{"version":3,"names":["MirrorPad","CppDType","MirrorPaddingMode","wasmMirrorPad","setup","backend","wasm","cwrap","mirrorPad","args","inputs","x","attrs","paddings","mode","outShape","map","p","i","shape","xId","dataIdMap","get","dataId","id","out","makeOutput","dtype","outId","xShapeBytes","Uint8Array","Int32Array","buffer","prePaddingsFlat","padTuple","postPaddingsFlat","prePaddingsBytes","postPaddingsBytes","length","mirrorPadConfig","kernelName","backendName","kernelFunc","setupFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/MirrorPad.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\n// Must match enum in MirrorPad.cc\nvar MirrorPaddingMode;\n(function (MirrorPaddingMode) {\n    MirrorPaddingMode[MirrorPaddingMode[\"reflect\"] = 0] = \"reflect\";\n    MirrorPaddingMode[MirrorPaddingMode[\"symmetric\"] = 1] = \"symmetric\";\n})(MirrorPaddingMode || (MirrorPaddingMode = {}));\nlet wasmMirrorPad;\nfunction setup(backend) {\n    wasmMirrorPad = backend.wasm.cwrap(MirrorPad, null /* void */, [\n        'number',\n        'array',\n        'number',\n        'number',\n        'array',\n        'array',\n        'number',\n        'number',\n    ]);\n}\nfunction mirrorPad(args) {\n    const { inputs: { x }, backend, attrs: { paddings, mode } } = args;\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const out = backend.makeOutput(outShape, x.dtype);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n    const prePaddingsFlat = paddings.map(padTuple => padTuple[0]);\n    const postPaddingsFlat = paddings.map(padTuple => padTuple[1]);\n    const prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n    const postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n    wasmMirrorPad(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes, postPaddingsBytes, MirrorPaddingMode[mode], outId);\n    return out;\n}\nexport const mirrorPadConfig = {\n    kernelName: MirrorPad,\n    backendName: 'wasm',\n    kernelFunc: mirrorPad,\n    setupFunc: setup\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,QAAT,QAAyB,SAAzB,C,CACA;;AACA,IAAIC,iBAAJ;;AACA,CAAC,UAAUA,iBAAV,EAA6B;EAC1BA,iBAAiB,CAACA,iBAAiB,CAAC,SAAD,CAAjB,GAA+B,CAAhC,CAAjB,GAAsD,SAAtD;EACAA,iBAAiB,CAACA,iBAAiB,CAAC,WAAD,CAAjB,GAAiC,CAAlC,CAAjB,GAAwD,WAAxD;AACH,CAHD,EAGGA,iBAAiB,KAAKA,iBAAiB,GAAG,EAAzB,CAHpB;;AAIA,IAAIC,aAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,aAAa,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBP,SAAnB,EAA8B;EAAK;EAAnC,EAA+C,CAC3D,QAD2D,EAE3D,OAF2D,EAG3D,QAH2D,EAI3D,QAJ2D,EAK3D,OAL2D,EAM3D,OAN2D,EAO3D,QAP2D,EAQ3D,QAR2D,CAA/C,CAAhB;AAUH;;AACD,SAASQ,SAAT,CAAmBC,IAAnB,EAAyB;EACrB,MAAM;IAAEC,MAAM,EAAE;MAAEC;IAAF,CAAV;IAAiBN,OAAjB;IAA0BO,KAAK,EAAE;MAAEC,QAAF;MAAYC;IAAZ;EAAjC,IAAwDL,IAA9D;EACA,MAAMM,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD;EAAI;EAAL,EAAuBN,CAAC,CAACQ,KAAF,CAAQD,CAAR,CAAvB,GAAoCD,CAAC,CAAC,CAAD;EAAI;EAAhE,CAAjB;EACA,MAAMG,GAAG,GAAGf,OAAO,CAACgB,SAAR,CAAkBC,GAAlB,CAAsBX,CAAC,CAACY,MAAxB,EAAgCC,EAA5C;EACA,MAAMC,GAAG,GAAGpB,OAAO,CAACqB,UAAR,CAAmBX,QAAnB,EAA6BJ,CAAC,CAACgB,KAA/B,CAAZ;EACA,MAAMC,KAAK,GAAGvB,OAAO,CAACgB,SAAR,CAAkBC,GAAlB,CAAsBG,GAAG,CAACF,MAA1B,EAAkCC,EAAhD;EACA,MAAMK,WAAW,GAAG,IAAIC,UAAJ,CAAe,IAAIC,UAAJ,CAAepB,CAAC,CAACQ,KAAjB,EAAwBa,MAAvC,CAApB;EACA,MAAMC,eAAe,GAAGpB,QAAQ,CAACG,GAAT,CAAakB,QAAQ,IAAIA,QAAQ,CAAC,CAAD,CAAjC,CAAxB;EACA,MAAMC,gBAAgB,GAAGtB,QAAQ,CAACG,GAAT,CAAakB,QAAQ,IAAIA,QAAQ,CAAC,CAAD,CAAjC,CAAzB;EACA,MAAME,gBAAgB,GAAG,IAAIN,UAAJ,CAAe,IAAIC,UAAJ,CAAeE,eAAf,EAAgCD,MAA/C,CAAzB;EACA,MAAMK,iBAAiB,GAAG,IAAIP,UAAJ,CAAe,IAAIC,UAAJ,CAAeI,gBAAf,EAAiCH,MAAhD,CAA1B;EACA7B,aAAa,CAACiB,GAAD,EAAMS,WAAN,EAAmBlB,CAAC,CAACQ,KAAF,CAAQmB,MAA3B,EAAmCrC,QAAQ,CAACU,CAAC,CAACgB,KAAH,CAA3C,EAAsDS,gBAAtD,EAAwEC,iBAAxE,EAA2FnC,iBAAiB,CAACY,IAAD,CAA5G,EAAoHc,KAApH,CAAb;EACA,OAAOH,GAAP;AACH;;AACD,OAAO,MAAMc,eAAe,GAAG;EAC3BC,UAAU,EAAExC,SADe;EAE3ByC,WAAW,EAAE,MAFc;EAG3BC,UAAU,EAAElC,SAHe;EAI3BmC,SAAS,EAAEvC;AAJgB,CAAxB"},"metadata":{},"sourceType":"module"}