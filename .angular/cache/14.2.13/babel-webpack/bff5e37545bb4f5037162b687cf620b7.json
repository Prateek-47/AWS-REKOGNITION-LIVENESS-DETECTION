{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n  const emptyRowIndicator = new Array(denseRows);\n  const reverseIndexMap = new Array(indicesCount);\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n    }\n\n    const outputIndices = util.getArrayFromDType(indicesDType, 0);\n    const outputValues = util.getArrayFromDType(valuesDType, 0);\n    return [outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n\n    if (row < 0) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n    }\n\n    if (row >= denseRows) {\n      throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n    }\n\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && row >= lastIndicesRow;\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = csrOffset[row] === 0;\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty; // In filled version, each row has at least one element.\n\n    csrOffset[row] = Math.max(csrOffset[row], 1); // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices = indices;\n    const outputValues = values;\n\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n\n    return [outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n    const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n    const filledCount = new Array(denseRows).fill(0); // Fill in values for rows that are not missing\n\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = (row === 0 ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++; // Increment the filled count for this row.\n\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n\n      outputValues[outputI] = values[i]; // We'll need this reverse index map to backprop correctly.\n\n      reverseIndexMap[i] = outputI;\n    } // Fill in values for rows that are missing\n\n\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n\n      if (rowCount === 0) {\n        // We haven't filled this row\n        const startingIndex = row === 0 ? 0 : csrOffset[row - 1]; // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n\n        outputIndices[startingIndex * rank + 0] = row;\n\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n\n    return [outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  }\n}","map":{"version":3,"names":["util","sparseFillEmptyRowsImpl","indices","indicesShape","indicesDType","values","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","Array","reverseIndexMap","rank","Error","outputIndices","getArrayFromDType","outputValues","rowsAreOrdered","lastIndicesRow","csrOffset","fill","i","row","allRowsFull","rowEmpty","Math","max","fullIndicesCount","filledCount","offset","outputI","j","rowCount","startingIndex","col"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n    const indicesCount = indicesShape[0];\n    const denseRows = denseShape[0];\n    const emptyRowIndicator = new Array(denseRows);\n    const reverseIndexMap = new Array(indicesCount);\n    const rank = indicesShape[1];\n    if (denseRows === 0) {\n        if (indicesCount !== 0) {\n            throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n        }\n        const outputIndices = util.getArrayFromDType(indicesDType, 0);\n        const outputValues = util.getArrayFromDType(valuesDType, 0);\n        return [\n            outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n        ];\n    }\n    let rowsAreOrdered = true;\n    let lastIndicesRow = 0;\n    const csrOffset = new Array(denseRows).fill(0);\n    for (let i = 0; i < indicesCount; ++i) {\n        // indices is a 2d tensor with shape of [N, rank]\n        const row = indices[i * rank];\n        if (row < 0) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n        }\n        if (row >= denseRows) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n        }\n        ++csrOffset[row];\n        rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n        lastIndicesRow = row;\n    }\n    let allRowsFull = true;\n    for (let row = 0; row < denseRows; ++row) {\n        // csrOffset here describes the number of elements in this dense row\n        const rowEmpty = (csrOffset[row] === 0);\n        emptyRowIndicator[row] = rowEmpty;\n        allRowsFull = allRowsFull && !rowEmpty;\n        // In filled version, each row has at least one element.\n        csrOffset[row] = Math.max(csrOffset[row], 1);\n        // Update csrOffset to represent the number of elements up to and\n        // including denseRows + 1:\n        //  csrOffset[0] == #{elements of row 0}\n        //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n        //  ..\n        //  csrOffset[i] == starting index for elements in row i + 1.\n        if (row > 0) {\n            csrOffset[row] += csrOffset[row - 1];\n        }\n    }\n    if (allRowsFull && rowsAreOrdered) {\n        const outputIndices = indices;\n        const outputValues = values;\n        for (let i = 0; i < indicesCount; ++i) {\n            reverseIndexMap[i] = i;\n        }\n        return [\n            outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n    else {\n        const fullIndicesCount = csrOffset[denseRows - 1];\n        const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n        const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n        const filledCount = new Array(denseRows).fill(0);\n        // Fill in values for rows that are not missing\n        for (let i = 0; i < indicesCount; ++i) {\n            // indices is a 2d tensor with shape of [N, rank]\n            const row = indices[i * rank];\n            const offset = filledCount[row];\n            const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n            filledCount[row]++; // Increment the filled count for this row.\n            for (let j = 0; j < rank; ++j) {\n                // indices and outputIndices are 2d tensors with shape of [N, rank]\n                outputIndices[outputI * rank + j] = indices[i * rank + j];\n            }\n            outputValues[outputI] = values[i];\n            // We'll need this reverse index map to backprop correctly.\n            reverseIndexMap[i] = outputI;\n        }\n        // Fill in values for rows that are missing\n        for (let row = 0; row < denseRows; ++row) {\n            const rowCount = filledCount[row];\n            if (rowCount === 0) { // We haven't filled this row\n                const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n                // Remaining index values were set to zero already.\n                // Just need to set the row index in the right location.\n                // outputIndices is a 2d tensor with shape of [N, rank]\n                outputIndices[startingIndex * rank + 0] = row;\n                for (let col = 1; col < rank; ++col) {\n                    outputIndices[startingIndex * rank + col] = 0;\n                }\n                outputValues[startingIndex] = defaultValue;\n            }\n        }\n        return [\n            outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}