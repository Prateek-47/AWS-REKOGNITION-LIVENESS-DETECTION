{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { FusableActivation } from './types';\nlet wasmFusedMatMul;\n\nfunction setup(backend) {\n  wasmFusedMatMul = backend.wasm.cwrap(_FusedMatMul, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'array', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction fusedBatchMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b,\n    bias,\n    preluActivationWeights\n  } = inputs;\n\n  if (a.dtype !== 'float32' || b.dtype !== 'float32') {\n    throw new Error(`_FusedMatMul for non non-float32 tensors not yet supported.`);\n  }\n\n  const {\n    transposeA,\n    transposeB,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const aId = backend.dataIdMap.get(a.dataId).id;\n  const bId = backend.dataIdMap.get(b.dataId).id;\n  let biasId = 0;\n\n  if (bias != null) {\n    const biasData = backend.dataIdMap.get(bias.dataId);\n\n    if (biasData.shape.length !== 1) {\n      throw new Error(`_FusedMatMul only supports rank-1 bias but got ` + `rank ${biasData.shape.length}.`);\n    }\n\n    biasId = biasData.id;\n  }\n\n  const preluActivationWeightsId = preluActivationWeights == null ? 0 : backend.dataIdMap.get(preluActivationWeights.dataId).id;\n  const fusedActivation = FusableActivation[activation];\n\n  if (fusedActivation == null) {\n    throw new Error(`${activation} activation not yet supported for FusedConv2D ` + `in the wasm backend.`);\n  }\n\n  const leftDim = transposeA ? a.shape[2] : a.shape[1];\n  const rightDim = transposeB ? b.shape[1] : b.shape[2];\n  const batchDim = a.shape[0];\n  const out = backend.makeOutput([batchDim, leftDim, rightDim], a.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n  const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n  wasmFusedMatMul(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, transposeA, transposeB, fusedActivation, biasId, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n  return out;\n}\n\nexport const fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedBatchMatMul\n};","map":{"version":3,"names":["_FusedMatMul","FusableActivation","wasmFusedMatMul","setup","backend","wasm","cwrap","fusedBatchMatMul","args","inputs","attrs","a","b","bias","preluActivationWeights","dtype","Error","transposeA","transposeB","activation","leakyreluAlpha","aId","dataIdMap","get","dataId","id","bId","biasId","biasData","shape","length","preluActivationWeightsId","fusedActivation","leftDim","rightDim","batchDim","out","makeOutput","outId","aShapeBytes","Uint8Array","Int32Array","buffer","bShapeBytes","fusedMatMulConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/_FusedMatMul.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { FusableActivation } from './types';\nlet wasmFusedMatMul;\nfunction setup(backend) {\n    wasmFusedMatMul = backend.wasm.cwrap(_FusedMatMul, null /* void */, [\n        'number',\n        'array',\n        'number',\n        'number',\n        'array',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number' // out_id\n    ]);\n}\nfunction fusedBatchMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    if (a.dtype !== 'float32' || b.dtype !== 'float32') {\n        throw new Error(`_FusedMatMul for non non-float32 tensors not yet supported.`);\n    }\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    const aId = backend.dataIdMap.get(a.dataId).id;\n    const bId = backend.dataIdMap.get(b.dataId).id;\n    let biasId = 0;\n    if (bias != null) {\n        const biasData = backend.dataIdMap.get(bias.dataId);\n        if (biasData.shape.length !== 1) {\n            throw new Error(`_FusedMatMul only supports rank-1 bias but got ` +\n                `rank ${biasData.shape.length}.`);\n        }\n        biasId = biasData.id;\n    }\n    const preluActivationWeightsId = preluActivationWeights == null ?\n        0 :\n        backend.dataIdMap.get(preluActivationWeights.dataId).id;\n    const fusedActivation = FusableActivation[activation];\n    if (fusedActivation == null) {\n        throw new Error(`${activation} activation not yet supported for FusedConv2D ` +\n            `in the wasm backend.`);\n    }\n    const leftDim = transposeA ? a.shape[2] : a.shape[1];\n    const rightDim = transposeB ? b.shape[1] : b.shape[2];\n    const batchDim = a.shape[0];\n    const out = backend.makeOutput([batchDim, leftDim, rightDim], a.dtype);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const aShapeBytes = new Uint8Array(new Int32Array(a.shape).buffer);\n    const bShapeBytes = new Uint8Array(new Int32Array(b.shape).buffer);\n    wasmFusedMatMul(aId, aShapeBytes, a.shape.length, bId, bShapeBytes, b.shape.length, transposeA, transposeB, fusedActivation, biasId, preluActivationWeightsId, leakyreluAlpha || 0, outId);\n    return out;\n}\nexport const fusedMatMulConfig = {\n    kernelName: _FusedMatMul,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: fusedBatchMatMul\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}