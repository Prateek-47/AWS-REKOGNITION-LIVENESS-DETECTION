{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\n\nvar AWSLexProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexProvider, _super);\n\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n\n  AWSLexProvider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var propertiesToTest = ['name', 'alias', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey]; // is bot config correct\n\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * @private\n   * @deprecated\n   * This is used internally by 'sendMessage' to call onComplete callback\n   * for a bot if configured\n   */\n\n\n  AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n    var _this = this; // Check if state is fulfilled to resolve onFullfilment promise\n\n\n    logger.debug('postContent state', data.dialogState);\n\n    if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](null, data);\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n\n    if (data.dialogState === 'Failed') {\n      if (typeof this._botsCompleteCallback[botname] === 'function') {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname]('Bot conversation failed');\n        }, 0);\n      }\n\n      if (this._config && typeof this._config[botname].onComplete === 'function') {\n        setTimeout(function () {\n          return _this._config[botname].onComplete('Bot conversation failed');\n        }, 0);\n      }\n    }\n  };\n\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 2:\n            credentials = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n\n          case 4:\n            this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 9];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              inputText: message,\n              userId: credentials.identityId\n            };\n            logger.debug('postText to lex', message);\n            _c.label = 5;\n\n          case 5:\n            _c.trys.push([5, 7,, 8]);\n\n            postTextCommand = new PostTextCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postTextCommand)];\n\n          case 6:\n            data = _c.sent();\n            this.reportBotStatus(data, botname);\n            return [2\n            /*return*/\n            , data];\n\n          case 7:\n            err_1 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 8:\n            return [3\n            /*break*/\n            , 21];\n\n          case 9:\n            content = message.content, messageType = message.options.messageType;\n            if (!(messageType === 'voice')) return [3\n            /*break*/\n            , 13];\n\n            if (typeof content !== 'object') {\n              return [2\n              /*return*/\n              , Promise.reject('invalid content type')];\n            }\n\n            if (!(content instanceof Uint8Array)) return [3\n            /*break*/\n            , 10];\n            _a = content;\n            return [3\n            /*break*/\n            , 12];\n\n          case 10:\n            return [4\n            /*yield*/\n            , convert(content)];\n\n          case 11:\n            _a = _c.sent();\n            _c.label = 12;\n\n          case 12:\n            inputStream = _a;\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              userId: credentials.identityId,\n              accept: 'audio/mpeg',\n              inputStream: inputStream\n            };\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            if (typeof content !== 'string') return [2\n            /*return*/\n            , Promise.reject('invalid content type')];\n            params = {\n              botAlias: this._config[botname].alias,\n              botName: botname,\n              contentType: 'text/plain; charset=utf-8',\n              inputStream: content,\n              userId: credentials.identityId,\n              accept: 'audio/mpeg'\n            };\n            _c.label = 14;\n\n          case 14:\n            logger.debug('postContent to lex', message);\n            _c.label = 15;\n\n          case 15:\n            _c.trys.push([15, 20,, 21]);\n\n            postContentCommand = new PostContentCommand(params);\n            return [4\n            /*yield*/\n            , this.lexRuntimeServiceClient.send(postContentCommand)];\n\n          case 16:\n            data = _c.sent();\n            if (!data.audioStream) return [3\n            /*break*/\n            , 18];\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 17:\n            _b = _c.sent();\n            return [3\n            /*break*/\n            , 19];\n\n          case 18:\n            _b = undefined;\n            _c.label = 19;\n\n          case 19:\n            audioArray = _b;\n            response = __assign(__assign({}, data), {\n              audioStream: audioArray\n            });\n            this.reportBotStatus(response, botname);\n            return [2\n            /*return*/\n            , response];\n\n          case 20:\n            err_2 = _c.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 21:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexProvider };","map":{"version":3,"names":["__assign","__awaiter","__extends","__generator","AbstractInteractionsProvider","LexRuntimeServiceClient","PostTextCommand","PostContentCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgentObject","convert","logger","AWSLexProvider","_super","options","_this","call","_botsCompleteCallback","prototype","getProviderName","configure","config","propertiesToTest","Object","keys","forEach","botKey","botConfig","every","x","Error","reportBotStatus","data","botname","debug","dialogState","setTimeout","_config","onComplete","sendMessage","message","credentials","error_1","params","postTextCommand","err_1","content","messageType","inputStream","_a","postContentCommand","audioArray","_b","response","err_2","_c","label","Promise","reject","trys","push","get","sent","lexRuntimeServiceClient","region","customUserAgent","botAlias","alias","botName","inputText","userId","identityId","send","Uint8Array","contentType","accept","audioStream","undefined","callback"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/interactions/lib-esm/Providers/AWSLexProvider.js"],"sourcesContent":["import { __assign, __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand, } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject, } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */ (function (_super) {\n    __extends(AWSLexProvider, _super);\n    function AWSLexProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    AWSLexProvider.prototype.getProviderName = function () {\n        return 'AWSLexProvider';\n    };\n    AWSLexProvider.prototype.configure = function (config) {\n        if (config === void 0) { config = {}; }\n        var propertiesToTest = ['name', 'alias', 'region'];\n        Object.keys(config).forEach(function (botKey) {\n            var botConfig = config[botKey];\n            // is bot config correct\n            if (!propertiesToTest.every(function (x) { return x in botConfig; })) {\n                throw new Error('invalid bot configuration');\n            }\n        });\n        return _super.prototype.configure.call(this, config);\n    };\n    /**\n     * @private\n     * @deprecated\n     * This is used internally by 'sendMessage' to call onComplete callback\n     * for a bot if configured\n     */\n    AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n        var _this = this;\n        // Check if state is fulfilled to resolve onFullfilment promise\n        logger.debug('postContent state', data.dialogState);\n        if (data.dialogState === 'ReadyForFulfillment' ||\n            data.dialogState === 'Fulfilled') {\n            if (typeof this._botsCompleteCallback[botname] === 'function') {\n                setTimeout(function () { return _this._botsCompleteCallback[botname](null, data); }, 0);\n            }\n            if (this._config &&\n                typeof this._config[botname].onComplete === 'function') {\n                setTimeout(function () { return _this._config[botname].onComplete(null, data); }, 0);\n            }\n        }\n        if (data.dialogState === 'Failed') {\n            if (typeof this._botsCompleteCallback[botname] === 'function') {\n                setTimeout(function () { return _this._botsCompleteCallback[botname]('Bot conversation failed'); }, 0);\n            }\n            if (this._config &&\n                typeof this._config[botname].onComplete === 'function') {\n                setTimeout(function () { return _this._config[botname].onComplete('Bot conversation failed'); }, 0);\n            }\n        }\n    };\n    AWSLexProvider.prototype.sendMessage = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, error_1, params, postTextCommand, data, err_1, content, messageType, inputStream, _a, postContentCommand, data, audioArray, _b, response, err_2;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        // check if bot exists\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 2:\n                        credentials = _c.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _c.sent();\n                        return [2 /*return*/, Promise.reject('No credentials')];\n                    case 4:\n                        this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n                            region: this._config[botname].region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        if (!(typeof message === 'string')) return [3 /*break*/, 9];\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            inputText: message,\n                            userId: credentials.identityId,\n                        };\n                        logger.debug('postText to lex', message);\n                        _c.label = 5;\n                    case 5:\n                        _c.trys.push([5, 7, , 8]);\n                        postTextCommand = new PostTextCommand(params);\n                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postTextCommand)];\n                    case 6:\n                        data = _c.sent();\n                        this.reportBotStatus(data, botname);\n                        return [2 /*return*/, data];\n                    case 7:\n                        err_1 = _c.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 8: return [3 /*break*/, 21];\n                    case 9:\n                        content = message.content, messageType = message.options.messageType;\n                        if (!(messageType === 'voice')) return [3 /*break*/, 13];\n                        if (typeof content !== 'object') {\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        }\n                        if (!(content instanceof Uint8Array)) return [3 /*break*/, 10];\n                        _a = content;\n                        return [3 /*break*/, 12];\n                    case 10: return [4 /*yield*/, convert(content)];\n                    case 11:\n                        _a = _c.sent();\n                        _c.label = 12;\n                    case 12:\n                        inputStream = _a;\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            contentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n                            userId: credentials.identityId,\n                            accept: 'audio/mpeg',\n                            inputStream: inputStream,\n                        };\n                        return [3 /*break*/, 14];\n                    case 13:\n                        if (typeof content !== 'string')\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            contentType: 'text/plain; charset=utf-8',\n                            inputStream: content,\n                            userId: credentials.identityId,\n                            accept: 'audio/mpeg',\n                        };\n                        _c.label = 14;\n                    case 14:\n                        logger.debug('postContent to lex', message);\n                        _c.label = 15;\n                    case 15:\n                        _c.trys.push([15, 20, , 21]);\n                        postContentCommand = new PostContentCommand(params);\n                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postContentCommand)];\n                    case 16:\n                        data = _c.sent();\n                        if (!data.audioStream) return [3 /*break*/, 18];\n                        return [4 /*yield*/, convert(data.audioStream)];\n                    case 17:\n                        _b = _c.sent();\n                        return [3 /*break*/, 19];\n                    case 18:\n                        _b = undefined;\n                        _c.label = 19;\n                    case 19:\n                        audioArray = _b;\n                        response = __assign(__assign({}, data), { audioStream: audioArray });\n                        this.reportBotStatus(response, botname);\n                        return [2 /*return*/, response];\n                    case 20:\n                        err_2 = _c.sent();\n                        return [2 /*return*/, Promise.reject(err_2)];\n                    case 21: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSLexProvider.prototype.onComplete = function (botname, callback) {\n        // does bot exist\n        if (!this._config[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    return AWSLexProvider;\n}(AbstractInteractionsProvider));\nexport { AWSLexProvider };\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,SAA9B,EAAyCC,WAAzC,QAA4D,OAA5D,C,CACA;AACA;;AACA,SAASC,4BAAT,QAA6C,wBAA7C;AACA,SAASC,uBAAT,EAAkCC,eAAlC,EAAmDC,kBAAnD,QAA8E,qCAA9E;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,WAAlC,EAA+CC,yBAA/C,QAAiF,mBAAjF;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,IAAIC,MAAM,GAAG,IAAIJ,MAAJ,CAAW,gBAAX,CAAb;;AACA,IAAIK,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAClDb,SAAS,CAACY,cAAD,EAAiBC,MAAjB,CAAT;;EACA,SAASD,cAAT,CAAwBE,OAAxB,EAAiC;IAC7B,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;MAAEA,OAAO,GAAG,EAAV;IAAe;;IACzC,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkBF,OAAlB,KAA8B,IAA1C;;IACAC,KAAK,CAACE,qBAAN,GAA8B,EAA9B;IACA,OAAOF,KAAP;EACH;;EACDH,cAAc,CAACM,SAAf,CAAyBC,eAAzB,GAA2C,YAAY;IACnD,OAAO,gBAAP;EACH,CAFD;;EAGAP,cAAc,CAACM,SAAf,CAAyBE,SAAzB,GAAqC,UAAUC,MAAV,EAAkB;IACnD,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIC,gBAAgB,GAAG,CAAC,MAAD,EAAS,OAAT,EAAkB,QAAlB,CAAvB;IACAC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4B,UAAUC,MAAV,EAAkB;MAC1C,IAAIC,SAAS,GAAGN,MAAM,CAACK,MAAD,CAAtB,CAD0C,CAE1C;;MACA,IAAI,CAACJ,gBAAgB,CAACM,KAAjB,CAAuB,UAAUC,CAAV,EAAa;QAAE,OAAOA,CAAC,IAAIF,SAAZ;MAAwB,CAA9D,CAAL,EAAsE;QAClE,MAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;MACH;IACJ,CAND;IAOA,OAAOjB,MAAM,CAACK,SAAP,CAAiBE,SAAjB,CAA2BJ,IAA3B,CAAgC,IAAhC,EAAsCK,MAAtC,CAAP;EACH,CAXD;EAYA;AACJ;AACA;AACA;AACA;AACA;;;EACIT,cAAc,CAACM,SAAf,CAAyBa,eAAzB,GAA2C,UAAUC,IAAV,EAAgBC,OAAhB,EAAyB;IAChE,IAAIlB,KAAK,GAAG,IAAZ,CADgE,CAEhE;;;IACAJ,MAAM,CAACuB,KAAP,CAAa,mBAAb,EAAkCF,IAAI,CAACG,WAAvC;;IACA,IAAIH,IAAI,CAACG,WAAL,KAAqB,qBAArB,IACAH,IAAI,CAACG,WAAL,KAAqB,WADzB,EACsC;MAClC,IAAI,OAAO,KAAKlB,qBAAL,CAA2BgB,OAA3B,CAAP,KAA+C,UAAnD,EAA+D;QAC3DG,UAAU,CAAC,YAAY;UAAE,OAAOrB,KAAK,CAACE,qBAAN,CAA4BgB,OAA5B,EAAqC,IAArC,EAA2CD,IAA3C,CAAP;QAA0D,CAAzE,EAA2E,CAA3E,CAAV;MACH;;MACD,IAAI,KAAKK,OAAL,IACA,OAAO,KAAKA,OAAL,CAAaJ,OAAb,EAAsBK,UAA7B,KAA4C,UADhD,EAC4D;QACxDF,UAAU,CAAC,YAAY;UAAE,OAAOrB,KAAK,CAACsB,OAAN,CAAcJ,OAAd,EAAuBK,UAAvB,CAAkC,IAAlC,EAAwCN,IAAxC,CAAP;QAAuD,CAAtE,EAAwE,CAAxE,CAAV;MACH;IACJ;;IACD,IAAIA,IAAI,CAACG,WAAL,KAAqB,QAAzB,EAAmC;MAC/B,IAAI,OAAO,KAAKlB,qBAAL,CAA2BgB,OAA3B,CAAP,KAA+C,UAAnD,EAA+D;QAC3DG,UAAU,CAAC,YAAY;UAAE,OAAOrB,KAAK,CAACE,qBAAN,CAA4BgB,OAA5B,EAAqC,yBAArC,CAAP;QAAyE,CAAxF,EAA0F,CAA1F,CAAV;MACH;;MACD,IAAI,KAAKI,OAAL,IACA,OAAO,KAAKA,OAAL,CAAaJ,OAAb,EAAsBK,UAA7B,KAA4C,UADhD,EAC4D;QACxDF,UAAU,CAAC,YAAY;UAAE,OAAOrB,KAAK,CAACsB,OAAN,CAAcJ,OAAd,EAAuBK,UAAvB,CAAkC,yBAAlC,CAAP;QAAsE,CAArF,EAAuF,CAAvF,CAAV;MACH;IACJ;EACJ,CAvBD;;EAwBA1B,cAAc,CAACM,SAAf,CAAyBqB,WAAzB,GAAuC,UAAUN,OAAV,EAAmBO,OAAnB,EAA4B;IAC/D,OAAOzC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI0C,WAAJ,EAAiBC,OAAjB,EAA0BC,MAA1B,EAAkCC,eAAlC,EAAmDZ,IAAnD,EAAyDa,KAAzD,EAAgEC,OAAhE,EAAyEC,WAAzE,EAAsFC,WAAtF,EAAmGC,EAAnG,EAAuGC,kBAAvG,EAA2HlB,IAA3H,EAAiImB,UAAjI,EAA6IC,EAA7I,EAAiJC,QAAjJ,EAA2JC,KAA3J;;MACA,OAAOrD,WAAW,CAAC,IAAD,EAAO,UAAUsD,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACC,KAAX;UACI,KAAK,CAAL;YACI;YACA,IAAI,CAAC,KAAKnB,OAAL,CAAaJ,OAAb,CAAL,EAA4B;cACxB,OAAO,CAAC;cAAE;cAAH,EAAewB,OAAO,CAACC,MAAR,CAAe,SAASzB,OAAT,GAAmB,iBAAlC,CAAf,CAAP;YACH;;YACDsB,EAAE,CAACC,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACID,EAAE,CAACI,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAcpD,WAAW,CAACqD,GAAZ,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIpB,WAAW,GAAGc,EAAE,CAACO,IAAH,EAAd;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIpB,OAAO,GAAGa,EAAE,CAACO,IAAH,EAAV;YACA,OAAO,CAAC;YAAE;YAAH,EAAeL,OAAO,CAACC,MAAR,CAAe,gBAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YACI,KAAKK,uBAAL,GAA+B,IAAI5D,uBAAJ,CAA4B;cACvD6D,MAAM,EAAE,KAAK3B,OAAL,CAAaJ,OAAb,EAAsB+B,MADyB;cAEvDvB,WAAW,EAAEA,WAF0C;cAGvDwB,eAAe,EAAExD,yBAAyB;YAHa,CAA5B,CAA/B;YAKA,IAAI,EAAE,OAAO+B,OAAP,KAAmB,QAArB,CAAJ,EAAoC,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;YACpCG,MAAM,GAAG;cACLuB,QAAQ,EAAE,KAAK7B,OAAL,CAAaJ,OAAb,EAAsBkC,KAD3B;cAELC,OAAO,EAAEnC,OAFJ;cAGLoC,SAAS,EAAE7B,OAHN;cAIL8B,MAAM,EAAE7B,WAAW,CAAC8B;YAJf,CAAT;YAMA5D,MAAM,CAACuB,KAAP,CAAa,iBAAb,EAAgCM,OAAhC;YACAe,EAAE,CAACC,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACID,EAAE,CAACI,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACAhB,eAAe,GAAG,IAAIxC,eAAJ,CAAoBuC,MAApB,CAAlB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKoB,uBAAL,CAA6BS,IAA7B,CAAkC5B,eAAlC,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIZ,IAAI,GAAGuB,EAAE,CAACO,IAAH,EAAP;YACA,KAAK/B,eAAL,CAAqBC,IAArB,EAA2BC,OAA3B;YACA,OAAO,CAAC;YAAE;YAAH,EAAeD,IAAf,CAAP;;UACJ,KAAK,CAAL;YACIa,KAAK,GAAGU,EAAE,CAACO,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAeL,OAAO,CAACC,MAAR,CAAeb,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACR,KAAK,CAAL;YACIC,OAAO,GAAGN,OAAO,CAACM,OAAlB,EAA2BC,WAAW,GAAGP,OAAO,CAAC1B,OAAR,CAAgBiC,WAAzD;YACA,IAAI,EAAEA,WAAW,KAAK,OAAlB,CAAJ,EAAgC,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;YAChC,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;cAC7B,OAAO,CAAC;cAAE;cAAH,EAAeW,OAAO,CAACC,MAAR,CAAe,sBAAf,CAAf,CAAP;YACH;;YACD,IAAI,EAAEZ,OAAO,YAAY2B,UAArB,CAAJ,EAAsC,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;YACtCxB,EAAE,GAAGH,OAAL;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,EAAcpC,OAAO,CAACoC,OAAD,CAArB,CAAP;;UACT,KAAK,EAAL;YACIG,EAAE,GAAGM,EAAE,CAACO,IAAH,EAAL;YACAP,EAAE,CAACC,KAAH,GAAW,EAAX;;UACJ,KAAK,EAAL;YACIR,WAAW,GAAGC,EAAd;YACAN,MAAM,GAAG;cACLuB,QAAQ,EAAE,KAAK7B,OAAL,CAAaJ,OAAb,EAAsBkC,KAD3B;cAELC,OAAO,EAAEnC,OAFJ;cAGLyC,WAAW,EAAE,iDAHR;cAILJ,MAAM,EAAE7B,WAAW,CAAC8B,UAJf;cAKLI,MAAM,EAAE,YALH;cAML3B,WAAW,EAAEA;YANR,CAAT;YAQA,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACJ,KAAK,EAAL;YACI,IAAI,OAAOF,OAAP,KAAmB,QAAvB,EACI,OAAO,CAAC;YAAE;YAAH,EAAeW,OAAO,CAACC,MAAR,CAAe,sBAAf,CAAf,CAAP;YACJf,MAAM,GAAG;cACLuB,QAAQ,EAAE,KAAK7B,OAAL,CAAaJ,OAAb,EAAsBkC,KAD3B;cAELC,OAAO,EAAEnC,OAFJ;cAGLyC,WAAW,EAAE,2BAHR;cAIL1B,WAAW,EAAEF,OAJR;cAKLwB,MAAM,EAAE7B,WAAW,CAAC8B,UALf;cAMLI,MAAM,EAAE;YANH,CAAT;YAQApB,EAAE,CAACC,KAAH,GAAW,EAAX;;UACJ,KAAK,EAAL;YACI7C,MAAM,CAACuB,KAAP,CAAa,oBAAb,EAAmCM,OAAnC;YACAe,EAAE,CAACC,KAAH,GAAW,EAAX;;UACJ,KAAK,EAAL;YACID,EAAE,CAACI,IAAH,CAAQC,IAAR,CAAa,CAAC,EAAD,EAAK,EAAL,GAAW,EAAX,CAAb;;YACAV,kBAAkB,GAAG,IAAI7C,kBAAJ,CAAuBsC,MAAvB,CAArB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKoB,uBAAL,CAA6BS,IAA7B,CAAkCtB,kBAAlC,CAAd,CAAP;;UACJ,KAAK,EAAL;YACIlB,IAAI,GAAGuB,EAAE,CAACO,IAAH,EAAP;YACA,IAAI,CAAC9B,IAAI,CAAC4C,WAAV,EAAuB,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;YACvB,OAAO,CAAC;YAAE;YAAH,EAAclE,OAAO,CAACsB,IAAI,CAAC4C,WAAN,CAArB,CAAP;;UACJ,KAAK,EAAL;YACIxB,EAAE,GAAGG,EAAE,CAACO,IAAH,EAAL;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACJ,KAAK,EAAL;YACIV,EAAE,GAAGyB,SAAL;YACAtB,EAAE,CAACC,KAAH,GAAW,EAAX;;UACJ,KAAK,EAAL;YACIL,UAAU,GAAGC,EAAb;YACAC,QAAQ,GAAGvD,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKkC,IAAL,CAAT,EAAqB;cAAE4C,WAAW,EAAEzB;YAAf,CAArB,CAAnB;YACA,KAAKpB,eAAL,CAAqBsB,QAArB,EAA+BpB,OAA/B;YACA,OAAO,CAAC;YAAE;YAAH,EAAeoB,QAAf,CAAP;;UACJ,KAAK,EAAL;YACIC,KAAK,GAAGC,EAAE,CAACO,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAeL,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAf,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,CAAP;QAxGb;MA0GH,CA3GiB,CAAlB;IA4GH,CA9Ge,CAAhB;EA+GH,CAhHD;;EAiHA1C,cAAc,CAACM,SAAf,CAAyBoB,UAAzB,GAAsC,UAAUL,OAAV,EAAmB6C,QAAnB,EAA6B;IAC/D;IACA,IAAI,CAAC,KAAKzC,OAAL,CAAaJ,OAAb,CAAL,EAA4B;MACxB,MAAM,IAAIH,KAAJ,CAAU,SAASG,OAAT,GAAmB,iBAA7B,CAAN;IACH;;IACD,KAAKhB,qBAAL,CAA2BgB,OAA3B,IAAsC6C,QAAtC;EACH,CAND;;EAOA,OAAOlE,cAAP;AACH,CA9KmC,CA8KlCV,4BA9KkC,CAApC;;AA+KA,SAASU,cAAT"},"metadata":{},"sourceType":"module"}