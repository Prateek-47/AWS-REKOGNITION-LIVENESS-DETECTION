{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { toBase64 } from \"@aws-sdk/util-base64\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUtf8 } from \"@aws-sdk/util-utf8\";\nconst ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nexport const sdkStreamMixin = stream => {\n  if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {\n    const name = stream?.__proto__?.constructor?.name || stream;\n    throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);\n  }\n\n  let transformed = false;\n\n  const transformToByteArray = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* () {\n      if (transformed) {\n        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n      }\n\n      transformed = true;\n      return yield streamCollector(stream);\n    });\n\n    return function transformToByteArray() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const blobToWebStream = blob => {\n    if (typeof blob.stream !== \"function\") {\n      throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" + \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n    }\n\n    return blob.stream();\n  };\n\n  return Object.assign(stream, {\n    transformToByteArray: transformToByteArray,\n    transformToString: function () {\n      var _ref2 = _asyncToGenerator(function* (encoding) {\n        const buf = yield transformToByteArray();\n\n        if (encoding === \"base64\") {\n          return toBase64(buf);\n        } else if (encoding === \"hex\") {\n          return toHex(buf);\n        } else if (encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\") {\n          return toUtf8(buf);\n        } else if (typeof TextDecoder === \"function\") {\n          return new TextDecoder(encoding).decode(buf);\n        } else {\n          throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n        }\n      });\n\n      return function transformToString(_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    transformToWebStream: () => {\n      if (transformed) {\n        throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n      }\n\n      transformed = true;\n\n      if (isBlobInstance(stream)) {\n        return blobToWebStream(stream);\n      } else if (isReadableStreamInstance(stream)) {\n        return stream;\n      } else {\n        throw new Error(`Cannot transform payload to web stream, got ${stream}`);\n      }\n    }\n  });\n};\n\nconst isBlobInstance = stream => typeof Blob === \"function\" && stream instanceof Blob;\n\nconst isReadableStreamInstance = stream => typeof ReadableStream === \"function\" && stream instanceof ReadableStream;","map":{"version":3,"names":["streamCollector","toBase64","toHex","toUtf8","ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED","sdkStreamMixin","stream","isBlobInstance","isReadableStreamInstance","name","__proto__","constructor","Error","transformed","transformToByteArray","blobToWebStream","blob","Object","assign","transformToString","encoding","buf","undefined","TextDecoder","decode","transformToWebStream","Blob","ReadableStream"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/util-stream/dist-es/sdk-stream-mixin.browser.js"],"sourcesContent":["import { streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { toBase64 } from \"@aws-sdk/util-base64\";\nimport { toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { toUtf8 } from \"@aws-sdk/util-utf8\";\nconst ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = \"The stream has already been transformed.\";\nexport const sdkStreamMixin = (stream) => {\n    if (!isBlobInstance(stream) && !isReadableStreamInstance(stream)) {\n        const name = stream?.__proto__?.constructor?.name || stream;\n        throw new Error(`Unexpected stream implementation, expect Blob or ReadableStream, got ${name}`);\n    }\n    let transformed = false;\n    const transformToByteArray = async () => {\n        if (transformed) {\n            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n        }\n        transformed = true;\n        return await streamCollector(stream);\n    };\n    const blobToWebStream = (blob) => {\n        if (typeof blob.stream !== \"function\") {\n            throw new Error(\"Cannot transform payload Blob to web stream. Please make sure the Blob.stream() is polyfilled.\\n\" +\n                \"If you are using React Native, this API is not yet supported, see: https://react-native.canny.io/feature-requests/p/fetch-streaming-body\");\n        }\n        return blob.stream();\n    };\n    return Object.assign(stream, {\n        transformToByteArray: transformToByteArray,\n        transformToString: async (encoding) => {\n            const buf = await transformToByteArray();\n            if (encoding === \"base64\") {\n                return toBase64(buf);\n            }\n            else if (encoding === \"hex\") {\n                return toHex(buf);\n            }\n            else if (encoding === undefined || encoding === \"utf8\" || encoding === \"utf-8\") {\n                return toUtf8(buf);\n            }\n            else if (typeof TextDecoder === \"function\") {\n                return new TextDecoder(encoding).decode(buf);\n            }\n            else {\n                throw new Error(\"TextDecoder is not available, please make sure polyfill is provided.\");\n            }\n        },\n        transformToWebStream: () => {\n            if (transformed) {\n                throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);\n            }\n            transformed = true;\n            if (isBlobInstance(stream)) {\n                return blobToWebStream(stream);\n            }\n            else if (isReadableStreamInstance(stream)) {\n                return stream;\n            }\n            else {\n                throw new Error(`Cannot transform payload to web stream, got ${stream}`);\n            }\n        },\n    });\n};\nconst isBlobInstance = (stream) => typeof Blob === \"function\" && stream instanceof Blob;\nconst isReadableStreamInstance = (stream) => typeof ReadableStream === \"function\" && stream instanceof ReadableStream;\n"],"mappings":";AAAA,SAASA,eAAT,QAAgC,6BAAhC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,KAAT,QAAsB,4BAAtB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,MAAMC,mCAAmC,GAAG,0CAA5C;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAD,IAAY;EACtC,IAAI,CAACC,cAAc,CAACD,MAAD,CAAf,IAA2B,CAACE,wBAAwB,CAACF,MAAD,CAAxD,EAAkE;IAC9D,MAAMG,IAAI,GAAGH,MAAM,EAAEI,SAAR,EAAmBC,WAAnB,EAAgCF,IAAhC,IAAwCH,MAArD;IACA,MAAM,IAAIM,KAAJ,CAAW,wEAAuEH,IAAK,EAAvF,CAAN;EACH;;EACD,IAAII,WAAW,GAAG,KAAlB;;EACA,MAAMC,oBAAoB;IAAA,6BAAG,aAAY;MACrC,IAAID,WAAJ,EAAiB;QACb,MAAM,IAAID,KAAJ,CAAUR,mCAAV,CAAN;MACH;;MACDS,WAAW,GAAG,IAAd;MACA,aAAab,eAAe,CAACM,MAAD,CAA5B;IACH,CANyB;;IAAA,gBAApBQ,oBAAoB;MAAA;IAAA;EAAA,GAA1B;;EAOA,MAAMC,eAAe,GAAIC,IAAD,IAAU;IAC9B,IAAI,OAAOA,IAAI,CAACV,MAAZ,KAAuB,UAA3B,EAAuC;MACnC,MAAM,IAAIM,KAAJ,CAAU,qGACZ,0IADE,CAAN;IAEH;;IACD,OAAOI,IAAI,CAACV,MAAL,EAAP;EACH,CAND;;EAOA,OAAOW,MAAM,CAACC,MAAP,CAAcZ,MAAd,EAAsB;IACzBQ,oBAAoB,EAAEA,oBADG;IAEzBK,iBAAiB;MAAA,8BAAE,WAAOC,QAAP,EAAoB;QACnC,MAAMC,GAAG,SAASP,oBAAoB,EAAtC;;QACA,IAAIM,QAAQ,KAAK,QAAjB,EAA2B;UACvB,OAAOnB,QAAQ,CAACoB,GAAD,CAAf;QACH,CAFD,MAGK,IAAID,QAAQ,KAAK,KAAjB,EAAwB;UACzB,OAAOlB,KAAK,CAACmB,GAAD,CAAZ;QACH,CAFI,MAGA,IAAID,QAAQ,KAAKE,SAAb,IAA0BF,QAAQ,KAAK,MAAvC,IAAiDA,QAAQ,KAAK,OAAlE,EAA2E;UAC5E,OAAOjB,MAAM,CAACkB,GAAD,CAAb;QACH,CAFI,MAGA,IAAI,OAAOE,WAAP,KAAuB,UAA3B,EAAuC;UACxC,OAAO,IAAIA,WAAJ,CAAgBH,QAAhB,EAA0BI,MAA1B,CAAiCH,GAAjC,CAAP;QACH,CAFI,MAGA;UACD,MAAM,IAAIT,KAAJ,CAAU,sEAAV,CAAN;QACH;MACJ,CAjBgB;;MAAA;QAAA;MAAA;IAAA,GAFQ;IAoBzBa,oBAAoB,EAAE,MAAM;MACxB,IAAIZ,WAAJ,EAAiB;QACb,MAAM,IAAID,KAAJ,CAAUR,mCAAV,CAAN;MACH;;MACDS,WAAW,GAAG,IAAd;;MACA,IAAIN,cAAc,CAACD,MAAD,CAAlB,EAA4B;QACxB,OAAOS,eAAe,CAACT,MAAD,CAAtB;MACH,CAFD,MAGK,IAAIE,wBAAwB,CAACF,MAAD,CAA5B,EAAsC;QACvC,OAAOA,MAAP;MACH,CAFI,MAGA;QACD,MAAM,IAAIM,KAAJ,CAAW,+CAA8CN,MAAO,EAAhE,CAAN;MACH;IACJ;EAlCwB,CAAtB,CAAP;AAoCH,CAxDM;;AAyDP,MAAMC,cAAc,GAAID,MAAD,IAAY,OAAOoB,IAAP,KAAgB,UAAhB,IAA8BpB,MAAM,YAAYoB,IAAnF;;AACA,MAAMlB,wBAAwB,GAAIF,MAAD,IAAY,OAAOqB,cAAP,KAA0B,UAA1B,IAAwCrB,MAAM,YAAYqB,cAAvG"},"metadata":{},"sourceType":"module"}