{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign } from \"tslib\";\nimport Observable from 'zen-observable-ts';\nimport { ConnectionState } from '../types/PubSub';\nimport { ReachabilityMonitor } from './ReachabilityMonitor';\nexport var CONNECTION_CHANGE = {\n  KEEP_ALIVE_MISSED: {\n    keepAliveState: 'unhealthy'\n  },\n  KEEP_ALIVE: {\n    keepAliveState: 'healthy'\n  },\n  CONNECTION_ESTABLISHED: {\n    connectionState: 'connected'\n  },\n  CONNECTION_FAILED: {\n    intendedConnectionState: 'disconnected',\n    connectionState: 'disconnected'\n  },\n  CLOSING_CONNECTION: {\n    intendedConnectionState: 'disconnected'\n  },\n  OPENING_CONNECTION: {\n    intendedConnectionState: 'connected',\n    connectionState: 'connecting'\n  },\n  CLOSED: {\n    connectionState: 'disconnected'\n  },\n  ONLINE: {\n    networkState: 'connected'\n  },\n  OFFLINE: {\n    networkState: 'disconnected'\n  }\n};\n\nvar ConnectionStateMonitor =\n/** @class */\nfunction () {\n  function ConnectionStateMonitor() {\n    var _this = this;\n\n    this._networkMonitoringSubscription = undefined;\n    this._linkedConnectionState = {\n      networkState: 'connected',\n      connectionState: 'disconnected',\n      intendedConnectionState: 'disconnected',\n      keepAliveState: 'healthy'\n    }; // Attempt to update the state with the current actual network state\n\n    this._initialNetworkStateSubscription = ReachabilityMonitor().subscribe(function (_a) {\n      var online = _a.online;\n\n      var _b;\n\n      _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n\n      (_b = _this._initialNetworkStateSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();\n    });\n    this._linkedConnectionStateObservable = new Observable(function (connectionStateObserver) {\n      connectionStateObserver.next(_this._linkedConnectionState);\n      _this._linkedConnectionStateObserver = connectionStateObserver;\n    });\n  }\n  /**\n   * Turn network state monitoring on if it isn't on already\n   */\n\n\n  ConnectionStateMonitor.prototype.enableNetworkMonitoring = function () {\n    var _this = this;\n\n    var _a; // If no initial network state was discovered, stop trying\n\n\n    (_a = this._initialNetworkStateSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe(); // Maintain the network state based on the reachability monitor\n\n    if (this._networkMonitoringSubscription === undefined) {\n      this._networkMonitoringSubscription = ReachabilityMonitor().subscribe(function (_a) {\n        var online = _a.online;\n\n        _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n      });\n    }\n  };\n  /**\n   * Turn network state monitoring off if it isn't off already\n   */\n\n\n  ConnectionStateMonitor.prototype.disableNetworkMonitoring = function () {\n    var _a;\n\n    (_a = this._networkMonitoringSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n    this._networkMonitoringSubscription = undefined;\n  };\n\n  Object.defineProperty(ConnectionStateMonitor.prototype, \"connectionStateObservable\", {\n    /**\n     * Get the observable that allows us to monitor the connection state\n     *\n     * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n     */\n    get: function () {\n      var _this = this;\n\n      var previous; // The linked state aggregates state changes to any of the network, connection,\n      // intendedConnection and keepAliveHealth. Some states will change these independent\n      // states without changing the overall connection state.\n      // After translating from linked states to ConnectionState, then remove any duplicates\n\n      return this._linkedConnectionStateObservable.map(function (value) {\n        return _this.connectionStatesTranslator(value);\n      }).filter(function (current) {\n        var toInclude = current !== previous;\n        previous = current;\n        return toInclude;\n      });\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /*\n   * Updates local connection state and emits the full state to the observer.\n   */\n\n  ConnectionStateMonitor.prototype.record = function (statusUpdates) {\n    // Maintain the network monitor\n    if (statusUpdates.intendedConnectionState === 'connected') {\n      this.enableNetworkMonitoring();\n    } else if (statusUpdates.intendedConnectionState === 'disconnected') {\n      this.disableNetworkMonitoring();\n    } // Maintain the socket state\n\n\n    var newSocketStatus = __assign(__assign({}, this._linkedConnectionState), statusUpdates);\n\n    this._linkedConnectionState = __assign({}, newSocketStatus);\n\n    this._linkedConnectionStateObserver.next(this._linkedConnectionState);\n  };\n  /*\n   * Translate the ConnectionState structure into a specific ConnectionState string literal union\n   */\n\n\n  ConnectionStateMonitor.prototype.connectionStatesTranslator = function (_a) {\n    var connectionState = _a.connectionState,\n        networkState = _a.networkState,\n        intendedConnectionState = _a.intendedConnectionState,\n        keepAliveState = _a.keepAliveState;\n    if (connectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectedPendingNetwork;\n    if (connectionState === 'connected' && intendedConnectionState === 'disconnected') return ConnectionState.ConnectedPendingDisconnect;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected' && networkState === 'disconnected') return ConnectionState.ConnectionDisruptedPendingNetwork;\n    if (connectionState === 'disconnected' && intendedConnectionState === 'connected') return ConnectionState.ConnectionDisrupted;\n    if (connectionState === 'connected' && keepAliveState === 'unhealthy') return ConnectionState.ConnectedPendingKeepAlive; // All remaining states directly correspond to the connection state\n\n    if (connectionState === 'connecting') return ConnectionState.Connecting;\n    if (connectionState === 'disconnected') return ConnectionState.Disconnected;\n    return ConnectionState.Connected;\n  };\n\n  return ConnectionStateMonitor;\n}();\n\nexport { ConnectionStateMonitor };","map":{"version":3,"names":["__assign","Observable","ConnectionState","ReachabilityMonitor","CONNECTION_CHANGE","KEEP_ALIVE_MISSED","keepAliveState","KEEP_ALIVE","CONNECTION_ESTABLISHED","connectionState","CONNECTION_FAILED","intendedConnectionState","CLOSING_CONNECTION","OPENING_CONNECTION","CLOSED","ONLINE","networkState","OFFLINE","ConnectionStateMonitor","_this","_networkMonitoringSubscription","undefined","_linkedConnectionState","_initialNetworkStateSubscription","subscribe","_a","online","_b","record","unsubscribe","_linkedConnectionStateObservable","connectionStateObserver","next","_linkedConnectionStateObserver","prototype","enableNetworkMonitoring","disableNetworkMonitoring","Object","defineProperty","get","previous","map","value","connectionStatesTranslator","filter","current","toInclude","enumerable","configurable","statusUpdates","newSocketStatus","ConnectedPendingNetwork","ConnectedPendingDisconnect","ConnectionDisruptedPendingNetwork","ConnectionDisrupted","ConnectedPendingKeepAlive","Connecting","Disconnected","Connected"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/pubsub/lib-esm/utils/ConnectionStateMonitor.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign } from \"tslib\";\nimport Observable from 'zen-observable-ts';\nimport { ConnectionState } from '../types/PubSub';\nimport { ReachabilityMonitor } from './ReachabilityMonitor';\nexport var CONNECTION_CHANGE = {\n    KEEP_ALIVE_MISSED: { keepAliveState: 'unhealthy' },\n    KEEP_ALIVE: { keepAliveState: 'healthy' },\n    CONNECTION_ESTABLISHED: { connectionState: 'connected' },\n    CONNECTION_FAILED: {\n        intendedConnectionState: 'disconnected',\n        connectionState: 'disconnected',\n    },\n    CLOSING_CONNECTION: { intendedConnectionState: 'disconnected' },\n    OPENING_CONNECTION: {\n        intendedConnectionState: 'connected',\n        connectionState: 'connecting',\n    },\n    CLOSED: { connectionState: 'disconnected' },\n    ONLINE: { networkState: 'connected' },\n    OFFLINE: { networkState: 'disconnected' },\n};\nvar ConnectionStateMonitor = /** @class */ (function () {\n    function ConnectionStateMonitor() {\n        var _this = this;\n        this._networkMonitoringSubscription = undefined;\n        this._linkedConnectionState = {\n            networkState: 'connected',\n            connectionState: 'disconnected',\n            intendedConnectionState: 'disconnected',\n            keepAliveState: 'healthy',\n        };\n        // Attempt to update the state with the current actual network state\n        this._initialNetworkStateSubscription = ReachabilityMonitor().subscribe(function (_a) {\n            var online = _a.online;\n            var _b;\n            _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n            (_b = _this._initialNetworkStateSubscription) === null || _b === void 0 ? void 0 : _b.unsubscribe();\n        });\n        this._linkedConnectionStateObservable =\n            new Observable(function (connectionStateObserver) {\n                connectionStateObserver.next(_this._linkedConnectionState);\n                _this._linkedConnectionStateObserver = connectionStateObserver;\n            });\n    }\n    /**\n     * Turn network state monitoring on if it isn't on already\n     */\n    ConnectionStateMonitor.prototype.enableNetworkMonitoring = function () {\n        var _this = this;\n        var _a;\n        // If no initial network state was discovered, stop trying\n        (_a = this._initialNetworkStateSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        // Maintain the network state based on the reachability monitor\n        if (this._networkMonitoringSubscription === undefined) {\n            this._networkMonitoringSubscription = ReachabilityMonitor().subscribe(function (_a) {\n                var online = _a.online;\n                _this.record(online ? CONNECTION_CHANGE.ONLINE : CONNECTION_CHANGE.OFFLINE);\n            });\n        }\n    };\n    /**\n     * Turn network state monitoring off if it isn't off already\n     */\n    ConnectionStateMonitor.prototype.disableNetworkMonitoring = function () {\n        var _a;\n        (_a = this._networkMonitoringSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n        this._networkMonitoringSubscription = undefined;\n    };\n    Object.defineProperty(ConnectionStateMonitor.prototype, \"connectionStateObservable\", {\n        /**\n         * Get the observable that allows us to monitor the connection state\n         *\n         * @returns {Observable<ConnectionState>} - The observable that emits ConnectionState updates\n         */\n        get: function () {\n            var _this = this;\n            var previous;\n            // The linked state aggregates state changes to any of the network, connection,\n            // intendedConnection and keepAliveHealth. Some states will change these independent\n            // states without changing the overall connection state.\n            // After translating from linked states to ConnectionState, then remove any duplicates\n            return this._linkedConnectionStateObservable\n                .map(function (value) {\n                return _this.connectionStatesTranslator(value);\n            })\n                .filter(function (current) {\n                var toInclude = current !== previous;\n                previous = current;\n                return toInclude;\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /*\n     * Updates local connection state and emits the full state to the observer.\n     */\n    ConnectionStateMonitor.prototype.record = function (statusUpdates) {\n        // Maintain the network monitor\n        if (statusUpdates.intendedConnectionState === 'connected') {\n            this.enableNetworkMonitoring();\n        }\n        else if (statusUpdates.intendedConnectionState === 'disconnected') {\n            this.disableNetworkMonitoring();\n        }\n        // Maintain the socket state\n        var newSocketStatus = __assign(__assign({}, this._linkedConnectionState), statusUpdates);\n        this._linkedConnectionState = __assign({}, newSocketStatus);\n        this._linkedConnectionStateObserver.next(this._linkedConnectionState);\n    };\n    /*\n     * Translate the ConnectionState structure into a specific ConnectionState string literal union\n     */\n    ConnectionStateMonitor.prototype.connectionStatesTranslator = function (_a) {\n        var connectionState = _a.connectionState, networkState = _a.networkState, intendedConnectionState = _a.intendedConnectionState, keepAliveState = _a.keepAliveState;\n        if (connectionState === 'connected' && networkState === 'disconnected')\n            return ConnectionState.ConnectedPendingNetwork;\n        if (connectionState === 'connected' &&\n            intendedConnectionState === 'disconnected')\n            return ConnectionState.ConnectedPendingDisconnect;\n        if (connectionState === 'disconnected' &&\n            intendedConnectionState === 'connected' &&\n            networkState === 'disconnected')\n            return ConnectionState.ConnectionDisruptedPendingNetwork;\n        if (connectionState === 'disconnected' &&\n            intendedConnectionState === 'connected')\n            return ConnectionState.ConnectionDisrupted;\n        if (connectionState === 'connected' && keepAliveState === 'unhealthy')\n            return ConnectionState.ConnectedPendingKeepAlive;\n        // All remaining states directly correspond to the connection state\n        if (connectionState === 'connecting')\n            return ConnectionState.Connecting;\n        if (connectionState === 'disconnected')\n            return ConnectionState.Disconnected;\n        return ConnectionState.Connected;\n    };\n    return ConnectionStateMonitor;\n}());\nexport { ConnectionStateMonitor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}