{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { transpose } from './Transpose';\n/**\n * Compute permutation axes and do a transpose if necessary.\n *\n * Used by reduction ops.\n * @param x input TensorInfo\n * @param axis reduction axes\n * @param backend wasm backend instance\n */\n\nexport function permuteAxesAndTranspose(x, axis, backend) {\n  const xShape = x.shape;\n  const xRank = x.shape.length;\n  const originalAxes = util.parseAxisParam(axis, xShape);\n  let axes = originalAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let xTransposed = null;\n  let inputWasTransposed = false;\n\n  if (permutedAxes != null) {\n    const newShape = new Array(xRank);\n\n    for (let i = 0; i < newShape.length; i++) {\n      newShape[i] = xShape[permutedAxes[i]];\n    }\n\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    xTransposed = transpose({\n      inputs: {\n        x\n      },\n      attrs: {\n        perm: permutedAxes\n      },\n      backend\n    });\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const transposedId = backend.dataIdMap.get(xTransposed.dataId).id;\n\n    if (transposedId !== xId) {\n      inputWasTransposed = true;\n    }\n  }\n\n  return {\n    transposed: xTransposed,\n    originalAxes,\n    axes,\n    inputWasTransposed\n  };\n}","map":{"version":3,"names":["backend_util","util","transpose","permuteAxesAndTranspose","x","axis","backend","xShape","shape","xRank","length","originalAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","xTransposed","inputWasTransposed","newShape","Array","i","getInnerMostAxes","inputs","attrs","perm","xId","dataIdMap","get","dataId","id","transposedId","transposed"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/kernel_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { transpose } from './Transpose';\n/**\n * Compute permutation axes and do a transpose if necessary.\n *\n * Used by reduction ops.\n * @param x input TensorInfo\n * @param axis reduction axes\n * @param backend wasm backend instance\n */\nexport function permuteAxesAndTranspose(x, axis, backend) {\n    const xShape = x.shape;\n    const xRank = x.shape.length;\n    const originalAxes = util.parseAxisParam(axis, xShape);\n    let axes = originalAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xTransposed = null;\n    let inputWasTransposed = false;\n    if (permutedAxes != null) {\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n            newShape[i] = xShape[permutedAxes[i]];\n        }\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        xTransposed =\n            transpose({ inputs: { x }, attrs: { perm: permutedAxes }, backend });\n        const xId = backend.dataIdMap.get(x.dataId).id;\n        const transposedId = backend.dataIdMap.get(xTransposed.dataId).id;\n        if (transposedId !== xId) {\n            inputWasTransposed = true;\n        }\n    }\n    return { transposed: xTransposed, originalAxes, axes, inputWasTransposed };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,IAAvB,QAAmC,uBAAnC;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAiCC,CAAjC,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmD;EACtD,MAAMC,MAAM,GAAGH,CAAC,CAACI,KAAjB;EACA,MAAMC,KAAK,GAAGL,CAAC,CAACI,KAAF,CAAQE,MAAtB;EACA,MAAMC,YAAY,GAAGV,IAAI,CAACW,cAAL,CAAoBP,IAApB,EAA0BE,MAA1B,CAArB;EACA,IAAIM,IAAI,GAAGF,YAAX;EACA,MAAMG,YAAY,GAAGd,YAAY,CAACe,kBAAb,CAAgCF,IAAhC,EAAsCJ,KAAtC,CAArB;EACA,IAAIO,WAAW,GAAG,IAAlB;EACA,IAAIC,kBAAkB,GAAG,KAAzB;;EACA,IAAIH,YAAY,IAAI,IAApB,EAA0B;IACtB,MAAMI,QAAQ,GAAG,IAAIC,KAAJ,CAAUV,KAAV,CAAjB;;IACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACR,MAA7B,EAAqCU,CAAC,EAAtC,EAA0C;MACtCF,QAAQ,CAACE,CAAD,CAAR,GAAcb,MAAM,CAACO,YAAY,CAACM,CAAD,CAAb,CAApB;IACH;;IACDP,IAAI,GAAGb,YAAY,CAACqB,gBAAb,CAA8BR,IAAI,CAACH,MAAnC,EAA2CD,KAA3C,CAAP;IACAO,WAAW,GACPd,SAAS,CAAC;MAAEoB,MAAM,EAAE;QAAElB;MAAF,CAAV;MAAiBmB,KAAK,EAAE;QAAEC,IAAI,EAAEV;MAAR,CAAxB;MAAgDR;IAAhD,CAAD,CADb;IAEA,MAAMmB,GAAG,GAAGnB,OAAO,CAACoB,SAAR,CAAkBC,GAAlB,CAAsBvB,CAAC,CAACwB,MAAxB,EAAgCC,EAA5C;IACA,MAAMC,YAAY,GAAGxB,OAAO,CAACoB,SAAR,CAAkBC,GAAlB,CAAsBX,WAAW,CAACY,MAAlC,EAA0CC,EAA/D;;IACA,IAAIC,YAAY,KAAKL,GAArB,EAA0B;MACtBR,kBAAkB,GAAG,IAArB;IACH;EACJ;;EACD,OAAO;IAAEc,UAAU,EAAEf,WAAd;IAA2BL,YAA3B;IAAyCE,IAAzC;IAA+CI;EAA/C,CAAP;AACH"},"metadata":{},"sourceType":"module"}