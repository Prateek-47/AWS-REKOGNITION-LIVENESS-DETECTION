{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, util } from '@tensorflow/tfjs-core';\nlet wasmConv2DBackpropInput;\n\nfunction setup(backend) {\n  wasmConv2DBackpropInput = backend.wasm.cwrap(Conv2DBackpropInput, null, ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction conv2DBackpropInput(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    inputShape\n  } = attrs;\n  const dilations = 1;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dxStrides = util.computeStrides(convInfo.inShape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const [fltS0, fltS1, fltS2] = util.computeStrides(filter.shape);\n  const xBatchStride = dxStrides[0];\n  const xRowStride = isChannelsLast ? dxStrides[1] : dxStrides[2];\n  const xColStride = isChannelsLast ? dxStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dxStrides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n  const out = backend.makeOutput(convInfo.inShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const dyId = backend.dataIdMap.get(dy.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n  wasmConv2DBackpropInput(dyId, filterId, batchSize, filterHeight, filterWidth, inHeight, inWidth, inChannels, outHeight, outWidth, outChannels, strideHeight, strideWidth, topPad, leftPad, fltS0, fltS1, fltS2, xBatchStride, xRowStride, xColStride, xChannelStride, yBatchStride, yRowStride, yColStride, yChannelStride, outId);\n  return out;\n}\n\nexport const conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: conv2DBackpropInput\n};","map":{"version":3,"names":["backend_util","Conv2DBackpropInput","util","wasmConv2DBackpropInput","setup","backend","wasm","cwrap","conv2DBackpropInput","args","inputs","attrs","dy","filter","strides","pad","dataFormat","dimRoundingMode","inputShape","dilations","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","batchSize","filterHeight","filterWidth","inChannels","inHeight","inWidth","outChannels","outHeight","outWidth","strideHeight","strideWidth","topPad","padInfo","top","leftPad","left","isChannelsLast","dxStrides","computeStrides","inShape","dyStrides","fltS0","fltS1","fltS2","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","out","makeOutput","outId","dataIdMap","get","dataId","id","dyId","filterId","conv2DBackpropInputConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Conv2DBackpropInput.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, util } from '@tensorflow/tfjs-core';\nlet wasmConv2DBackpropInput;\nfunction setup(backend) {\n    wasmConv2DBackpropInput = backend.wasm.cwrap(Conv2DBackpropInput, null, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n    ]);\n}\nfunction conv2DBackpropInput(args) {\n    const { backend, inputs, attrs } = args;\n    const { dy, filter } = inputs;\n    const { strides, pad, dataFormat, dimRoundingMode, inputShape } = attrs;\n    const dilations = 1;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const dxStrides = util.computeStrides(convInfo.inShape);\n    const dyStrides = util.computeStrides(dy.shape);\n    const [fltS0, fltS1, fltS2] = util.computeStrides(filter.shape);\n    const xBatchStride = dxStrides[0];\n    const xRowStride = isChannelsLast ? dxStrides[1] : dxStrides[2];\n    const xColStride = isChannelsLast ? dxStrides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dxStrides[1];\n    const yBatchStride = dyStrides[0];\n    const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n    const yColStride = isChannelsLast ? dyStrides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n    const out = backend.makeOutput(convInfo.inShape, 'float32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const dyId = backend.dataIdMap.get(dy.dataId).id;\n    const filterId = backend.dataIdMap.get(filter.dataId).id;\n    wasmConv2DBackpropInput(dyId, filterId, batchSize, filterHeight, filterWidth, inHeight, inWidth, inChannels, outHeight, outWidth, outChannels, strideHeight, strideWidth, topPad, leftPad, fltS0, fltS1, fltS2, xBatchStride, xRowStride, xColStride, xChannelStride, yBatchStride, yRowStride, yColStride, yChannelStride, outId);\n    return out;\n}\nexport const conv2DBackpropInputConfig = {\n    kernelName: Conv2DBackpropInput,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: conv2DBackpropInput\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}