{"ast":null,"code":"import { __awaiter as e } from \"tslib\";\nimport { createMachine as r, sendUpdate as t } from \"xstate\";\nimport { runValidators as s } from \"../../../validators/index.mjs\";\nimport { clearError as a, clearFormValues as o, clearTouched as n, clearUsername as i, clearValidationError as d, handleInput as l, handleSubmit as c, handleBlur as m, resendCode as u, setFieldErrors as p, setRemoteError as g, setUsername as v } from \"../actions.mjs\";\nimport { defaultServices as E } from \"../defaultServices.mjs\";\n\nfunction f({\n  services: f\n}) {\n  return r({\n    id: \"resetPasswordActor\",\n    initial: \"init\",\n    predictableActionArguments: !0,\n    states: {\n      init: {\n        always: [{\n          target: \"confirmResetPassword\",\n          cond: \"shouldAutoConfirmReset\",\n          actions: \"resendCode\"\n        }, {\n          target: \"resetPassword\"\n        }]\n      },\n      resetPassword: {\n        initial: \"edit\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearTouched\"],\n        states: {\n          edit: {\n            entry: \"sendUpdate\",\n            on: {\n              SUBMIT: {\n                actions: \"handleSubmit\",\n                target: \"submit\"\n              },\n              CHANGE: {\n                actions: \"handleInput\"\n              },\n              BLUR: {\n                actions: \"handleBlur\"\n              }\n            }\n          },\n          submit: {\n            tags: [\"pending\"],\n            entry: [\"sendUpdate\", \"setUsername\", \"clearError\"],\n            invoke: {\n              src: \"resetPassword\",\n              onDone: {\n                target: \"#resetPasswordActor.confirmResetPassword\"\n              },\n              onError: {\n                actions: [\"setRemoteError\"],\n                target: \"edit\"\n              }\n            }\n          }\n        }\n      },\n      confirmResetPassword: {\n        type: \"parallel\",\n        exit: [\"clearFormValues\", \"clearError\", \"clearUsername\", \"clearTouched\"],\n        states: {\n          validation: {\n            initial: \"pending\",\n            states: {\n              pending: {\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"valid\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"invalid\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              valid: {\n                entry: \"sendUpdate\"\n              },\n              invalid: {\n                entry: \"sendUpdate\"\n              }\n            },\n            on: {\n              CHANGE: {\n                actions: \"handleInput\",\n                target: \".pending\"\n              },\n              BLUR: {\n                actions: \"handleBlur\",\n                target: \".pending\"\n              }\n            }\n          },\n          submission: {\n            initial: \"idle\",\n            states: {\n              idle: {\n                entry: \"sendUpdate\",\n                on: {\n                  SUBMIT: {\n                    actions: \"handleSubmit\",\n                    target: \"validate\"\n                  },\n                  RESEND: \"resendCode\",\n                  CHANGE: {\n                    actions: \"handleInput\"\n                  },\n                  BLUR: {\n                    actions: \"handleBlur\"\n                  }\n                }\n              },\n              validate: {\n                entry: \"sendUpdate\",\n                invoke: {\n                  src: \"validateFields\",\n                  onDone: {\n                    target: \"pending\",\n                    actions: \"clearValidationError\"\n                  },\n                  onError: {\n                    target: \"idle\",\n                    actions: \"setFieldErrors\"\n                  }\n                }\n              },\n              resendCode: {\n                tags: [\"pending\"],\n                entry: [\"clearError\", \"sendUpdate\"],\n                invoke: {\n                  src: \"resetPassword\",\n                  onDone: {\n                    target: \"idle\"\n                  },\n                  onError: {\n                    actions: \"setRemoteError\",\n                    target: \"idle\"\n                  }\n                }\n              },\n              pending: {\n                tags: [\"pending\"],\n                entry: [\"clearError\", \"sendUpdate\"],\n                invoke: {\n                  src: \"confirmResetPassword\",\n                  onDone: {\n                    actions: \"clearUsername\",\n                    target: \"#resetPasswordActor.resolved\"\n                  },\n                  onError: {\n                    actions: \"setRemoteError\",\n                    target: \"idle\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: \"final\"\n      }\n    }\n  }, {\n    actions: {\n      clearError: a,\n      clearFormValues: o,\n      clearTouched: n,\n      clearUsername: i,\n      clearValidationError: d,\n      handleInput: l,\n      handleSubmit: c,\n      handleBlur: m,\n      resendCode: u,\n      setFieldErrors: p,\n      setRemoteError: g,\n      setUsername: v,\n      sendUpdate: t()\n    },\n    guards: {\n      shouldAutoConfirmReset: (e, r) => !(!e.intent || \"confirmPasswordReset\" !== e.intent)\n    },\n    services: {\n      resetPassword(r) {\n        return e(this, void 0, void 0, function* () {\n          const {\n            username: e\n          } = r;\n          return f.handleForgotPassword(e);\n        });\n      },\n\n      confirmResetPassword(r) {\n        return e(this, void 0, void 0, function* () {\n          const {\n            username: e\n          } = r,\n                {\n            confirmation_code: t,\n            password: s\n          } = r.formValues;\n          return f.handleForgotPasswordSubmit({\n            username: e,\n            code: t,\n            password: s\n          });\n        });\n      },\n\n      validateFields(r, t) {\n        return e(this, void 0, void 0, function* () {\n          return s(r.formValues, r.touched, r.passwordSettings, [E.validateFormPassword, E.validateConfirmPassword]);\n        });\n      }\n\n    }\n  });\n}\n\nexport { f as resetPasswordActor };","map":{"version":3,"names":["__awaiter","e","createMachine","r","sendUpdate","t","runValidators","s","clearError","a","clearFormValues","o","clearTouched","n","clearUsername","i","clearValidationError","d","handleInput","l","handleSubmit","c","handleBlur","m","resendCode","u","setFieldErrors","p","setRemoteError","g","setUsername","v","defaultServices","E","f","services","id","initial","predictableActionArguments","states","init","always","target","cond","actions","resetPassword","exit","edit","entry","on","SUBMIT","CHANGE","BLUR","submit","tags","invoke","src","onDone","onError","confirmResetPassword","type","validation","pending","valid","invalid","submission","idle","RESEND","validate","resolved","guards","shouldAutoConfirmReset","intent","username","handleForgotPassword","confirmation_code","password","formValues","handleForgotPasswordSubmit","code","validateFields","touched","passwordSettings","validateFormPassword","validateConfirmPassword","resetPasswordActor"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/ui-react-liveness/node_modules/@aws-amplify/ui/dist/esm/machines/authenticator/actors/resetPassword.mjs"],"sourcesContent":["import{__awaiter as e}from\"tslib\";import{createMachine as r,sendUpdate as t}from\"xstate\";import{runValidators as s}from\"../../../validators/index.mjs\";import{clearError as a,clearFormValues as o,clearTouched as n,clearUsername as i,clearValidationError as d,handleInput as l,handleSubmit as c,handleBlur as m,resendCode as u,setFieldErrors as p,setRemoteError as g,setUsername as v}from\"../actions.mjs\";import{defaultServices as E}from\"../defaultServices.mjs\";function f({services:f}){return r({id:\"resetPasswordActor\",initial:\"init\",predictableActionArguments:!0,states:{init:{always:[{target:\"confirmResetPassword\",cond:\"shouldAutoConfirmReset\",actions:\"resendCode\"},{target:\"resetPassword\"}]},resetPassword:{initial:\"edit\",exit:[\"clearFormValues\",\"clearError\",\"clearTouched\"],states:{edit:{entry:\"sendUpdate\",on:{SUBMIT:{actions:\"handleSubmit\",target:\"submit\"},CHANGE:{actions:\"handleInput\"},BLUR:{actions:\"handleBlur\"}}},submit:{tags:[\"pending\"],entry:[\"sendUpdate\",\"setUsername\",\"clearError\"],invoke:{src:\"resetPassword\",onDone:{target:\"#resetPasswordActor.confirmResetPassword\"},onError:{actions:[\"setRemoteError\"],target:\"edit\"}}}}},confirmResetPassword:{type:\"parallel\",exit:[\"clearFormValues\",\"clearError\",\"clearUsername\",\"clearTouched\"],states:{validation:{initial:\"pending\",states:{pending:{invoke:{src:\"validateFields\",onDone:{target:\"valid\",actions:\"clearValidationError\"},onError:{target:\"invalid\",actions:\"setFieldErrors\"}}},valid:{entry:\"sendUpdate\"},invalid:{entry:\"sendUpdate\"}},on:{CHANGE:{actions:\"handleInput\",target:\".pending\"},BLUR:{actions:\"handleBlur\",target:\".pending\"}}},submission:{initial:\"idle\",states:{idle:{entry:\"sendUpdate\",on:{SUBMIT:{actions:\"handleSubmit\",target:\"validate\"},RESEND:\"resendCode\",CHANGE:{actions:\"handleInput\"},BLUR:{actions:\"handleBlur\"}}},validate:{entry:\"sendUpdate\",invoke:{src:\"validateFields\",onDone:{target:\"pending\",actions:\"clearValidationError\"},onError:{target:\"idle\",actions:\"setFieldErrors\"}}},resendCode:{tags:[\"pending\"],entry:[\"clearError\",\"sendUpdate\"],invoke:{src:\"resetPassword\",onDone:{target:\"idle\"},onError:{actions:\"setRemoteError\",target:\"idle\"}}},pending:{tags:[\"pending\"],entry:[\"clearError\",\"sendUpdate\"],invoke:{src:\"confirmResetPassword\",onDone:{actions:\"clearUsername\",target:\"#resetPasswordActor.resolved\"},onError:{actions:\"setRemoteError\",target:\"idle\"}}}}}}},resolved:{type:\"final\"}}},{actions:{clearError:a,clearFormValues:o,clearTouched:n,clearUsername:i,clearValidationError:d,handleInput:l,handleSubmit:c,handleBlur:m,resendCode:u,setFieldErrors:p,setRemoteError:g,setUsername:v,sendUpdate:t()},guards:{shouldAutoConfirmReset:(e,r)=>!(!e.intent||\"confirmPasswordReset\"!==e.intent)},services:{resetPassword(r){return e(this,void 0,void 0,(function*(){const{username:e}=r;return f.handleForgotPassword(e)}))},confirmResetPassword(r){return e(this,void 0,void 0,(function*(){const{username:e}=r,{confirmation_code:t,password:s}=r.formValues;return f.handleForgotPasswordSubmit({username:e,code:t,password:s})}))},validateFields(r,t){return e(this,void 0,void 0,(function*(){return s(r.formValues,r.touched,r.passwordSettings,[E.validateFormPassword,E.validateConfirmPassword])}))}}})}export{f as resetPasswordActor};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}