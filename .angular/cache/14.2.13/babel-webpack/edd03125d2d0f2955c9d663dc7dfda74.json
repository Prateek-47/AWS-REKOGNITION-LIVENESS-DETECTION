{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softmax, util } from '@tensorflow/tfjs-core';\nlet wasmFunc;\n\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(Softmax, null\n  /* void */\n  , ['number', 'number', 'number', 'number' // batch\n  ]);\n}\n\nfunction softmax(args) {\n  const {\n    backend,\n    inputs: {\n      logits\n    },\n    attrs: {\n      dim\n    }\n  } = args;\n  const xId = backend.dataIdMap.get(logits.dataId).id;\n  const out = backend.makeOutput(logits.shape, logits.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const channels = logits.shape[dim];\n  const batch = util.sizeFromShape(logits.shape) / channels; // Short-circuit zero-sized tensors.\n\n  if (util.sizeFromShape(out.shape) === 0) {\n    return out;\n  }\n\n  wasmFunc(xId, outId, channels, batch);\n  return out;\n}\n\nexport const softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: softmax\n};","map":{"version":3,"names":["Softmax","util","wasmFunc","setup","backend","wasm","cwrap","softmax","args","inputs","logits","attrs","dim","xId","dataIdMap","get","dataId","id","out","makeOutput","shape","dtype","outId","channels","batch","sizeFromShape","softmaxConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Softmax.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softmax, util } from '@tensorflow/tfjs-core';\nlet wasmFunc;\nfunction setup(backend) {\n    wasmFunc = backend.wasm.cwrap(Softmax, null /* void */, [\n        'number',\n        'number',\n        'number',\n        'number' // batch\n    ]);\n}\nfunction softmax(args) {\n    const { backend, inputs: { logits }, attrs: { dim } } = args;\n    const xId = backend.dataIdMap.get(logits.dataId).id;\n    const out = backend.makeOutput(logits.shape, logits.dtype);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const channels = logits.shape[dim];\n    const batch = util.sizeFromShape(logits.shape) / channels;\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(out.shape) === 0) {\n        return out;\n    }\n    wasmFunc(xId, outId, channels, batch);\n    return out;\n}\nexport const softmaxConfig = {\n    kernelName: Softmax,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: softmax\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,IAAlB,QAA8B,uBAA9B;AACA,IAAIC,QAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,QAAQ,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBN,OAAnB,EAA4B;EAAK;EAAjC,EAA6C,CACpD,QADoD,EAEpD,QAFoD,EAGpD,QAHoD,EAIpD,QAJoD,CAI3C;EAJ2C,CAA7C,CAAX;AAMH;;AACD,SAASO,OAAT,CAAiBC,IAAjB,EAAuB;EACnB,MAAM;IAAEJ,OAAF;IAAWK,MAAM,EAAE;MAAEC;IAAF,CAAnB;IAA+BC,KAAK,EAAE;MAAEC;IAAF;EAAtC,IAAkDJ,IAAxD;EACA,MAAMK,GAAG,GAAGT,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBL,MAAM,CAACM,MAA7B,EAAqCC,EAAjD;EACA,MAAMC,GAAG,GAAGd,OAAO,CAACe,UAAR,CAAmBT,MAAM,CAACU,KAA1B,EAAiCV,MAAM,CAACW,KAAxC,CAAZ;EACA,MAAMC,KAAK,GAAGlB,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBG,GAAG,CAACF,MAA1B,EAAkCC,EAAhD;EACA,MAAMM,QAAQ,GAAGb,MAAM,CAACU,KAAP,CAAaR,GAAb,CAAjB;EACA,MAAMY,KAAK,GAAGvB,IAAI,CAACwB,aAAL,CAAmBf,MAAM,CAACU,KAA1B,IAAmCG,QAAjD,CANmB,CAOnB;;EACA,IAAItB,IAAI,CAACwB,aAAL,CAAmBP,GAAG,CAACE,KAAvB,MAAkC,CAAtC,EAAyC;IACrC,OAAOF,GAAP;EACH;;EACDhB,QAAQ,CAACW,GAAD,EAAMS,KAAN,EAAaC,QAAb,EAAuBC,KAAvB,CAAR;EACA,OAAON,GAAP;AACH;;AACD,OAAO,MAAMQ,aAAa,GAAG;EACzBC,UAAU,EAAE3B,OADa;EAEzB4B,WAAW,EAAE,MAFY;EAGzBC,SAAS,EAAE1B,KAHc;EAIzB2B,UAAU,EAAEvB;AAJa,CAAtB"},"metadata":{},"sourceType":"module"}