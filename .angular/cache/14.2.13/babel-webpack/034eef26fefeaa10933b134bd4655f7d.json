{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nlet wasmBatchMatMul;\n\nfunction setup(backend) {\n  wasmBatchMatMul = backend.wasm.cwrap(BatchMatMul, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'array', 'number', 'number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction batchMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const {\n    transposeA,\n    transposeB\n  } = attrs;\n\n  if (a.dtype !== 'float32' || b.dtype !== 'float32') {\n    throw new Error(`BatchMatMul for non non-float32 tensors not yet supported.`);\n  }\n\n  const aRank = a.shape.length;\n  const bRank = b.shape.length;\n  const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n  const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n  const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n  const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n  const outerDimsA = a.shape.slice(0, -2);\n  const outerDimsB = b.shape.slice(0, -2);\n  const batchDimA = util.sizeFromShape(outerDimsA);\n  const batchDimB = util.sizeFromShape(outerDimsB);\n  const batchDimsCompatible = batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n  util.assert(aRank >= 2 && bRank >= 2 && batchDimsCompatible, () => `Error in matMul: the input batch dimensions must either be the ` + `same or at least one input batch dimension must be 1. Got input ` + `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n  const outShapeOuterDims = batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n  const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n  util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` + `${innerShapeB}) of Tensors with shapes ${a.shape} and ` + `${b.shape} and transposeA=${transposeA}` + ` and transposeB=${transposeB} must match.`);\n  const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] : [batchDimA, outerShapeA, innerShapeA];\n  const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] : [batchDimB, innerShapeB, outerShapeB]; // The rest of the implementation is designed to operate on rank-3 tensors\n\n  const a3d = reshape({\n    inputs: {\n      x: a\n    },\n    backend,\n    attrs: {\n      shape: a3dShape\n    }\n  });\n  const b3d = reshape({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      shape: b3dShape\n    }\n  });\n  const a3dId = backend.dataIdMap.get(a3d.dataId).id;\n  const b3dId = backend.dataIdMap.get(b3d.dataId).id;\n  const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n  const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n  const batchDim = Math.max(batchDimA, batchDimB);\n  const out = backend.makeOutput([batchDim, leftDim, rightDim], a3d.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const aShapeBytes = new Uint8Array(new Int32Array(a3d.shape).buffer);\n  const bShapeBytes = new Uint8Array(new Int32Array(b3d.shape).buffer);\n  wasmBatchMatMul(a3dId, aShapeBytes, a3d.shape.length, b3dId, bShapeBytes, b3d.shape.length, transposeA, transposeB, outId);\n  backend.disposeData(a3d.dataId);\n  backend.disposeData(b3d.dataId);\n  out.shape = outShape;\n  return out;\n}\n\nexport const batchMatMulConfig = {\n  kernelName: BatchMatMul,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: batchMatMul\n};","map":{"version":3,"names":["BatchMatMul","util","reshape","wasmBatchMatMul","setup","backend","wasm","cwrap","batchMatMul","args","inputs","attrs","a","b","transposeA","transposeB","dtype","Error","aRank","shape","length","bRank","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","slice","outerDimsB","batchDimA","sizeFromShape","batchDimB","batchDimsCompatible","assert","outShapeOuterDims","outShape","concat","a3dShape","b3dShape","a3d","x","b3d","a3dId","dataIdMap","get","dataId","id","b3dId","leftDim","rightDim","batchDim","Math","max","out","makeOutput","outId","aShapeBytes","Uint8Array","Int32Array","buffer","bShapeBytes","disposeData","batchMatMulConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/BatchMatMul.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nlet wasmBatchMatMul;\nfunction setup(backend) {\n    wasmBatchMatMul = backend.wasm.cwrap(BatchMatMul, null /* void */, [\n        'number',\n        'array',\n        'number',\n        'number',\n        'array',\n        'number',\n        'number',\n        'number',\n        'number' // out_id\n    ]);\n}\nfunction batchMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b } = inputs;\n    const { transposeA, transposeB } = attrs;\n    if (a.dtype !== 'float32' || b.dtype !== 'float32') {\n        throw new Error(`BatchMatMul for non non-float32 tensors not yet supported.`);\n    }\n    const aRank = a.shape.length;\n    const bRank = b.shape.length;\n    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n    const outerDimsA = a.shape.slice(0, -2);\n    const outerDimsB = b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    const batchDimsCompatible = batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n    util.assert(aRank >= 2 && bRank >= 2 && batchDimsCompatible, () => `Error in matMul: the input batch dimensions must either be the ` +\n        `same or at least one input batch dimension must be 1. Got input ` +\n        `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n    const outShapeOuterDims = batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n    util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n        `${b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n        [batchDimA, outerShapeA, innerShapeA];\n    const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n        [batchDimB, innerShapeB, outerShapeB];\n    // The rest of the implementation is designed to operate on rank-3 tensors\n    const a3d = reshape({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });\n    const b3d = reshape({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });\n    const a3dId = backend.dataIdMap.get(a3d.dataId).id;\n    const b3dId = backend.dataIdMap.get(b3d.dataId).id;\n    const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n    const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n    const batchDim = Math.max(batchDimA, batchDimB);\n    const out = backend.makeOutput([batchDim, leftDim, rightDim], a3d.dtype);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const aShapeBytes = new Uint8Array(new Int32Array(a3d.shape).buffer);\n    const bShapeBytes = new Uint8Array(new Int32Array(b3d.shape).buffer);\n    wasmBatchMatMul(a3dId, aShapeBytes, a3d.shape.length, b3dId, bShapeBytes, b3d.shape.length, transposeA, transposeB, outId);\n    backend.disposeData(a3d.dataId);\n    backend.disposeData(b3d.dataId);\n    out.shape = outShape;\n    return out;\n}\nexport const batchMatMulConfig = {\n    kernelName: BatchMatMul,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: batchMatMul\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}