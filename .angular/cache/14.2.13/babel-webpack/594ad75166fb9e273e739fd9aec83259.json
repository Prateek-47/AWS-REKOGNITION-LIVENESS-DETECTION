{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Auth } from '@aws-amplify/auth';\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { ModelAttributeAuthProvider, ModelAttributeAuthAllow } from '../types';\n\nfunction getProviderFromRule(rule) {\n  // private with no provider means userPools\n  if (rule.allow === 'private' && !rule.provider) {\n    return ModelAttributeAuthProvider.USER_POOLS;\n  } // public with no provider means apiKey\n\n\n  if (rule.allow === 'public' && !rule.provider) {\n    return ModelAttributeAuthProvider.API_KEY;\n  }\n\n  return rule.provider;\n}\n\nfunction sortAuthRulesWithPriority(rules) {\n  var allowSortPriority = [ModelAttributeAuthAllow.CUSTOM, ModelAttributeAuthAllow.OWNER, ModelAttributeAuthAllow.GROUPS, ModelAttributeAuthAllow.PRIVATE, ModelAttributeAuthAllow.PUBLIC];\n  var providerSortPriority = [ModelAttributeAuthProvider.FUNCTION, ModelAttributeAuthProvider.USER_POOLS, ModelAttributeAuthProvider.OIDC, ModelAttributeAuthProvider.IAM, ModelAttributeAuthProvider.API_KEY];\n  return __spread(rules).sort(function (a, b) {\n    if (a.allow === b.allow) {\n      return providerSortPriority.indexOf(getProviderFromRule(a)) - providerSortPriority.indexOf(getProviderFromRule(b));\n    }\n\n    return allowSortPriority.indexOf(a.allow) - allowSortPriority.indexOf(b.allow);\n  });\n}\n\nfunction getAuthRules(_a) {\n  var rules = _a.rules,\n      currentUser = _a.currentUser; // Using Set to ensure uniqueness\n\n  var authModes = new Set();\n  rules.forEach(function (rule) {\n    switch (rule.allow) {\n      case ModelAttributeAuthAllow.CUSTOM:\n        // custom with no provider -> function\n        if (!rule.provider || rule.provider === ModelAttributeAuthProvider.FUNCTION) {\n          authModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n        }\n\n        break;\n\n      case ModelAttributeAuthAllow.GROUPS:\n      case ModelAttributeAuthAllow.OWNER:\n        {\n          // We shouldn't attempt User Pool or OIDC if there isn't an authenticated user\n          if (currentUser) {\n            if (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.OIDC) {\n              authModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);\n            }\n          }\n\n          break;\n        }\n\n      case ModelAttributeAuthAllow.PRIVATE:\n        {\n          // We shouldn't attempt private if there isn't an authenticated user\n          if (currentUser) {\n            // private with no provider means userPools\n            if (!rule.provider || rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n              authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n            } else if (rule.provider === ModelAttributeAuthProvider.IAM) {\n              authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n            }\n          }\n\n          break;\n        }\n\n      case ModelAttributeAuthAllow.PUBLIC:\n        {\n          if (rule.provider === ModelAttributeAuthProvider.IAM) {\n            authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n          } else if (!rule.provider || rule.provider === ModelAttributeAuthProvider.API_KEY) {\n            // public with no provider means apiKey\n            authModes.add(GRAPHQL_AUTH_MODE.API_KEY);\n          }\n\n          break;\n        }\n\n      default:\n        break;\n    }\n  });\n  return Array.from(authModes);\n}\n/**\n * Returns an array of auth modes to try based on the schema, model, and\n * authenticated user (or lack thereof). Rules are sourced from `getAuthRules`\n * and returned in the order they ought to be attempted.\n *\n * @see sortAuthRulesWithPriority\n * @see getAuthRules\n *\n * @param param0 The `{schema, modelName}` to inspect.\n * @returns A sorted array of auth modes to attempt.\n */\n\n\nexport var multiAuthStrategy = function (amplifyContext) {\n  return function (_a) {\n    var schema = _a.schema,\n        modelName = _a.modelName;\n    return __awaiter(void 0, void 0, void 0, function () {\n      var currentUser, e_1, attributes, authAttribute, sortedRules;\n\n      var _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            amplifyContext.Auth = amplifyContext.Auth || Auth;\n            _c.label = 1;\n\n          case 1:\n            _c.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , amplifyContext.Auth.currentAuthenticatedUser()];\n\n          case 2:\n            currentUser = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _c.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            attributes = schema.namespaces.user.models[modelName].attributes;\n\n            if (attributes) {\n              authAttribute = attributes.find(function (attr) {\n                return attr.type === 'auth';\n              });\n\n              if ((_b = authAttribute === null || authAttribute === void 0 ? void 0 : authAttribute.properties) === null || _b === void 0 ? void 0 : _b.rules) {\n                sortedRules = sortAuthRulesWithPriority(authAttribute.properties.rules);\n                return [2\n                /*return*/\n                , getAuthRules({\n                  currentUser: currentUser,\n                  rules: sortedRules\n                })];\n              }\n            }\n\n            return [2\n            /*return*/\n            , []];\n        }\n      });\n    });\n  };\n};","map":{"version":3,"names":["__awaiter","__generator","__read","__spread","Auth","GRAPHQL_AUTH_MODE","ModelAttributeAuthProvider","ModelAttributeAuthAllow","getProviderFromRule","rule","allow","provider","USER_POOLS","API_KEY","sortAuthRulesWithPriority","rules","allowSortPriority","CUSTOM","OWNER","GROUPS","PRIVATE","PUBLIC","providerSortPriority","FUNCTION","OIDC","IAM","sort","a","b","indexOf","getAuthRules","_a","currentUser","authModes","Set","forEach","add","AWS_LAMBDA","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","AWS_IAM","Array","from","multiAuthStrategy","amplifyContext","schema","modelName","e_1","attributes","authAttribute","sortedRules","_b","_c","label","trys","push","currentAuthenticatedUser","sent","namespaces","user","models","find","attr","type","properties"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/authModeStrategies/multiAuthStrategy.js"],"sourcesContent":["import { __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Auth } from '@aws-amplify/auth';\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api-graphql';\nimport { ModelAttributeAuthProvider, ModelAttributeAuthAllow, } from '../types';\nfunction getProviderFromRule(rule) {\n    // private with no provider means userPools\n    if (rule.allow === 'private' && !rule.provider) {\n        return ModelAttributeAuthProvider.USER_POOLS;\n    }\n    // public with no provider means apiKey\n    if (rule.allow === 'public' && !rule.provider) {\n        return ModelAttributeAuthProvider.API_KEY;\n    }\n    return rule.provider;\n}\nfunction sortAuthRulesWithPriority(rules) {\n    var allowSortPriority = [\n        ModelAttributeAuthAllow.CUSTOM,\n        ModelAttributeAuthAllow.OWNER,\n        ModelAttributeAuthAllow.GROUPS,\n        ModelAttributeAuthAllow.PRIVATE,\n        ModelAttributeAuthAllow.PUBLIC,\n    ];\n    var providerSortPriority = [\n        ModelAttributeAuthProvider.FUNCTION,\n        ModelAttributeAuthProvider.USER_POOLS,\n        ModelAttributeAuthProvider.OIDC,\n        ModelAttributeAuthProvider.IAM,\n        ModelAttributeAuthProvider.API_KEY,\n    ];\n    return __spread(rules).sort(function (a, b) {\n        if (a.allow === b.allow) {\n            return (providerSortPriority.indexOf(getProviderFromRule(a)) -\n                providerSortPriority.indexOf(getProviderFromRule(b)));\n        }\n        return (allowSortPriority.indexOf(a.allow) - allowSortPriority.indexOf(b.allow));\n    });\n}\nfunction getAuthRules(_a) {\n    var rules = _a.rules, currentUser = _a.currentUser;\n    // Using Set to ensure uniqueness\n    var authModes = new Set();\n    rules.forEach(function (rule) {\n        switch (rule.allow) {\n            case ModelAttributeAuthAllow.CUSTOM:\n                // custom with no provider -> function\n                if (!rule.provider ||\n                    rule.provider === ModelAttributeAuthProvider.FUNCTION) {\n                    authModes.add(GRAPHQL_AUTH_MODE.AWS_LAMBDA);\n                }\n                break;\n            case ModelAttributeAuthAllow.GROUPS:\n            case ModelAttributeAuthAllow.OWNER: {\n                // We shouldn't attempt User Pool or OIDC if there isn't an authenticated user\n                if (currentUser) {\n                    if (rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n                        authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n                    }\n                    else if (rule.provider === ModelAttributeAuthProvider.OIDC) {\n                        authModes.add(GRAPHQL_AUTH_MODE.OPENID_CONNECT);\n                    }\n                }\n                break;\n            }\n            case ModelAttributeAuthAllow.PRIVATE: {\n                // We shouldn't attempt private if there isn't an authenticated user\n                if (currentUser) {\n                    // private with no provider means userPools\n                    if (!rule.provider ||\n                        rule.provider === ModelAttributeAuthProvider.USER_POOLS) {\n                        authModes.add(GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS);\n                    }\n                    else if (rule.provider === ModelAttributeAuthProvider.IAM) {\n                        authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n                    }\n                }\n                break;\n            }\n            case ModelAttributeAuthAllow.PUBLIC: {\n                if (rule.provider === ModelAttributeAuthProvider.IAM) {\n                    authModes.add(GRAPHQL_AUTH_MODE.AWS_IAM);\n                }\n                else if (!rule.provider ||\n                    rule.provider === ModelAttributeAuthProvider.API_KEY) {\n                    // public with no provider means apiKey\n                    authModes.add(GRAPHQL_AUTH_MODE.API_KEY);\n                }\n                break;\n            }\n            default:\n                break;\n        }\n    });\n    return Array.from(authModes);\n}\n/**\n * Returns an array of auth modes to try based on the schema, model, and\n * authenticated user (or lack thereof). Rules are sourced from `getAuthRules`\n * and returned in the order they ought to be attempted.\n *\n * @see sortAuthRulesWithPriority\n * @see getAuthRules\n *\n * @param param0 The `{schema, modelName}` to inspect.\n * @returns A sorted array of auth modes to attempt.\n */\nexport var multiAuthStrategy = function (amplifyContext) {\n    return function (_a) {\n        var schema = _a.schema, modelName = _a.modelName;\n        return __awaiter(void 0, void 0, void 0, function () {\n            var currentUser, e_1, attributes, authAttribute, sortedRules;\n            var _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        amplifyContext.Auth = amplifyContext.Auth || Auth;\n                        _c.label = 1;\n                    case 1:\n                        _c.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, amplifyContext.Auth.currentAuthenticatedUser()];\n                    case 2:\n                        currentUser = _c.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _c.sent();\n                        return [3 /*break*/, 4];\n                    case 4:\n                        attributes = schema.namespaces.user.models[modelName].attributes;\n                        if (attributes) {\n                            authAttribute = attributes.find(function (attr) { return attr.type === 'auth'; });\n                            if ((_b = authAttribute === null || authAttribute === void 0 ? void 0 : authAttribute.properties) === null || _b === void 0 ? void 0 : _b.rules) {\n                                sortedRules = sortAuthRulesWithPriority(authAttribute.properties.rules);\n                                return [2 /*return*/, getAuthRules({ currentUser: currentUser, rules: sortedRules })];\n                            }\n                        }\n                        return [2 /*return*/, []];\n                }\n            });\n        });\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}