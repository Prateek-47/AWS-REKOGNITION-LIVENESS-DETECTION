{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, INVOCATION_ID_HEADER, REQUEST_HEADER, RETRY_MODES, THROTTLING_RETRY_DELAY_BASE } from \"@aws-sdk/util-retry\";\nimport { v4 } from \"uuid\";\nimport { getDefaultRetryQuota } from \"./defaultRetryQuota\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\nimport { asSdkError } from \"./util\";\nexport class StandardRetryStrategy {\n  constructor(maxAttemptsProvider, options) {\n    this.maxAttemptsProvider = maxAttemptsProvider;\n    this.mode = RETRY_MODES.STANDARD;\n    this.retryDecider = options?.retryDecider ?? defaultRetryDecider;\n    this.delayDecider = options?.delayDecider ?? defaultDelayDecider;\n    this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(INITIAL_RETRY_TOKENS);\n  }\n\n  shouldRetry(error, attempts, maxAttempts) {\n    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n  }\n\n  getMaxAttempts() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let maxAttempts;\n\n      try {\n        maxAttempts = yield _this.maxAttemptsProvider();\n      } catch (error) {\n        maxAttempts = DEFAULT_MAX_ATTEMPTS;\n      }\n\n      return maxAttempts;\n    })();\n  }\n\n  retry(next, args, options) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      let retryTokenAmount;\n      let attempts = 0;\n      let totalDelay = 0;\n      const maxAttempts = yield _this2.getMaxAttempts();\n      const {\n        request\n      } = args;\n\n      if (HttpRequest.isInstance(request)) {\n        request.headers[INVOCATION_ID_HEADER] = v4();\n      }\n\n      while (true) {\n        try {\n          if (HttpRequest.isInstance(request)) {\n            request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n          }\n\n          if (options?.beforeRequest) {\n            yield options.beforeRequest();\n          }\n\n          const {\n            response,\n            output\n          } = yield next(args);\n\n          if (options?.afterRequest) {\n            options.afterRequest(response);\n          }\n\n          _this2.retryQuota.releaseRetryTokens(retryTokenAmount);\n\n          output.$metadata.attempts = attempts + 1;\n          output.$metadata.totalRetryDelay = totalDelay;\n          return {\n            response,\n            output\n          };\n        } catch (e) {\n          const err = asSdkError(e);\n          attempts++;\n\n          if (_this2.shouldRetry(err, attempts, maxAttempts)) {\n            retryTokenAmount = _this2.retryQuota.retrieveRetryTokens(err);\n\n            const delayFromDecider = _this2.delayDecider(isThrottlingError(err) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);\n\n            const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n            const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n            totalDelay += delay;\n            yield new Promise(resolve => setTimeout(resolve, delay));\n            continue;\n          }\n\n          if (!err.$metadata) {\n            err.$metadata = {};\n          }\n\n          err.$metadata.attempts = attempts;\n          err.$metadata.totalRetryDelay = totalDelay;\n          throw err;\n        }\n      }\n    })();\n  }\n\n}\n\nconst getDelayFromRetryAfterHeader = response => {\n  if (!HttpResponse.isInstance(response)) return;\n  const retryAfterHeaderName = Object.keys(response.headers).find(key => key.toLowerCase() === \"retry-after\");\n  if (!retryAfterHeaderName) return;\n  const retryAfter = response.headers[retryAfterHeaderName];\n  const retryAfterSeconds = Number(retryAfter);\n  if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1000;\n  const retryAfterDate = new Date(retryAfter);\n  return retryAfterDate.getTime() - Date.now();\n};","map":{"version":3,"names":["HttpRequest","HttpResponse","isThrottlingError","DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_DELAY_BASE","INITIAL_RETRY_TOKENS","INVOCATION_ID_HEADER","REQUEST_HEADER","RETRY_MODES","THROTTLING_RETRY_DELAY_BASE","v4","getDefaultRetryQuota","defaultDelayDecider","defaultRetryDecider","asSdkError","StandardRetryStrategy","constructor","maxAttemptsProvider","options","mode","STANDARD","retryDecider","delayDecider","retryQuota","shouldRetry","error","attempts","maxAttempts","hasRetryTokens","getMaxAttempts","retry","next","args","retryTokenAmount","totalDelay","request","isInstance","headers","beforeRequest","response","output","afterRequest","releaseRetryTokens","$metadata","totalRetryDelay","e","err","retrieveRetryTokens","delayFromDecider","delayFromResponse","getDelayFromRetryAfterHeader","$response","delay","Math","max","Promise","resolve","setTimeout","retryAfterHeaderName","Object","keys","find","key","toLowerCase","retryAfter","retryAfterSeconds","Number","isNaN","retryAfterDate","Date","getTime","now"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/middleware-retry/dist-es/StandardRetryStrategy.js"],"sourcesContent":["import { HttpRequest, HttpResponse } from \"@aws-sdk/protocol-http\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport { DEFAULT_MAX_ATTEMPTS, DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, INVOCATION_ID_HEADER, REQUEST_HEADER, RETRY_MODES, THROTTLING_RETRY_DELAY_BASE, } from \"@aws-sdk/util-retry\";\nimport { v4 } from \"uuid\";\nimport { getDefaultRetryQuota } from \"./defaultRetryQuota\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\nimport { asSdkError } from \"./util\";\nexport class StandardRetryStrategy {\n    constructor(maxAttemptsProvider, options) {\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = RETRY_MODES.STANDARD;\n        this.retryDecider = options?.retryDecider ?? defaultRetryDecider;\n        this.delayDecider = options?.delayDecider ?? defaultDelayDecider;\n        this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(INITIAL_RETRY_TOKENS);\n    }\n    shouldRetry(error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    }\n    async getMaxAttempts() {\n        let maxAttempts;\n        try {\n            maxAttempts = await this.maxAttemptsProvider();\n        }\n        catch (error) {\n            maxAttempts = DEFAULT_MAX_ATTEMPTS;\n        }\n        return maxAttempts;\n    }\n    async retry(next, args, options) {\n        let retryTokenAmount;\n        let attempts = 0;\n        let totalDelay = 0;\n        const maxAttempts = await this.getMaxAttempts();\n        const { request } = args;\n        if (HttpRequest.isInstance(request)) {\n            request.headers[INVOCATION_ID_HEADER] = v4();\n        }\n        while (true) {\n            try {\n                if (HttpRequest.isInstance(request)) {\n                    request.headers[REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n                }\n                if (options?.beforeRequest) {\n                    await options.beforeRequest();\n                }\n                const { response, output } = await next(args);\n                if (options?.afterRequest) {\n                    options.afterRequest(response);\n                }\n                this.retryQuota.releaseRetryTokens(retryTokenAmount);\n                output.$metadata.attempts = attempts + 1;\n                output.$metadata.totalRetryDelay = totalDelay;\n                return { response, output };\n            }\n            catch (e) {\n                const err = asSdkError(e);\n                attempts++;\n                if (this.shouldRetry(err, attempts, maxAttempts)) {\n                    retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n                    const delayFromDecider = this.delayDecider(isThrottlingError(err) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);\n                    const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);\n                    const delay = Math.max(delayFromResponse || 0, delayFromDecider);\n                    totalDelay += delay;\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    continue;\n                }\n                if (!err.$metadata) {\n                    err.$metadata = {};\n                }\n                err.$metadata.attempts = attempts;\n                err.$metadata.totalRetryDelay = totalDelay;\n                throw err;\n            }\n        }\n    }\n}\nconst getDelayFromRetryAfterHeader = (response) => {\n    if (!HttpResponse.isInstance(response))\n        return;\n    const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === \"retry-after\");\n    if (!retryAfterHeaderName)\n        return;\n    const retryAfter = response.headers[retryAfterHeaderName];\n    const retryAfterSeconds = Number(retryAfter);\n    if (!Number.isNaN(retryAfterSeconds))\n        return retryAfterSeconds * 1000;\n    const retryAfterDate = new Date(retryAfter);\n    return retryAfterDate.getTime() - Date.now();\n};\n"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,wBAA1C;AACA,SAASC,iBAAT,QAAkC,uCAAlC;AACA,SAASC,oBAAT,EAA+BC,wBAA/B,EAAyDC,oBAAzD,EAA+EC,oBAA/E,EAAqGC,cAArG,EAAqHC,WAArH,EAAkIC,2BAAlI,QAAsK,qBAAtK;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,SAASC,UAAT,QAA2B,QAA3B;AACA,OAAO,MAAMC,qBAAN,CAA4B;EAC/BC,WAAW,CAACC,mBAAD,EAAsBC,OAAtB,EAA+B;IACtC,KAAKD,mBAAL,GAA2BA,mBAA3B;IACA,KAAKE,IAAL,GAAYX,WAAW,CAACY,QAAxB;IACA,KAAKC,YAAL,GAAoBH,OAAO,EAAEG,YAAT,IAAyBR,mBAA7C;IACA,KAAKS,YAAL,GAAoBJ,OAAO,EAAEI,YAAT,IAAyBV,mBAA7C;IACA,KAAKW,UAAL,GAAkBL,OAAO,EAAEK,UAAT,IAAuBZ,oBAAoB,CAACN,oBAAD,CAA7D;EACH;;EACDmB,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkBC,WAAlB,EAA+B;IACtC,OAAOD,QAAQ,GAAGC,WAAX,IAA0B,KAAKN,YAAL,CAAkBI,KAAlB,CAA1B,IAAsD,KAAKF,UAAL,CAAgBK,cAAhB,CAA+BH,KAA/B,CAA7D;EACH;;EACKI,cAAc,GAAG;IAAA;;IAAA;MACnB,IAAIF,WAAJ;;MACA,IAAI;QACAA,WAAW,SAAS,KAAI,CAACV,mBAAL,EAApB;MACH,CAFD,CAGA,OAAOQ,KAAP,EAAc;QACVE,WAAW,GAAGxB,oBAAd;MACH;;MACD,OAAOwB,WAAP;IARmB;EAStB;;EACKG,KAAK,CAACC,IAAD,EAAOC,IAAP,EAAad,OAAb,EAAsB;IAAA;;IAAA;MAC7B,IAAIe,gBAAJ;MACA,IAAIP,QAAQ,GAAG,CAAf;MACA,IAAIQ,UAAU,GAAG,CAAjB;MACA,MAAMP,WAAW,SAAS,MAAI,CAACE,cAAL,EAA1B;MACA,MAAM;QAAEM;MAAF,IAAcH,IAApB;;MACA,IAAIhC,WAAW,CAACoC,UAAZ,CAAuBD,OAAvB,CAAJ,EAAqC;QACjCA,OAAO,CAACE,OAAR,CAAgB/B,oBAAhB,IAAwCI,EAAE,EAA1C;MACH;;MACD,OAAO,IAAP,EAAa;QACT,IAAI;UACA,IAAIV,WAAW,CAACoC,UAAZ,CAAuBD,OAAvB,CAAJ,EAAqC;YACjCA,OAAO,CAACE,OAAR,CAAgB9B,cAAhB,IAAmC,WAAUmB,QAAQ,GAAG,CAAE,SAAQC,WAAY,EAA9E;UACH;;UACD,IAAIT,OAAO,EAAEoB,aAAb,EAA4B;YACxB,MAAMpB,OAAO,CAACoB,aAAR,EAAN;UACH;;UACD,MAAM;YAAEC,QAAF;YAAYC;UAAZ,UAA6BT,IAAI,CAACC,IAAD,CAAvC;;UACA,IAAId,OAAO,EAAEuB,YAAb,EAA2B;YACvBvB,OAAO,CAACuB,YAAR,CAAqBF,QAArB;UACH;;UACD,MAAI,CAAChB,UAAL,CAAgBmB,kBAAhB,CAAmCT,gBAAnC;;UACAO,MAAM,CAACG,SAAP,CAAiBjB,QAAjB,GAA4BA,QAAQ,GAAG,CAAvC;UACAc,MAAM,CAACG,SAAP,CAAiBC,eAAjB,GAAmCV,UAAnC;UACA,OAAO;YAAEK,QAAF;YAAYC;UAAZ,CAAP;QACH,CAfD,CAgBA,OAAOK,CAAP,EAAU;UACN,MAAMC,GAAG,GAAGhC,UAAU,CAAC+B,CAAD,CAAtB;UACAnB,QAAQ;;UACR,IAAI,MAAI,CAACF,WAAL,CAAiBsB,GAAjB,EAAsBpB,QAAtB,EAAgCC,WAAhC,CAAJ,EAAkD;YAC9CM,gBAAgB,GAAG,MAAI,CAACV,UAAL,CAAgBwB,mBAAhB,CAAoCD,GAApC,CAAnB;;YACA,MAAME,gBAAgB,GAAG,MAAI,CAAC1B,YAAL,CAAkBpB,iBAAiB,CAAC4C,GAAD,CAAjB,GAAyBrC,2BAAzB,GAAuDL,wBAAzE,EAAmGsB,QAAnG,CAAzB;;YACA,MAAMuB,iBAAiB,GAAGC,4BAA4B,CAACJ,GAAG,CAACK,SAAL,CAAtD;YACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAASL,iBAAiB,IAAI,CAA9B,EAAiCD,gBAAjC,CAAd;YACAd,UAAU,IAAIkB,KAAd;YACA,MAAM,IAAIG,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAUJ,KAAV,CAAnC,CAAN;YACA;UACH;;UACD,IAAI,CAACN,GAAG,CAACH,SAAT,EAAoB;YAChBG,GAAG,CAACH,SAAJ,GAAgB,EAAhB;UACH;;UACDG,GAAG,CAACH,SAAJ,CAAcjB,QAAd,GAAyBA,QAAzB;UACAoB,GAAG,CAACH,SAAJ,CAAcC,eAAd,GAAgCV,UAAhC;UACA,MAAMY,GAAN;QACH;MACJ;IA7C4B;EA8ChC;;AAnE8B;;AAqEnC,MAAMI,4BAA4B,GAAIX,QAAD,IAAc;EAC/C,IAAI,CAACtC,YAAY,CAACmC,UAAb,CAAwBG,QAAxB,CAAL,EACI;EACJ,MAAMmB,oBAAoB,GAAGC,MAAM,CAACC,IAAP,CAAYrB,QAAQ,CAACF,OAArB,EAA8BwB,IAA9B,CAAoCC,GAAD,IAASA,GAAG,CAACC,WAAJ,OAAsB,aAAlE,CAA7B;EACA,IAAI,CAACL,oBAAL,EACI;EACJ,MAAMM,UAAU,GAAGzB,QAAQ,CAACF,OAAT,CAAiBqB,oBAAjB,CAAnB;EACA,MAAMO,iBAAiB,GAAGC,MAAM,CAACF,UAAD,CAAhC;EACA,IAAI,CAACE,MAAM,CAACC,KAAP,CAAaF,iBAAb,CAAL,EACI,OAAOA,iBAAiB,GAAG,IAA3B;EACJ,MAAMG,cAAc,GAAG,IAAIC,IAAJ,CAASL,UAAT,CAAvB;EACA,OAAOI,cAAc,CAACE,OAAf,KAA2BD,IAAI,CAACE,GAAL,EAAlC;AACH,CAZD"},"metadata":{},"sourceType":"module"}