{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { CppDType } from './types';\nlet wasmTranspose;\n\nfunction setup(backend) {\n  wasmTranspose = backend.wasm.cwrap(Transpose, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'number', 'array', 'number']);\n}\n\nexport function transpose(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args; // Reduce any dimensions with size one. Lower-rank transpose kernel performs\n  // better due to simpler memory access pattern.\n\n  const [reducedShape, perm] = removeOneSizeDims(inputs.x.shape, attrs.perm);\n  let permIsNoOp = true;\n\n  for (let i = 0; i < perm.length; i++) {\n    if (perm[i] !== i) {\n      permIsNoOp = false;\n    }\n  }\n\n  const outShape = computeOutShape(inputs.x.shape, attrs.perm);\n  const x = {\n    dataId: inputs.x.dataId,\n    shape: reducedShape,\n    dtype: inputs.x.dtype\n  };\n\n  if (permIsNoOp) {\n    const cloned = identity({\n      inputs,\n      backend\n    });\n    cloned.shape = outShape;\n    return cloned;\n  }\n\n  const out = backend.makeOutput(outShape, x.dtype);\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const permBytes = new Uint8Array(new Int32Array(perm).buffer);\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  wasmTranspose(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], outId, permBytes, perm.length);\n  return out;\n}\n\nfunction computeOutShape(inShape, perm) {\n  const outShape = new Array(inShape.length);\n\n  for (let i = 0; i < outShape.length; i++) {\n    outShape[i] = inShape[perm[i]];\n  }\n\n  return outShape;\n}\n\nfunction removeOneSizeDims(shape, perm) {\n  const newShape = [];\n  const newPerm = [];\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n    }\n\n    if (shape[perm[i]] !== 1) {\n      newPerm.push(perm[i]);\n    }\n  }\n\n  for (let i = 0; i < newPerm.length; ++i) {\n    let minValIdx = -1;\n\n    for (let j = 0; j < newPerm.length; ++j) {\n      if (newPerm[j] >= i && (minValIdx === -1 || newPerm[minValIdx] > newPerm[j])) {\n        minValIdx = j;\n      }\n    }\n\n    newPerm[minValIdx] = i;\n  }\n\n  return [newShape, newPerm];\n}\n\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'wasm',\n  kernelFunc: transpose,\n  setupFunc: setup\n};","map":{"version":3,"names":["Transpose","identity","CppDType","wasmTranspose","setup","backend","wasm","cwrap","transpose","args","inputs","attrs","reducedShape","perm","removeOneSizeDims","x","shape","permIsNoOp","i","length","outShape","computeOutShape","dataId","dtype","cloned","out","makeOutput","xId","dataIdMap","get","id","outId","permBytes","Uint8Array","Int32Array","buffer","xShapeBytes","inShape","Array","newShape","newPerm","push","minValIdx","j","transposeConfig","kernelName","backendName","kernelFunc","setupFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Transpose.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { CppDType } from './types';\nlet wasmTranspose;\nfunction setup(backend) {\n    wasmTranspose = backend.wasm.cwrap(Transpose, null /* void */, [\n        'number',\n        'array',\n        'number',\n        'number',\n        'number',\n        'array',\n        'number',\n    ]);\n}\nexport function transpose(args) {\n    const { inputs, backend, attrs } = args;\n    // Reduce any dimensions with size one. Lower-rank transpose kernel performs\n    // better due to simpler memory access pattern.\n    const [reducedShape, perm] = removeOneSizeDims(inputs.x.shape, attrs.perm);\n    let permIsNoOp = true;\n    for (let i = 0; i < perm.length; i++) {\n        if (perm[i] !== i) {\n            permIsNoOp = false;\n        }\n    }\n    const outShape = computeOutShape(inputs.x.shape, attrs.perm);\n    const x = {\n        dataId: inputs.x.dataId,\n        shape: reducedShape,\n        dtype: inputs.x.dtype\n    };\n    if (permIsNoOp) {\n        const cloned = identity({ inputs, backend });\n        cloned.shape = outShape;\n        return cloned;\n    }\n    const out = backend.makeOutput(outShape, x.dtype);\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const permBytes = new Uint8Array(new Int32Array(perm).buffer);\n    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n    wasmTranspose(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], outId, permBytes, perm.length);\n    return out;\n}\nfunction computeOutShape(inShape, perm) {\n    const outShape = new Array(inShape.length);\n    for (let i = 0; i < outShape.length; i++) {\n        outShape[i] = inShape[perm[i]];\n    }\n    return outShape;\n}\nfunction removeOneSizeDims(shape, perm) {\n    const newShape = [];\n    const newPerm = [];\n    for (let i = 0; i < shape.length; ++i) {\n        if (shape[i] !== 1) {\n            newShape.push(shape[i]);\n        }\n        if (shape[perm[i]] !== 1) {\n            newPerm.push(perm[i]);\n        }\n    }\n    for (let i = 0; i < newPerm.length; ++i) {\n        let minValIdx = -1;\n        for (let j = 0; j < newPerm.length; ++j) {\n            if (newPerm[j] >= i &&\n                (minValIdx === -1 || newPerm[minValIdx] > newPerm[j])) {\n                minValIdx = j;\n            }\n        }\n        newPerm[minValIdx] = i;\n    }\n    return [newShape, newPerm];\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'wasm',\n    kernelFunc: transpose,\n    setupFunc: setup,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}