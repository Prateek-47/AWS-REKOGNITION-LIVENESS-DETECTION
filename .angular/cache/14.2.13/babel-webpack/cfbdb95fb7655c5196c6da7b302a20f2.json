{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator, __rest } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport * as Paho from '../vendor/paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConnectionState } from '../types/PubSub';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE } from '../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor } from '../utils/ReconnectionMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n  var filterArray = filter.split('/');\n  var length = filterArray.length;\n  var topicArray = topic.split('/');\n\n  for (var i = 0; i < length; ++i) {\n    var left = filterArray[i];\n    var right = topicArray[i];\n    if (left === '#') return topicArray.length >= length;\n    if (left !== '+' && left !== right) return false;\n  }\n\n  return length === topicArray.length;\n}\n\nvar ClientsQueue =\n/** @class */\nfunction () {\n  function ClientsQueue() {\n    this.promises = new Map();\n  }\n\n  ClientsQueue.prototype.get = function (clientId, clientFactory) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedPromise, newPromise;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        cachedPromise = this.promises.get(clientId);\n        if (cachedPromise) return [2\n        /*return*/\n        , cachedPromise];\n\n        if (clientFactory) {\n          newPromise = clientFactory(clientId);\n          this.promises.set(clientId, newPromise);\n          newPromise.catch(function () {\n            return _this.promises.delete(clientId);\n          });\n          return [2\n          /*return*/\n          , newPromise];\n        }\n\n        return [2\n        /*return*/\n        , undefined];\n      });\n    });\n  };\n\n  Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n    get: function () {\n      return Array.from(this.promises.keys());\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ClientsQueue.prototype.remove = function (clientId) {\n    this.promises.delete(clientId);\n  };\n\n  return ClientsQueue;\n}();\n\nvar dispatchPubSubEvent = function (event, data, message) {\n  Hub.dispatch('pubsub', {\n    event: event,\n    data: data,\n    message: message\n  }, 'PubSub', AMPLIFY_SYMBOL);\n};\n\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\n\nvar MqttOverWSProvider =\n/** @class */\nfunction (_super) {\n  __extends(MqttOverWSProvider, _super);\n\n  function MqttOverWSProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, __assign(__assign({}, options), {\n      clientId: options.clientId || uuid()\n    })) || this;\n\n    _this._clientsQueue = new ClientsQueue();\n    _this.connectionStateMonitor = new ConnectionStateMonitor();\n    _this.reconnectionMonitor = new ReconnectionMonitor();\n    _this._topicObservers = new Map();\n    _this._clientIdObservers = new Map(); // Monitor the connection health state and pass changes along to Hub\n\n    _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionStateChange) {\n      dispatchPubSubEvent(CONNECTION_STATE_CHANGE, {\n        provider: _this,\n        connectionState: connectionStateChange\n      }, \"Connection state is \" + connectionStateChange);\n      _this.connectionState = connectionStateChange; // Trigger reconnection when the connection is disrupted\n\n      if (connectionStateChange === ConnectionState.ConnectionDisrupted) {\n        _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n      } else if (connectionStateChange !== ConnectionState.Connecting) {\n        // Trigger connected to halt reconnection attempts\n        _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n      }\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n    get: function () {\n      return this.options.clientId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n    get: function () {\n      return Promise.resolve(this.options.aws_pubsub_endpoint);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n    get: function () {\n      return this._clientsQueue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n    get: function () {\n      return !this.options['aws_appsync_dangerously_connect_to_http_endpoint_for_testing'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MqttOverWSProvider.prototype.getProviderName = function () {\n    return 'MqttOverWSProvider';\n  };\n\n  MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n    var clientId = _a.clientId,\n        errorCode = _a.errorCode,\n        args = __rest(_a, [\"clientId\", \"errorCode\"]);\n\n    if (errorCode !== 0) {\n      logger.warn(clientId, JSON.stringify(__assign({\n        errorCode: errorCode\n      }, args), null, 2));\n\n      if (!clientId) {\n        return;\n      }\n\n      var clientIdObservers = this._clientIdObservers.get(clientId);\n\n      if (!clientIdObservers) {\n        return;\n      }\n\n      this.disconnect(clientId);\n    }\n  };\n\n  MqttOverWSProvider.prototype.newClient = function (_a) {\n    var url = _a.url,\n        clientId = _a.clientId;\n    return __awaiter(this, void 0, void 0, function () {\n      var client, connected;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            logger.debug('Creating new MQTT client', clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n            client = new Paho.Client(url, clientId);\n\n            client.onMessageArrived = function (_a) {\n              var topic = _a.destinationName,\n                  msg = _a.payloadString;\n\n              _this._onMessage(topic, msg);\n            };\n\n            client.onConnectionLost = function (_a) {\n              var errorCode = _a.errorCode,\n                  args = __rest(_a, [\"errorCode\"]);\n\n              _this.onDisconnect(__assign({\n                clientId: clientId,\n                errorCode: errorCode\n              }, args));\n\n              _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            };\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              client.connect({\n                useSSL: _this.isSSLEnabled,\n                mqttVersion: 3,\n                onSuccess: function () {\n                  return resolve(true);\n                },\n                onFailure: function () {\n                  if (clientId) _this._clientsQueue.remove(clientId);\n\n                  _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n\n                  resolve(false);\n                }\n              });\n            })];\n\n          case 1:\n            connected = _b.sent();\n\n            if (connected) {\n              this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n            }\n\n            return [2\n            /*return*/\n            , client];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.connect = function (clientId, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId, function (clientId) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var client;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.newClient(__assign(__assign({}, options), {\n                        clientId: clientId\n                      }))];\n\n                    case 1:\n                      client = _a.sent();\n\n                      if (client) {\n                        // Once connected, subscribe to all topics registered observers\n                        this._topicObservers.forEach(function (_value, key) {\n                          client.subscribe(key);\n                        });\n                      }\n\n                      return [2\n                      /*return*/\n                      , client];\n                  }\n                });\n              });\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(clientId)];\n\n          case 1:\n            client = _a.sent();\n\n            if (client && client.isConnected()) {\n              client.disconnect();\n            }\n\n            this.clientsQueue.remove(clientId);\n            this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype.publish = function (topics, msg) {\n    return __awaiter(this, void 0, void 0, function () {\n      var targetTopics, message, client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            targetTopics = [].concat(topics);\n            message = JSON.stringify(msg);\n            return [4\n            /*yield*/\n            , this.clientsQueue.get(this.clientId)];\n\n          case 1:\n            client = _a.sent();\n\n            if (client) {\n              logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n              targetTopics.forEach(function (topic) {\n                return client.send(topic, message);\n              });\n            } else {\n              logger.debug('Publishing to topic(s) failed', targetTopics.join(','), message);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n    try {\n      var matchedTopicObservers_1 = [];\n\n      this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n        if (mqttTopicMatch(observerTopic, topic)) {\n          matchedTopicObservers_1.push(observerForTopic);\n        }\n      });\n\n      var parsedMessage_1 = JSON.parse(msg);\n\n      if (typeof parsedMessage_1 === 'object') {\n        // @ts-ignore\n        parsedMessage_1[topicSymbol] = topic;\n      }\n\n      matchedTopicObservers_1.forEach(function (observersForTopic) {\n        observersForTopic.forEach(function (observer) {\n          return observer.next(parsedMessage_1);\n        });\n      });\n    } catch (error) {\n      logger.warn('Error handling message', error, msg);\n    }\n  };\n\n  MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    var targetTopics = [].concat(topics);\n    logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n    var reconnectSubscription;\n    return new Observable(function (observer) {\n      targetTopics.forEach(function (topic) {\n        // this._topicObservers is used to notify the observers according to the topic received on the message\n        var observersForTopic = _this._topicObservers.get(topic);\n\n        if (!observersForTopic) {\n          observersForTopic = new Set();\n\n          _this._topicObservers.set(topic, observersForTopic);\n        }\n\n        observersForTopic.add(observer);\n      });\n      var _a = options.clientId,\n          clientId = _a === void 0 ? _this.clientId : _a; // this._clientIdObservers is used to close observers when client gets disconnected\n\n      var observersForClientId = _this._clientIdObservers.get(clientId);\n\n      if (!observersForClientId) {\n        observersForClientId = new Set();\n      }\n\n      if (observersForClientId) {\n        observersForClientId.add(observer);\n\n        _this._clientIdObservers.set(clientId, observersForClientId);\n      }\n\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var getClient;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                getClient = function () {\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var _a, url, _b, client_1, e_1;\n\n                    return __generator(this, function (_c) {\n                      switch (_c.label) {\n                        case 0:\n                          _c.trys.push([0, 5,, 6]);\n\n                          _a = options.url;\n                          if (!(_a === void 0)) return [3\n                          /*break*/\n                          , 2];\n                          return [4\n                          /*yield*/\n                          , this.endpoint];\n\n                        case 1:\n                          _b = _c.sent();\n                          return [3\n                          /*break*/\n                          , 3];\n\n                        case 2:\n                          _b = _a;\n                          _c.label = 3;\n\n                        case 3:\n                          url = _b;\n                          return [4\n                          /*yield*/\n                          , this.connect(clientId, {\n                            url: url\n                          })];\n\n                        case 4:\n                          client_1 = _c.sent();\n\n                          if (client_1 !== undefined) {\n                            targetTopics.forEach(function (topic) {\n                              client_1.subscribe(topic);\n                            });\n                          }\n\n                          return [3\n                          /*break*/\n                          , 6];\n\n                        case 5:\n                          e_1 = _c.sent();\n                          logger.debug('Error forming connection', e_1);\n                          return [3\n                          /*break*/\n                          , 6];\n\n                        case 6:\n                          return [2\n                          /*return*/\n                          ];\n                      }\n                    });\n                  });\n                }; // Establish the initial connection\n\n\n                return [4\n                /*yield*/\n                , getClient()];\n\n              case 1:\n                // Establish the initial connection\n                _a.sent(); // Add an observable to the reconnection list to manage reconnection for this subscription\n\n\n                reconnectSubscription = new Observable(function (observer) {\n                  _this.reconnectionMonitor.addObserver(observer);\n                }).subscribe(function () {\n                  getClient();\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var client;\n\n          var _this = this;\n\n          var _a, _b;\n\n          return __generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this.clientsQueue.get(clientId)];\n\n              case 1:\n                client = _c.sent();\n                reconnectSubscription === null || reconnectSubscription === void 0 ? void 0 : reconnectSubscription.unsubscribe();\n\n                if (client) {\n                  (_a = this._clientIdObservers.get(clientId)) === null || _a === void 0 ? void 0 : _a.delete(observer); // No more observers per client => client not needed anymore\n\n                  if (((_b = this._clientIdObservers.get(clientId)) === null || _b === void 0 ? void 0 : _b.size) === 0) {\n                    this.disconnect(clientId);\n                    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n\n                    this._clientIdObservers.delete(clientId);\n                  }\n\n                  targetTopics.forEach(function (topic) {\n                    var observersForTopic = _this._topicObservers.get(topic) || new Set();\n                    observersForTopic.delete(observer); // if no observers exists for the topic, topic should be removed\n\n                    if (observersForTopic.size === 0) {\n                      _this._topicObservers.delete(topic);\n\n                      if (client.isConnected()) {\n                        client.unsubscribe(topic);\n                      }\n                    }\n                  });\n                }\n\n                return [2\n                /*return*/\n                , null];\n            }\n          });\n        });\n      };\n    });\n  };\n\n  return MqttOverWSProvider;\n}(AbstractPubSubProvider);\n\nexport { MqttOverWSProvider };","map":{"version":3,"names":["__assign","__awaiter","__extends","__generator","__rest","Paho","v4","uuid","Observable","AbstractPubSubProvider","ConnectionState","ConsoleLogger","Logger","Hub","ConnectionStateMonitor","CONNECTION_CHANGE","ReconnectEvent","ReconnectionMonitor","AMPLIFY_SYMBOL","CONNECTION_STATE_CHANGE","logger","mqttTopicMatch","filter","topic","filterArray","split","length","topicArray","i","left","right","ClientsQueue","promises","Map","prototype","get","clientId","clientFactory","cachedPromise","newPromise","_this","_a","set","catch","delete","undefined","Object","defineProperty","Array","from","keys","enumerable","configurable","remove","dispatchPubSubEvent","event","data","message","dispatch","topicSymbol","Symbol","MqttOverWSProvider","_super","options","call","_clientsQueue","connectionStateMonitor","reconnectionMonitor","_topicObservers","_clientIdObservers","connectionStateObservable","subscribe","connectionStateChange","provider","connectionState","ConnectionDisrupted","record","START_RECONNECT","Connecting","HALT_RECONNECT","Promise","resolve","aws_pubsub_endpoint","getProviderName","onDisconnect","errorCode","args","warn","JSON","stringify","clientIdObservers","disconnect","newClient","url","client","connected","_b","label","debug","OPENING_CONNECTION","Client","onMessageArrived","destinationName","msg","payloadString","_onMessage","onConnectionLost","CLOSED","reject","connect","useSSL","isSSLEnabled","mqttVersion","onSuccess","onFailure","sent","CONNECTION_ESTABLISHED","clientsQueue","forEach","_value","key","isConnected","publish","topics","targetTopics","concat","join","send","matchedTopicObservers_1","observerForTopic","observerTopic","push","parsedMessage_1","parse","observersForTopic","observer","next","error","reconnectSubscription","Set","add","observersForClientId","getClient","client_1","e_1","_c","trys","endpoint","addObserver","unsubscribe","size","CLOSING_CONNECTION"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/pubsub/lib-esm/Providers/MqttOverWSProvider.js"],"sourcesContent":["import { __assign, __awaiter, __extends, __generator, __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport * as Paho from '../vendor/paho-mqtt';\nimport { v4 as uuid } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { AbstractPubSubProvider } from './PubSubProvider';\nimport { ConnectionState, } from '../types/PubSub';\nimport { ConsoleLogger as Logger, Hub } from '@aws-amplify/core';\nimport { ConnectionStateMonitor, CONNECTION_CHANGE, } from '../utils/ConnectionStateMonitor';\nimport { ReconnectEvent, ReconnectionMonitor, } from '../utils/ReconnectionMonitor';\nimport { AMPLIFY_SYMBOL, CONNECTION_STATE_CHANGE } from './constants';\nvar logger = new Logger('MqttOverWSProvider');\nexport function mqttTopicMatch(filter, topic) {\n    var filterArray = filter.split('/');\n    var length = filterArray.length;\n    var topicArray = topic.split('/');\n    for (var i = 0; i < length; ++i) {\n        var left = filterArray[i];\n        var right = topicArray[i];\n        if (left === '#')\n            return topicArray.length >= length;\n        if (left !== '+' && left !== right)\n            return false;\n    }\n    return length === topicArray.length;\n}\nvar ClientsQueue = /** @class */ (function () {\n    function ClientsQueue() {\n        this.promises = new Map();\n    }\n    ClientsQueue.prototype.get = function (clientId, clientFactory) {\n        return __awaiter(this, void 0, void 0, function () {\n            var cachedPromise, newPromise;\n            var _this = this;\n            return __generator(this, function (_a) {\n                cachedPromise = this.promises.get(clientId);\n                if (cachedPromise)\n                    return [2 /*return*/, cachedPromise];\n                if (clientFactory) {\n                    newPromise = clientFactory(clientId);\n                    this.promises.set(clientId, newPromise);\n                    newPromise.catch(function () { return _this.promises.delete(clientId); });\n                    return [2 /*return*/, newPromise];\n                }\n                return [2 /*return*/, undefined];\n            });\n        });\n    };\n    Object.defineProperty(ClientsQueue.prototype, \"allClients\", {\n        get: function () {\n            return Array.from(this.promises.keys());\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ClientsQueue.prototype.remove = function (clientId) {\n        this.promises.delete(clientId);\n    };\n    return ClientsQueue;\n}());\nvar dispatchPubSubEvent = function (event, data, message) {\n    Hub.dispatch('pubsub', { event: event, data: data, message: message }, 'PubSub', AMPLIFY_SYMBOL);\n};\nvar topicSymbol = typeof Symbol !== 'undefined' ? Symbol('topic') : '@@topic';\nvar MqttOverWSProvider = /** @class */ (function (_super) {\n    __extends(MqttOverWSProvider, _super);\n    function MqttOverWSProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, __assign(__assign({}, options), { clientId: options.clientId || uuid() })) || this;\n        _this._clientsQueue = new ClientsQueue();\n        _this.connectionStateMonitor = new ConnectionStateMonitor();\n        _this.reconnectionMonitor = new ReconnectionMonitor();\n        _this._topicObservers = new Map();\n        _this._clientIdObservers = new Map();\n        // Monitor the connection health state and pass changes along to Hub\n        _this.connectionStateMonitor.connectionStateObservable.subscribe(function (connectionStateChange) {\n            dispatchPubSubEvent(CONNECTION_STATE_CHANGE, {\n                provider: _this,\n                connectionState: connectionStateChange,\n            }, \"Connection state is \" + connectionStateChange);\n            _this.connectionState = connectionStateChange;\n            // Trigger reconnection when the connection is disrupted\n            if (connectionStateChange === ConnectionState.ConnectionDisrupted) {\n                _this.reconnectionMonitor.record(ReconnectEvent.START_RECONNECT);\n            }\n            else if (connectionStateChange !== ConnectionState.Connecting) {\n                // Trigger connected to halt reconnection attempts\n                _this.reconnectionMonitor.record(ReconnectEvent.HALT_RECONNECT);\n            }\n        });\n        return _this;\n    }\n    Object.defineProperty(MqttOverWSProvider.prototype, \"clientId\", {\n        get: function () {\n            return this.options.clientId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MqttOverWSProvider.prototype, \"endpoint\", {\n        get: function () {\n            return Promise.resolve(this.options.aws_pubsub_endpoint);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MqttOverWSProvider.prototype, \"clientsQueue\", {\n        get: function () {\n            return this._clientsQueue;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MqttOverWSProvider.prototype, \"isSSLEnabled\", {\n        get: function () {\n            return !this.options['aws_appsync_dangerously_connect_to_http_endpoint_for_testing'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MqttOverWSProvider.prototype.getProviderName = function () {\n        return 'MqttOverWSProvider';\n    };\n    MqttOverWSProvider.prototype.onDisconnect = function (_a) {\n        var clientId = _a.clientId, errorCode = _a.errorCode, args = __rest(_a, [\"clientId\", \"errorCode\"]);\n        if (errorCode !== 0) {\n            logger.warn(clientId, JSON.stringify(__assign({ errorCode: errorCode }, args), null, 2));\n            if (!clientId) {\n                return;\n            }\n            var clientIdObservers = this._clientIdObservers.get(clientId);\n            if (!clientIdObservers) {\n                return;\n            }\n            this.disconnect(clientId);\n        }\n    };\n    MqttOverWSProvider.prototype.newClient = function (_a) {\n        var url = _a.url, clientId = _a.clientId;\n        return __awaiter(this, void 0, void 0, function () {\n            var client, connected;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        logger.debug('Creating new MQTT client', clientId);\n                        this.connectionStateMonitor.record(CONNECTION_CHANGE.OPENING_CONNECTION);\n                        client = new Paho.Client(url, clientId);\n                        client.onMessageArrived = function (_a) {\n                            var topic = _a.destinationName, msg = _a.payloadString;\n                            _this._onMessage(topic, msg);\n                        };\n                        client.onConnectionLost = function (_a) {\n                            var errorCode = _a.errorCode, args = __rest(_a, [\"errorCode\"]);\n                            _this.onDisconnect(__assign({ clientId: clientId, errorCode: errorCode }, args));\n                            _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                        };\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                client.connect({\n                                    useSSL: _this.isSSLEnabled,\n                                    mqttVersion: 3,\n                                    onSuccess: function () { return resolve(true); },\n                                    onFailure: function () {\n                                        if (clientId)\n                                            _this._clientsQueue.remove(clientId);\n                                        _this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                                        resolve(false);\n                                    },\n                                });\n                            })];\n                    case 1:\n                        connected = _b.sent();\n                        if (connected) {\n                            this.connectionStateMonitor.record(CONNECTION_CHANGE.CONNECTION_ESTABLISHED);\n                        }\n                        return [2 /*return*/, client];\n                }\n            });\n        });\n    };\n    MqttOverWSProvider.prototype.connect = function (clientId, options) {\n        if (options === void 0) { options = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.clientsQueue.get(clientId, function (clientId) { return __awaiter(_this, void 0, void 0, function () {\n                            var client;\n                            return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, this.newClient(__assign(__assign({}, options), { clientId: clientId }))];\n                                    case 1:\n                                        client = _a.sent();\n                                        if (client) {\n                                            // Once connected, subscribe to all topics registered observers\n                                            this._topicObservers.forEach(function (_value, key) {\n                                                client.subscribe(key);\n                                            });\n                                        }\n                                        return [2 /*return*/, client];\n                                }\n                            });\n                        }); })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    MqttOverWSProvider.prototype.disconnect = function (clientId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var client;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.clientsQueue.get(clientId)];\n                    case 1:\n                        client = _a.sent();\n                        if (client && client.isConnected()) {\n                            client.disconnect();\n                        }\n                        this.clientsQueue.remove(clientId);\n                        this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSED);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MqttOverWSProvider.prototype.publish = function (topics, msg) {\n        return __awaiter(this, void 0, void 0, function () {\n            var targetTopics, message, client;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        targetTopics = [].concat(topics);\n                        message = JSON.stringify(msg);\n                        return [4 /*yield*/, this.clientsQueue.get(this.clientId)];\n                    case 1:\n                        client = _a.sent();\n                        if (client) {\n                            logger.debug('Publishing to topic(s)', targetTopics.join(','), message);\n                            targetTopics.forEach(function (topic) { return client.send(topic, message); });\n                        }\n                        else {\n                            logger.debug('Publishing to topic(s) failed', targetTopics.join(','), message);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MqttOverWSProvider.prototype._onMessage = function (topic, msg) {\n        try {\n            var matchedTopicObservers_1 = [];\n            this._topicObservers.forEach(function (observerForTopic, observerTopic) {\n                if (mqttTopicMatch(observerTopic, topic)) {\n                    matchedTopicObservers_1.push(observerForTopic);\n                }\n            });\n            var parsedMessage_1 = JSON.parse(msg);\n            if (typeof parsedMessage_1 === 'object') {\n                // @ts-ignore\n                parsedMessage_1[topicSymbol] = topic;\n            }\n            matchedTopicObservers_1.forEach(function (observersForTopic) {\n                observersForTopic.forEach(function (observer) { return observer.next(parsedMessage_1); });\n            });\n        }\n        catch (error) {\n            logger.warn('Error handling message', error, msg);\n        }\n    };\n    MqttOverWSProvider.prototype.subscribe = function (topics, options) {\n        var _this = this;\n        if (options === void 0) { options = {}; }\n        var targetTopics = [].concat(topics);\n        logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n        var reconnectSubscription;\n        return new Observable(function (observer) {\n            targetTopics.forEach(function (topic) {\n                // this._topicObservers is used to notify the observers according to the topic received on the message\n                var observersForTopic = _this._topicObservers.get(topic);\n                if (!observersForTopic) {\n                    observersForTopic = new Set();\n                    _this._topicObservers.set(topic, observersForTopic);\n                }\n                observersForTopic.add(observer);\n            });\n            var _a = options.clientId, clientId = _a === void 0 ? _this.clientId : _a;\n            // this._clientIdObservers is used to close observers when client gets disconnected\n            var observersForClientId = _this._clientIdObservers.get(clientId);\n            if (!observersForClientId) {\n                observersForClientId = new Set();\n            }\n            if (observersForClientId) {\n                observersForClientId.add(observer);\n                _this._clientIdObservers.set(clientId, observersForClientId);\n            }\n            (function () { return __awaiter(_this, void 0, void 0, function () {\n                var getClient;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            getClient = function () { return __awaiter(_this, void 0, void 0, function () {\n                                var _a, url, _b, client_1, e_1;\n                                return __generator(this, function (_c) {\n                                    switch (_c.label) {\n                                        case 0:\n                                            _c.trys.push([0, 5, , 6]);\n                                            _a = options.url;\n                                            if (!(_a === void 0)) return [3 /*break*/, 2];\n                                            return [4 /*yield*/, this.endpoint];\n                                        case 1:\n                                            _b = _c.sent();\n                                            return [3 /*break*/, 3];\n                                        case 2:\n                                            _b = _a;\n                                            _c.label = 3;\n                                        case 3:\n                                            url = _b;\n                                            return [4 /*yield*/, this.connect(clientId, { url: url })];\n                                        case 4:\n                                            client_1 = _c.sent();\n                                            if (client_1 !== undefined) {\n                                                targetTopics.forEach(function (topic) {\n                                                    client_1.subscribe(topic);\n                                                });\n                                            }\n                                            return [3 /*break*/, 6];\n                                        case 5:\n                                            e_1 = _c.sent();\n                                            logger.debug('Error forming connection', e_1);\n                                            return [3 /*break*/, 6];\n                                        case 6: return [2 /*return*/];\n                                    }\n                                });\n                            }); };\n                            // Establish the initial connection\n                            return [4 /*yield*/, getClient()];\n                        case 1:\n                            // Establish the initial connection\n                            _a.sent();\n                            // Add an observable to the reconnection list to manage reconnection for this subscription\n                            reconnectSubscription = new Observable(function (observer) {\n                                _this.reconnectionMonitor.addObserver(observer);\n                            }).subscribe(function () {\n                                getClient();\n                            });\n                            return [2 /*return*/];\n                    }\n                });\n            }); })();\n            return function () { return __awaiter(_this, void 0, void 0, function () {\n                var client;\n                var _this = this;\n                var _a, _b;\n                return __generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0: return [4 /*yield*/, this.clientsQueue.get(clientId)];\n                        case 1:\n                            client = _c.sent();\n                            reconnectSubscription === null || reconnectSubscription === void 0 ? void 0 : reconnectSubscription.unsubscribe();\n                            if (client) {\n                                (_a = this._clientIdObservers.get(clientId)) === null || _a === void 0 ? void 0 : _a.delete(observer);\n                                // No more observers per client => client not needed anymore\n                                if (((_b = this._clientIdObservers.get(clientId)) === null || _b === void 0 ? void 0 : _b.size) === 0) {\n                                    this.disconnect(clientId);\n                                    this.connectionStateMonitor.record(CONNECTION_CHANGE.CLOSING_CONNECTION);\n                                    this._clientIdObservers.delete(clientId);\n                                }\n                                targetTopics.forEach(function (topic) {\n                                    var observersForTopic = _this._topicObservers.get(topic) ||\n                                        new Set();\n                                    observersForTopic.delete(observer);\n                                    // if no observers exists for the topic, topic should be removed\n                                    if (observersForTopic.size === 0) {\n                                        _this._topicObservers.delete(topic);\n                                        if (client.isConnected()) {\n                                            client.unsubscribe(topic);\n                                        }\n                                    }\n                                });\n                            }\n                            return [2 /*return*/, null];\n                    }\n                });\n            }); };\n        });\n    };\n    return MqttOverWSProvider;\n}(AbstractPubSubProvider));\nexport { MqttOverWSProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}