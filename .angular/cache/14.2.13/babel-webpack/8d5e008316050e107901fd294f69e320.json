{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, util } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nimport { CppDType } from './types';\nlet wasmFunc;\n\nfunction setup(backend) {\n  wasmFunc = backend.wasm.cwrap(ArgMax, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction argmax(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n  const {\n    transposed,\n    axes,\n    inputWasTransposed\n  } = permuteAxesAndTranspose(x, axis, backend);\n\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n    }\n  }\n\n  const outShape = input.shape.slice(0, -1);\n  const out = backend.makeOutput(outShape, 'int32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const outerSize = util.sizeFromShape(out.shape);\n  const innerSize = input.shape[axes[0]];\n  wasmFunc(inputId, CppDType[input.dtype], outerSize, innerSize, outId);\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  return out;\n}\n\nexport const argMaxConfig = {\n  kernelName: ArgMax,\n  backendName: 'wasm',\n  kernelFunc: argmax,\n  setupFunc: setup\n};","map":{"version":3,"names":["ArgMax","util","permuteAxesAndTranspose","CppDType","wasmFunc","setup","backend","wasm","cwrap","argmax","args","inputs","attrs","axis","x","xId","dataIdMap","get","dataId","id","inputId","input","transposed","axes","inputWasTransposed","transposedId","outShape","shape","slice","out","makeOutput","outId","outerSize","sizeFromShape","innerSize","dtype","disposeData","argMaxConfig","kernelName","backendName","kernelFunc","setupFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/ArgMax.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, util } from '@tensorflow/tfjs-core';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nimport { CppDType } from './types';\nlet wasmFunc;\nfunction setup(backend) {\n    wasmFunc = backend.wasm.cwrap(ArgMax, null /* void */, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'number' // out_id\n    ]);\n}\nfunction argmax(args) {\n    const { backend, inputs, attrs } = args;\n    const { axis } = attrs;\n    const { x } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    let inputId = xId;\n    let input = x;\n    const { transposed, axes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend);\n    if (inputWasTransposed) {\n        const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n        if (transposedId !== xId) {\n            // transpose was not a no-op. We will need to dispose of this\n            // once we are done.\n            input = transposed;\n            inputId = transposedId;\n        }\n    }\n    const outShape = input.shape.slice(0, -1);\n    const out = backend.makeOutput(outShape, 'int32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const outerSize = util.sizeFromShape(out.shape);\n    const innerSize = input.shape[axes[0]];\n    wasmFunc(inputId, CppDType[input.dtype], outerSize, innerSize, outId);\n    if (inputWasTransposed) {\n        // dispose of the transposed tensor.\n        backend.disposeData(transposed.dataId);\n    }\n    return out;\n}\nexport const argMaxConfig = {\n    kernelName: ArgMax,\n    backendName: 'wasm',\n    kernelFunc: argmax,\n    setupFunc: setup\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,EAAiBC,IAAjB,QAA6B,uBAA7B;AACA,SAASC,uBAAT,QAAwC,gBAAxC;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,IAAIC,QAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,QAAQ,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBR,MAAnB,EAA2B;EAAK;EAAhC,EAA4C,CACnD,QADmD,EAEnD,QAFmD,EAGnD,QAHmD,EAInD,QAJmD,EAKnD,QALmD,CAK1C;EAL0C,CAA5C,CAAX;AAOH;;AACD,SAASS,MAAT,CAAgBC,IAAhB,EAAsB;EAClB,MAAM;IAAEJ,OAAF;IAAWK,MAAX;IAAmBC;EAAnB,IAA6BF,IAAnC;EACA,MAAM;IAAEG;EAAF,IAAWD,KAAjB;EACA,MAAM;IAAEE;EAAF,IAAQH,MAAd;EACA,MAAMI,GAAG,GAAGT,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBH,CAAC,CAACI,MAAxB,EAAgCC,EAA5C;EACA,IAAIC,OAAO,GAAGL,GAAd;EACA,IAAIM,KAAK,GAAGP,CAAZ;EACA,MAAM;IAAEQ,UAAF;IAAcC,IAAd;IAAoBC;EAApB,IAA2CtB,uBAAuB,CAACY,CAAD,EAAID,IAAJ,EAAUP,OAAV,CAAxE;;EACA,IAAIkB,kBAAJ,EAAwB;IACpB,MAAMC,YAAY,GAAGnB,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBK,UAAU,CAACJ,MAAjC,EAAyCC,EAA9D;;IACA,IAAIM,YAAY,KAAKV,GAArB,EAA0B;MACtB;MACA;MACAM,KAAK,GAAGC,UAAR;MACAF,OAAO,GAAGK,YAAV;IACH;EACJ;;EACD,MAAMC,QAAQ,GAAGL,KAAK,CAACM,KAAN,CAAYC,KAAZ,CAAkB,CAAlB,EAAqB,CAAC,CAAtB,CAAjB;EACA,MAAMC,GAAG,GAAGvB,OAAO,CAACwB,UAAR,CAAmBJ,QAAnB,EAA6B,OAA7B,CAAZ;EACA,MAAMK,KAAK,GAAGzB,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBY,GAAG,CAACX,MAA1B,EAAkCC,EAAhD;EACA,MAAMa,SAAS,GAAG/B,IAAI,CAACgC,aAAL,CAAmBJ,GAAG,CAACF,KAAvB,CAAlB;EACA,MAAMO,SAAS,GAAGb,KAAK,CAACM,KAAN,CAAYJ,IAAI,CAAC,CAAD,CAAhB,CAAlB;EACAnB,QAAQ,CAACgB,OAAD,EAAUjB,QAAQ,CAACkB,KAAK,CAACc,KAAP,CAAlB,EAAiCH,SAAjC,EAA4CE,SAA5C,EAAuDH,KAAvD,CAAR;;EACA,IAAIP,kBAAJ,EAAwB;IACpB;IACAlB,OAAO,CAAC8B,WAAR,CAAoBd,UAAU,CAACJ,MAA/B;EACH;;EACD,OAAOW,GAAP;AACH;;AACD,OAAO,MAAMQ,YAAY,GAAG;EACxBC,UAAU,EAAEtC,MADY;EAExBuC,WAAW,EAAE,MAFW;EAGxBC,UAAU,EAAE/B,MAHY;EAIxBgC,SAAS,EAAEpC;AAJa,CAArB"},"metadata":{},"sourceType":"module"}