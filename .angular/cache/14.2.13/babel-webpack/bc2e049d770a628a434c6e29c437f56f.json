{"ast":null,"code":"import { __values } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { isFieldAssociation } from '../types';\n/**\n * Defines a relationship from a LOCAL model.field to a REMOTE model.field and helps\n * navigate the relationship, providing a simplified peek at the relationship details\n * pertinent to setting FK's and constructing join conditions.\n *\n * Because I mean, relationships are tough.\n *\n */\n\nvar ModelRelationship =\n/** @class */\nfunction () {\n  /**\n   * @param modelDefinition The \"local\" model.\n   * @param field The \"local\" model field.\n   */\n  function ModelRelationship(model, field) {\n    if (!isFieldAssociation(model.schema, field)) {\n      throw new Error(model.schema.name + \".\" + field + \" is not a relationship.\");\n    }\n\n    this.localModel = model;\n    this._field = field;\n  }\n  /**\n   * Returns a ModelRelationship for the the given model and field if the pair\n   * indicates a relationship to another model. Else, returns `null`.\n   *\n   * @param model The model the relationship field exists in.\n   * @param field The field that may relates the local model to the remote model.\n   */\n\n\n  ModelRelationship.from = function (model, field) {\n    if (isFieldAssociation(model.schema, field)) {\n      return new this(model, field);\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Enumerates all valid `ModelRelationship`'s on the given model.\n   *\n   * @param model The model definition to enumerate relationships of.\n   */\n\n\n  ModelRelationship.allFrom = function (model) {\n    var e_1, _a;\n\n    var relationships = [];\n\n    try {\n      for (var _b = __values(Object.keys(model.schema.fields)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var field = _c.value;\n        var relationship = ModelRelationship.from(model, field);\n        relationship && relationships.push(relationship);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return relationships;\n  };\n\n  Object.defineProperty(ModelRelationship.prototype, \"localDefinition\", {\n    get: function () {\n      return this.localModel.schema;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"field\", {\n    /**\n     * The virtual/computed field on the local model that should contain\n     * the related model.\n     */\n    get: function () {\n      return this._field;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"localConstructor\", {\n    /**\n     * The constructor that can be used to query DataStore or create instance for\n     * the local model.\n     */\n    get: function () {\n      return this.localModel.builder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"type\", {\n    /**\n     * The name/type of the relationship the local model has with the remote model\n     * via the defined local model field.\n     */\n    get: function () {\n      return this.localAssocation.connectionType;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"localAssocation\", {\n    /**\n     * Raw details about the local FK as-is from the local model's field definition in\n     * the schema. This field requires interpretation.\n     *\n     * @see localJoinFields\n     * @see localAssociatedWith\n     */\n    get: function () {\n      return this.localDefinition.fields[this.field].association;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"localJoinFields\", {\n    /**\n     * The field names on the local model that can be used to query or queried to match\n     * with instances of the remote model.\n     *\n     * Fields are returned in-order to match the order of `this.remoteKeyFields`.\n     */\n    get: function () {\n      /**\n       * This is relatively straightforward, actually.\n       *\n       * If we have explicitly stated targetNames, codegen is telling us authoritatively\n       * to use those fields for this relationship. The local model \"points to\" fields\n       * in the remote one.\n       *\n       * In other cases, the remote model points to this one's\n       */\n      if (this.localAssocation.targetName) {\n        // This case is theoretically unnecessary going forward.\n        return [this.localAssocation.targetName];\n      } else if (this.localAssocation.targetNames) {\n        return this.localAssocation.targetNames;\n      } else {\n        return this.localPKFields;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"localPKFields\", {\n    /**\n     * The field names on the local model that uniquely identify it.\n     *\n     * These fields may or may not be relevant to the join fields.\n     */\n    get: function () {\n      return this.localModel.pkField;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"remoteDefinition\", {\n    get: function () {\n      var _a;\n\n      return (_a = this.remoteModelType.modelConstructor) === null || _a === void 0 ? void 0 : _a.schema;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"remoteModelType\", {\n    get: function () {\n      return this.localDefinition.fields[this.field].type;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"remoteModelConstructor\", {\n    /**\n     * Constructor that can be used to query DataStore or create instances for\n     * the remote model.\n     */\n    get: function () {\n      return this.remoteModelType.modelConstructor.builder;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"remotePKFields\", {\n    /**\n     * The field names on the remote model that uniquely identify it.\n     *\n     * These fields may or may not be relevant to the join fields.\n     */\n    get: function () {\n      var _a;\n\n      return ((_a = this.remoteModelType.modelConstructor) === null || _a === void 0 ? void 0 : _a.pkField) || ['id'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"localAssociatedWith\", {\n    /**\n     * The `associatedWith` fields from the local perspective.\n     *\n     * When present, these fields indicate which fields on the remote model to use\n     * when looking for a remote association and/or determining the final remote\n     * key fields.\n     */\n    get: function () {\n      if (this.localAssocation.connectionType === 'HAS_MANY' || this.localAssocation.connectionType === 'HAS_ONE') {\n        // This de-arraying is theoretically unnecessary going forward.\n        return Array.isArray(this.localAssocation.associatedWith) ? this.localAssocation.associatedWith : [this.localAssocation.associatedWith];\n      } else {\n        return undefined;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"explicitRemoteAssociation\", {\n    /**\n     * The `remote` model's associated field's `assocation` metadata, if\n     * present.\n     *\n     * This is used when determining if the remote model's associated field\n     * specifies which FK fields to use. If this value is `undefined`, the\n     * name of the remote field (`this.localAssociatedWith`) *is* the remote\n     * key field.\n     */\n    get: function () {\n      var _a;\n\n      if (this.localAssociatedWith) {\n        if (this.localAssociatedWith.length === 1) {\n          return (_a = this.remoteDefinition.fields[this.localAssociatedWith[0]]) === null || _a === void 0 ? void 0 : _a.association;\n        } else {\n          return undefined;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"remoteJoinFields\", {\n    /**\n     * The field names on the remote model that can used to query or queried to match\n     * with instances of the local model.\n     *\n     * Fields are returned in-order to match the order of `this.localKeyFields`.\n     */\n    get: function () {\n      /**\n       * If the local relationship explicitly names \"associated with\" fields, we\n       * need to see if this points direction to a reciprocating assocation. If it\n       * does, the remote assocation indicates what fields to use.\n       */\n      var _a, _b, _c;\n\n      if ((_a = this.explicitRemoteAssociation) === null || _a === void 0 ? void 0 : _a.targetName) {\n        // This case is theoretically unnecessary going forward.\n        return [this.explicitRemoteAssociation.targetName];\n      } else if ((_b = this.explicitRemoteAssociation) === null || _b === void 0 ? void 0 : _b.targetNames) {\n        return (_c = this.explicitRemoteAssociation) === null || _c === void 0 ? void 0 : _c.targetNames;\n      } else if (this.localAssociatedWith) {\n        return this.localAssociatedWith;\n      } else {\n        return this.remotePKFields;\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModelRelationship.prototype, \"isComplete\", {\n    /**\n     * Whether this relationship everything necessary to get, set, and query from\n     * the perspective of the local model provided at instantiation.\n     */\n    get: function () {\n      return this.localJoinFields.length > 0 && this.remoteJoinFields.length > 0;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  /**\n   * Creates an FK mapper object with respect to the given related instance.\n   *\n   * E.g., if the local FK fields are `[parentId, parentName]` and point to\n   * `[customId, name]` on the remote model, `createLocalFKObject(remote)`\n   * will return:\n   *\n   * ```\n   * {\n   * \tparentId: remote.customId,\n   * \tparentName: remote.name\n   * }\n   * ```\n   *\n   * @param remote The remote related instance.\n   */\n\n  ModelRelationship.prototype.createLocalFKObject = function (remote) {\n    var fk = {};\n\n    for (var i = 0; i < this.localJoinFields.length; i++) {\n      fk[this.localJoinFields[i]] = remote[this.remoteJoinFields[i]];\n    }\n\n    return fk;\n  };\n  /**\n   * Creates an query mapper object to help fetch the remote instance(s) or\n   * `null` if any of the necessary local fields are `null` or `undefined`.\n   *\n   * E.g., if the local FK fields are `[parentId, parentName]` and point to\n   * `[customId, name]` on the remote model, `createLocalFKObject(remote)`\n   * will return:\n   *\n   * ```\n   * {\n   * \tcustomId: local.parentId\n   * \tname: local.parentName\n   * }\n   * ```\n   *\n   * If the local fields are not populated, returns\n   *\n   * @param local The local instance.\n   */\n\n\n  ModelRelationship.prototype.createRemoteQueryObject = function (local) {\n    var query = {};\n\n    for (var i = 0; i < this.remoteJoinFields.length; i++) {\n      var localValue = local[this.localJoinFields[i]];\n      if (localValue === null || localValue === undefined) return null;\n      query[this.remoteJoinFields[i]] = local[this.localJoinFields[i]];\n    }\n\n    return query;\n  };\n\n  return ModelRelationship;\n}();\n\nexport { ModelRelationship };","map":{"version":3,"names":["__values","isFieldAssociation","ModelRelationship","model","field","schema","Error","name","localModel","_field","from","allFrom","e_1","_a","relationships","_b","Object","keys","fields","_c","next","done","value","relationship","push","e_1_1","error","return","call","defineProperty","prototype","get","enumerable","configurable","builder","localAssocation","connectionType","localDefinition","association","targetName","targetNames","localPKFields","pkField","remoteModelType","modelConstructor","type","Array","isArray","associatedWith","undefined","localAssociatedWith","length","remoteDefinition","explicitRemoteAssociation","remotePKFields","localJoinFields","remoteJoinFields","createLocalFKObject","remote","fk","i","createRemoteQueryObject","local","query","localValue"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/storage/relationship.js"],"sourcesContent":["import { __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { isFieldAssociation } from '../types';\n/**\n * Defines a relationship from a LOCAL model.field to a REMOTE model.field and helps\n * navigate the relationship, providing a simplified peek at the relationship details\n * pertinent to setting FK's and constructing join conditions.\n *\n * Because I mean, relationships are tough.\n *\n */\nvar ModelRelationship = /** @class */ (function () {\n    /**\n     * @param modelDefinition The \"local\" model.\n     * @param field The \"local\" model field.\n     */\n    function ModelRelationship(model, field) {\n        if (!isFieldAssociation(model.schema, field)) {\n            throw new Error(model.schema.name + \".\" + field + \" is not a relationship.\");\n        }\n        this.localModel = model;\n        this._field = field;\n    }\n    /**\n     * Returns a ModelRelationship for the the given model and field if the pair\n     * indicates a relationship to another model. Else, returns `null`.\n     *\n     * @param model The model the relationship field exists in.\n     * @param field The field that may relates the local model to the remote model.\n     */\n    ModelRelationship.from = function (model, field) {\n        if (isFieldAssociation(model.schema, field)) {\n            return new this(model, field);\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Enumerates all valid `ModelRelationship`'s on the given model.\n     *\n     * @param model The model definition to enumerate relationships of.\n     */\n    ModelRelationship.allFrom = function (model) {\n        var e_1, _a;\n        var relationships = [];\n        try {\n            for (var _b = __values(Object.keys(model.schema.fields)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var field = _c.value;\n                var relationship = ModelRelationship.from(model, field);\n                relationship && relationships.push(relationship);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return relationships;\n    };\n    Object.defineProperty(ModelRelationship.prototype, \"localDefinition\", {\n        get: function () {\n            return this.localModel.schema;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"field\", {\n        /**\n         * The virtual/computed field on the local model that should contain\n         * the related model.\n         */\n        get: function () {\n            return this._field;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"localConstructor\", {\n        /**\n         * The constructor that can be used to query DataStore or create instance for\n         * the local model.\n         */\n        get: function () {\n            return this.localModel.builder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"type\", {\n        /**\n         * The name/type of the relationship the local model has with the remote model\n         * via the defined local model field.\n         */\n        get: function () {\n            return this.localAssocation.connectionType;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"localAssocation\", {\n        /**\n         * Raw details about the local FK as-is from the local model's field definition in\n         * the schema. This field requires interpretation.\n         *\n         * @see localJoinFields\n         * @see localAssociatedWith\n         */\n        get: function () {\n            return this.localDefinition.fields[this.field].association;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"localJoinFields\", {\n        /**\n         * The field names on the local model that can be used to query or queried to match\n         * with instances of the remote model.\n         *\n         * Fields are returned in-order to match the order of `this.remoteKeyFields`.\n         */\n        get: function () {\n            /**\n             * This is relatively straightforward, actually.\n             *\n             * If we have explicitly stated targetNames, codegen is telling us authoritatively\n             * to use those fields for this relationship. The local model \"points to\" fields\n             * in the remote one.\n             *\n             * In other cases, the remote model points to this one's\n             */\n            if (this.localAssocation.targetName) {\n                // This case is theoretically unnecessary going forward.\n                return [this.localAssocation.targetName];\n            }\n            else if (this.localAssocation.targetNames) {\n                return this.localAssocation.targetNames;\n            }\n            else {\n                return this.localPKFields;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"localPKFields\", {\n        /**\n         * The field names on the local model that uniquely identify it.\n         *\n         * These fields may or may not be relevant to the join fields.\n         */\n        get: function () {\n            return this.localModel.pkField;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"remoteDefinition\", {\n        get: function () {\n            var _a;\n            return (_a = this.remoteModelType.modelConstructor) === null || _a === void 0 ? void 0 : _a.schema;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"remoteModelType\", {\n        get: function () {\n            return this.localDefinition.fields[this.field].type;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"remoteModelConstructor\", {\n        /**\n         * Constructor that can be used to query DataStore or create instances for\n         * the remote model.\n         */\n        get: function () {\n            return this.remoteModelType.modelConstructor.builder;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"remotePKFields\", {\n        /**\n         * The field names on the remote model that uniquely identify it.\n         *\n         * These fields may or may not be relevant to the join fields.\n         */\n        get: function () {\n            var _a;\n            return ((_a = this.remoteModelType.modelConstructor) === null || _a === void 0 ? void 0 : _a.pkField) || ['id'];\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"localAssociatedWith\", {\n        /**\n         * The `associatedWith` fields from the local perspective.\n         *\n         * When present, these fields indicate which fields on the remote model to use\n         * when looking for a remote association and/or determining the final remote\n         * key fields.\n         */\n        get: function () {\n            if (this.localAssocation.connectionType === 'HAS_MANY' ||\n                this.localAssocation.connectionType === 'HAS_ONE') {\n                // This de-arraying is theoretically unnecessary going forward.\n                return Array.isArray(this.localAssocation.associatedWith)\n                    ? this.localAssocation.associatedWith\n                    : [this.localAssocation.associatedWith];\n            }\n            else {\n                return undefined;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"explicitRemoteAssociation\", {\n        /**\n         * The `remote` model's associated field's `assocation` metadata, if\n         * present.\n         *\n         * This is used when determining if the remote model's associated field\n         * specifies which FK fields to use. If this value is `undefined`, the\n         * name of the remote field (`this.localAssociatedWith`) *is* the remote\n         * key field.\n         */\n        get: function () {\n            var _a;\n            if (this.localAssociatedWith) {\n                if (this.localAssociatedWith.length === 1) {\n                    return (_a = this.remoteDefinition.fields[this.localAssociatedWith[0]]) === null || _a === void 0 ? void 0 : _a.association;\n                }\n                else {\n                    return undefined;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"remoteJoinFields\", {\n        /**\n         * The field names on the remote model that can used to query or queried to match\n         * with instances of the local model.\n         *\n         * Fields are returned in-order to match the order of `this.localKeyFields`.\n         */\n        get: function () {\n            /**\n             * If the local relationship explicitly names \"associated with\" fields, we\n             * need to see if this points direction to a reciprocating assocation. If it\n             * does, the remote assocation indicates what fields to use.\n             */\n            var _a, _b, _c;\n            if ((_a = this.explicitRemoteAssociation) === null || _a === void 0 ? void 0 : _a.targetName) {\n                // This case is theoretically unnecessary going forward.\n                return [this.explicitRemoteAssociation.targetName];\n            }\n            else if ((_b = this.explicitRemoteAssociation) === null || _b === void 0 ? void 0 : _b.targetNames) {\n                return (_c = this.explicitRemoteAssociation) === null || _c === void 0 ? void 0 : _c.targetNames;\n            }\n            else if (this.localAssociatedWith) {\n                return this.localAssociatedWith;\n            }\n            else {\n                return this.remotePKFields;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ModelRelationship.prototype, \"isComplete\", {\n        /**\n         * Whether this relationship everything necessary to get, set, and query from\n         * the perspective of the local model provided at instantiation.\n         */\n        get: function () {\n            return this.localJoinFields.length > 0 && this.remoteJoinFields.length > 0;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates an FK mapper object with respect to the given related instance.\n     *\n     * E.g., if the local FK fields are `[parentId, parentName]` and point to\n     * `[customId, name]` on the remote model, `createLocalFKObject(remote)`\n     * will return:\n     *\n     * ```\n     * {\n     * \tparentId: remote.customId,\n     * \tparentName: remote.name\n     * }\n     * ```\n     *\n     * @param remote The remote related instance.\n     */\n    ModelRelationship.prototype.createLocalFKObject = function (remote) {\n        var fk = {};\n        for (var i = 0; i < this.localJoinFields.length; i++) {\n            fk[this.localJoinFields[i]] = remote[this.remoteJoinFields[i]];\n        }\n        return fk;\n    };\n    /**\n     * Creates an query mapper object to help fetch the remote instance(s) or\n     * `null` if any of the necessary local fields are `null` or `undefined`.\n     *\n     * E.g., if the local FK fields are `[parentId, parentName]` and point to\n     * `[customId, name]` on the remote model, `createLocalFKObject(remote)`\n     * will return:\n     *\n     * ```\n     * {\n     * \tcustomId: local.parentId\n     * \tname: local.parentName\n     * }\n     * ```\n     *\n     * If the local fields are not populated, returns\n     *\n     * @param local The local instance.\n     */\n    ModelRelationship.prototype.createRemoteQueryObject = function (local) {\n        var query = {};\n        for (var i = 0; i < this.remoteJoinFields.length; i++) {\n            var localValue = local[this.localJoinFields[i]];\n            if (localValue === null || localValue === undefined)\n                return null;\n            query[this.remoteJoinFields[i]] = local[this.localJoinFields[i]];\n        }\n        return query;\n    };\n    return ModelRelationship;\n}());\nexport { ModelRelationship };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}