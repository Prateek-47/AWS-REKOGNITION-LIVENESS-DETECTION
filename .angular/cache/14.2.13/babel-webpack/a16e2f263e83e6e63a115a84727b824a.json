{"ast":null,"code":"import { __extends } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AbstractPredictionsProvider } from './AbstractPredictionsProvider';\nimport { isIdentifyLabelsInput, isIdentifyEntitiesInput, isIdentifyTextInput } from '../Predictions';\nimport { Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractIdentifyPredictionsProvider');\n\nvar AbstractIdentifyPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AbstractIdentifyPredictionsProvider, _super);\n\n  function AbstractIdentifyPredictionsProvider() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AbstractIdentifyPredictionsProvider.prototype.getCategory = function () {\n    return 'Identify';\n  };\n\n  AbstractIdentifyPredictionsProvider.prototype.identify = function (input) {\n    if (isIdentifyTextInput(input)) {\n      logger.debug('identifyText');\n      return this.identifyText(input);\n    } else if (isIdentifyLabelsInput(input)) {\n      logger.debug('identifyLabels');\n      return this.identifyLabels(input);\n    } else if (isIdentifyEntitiesInput(input)) {\n      logger.debug('identifyEntities');\n      return this.identifyEntities(input);\n    }\n  };\n\n  AbstractIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    throw new Error('identifyText is not implemented by this provider.');\n  };\n\n  AbstractIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    throw new Error('identifyLabels is not implemented by this provider');\n  };\n\n  AbstractIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    throw new Error('identifyEntities is not implemented by this provider');\n  };\n\n  return AbstractIdentifyPredictionsProvider;\n}(AbstractPredictionsProvider);\n\nexport { AbstractIdentifyPredictionsProvider };","map":{"version":3,"names":["__extends","AbstractPredictionsProvider","isIdentifyLabelsInput","isIdentifyEntitiesInput","isIdentifyTextInput","Logger","logger","AbstractIdentifyPredictionsProvider","_super","apply","arguments","prototype","getCategory","identify","input","debug","identifyText","identifyLabels","identifyEntities","Error"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/predictions/lib-esm/types/Providers/AbstractIdentifyPredictionsProvider.js"],"sourcesContent":["import { __extends } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractPredictionsProvider } from './AbstractPredictionsProvider';\nimport { isIdentifyLabelsInput, isIdentifyEntitiesInput, isIdentifyTextInput, } from '../Predictions';\nimport { Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractIdentifyPredictionsProvider');\nvar AbstractIdentifyPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AbstractIdentifyPredictionsProvider, _super);\n    function AbstractIdentifyPredictionsProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AbstractIdentifyPredictionsProvider.prototype.getCategory = function () {\n        return 'Identify';\n    };\n    AbstractIdentifyPredictionsProvider.prototype.identify = function (input) {\n        if (isIdentifyTextInput(input)) {\n            logger.debug('identifyText');\n            return this.identifyText(input);\n        }\n        else if (isIdentifyLabelsInput(input)) {\n            logger.debug('identifyLabels');\n            return this.identifyLabels(input);\n        }\n        else if (isIdentifyEntitiesInput(input)) {\n            logger.debug('identifyEntities');\n            return this.identifyEntities(input);\n        }\n    };\n    AbstractIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n        throw new Error('identifyText is not implemented by this provider.');\n    };\n    AbstractIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n        throw new Error('identifyLabels is not implemented by this provider');\n    };\n    AbstractIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n        throw new Error('identifyEntities is not implemented by this provider');\n    };\n    return AbstractIdentifyPredictionsProvider;\n}(AbstractPredictionsProvider));\nexport { AbstractIdentifyPredictionsProvider };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B,C,CACA;AACA;;AACA,SAASC,2BAAT,QAA4C,+BAA5C;AACA,SAASC,qBAAT,EAAgCC,uBAAhC,EAAyDC,mBAAzD,QAAqF,gBAArF;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,IAAIC,MAAM,GAAG,IAAID,MAAJ,CAAW,qCAAX,CAAb;;AACA,IAAIE,mCAAmC;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACvER,SAAS,CAACO,mCAAD,EAAsCC,MAAtC,CAAT;;EACA,SAASD,mCAAT,GAA+C;IAC3C,OAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;EACH;;EACDH,mCAAmC,CAACI,SAApC,CAA8CC,WAA9C,GAA4D,YAAY;IACpE,OAAO,UAAP;EACH,CAFD;;EAGAL,mCAAmC,CAACI,SAApC,CAA8CE,QAA9C,GAAyD,UAAUC,KAAV,EAAiB;IACtE,IAAIV,mBAAmB,CAACU,KAAD,CAAvB,EAAgC;MAC5BR,MAAM,CAACS,KAAP,CAAa,cAAb;MACA,OAAO,KAAKC,YAAL,CAAkBF,KAAlB,CAAP;IACH,CAHD,MAIK,IAAIZ,qBAAqB,CAACY,KAAD,CAAzB,EAAkC;MACnCR,MAAM,CAACS,KAAP,CAAa,gBAAb;MACA,OAAO,KAAKE,cAAL,CAAoBH,KAApB,CAAP;IACH,CAHI,MAIA,IAAIX,uBAAuB,CAACW,KAAD,CAA3B,EAAoC;MACrCR,MAAM,CAACS,KAAP,CAAa,kBAAb;MACA,OAAO,KAAKG,gBAAL,CAAsBJ,KAAtB,CAAP;IACH;EACJ,CAbD;;EAcAP,mCAAmC,CAACI,SAApC,CAA8CK,YAA9C,GAA6D,UAAUF,KAAV,EAAiB;IAC1E,MAAM,IAAIK,KAAJ,CAAU,mDAAV,CAAN;EACH,CAFD;;EAGAZ,mCAAmC,CAACI,SAApC,CAA8CM,cAA9C,GAA+D,UAAUH,KAAV,EAAiB;IAC5E,MAAM,IAAIK,KAAJ,CAAU,oDAAV,CAAN;EACH,CAFD;;EAGAZ,mCAAmC,CAACI,SAApC,CAA8CO,gBAA9C,GAAiE,UAAUJ,KAAV,EAAiB;IAC9E,MAAM,IAAIK,KAAJ,CAAU,sDAAV,CAAN;EACH,CAFD;;EAGA,OAAOZ,mCAAP;AACH,CAhCwD,CAgCvDN,2BAhCuD,CAAzD;;AAiCA,SAASM,mCAAT"},"metadata":{},"sourceType":"module"}