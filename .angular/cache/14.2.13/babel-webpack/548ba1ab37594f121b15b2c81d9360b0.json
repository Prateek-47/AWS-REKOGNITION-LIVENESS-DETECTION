{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { withMemoization } from '@aws-amplify/core/internals/aws-client-utils';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT, ABORT_ERROR_CODE, ABORT_ERROR_MESSAGE, CANCELED_ERROR_CODE, CANCELED_ERROR_MESSAGE, NETWORK_ERROR_CODE, NETWORK_ERROR_MESSAGE } from './constants';\nvar logger = new Logger('xhr-http-handler');\n/**\n * Base transfer handler implementation using XMLHttpRequest to support upload and download progress events.\n *\n * @param request - The request object.\n * @param options - The request options.\n * @returns A promise that will be resolved with the response object.\n *\n * @internal\n */\n\nexport var xhrTransferHandler = function (request, options) {\n  var url = request.url,\n      method = request.method,\n      headers = request.headers,\n      body = request.body;\n  var emitter = options.emitter,\n      responseType = options.responseType,\n      abortSignal = options.abortSignal;\n  return new Promise(function (resolve, reject) {\n    var _a;\n\n    var xhr = new XMLHttpRequest();\n    xhr.open(method.toUpperCase(), url.toString());\n    Object.entries(headers).filter(function (_a) {\n      var _b = __read(_a, 1),\n          header = _b[0];\n\n      return !FORBIDDEN_HEADERS.includes(header);\n    }).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          header = _b[0],\n          value = _b[1];\n\n      xhr.setRequestHeader(header, value);\n    });\n    xhr.responseType = responseType;\n\n    if (emitter) {\n      xhr.upload.addEventListener('progress', function (event) {\n        emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      });\n      xhr.addEventListener('progress', function (event) {\n        emitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n        logger.debug(event);\n      });\n    }\n\n    xhr.addEventListener('error', function () {\n      var error = simulateAxiosError(NETWORK_ERROR_MESSAGE, NETWORK_ERROR_CODE, xhr, options);\n      logger.error(NETWORK_ERROR_MESSAGE);\n      reject(error);\n      xhr = null; // clean up request\n    }); // Handle browser request cancellation (as opposed to a manual cancellation)\n\n    xhr.addEventListener('abort', function () {\n      // The abort event can be triggered after the error or load event. So we need to check if the xhr is null.\n      if (!xhr || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) return;\n      var error = simulateAxiosError(ABORT_ERROR_MESSAGE, ABORT_ERROR_CODE, xhr, options);\n      logger.error(ABORT_ERROR_MESSAGE);\n      reject(error);\n      xhr = null; // clean up request\n    }); // Skip handling timeout error since we don't have a timeout\n\n    xhr.addEventListener('readystatechange', function () {\n      if (!xhr || xhr.readyState !== xhr.DONE) {\n        return;\n      }\n\n      var onloadend = function () {\n        // The load event is triggered after the error/abort/load event. So we need to check if the xhr is null.\n        if (!xhr) return;\n        var responseHeaders = convertResponseHeaders(xhr.getAllResponseHeaders());\n        var responseType = xhr.responseType;\n        var responseBlob = xhr.response;\n        var responseText = responseType === 'text' ? xhr.responseText : '';\n        var bodyMixIn = {\n          blob: function () {\n            return Promise.resolve(responseBlob);\n          },\n          text: withMemoization(function () {\n            return responseType === 'blob' ? readBlobAsText(responseBlob) : Promise.resolve(responseText);\n          }),\n          json: function () {\n            return Promise.reject( // S3 does not support JSON response. So fail-fast here with nicer error message.\n            new Error('Parsing response to JSON is not implemented. Please use response.text() instead.'));\n          }\n        };\n        var response = {\n          statusCode: xhr.status,\n          headers: responseHeaders,\n          // The xhr.responseType is only set to 'blob' for streaming binary S3 object data. The streaming data is\n          // exposed via public interface of Storage.get(). So we need to return the response as a Blob object for\n          // backward compatibility. In other cases, the response payload is only used internally, we return it is\n          // {@link ResponseBodyMixin}\n          body: xhr.responseType === 'blob' ? Object.assign(responseBlob, bodyMixIn) : bodyMixIn\n        };\n        resolve(response);\n        xhr = null; // clean up request\n      }; // readystate handler is calling before onerror or ontimeout handlers,\n      // so we should call onloadend on the next 'tick'\n      // @see https://github.com/axios/axios/blob/9588fcdec8aca45c3ba2f7968988a5d03f23168c/lib/adapters/xhr.js#L98-L99\n\n\n      setTimeout(onloadend);\n    });\n\n    if (abortSignal) {\n      var onCancelled = function () {\n        // The abort event is triggered after the error or load event. So we need to check if the xhr is null.\n        if (!xhr) {\n          return;\n        }\n\n        var canceledError = simulateAxiosCanceledError(CANCELED_ERROR_MESSAGE !== null && CANCELED_ERROR_MESSAGE !== void 0 ? CANCELED_ERROR_MESSAGE : abortSignal.reason, CANCELED_ERROR_CODE, xhr, options);\n        xhr.abort();\n        reject(canceledError);\n        xhr = null;\n      };\n\n      abortSignal.aborted ? onCancelled() : abortSignal.addEventListener('abort', onCancelled);\n    }\n\n    if (typeof ReadableStream === 'function' && body instanceof ReadableStream) {\n      // This does not matter as previous implementation uses Axios which does not support ReadableStream anyway.\n      throw new Error('ReadableStream request payload is not supported.');\n    }\n\n    xhr.send((_a = body) !== null && _a !== void 0 ? _a : null);\n  });\n}; // TODO: V6 remove this\n\nvar simulateAxiosError = function (message, code, request, config) {\n  return Object.assign(new Error(message), {\n    code: code,\n    config: config,\n    request: request\n  });\n};\n\nvar simulateAxiosCanceledError = function (message, code, request, config) {\n  var error = simulateAxiosError(message, code, request, config);\n  error.name = 'CanceledError';\n  error['__CANCEL__'] = true;\n  return error;\n};\n\nexport var isCancelError = function (error) {\n  return !!(error === null || error === void 0 ? void 0 : error['__CANCEL__']);\n};\n/**\n * Convert xhr.getAllResponseHeaders() string to a Record<string, string>. Note that modern browser already returns\n * header names in lowercase.\n * @param xhrHeaders - string of headers returned from xhr.getAllResponseHeaders()\n */\n\nvar convertResponseHeaders = function (xhrHeaders) {\n  if (!xhrHeaders) {\n    return {};\n  }\n\n  return xhrHeaders.split('\\r\\n').reduce(function (headerMap, line) {\n    var parts = line.split(': ');\n    var header = parts.shift();\n    var value = parts.join(': ');\n    headerMap[header.toLowerCase()] = value;\n    return headerMap;\n  }, {});\n};\n\nvar readBlobAsText = function (blob) {\n  var reader = new FileReader();\n  return new Promise(function (resolve, reject) {\n    reader.onloadend = function () {\n      if (reader.readyState !== FileReader.DONE) {\n        return;\n      }\n\n      resolve(reader.result);\n    };\n\n    reader.onerror = function () {\n      reject(reader.error);\n    };\n\n    reader.readAsText(blob);\n  });\n}; // To add more forbidden headers as found set by S3. Intentionally NOT list all of them here to save bundle size.\n// https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\n\n\nvar FORBIDDEN_HEADERS = ['host'];","map":{"version":3,"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","withMemoization","ConsoleLogger","Logger","SEND_DOWNLOAD_PROGRESS_EVENT","SEND_UPLOAD_PROGRESS_EVENT","ABORT_ERROR_CODE","ABORT_ERROR_MESSAGE","CANCELED_ERROR_CODE","CANCELED_ERROR_MESSAGE","NETWORK_ERROR_CODE","NETWORK_ERROR_MESSAGE","logger","xhrTransferHandler","request","options","url","method","headers","body","emitter","responseType","abortSignal","Promise","resolve","reject","_a","xhr","XMLHttpRequest","open","toUpperCase","toString","Object","entries","filter","_b","header","FORBIDDEN_HEADERS","includes","forEach","setRequestHeader","upload","addEventListener","event","emit","debug","simulateAxiosError","aborted","readyState","DONE","onloadend","responseHeaders","convertResponseHeaders","getAllResponseHeaders","responseBlob","response","responseText","bodyMixIn","blob","text","readBlobAsText","json","Error","statusCode","status","assign","setTimeout","onCancelled","canceledError","simulateAxiosCanceledError","reason","abort","ReadableStream","send","message","code","config","name","isCancelError","xhrHeaders","split","reduce","headerMap","line","parts","shift","join","toLowerCase","reader","FileReader","result","onerror","readAsText"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/storage/lib-esm/AwsClients/S3/runtime/xhrTransferHandler.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { withMemoization, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SEND_DOWNLOAD_PROGRESS_EVENT, SEND_UPLOAD_PROGRESS_EVENT, ABORT_ERROR_CODE, ABORT_ERROR_MESSAGE, CANCELED_ERROR_CODE, CANCELED_ERROR_MESSAGE, NETWORK_ERROR_CODE, NETWORK_ERROR_MESSAGE, } from './constants';\nvar logger = new Logger('xhr-http-handler');\n/**\n * Base transfer handler implementation using XMLHttpRequest to support upload and download progress events.\n *\n * @param request - The request object.\n * @param options - The request options.\n * @returns A promise that will be resolved with the response object.\n *\n * @internal\n */\nexport var xhrTransferHandler = function (request, options) {\n    var url = request.url, method = request.method, headers = request.headers, body = request.body;\n    var emitter = options.emitter, responseType = options.responseType, abortSignal = options.abortSignal;\n    return new Promise(function (resolve, reject) {\n        var _a;\n        var xhr = new XMLHttpRequest();\n        xhr.open(method.toUpperCase(), url.toString());\n        Object.entries(headers)\n            .filter(function (_a) {\n            var _b = __read(_a, 1), header = _b[0];\n            return !FORBIDDEN_HEADERS.includes(header);\n        })\n            .forEach(function (_a) {\n            var _b = __read(_a, 2), header = _b[0], value = _b[1];\n            xhr.setRequestHeader(header, value);\n        });\n        xhr.responseType = responseType;\n        if (emitter) {\n            xhr.upload.addEventListener('progress', function (event) {\n                emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);\n                logger.debug(event);\n            });\n            xhr.addEventListener('progress', function (event) {\n                emitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);\n                logger.debug(event);\n            });\n        }\n        xhr.addEventListener('error', function () {\n            var error = simulateAxiosError(NETWORK_ERROR_MESSAGE, NETWORK_ERROR_CODE, xhr, options);\n            logger.error(NETWORK_ERROR_MESSAGE);\n            reject(error);\n            xhr = null; // clean up request\n        });\n        // Handle browser request cancellation (as opposed to a manual cancellation)\n        xhr.addEventListener('abort', function () {\n            // The abort event can be triggered after the error or load event. So we need to check if the xhr is null.\n            if (!xhr || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted))\n                return;\n            var error = simulateAxiosError(ABORT_ERROR_MESSAGE, ABORT_ERROR_CODE, xhr, options);\n            logger.error(ABORT_ERROR_MESSAGE);\n            reject(error);\n            xhr = null; // clean up request\n        });\n        // Skip handling timeout error since we don't have a timeout\n        xhr.addEventListener('readystatechange', function () {\n            if (!xhr || xhr.readyState !== xhr.DONE) {\n                return;\n            }\n            var onloadend = function () {\n                // The load event is triggered after the error/abort/load event. So we need to check if the xhr is null.\n                if (!xhr)\n                    return;\n                var responseHeaders = convertResponseHeaders(xhr.getAllResponseHeaders());\n                var responseType = xhr.responseType;\n                var responseBlob = xhr.response;\n                var responseText = responseType === 'text' ? xhr.responseText : '';\n                var bodyMixIn = {\n                    blob: function () { return Promise.resolve(responseBlob); },\n                    text: withMemoization(function () {\n                        return responseType === 'blob'\n                            ? readBlobAsText(responseBlob)\n                            : Promise.resolve(responseText);\n                    }),\n                    json: function () {\n                        return Promise.reject(\n                        // S3 does not support JSON response. So fail-fast here with nicer error message.\n                        new Error('Parsing response to JSON is not implemented. Please use response.text() instead.'));\n                    },\n                };\n                var response = {\n                    statusCode: xhr.status,\n                    headers: responseHeaders,\n                    // The xhr.responseType is only set to 'blob' for streaming binary S3 object data. The streaming data is\n                    // exposed via public interface of Storage.get(). So we need to return the response as a Blob object for\n                    // backward compatibility. In other cases, the response payload is only used internally, we return it is\n                    // {@link ResponseBodyMixin}\n                    body: (xhr.responseType === 'blob'\n                        ? Object.assign(responseBlob, bodyMixIn)\n                        : bodyMixIn),\n                };\n                resolve(response);\n                xhr = null; // clean up request\n            };\n            // readystate handler is calling before onerror or ontimeout handlers,\n            // so we should call onloadend on the next 'tick'\n            // @see https://github.com/axios/axios/blob/9588fcdec8aca45c3ba2f7968988a5d03f23168c/lib/adapters/xhr.js#L98-L99\n            setTimeout(onloadend);\n        });\n        if (abortSignal) {\n            var onCancelled = function () {\n                // The abort event is triggered after the error or load event. So we need to check if the xhr is null.\n                if (!xhr) {\n                    return;\n                }\n                var canceledError = simulateAxiosCanceledError(CANCELED_ERROR_MESSAGE !== null && CANCELED_ERROR_MESSAGE !== void 0 ? CANCELED_ERROR_MESSAGE : abortSignal.reason, CANCELED_ERROR_CODE, xhr, options);\n                xhr.abort();\n                reject(canceledError);\n                xhr = null;\n            };\n            abortSignal.aborted\n                ? onCancelled()\n                : abortSignal.addEventListener('abort', onCancelled);\n        }\n        if (typeof ReadableStream === 'function' &&\n            body instanceof ReadableStream) {\n            // This does not matter as previous implementation uses Axios which does not support ReadableStream anyway.\n            throw new Error('ReadableStream request payload is not supported.');\n        }\n        xhr.send((_a = body) !== null && _a !== void 0 ? _a : null);\n    });\n};\n// TODO: V6 remove this\nvar simulateAxiosError = function (message, code, request, config) {\n    return Object.assign(new Error(message), {\n        code: code,\n        config: config,\n        request: request,\n    });\n};\nvar simulateAxiosCanceledError = function (message, code, request, config) {\n    var error = simulateAxiosError(message, code, request, config);\n    error.name = 'CanceledError';\n    error['__CANCEL__'] = true;\n    return error;\n};\nexport var isCancelError = function (error) {\n    return !!(error === null || error === void 0 ? void 0 : error['__CANCEL__']);\n};\n/**\n * Convert xhr.getAllResponseHeaders() string to a Record<string, string>. Note that modern browser already returns\n * header names in lowercase.\n * @param xhrHeaders - string of headers returned from xhr.getAllResponseHeaders()\n */\nvar convertResponseHeaders = function (xhrHeaders) {\n    if (!xhrHeaders) {\n        return {};\n    }\n    return xhrHeaders\n        .split('\\r\\n')\n        .reduce(function (headerMap, line) {\n        var parts = line.split(': ');\n        var header = parts.shift();\n        var value = parts.join(': ');\n        headerMap[header.toLowerCase()] = value;\n        return headerMap;\n    }, {});\n};\nvar readBlobAsText = function (blob) {\n    var reader = new FileReader();\n    return new Promise(function (resolve, reject) {\n        reader.onloadend = function () {\n            if (reader.readyState !== FileReader.DONE) {\n                return;\n            }\n            resolve(reader.result);\n        };\n        reader.onerror = function () {\n            reject(reader.error);\n        };\n        reader.readAsText(blob);\n    });\n};\n// To add more forbidden headers as found set by S3. Intentionally NOT list all of them here to save bundle size.\n// https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name\nvar FORBIDDEN_HEADERS = ['host'];\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}