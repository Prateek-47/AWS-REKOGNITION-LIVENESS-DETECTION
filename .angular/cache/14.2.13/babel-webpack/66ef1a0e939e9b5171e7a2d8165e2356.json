{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForSuggestionsCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetPlaceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand } from '@aws-sdk/client-location';\nimport { mapSearchOptions, validateGeofenceId, validateGeofencesInput } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\n\nvar AmazonLocationServiceProvider =\n/** @class */\nfunction () {\n  /**\n   * Initialize Geo with AWS configurations\n   * @param {Object} config - Configuration object for Geo\n   */\n  function AmazonLocationServiceProvider(config) {\n    this._config = config ? config : {};\n    logger.debug('Geo Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   * @returns {string} name of the category\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getCategory = function () {\n    return AmazonLocationServiceProvider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getProviderName = function () {\n    return AmazonLocationServiceProvider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Geo part with aws configuration\n   * @param {Object} config - Configuration of the Geo\n   * @return {Object} - Current configuration\n   */\n\n\n  AmazonLocationServiceProvider.prototype.configure = function (config) {\n    logger.debug('configure Amazon Location Service Provider', config);\n    if (!config) return this._config;\n    this._config = Object.assign({}, this._config, config);\n    return this._config;\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n    this._verifyMapResources();\n\n    var mapStyles = [];\n    var availableMaps = this._config.maps.items;\n    var region = this._config.region;\n\n    for (var mapName in availableMaps) {\n      var style = availableMaps[mapName].style;\n      mapStyles.push({\n        mapName: mapName,\n        style: style,\n        region: region\n      });\n    }\n\n    return mapStyles;\n  };\n  /**\n   * Get the map resource set as default in amplify config\n   * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n    this._verifyMapResources();\n\n    var mapName = this._config.maps.default;\n    var style = this._config.maps.items[mapName].style;\n    var region = this._config.region;\n    return {\n      mapName: mapName,\n      style: style,\n      region: region\n    };\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_1 = _a.sent();\n            logger.debug(error_1);\n            throw error_1;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults, {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Search for suggestions based on the input text\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchForSuggestions = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_2, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Text: text,\n              IndexName: this._config.search_indices.default\n            };\n            /**\n             * Map search options to Amazon Location Service input object\n             */\n\n            if (options) {\n              locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new SearchPlaceIndexForSuggestionsCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_2 = _a.sent();\n            logger.debug(error_2);\n            throw error_2;\n\n          case 5:\n            results = response.Results.map(function (result) {\n              return {\n                text: result.Text,\n                placeId: result.PlaceId\n              };\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyPlaceId = function (placeId) {\n    if (placeId.length === 0) {\n      var errorString = 'PlaceId cannot be an empty string.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype.searchByPlaceId = function (placeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, searchByPlaceIdInput, command, response, error_3, place;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            this._verifyPlaceId(placeId);\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            searchByPlaceIdInput = {\n              PlaceId: placeId,\n              IndexName: (options === null || options === void 0 ? void 0 : options.searchIndexName) || this._config.search_indices.default\n            };\n            command = new GetPlaceCommand(searchByPlaceIdInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_3 = _a.sent();\n            logger.debug(error_3);\n            throw error_3;\n\n          case 5:\n            place = response.Place;\n\n            if (place) {\n              return [2\n              /*return*/\n              , camelcaseKeys(place, {\n                deep: true\n              })];\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n\n\n  AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, locationServiceInput, client, command, response, error_4, PascalResults, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n\n            locationServiceInput = {\n              Position: coordinates,\n              IndexName: this._config.search_indices.default\n            };\n\n            if (options) {\n              if (options.searchIndexName) {\n                locationServiceInput.IndexName = options.searchIndexName;\n              }\n\n              locationServiceInput.MaxResults = options.maxResults;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_4 = _a.sent();\n            logger.debug(error_4);\n            throw error_4;\n\n          case 5:\n            PascalResults = response.Results.map(function (result) {\n              return result.Place;\n            });\n            results = camelcaseKeys(PascalResults[0], {\n              deep: true\n            });\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Create geofences inside of a geofence collection\n   * @param geofences - Array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n\n\n  AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofences.length < 1) {\n              throw new Error('Geofence input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofencesInput(geofences);\n            PascalGeofences = geofences.map(function (_a) {\n              var geofenceId = _a.geofenceId,\n                  polygon = _a.geometry.polygon;\n              return {\n                GeofenceId: geofenceId,\n                Geometry: {\n                  Polygon: polygon\n                }\n              };\n            });\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceBatches = [];\n\n            while (PascalGeofences.length > 0) {\n              apiLimit = 10;\n              geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_5;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _a.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_5 = _a.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofence) {\n                        results.errors.push({\n                          geofenceId: geofence.GeofenceId,\n                          error: {\n                            code: 'APIConnectionError',\n                            message: error_5.message\n                          }\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      // Push all successes to results\n                      response.Successes.forEach(function (success) {\n                        var GeofenceId = success.GeofenceId,\n                            CreateTime = success.CreateTime,\n                            UpdateTime = success.UpdateTime;\n                        results.successes.push({\n                          geofenceId: GeofenceId,\n                          createTime: CreateTime,\n                          updateTime: UpdateTime\n                        });\n                      }); // Push all errors to results\n\n                      response.Errors.forEach(function (error) {\n                        var _a = error.Error,\n                            Code = _a.Code,\n                            Message = _a.Message,\n                            GeofenceId = error.GeofenceId;\n                        results.errors.push({\n                          error: {\n                            code: Code,\n                            message: Message\n                          },\n                          geofenceId: GeofenceId\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Get geofence from a geofence collection\n   * @param geofenceId:string\n   * @param options?: Optional parameters for getGeofence\n   * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n   */\n\n\n  AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, commandInput, command, response, error_6, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            validateGeofenceId(geofenceId);\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            commandInput = {\n              GeofenceId: geofenceId,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new GetGeofenceCommand(commandInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_6 = _a.sent();\n            logger.debug(error_6);\n            throw error_6;\n\n          case 5:\n            GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n            geofence = {\n              createTime: CreateTime,\n              geofenceId: GeofenceId,\n              geometry: {\n                polygon: Geometry.Polygon\n              },\n              status: Status,\n              updateTime: UpdateTime\n            };\n            return [2\n            /*return*/\n            , geofence];\n        }\n      });\n    });\n  };\n  /**\n   * List geofences from a geofence collection\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n\n\n  AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, client, listGeofencesInput, command, response, error_7, NextToken, Entries, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            } // Verify geofence collection exists in aws-config.js\n\n\n            try {\n              this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n            } catch (error) {\n              logger.debug(error);\n              throw error;\n            }\n\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            listGeofencesInput = {\n              NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n              CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default\n            };\n            command = new ListGeofencesCommand(listGeofencesInput);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 3:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            error_7 = _a.sent();\n            logger.debug(error_7);\n            throw error_7;\n\n          case 5:\n            NextToken = response.NextToken, Entries = response.Entries;\n            results = {\n              entries: Entries.map(function (_a) {\n                var GeofenceId = _a.GeofenceId,\n                    CreateTime = _a.CreateTime,\n                    UpdateTime = _a.UpdateTime,\n                    Status = _a.Status,\n                    Polygon = _a.Geometry.Polygon;\n                return {\n                  geofenceId: GeofenceId,\n                  createTime: CreateTime,\n                  updateTime: UpdateTime,\n                  status: Status,\n                  geometry: {\n                    polygon: Polygon\n                  }\n                };\n              }),\n              nextToken: NextToken\n            };\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * Delete geofences from a geofence collection\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n\n\n  AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (geofenceIds.length < 1) {\n              throw new Error('GeofenceId input array is empty');\n            }\n\n            return [4\n            /*yield*/\n            , this._ensureCredentials()];\n\n          case 1:\n            credentialsOK = _a.sent();\n\n            if (!credentialsOK) {\n              throw new Error('No credentials');\n            }\n\n            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n\n            badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n              try {\n                validateGeofenceId(geofenceId);\n              } catch (error) {\n                return true;\n              }\n            });\n\n            if (badGeofenceIds.length > 0) {\n              throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n            }\n\n            results = {\n              successes: [],\n              errors: []\n            };\n            geofenceIdBatches = [];\n            count = 0;\n\n            while (count < geofenceIds.length) {\n              geofenceIdBatches.push(geofenceIds.slice(count, count += 10));\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(geofenceIdBatches.map(function (batch) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var response, error_8, badGeofenceIds;\n\n                var _a;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      _b.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n\n                    case 1:\n                      response = _b.sent();\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      error_8 = _b.sent(); // If the API call fails, add the geofences to the errors array and move to next batch\n\n                      batch.forEach(function (geofenceId) {\n                        var errorObject = {\n                          geofenceId: geofenceId,\n                          error: {\n                            code: error_8.message,\n                            message: error_8.message\n                          }\n                        };\n                        results.errors.push(errorObject);\n                      });\n                      return [2\n                      /*return*/\n                      ];\n\n                    case 3:\n                      badGeofenceIds = response.Errors.map(function (_a) {\n                        var geofenceId = _a.geofenceId;\n                        return geofenceId;\n                      });\n\n                      (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) {\n                        return !badGeofenceIds.includes(Id);\n                      })));\n\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , results];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, cred, error_9;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , false];\n            cred = Credentials.shear(credentials);\n            logger.debug('Set credentials for storage. Credentials are:', cred);\n            this._config.credentials = cred;\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            error_9 = _a.sent();\n            logger.debug('Ensure credentials error. Credentials are:', error_9);\n            return [2\n            /*return*/\n            , false];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n    if (!this._config.maps) {\n      var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n\n    if (!this._config.maps.default) {\n      var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n    if ((!this._config.search_indices || !this._config.search_indices.default) && !optionalSearchIndex) {\n      var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n    if ((!this._config.geofenceCollections || !this._config.geofenceCollections.default) && !optionalGeofenceCollectionName) {\n      var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n      logger.debug(errorString);\n      throw new Error(errorString);\n    }\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var geofenceInput, client, command, response, error_10;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            geofenceInput = {\n              Entries: PascalGeofences,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new BatchPutGeofenceCommand(geofenceInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_10 = _a.sent();\n            throw error_10;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var deleteGeofencesInput, client, command, response, error_11;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            deleteGeofencesInput = {\n              GeofenceIds: geofenceIds,\n              CollectionName: collectionName || this._config.geofenceCollections.default\n            };\n            client = new LocationClient({\n              credentials: this._config.credentials,\n              region: this._config.region,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , client.send(command)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_11 = _a.sent();\n            throw error_11;\n\n          case 4:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  AmazonLocationServiceProvider.CATEGORY = 'Geo';\n  AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n  return AmazonLocationServiceProvider;\n}();\n\nexport { AmazonLocationServiceProvider };","map":{"version":3,"names":["__assign","__awaiter","__generator","__read","__spread","camelcaseKeys","ConsoleLogger","Logger","Credentials","getAmplifyUserAgentObject","LocationClient","SearchPlaceIndexForTextCommand","SearchPlaceIndexForSuggestionsCommand","SearchPlaceIndexForPositionCommand","BatchPutGeofenceCommand","GetPlaceCommand","GetGeofenceCommand","ListGeofencesCommand","BatchDeleteGeofenceCommand","mapSearchOptions","validateGeofenceId","validateGeofencesInput","logger","AmazonLocationServiceProvider","config","_config","debug","prototype","getCategory","CATEGORY","getProviderName","PROVIDER_NAME","configure","Object","assign","getAvailableMaps","_verifyMapResources","mapStyles","availableMaps","maps","items","region","mapName","style","push","getDefaultMap","default","searchByText","text","options","credentialsOK","locationServiceInput","client","command","response","error_1","PascalResults","results","_a","label","_ensureCredentials","sent","Error","_verifySearchIndex","searchIndexName","Text","IndexName","search_indices","credentials","customUserAgent","trys","send","Results","map","result","Place","deep","searchForSuggestions","error_2","placeId","PlaceId","_verifyPlaceId","length","errorString","searchByPlaceId","searchByPlaceIdInput","error_3","place","searchByCoordinates","coordinates","error_4","Position","MaxResults","maxResults","saveGeofences","geofences","PascalGeofences","geofenceBatches","apiLimit","_this","_verifyGeofenceCollections","collectionName","error","geofenceId","polygon","geometry","GeofenceId","Geometry","Polygon","successes","errors","splice","Promise","all","batch","error_5","_AmazonLocationServiceBatchPutGeofenceCall","geofenceCollections","forEach","geofence","code","message","Successes","success","CreateTime","UpdateTime","createTime","updateTime","Errors","Code","Message","getGeofence","commandInput","error_6","Status","CollectionName","status","listGeofences","listGeofencesInput","error_7","NextToken","Entries","nextToken","entries","deleteGeofences","geofenceIds","badGeofenceIds","geofenceIdBatches","count","filter","join","slice","error_8","_b","_AmazonLocationServiceBatchDeleteGeofenceCall","errorObject","apply","Id","includes","cred","error_9","get","shear","optionalSearchIndex","optionalGeofenceCollectionName","geofenceInput","error_10","deleteGeofencesInput","error_11","GeofenceIds"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/geo/lib-esm/Providers/AmazonLocationServiceProvider.js"],"sourcesContent":["import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport camelcaseKeys from 'camelcase-keys';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject, } from '@aws-amplify/core';\nimport { LocationClient, SearchPlaceIndexForTextCommand, SearchPlaceIndexForSuggestionsCommand, SearchPlaceIndexForPositionCommand, BatchPutGeofenceCommand, GetPlaceCommand, GetGeofenceCommand, ListGeofencesCommand, BatchDeleteGeofenceCommand, } from '@aws-sdk/client-location';\nimport { mapSearchOptions, validateGeofenceId, validateGeofencesInput, } from '../util';\nvar logger = new Logger('AmazonLocationServiceProvider');\nvar AmazonLocationServiceProvider = /** @class */ (function () {\n    /**\n     * Initialize Geo with AWS configurations\n     * @param {Object} config - Configuration object for Geo\n     */\n    function AmazonLocationServiceProvider(config) {\n        this._config = config ? config : {};\n        logger.debug('Geo Options', this._config);\n    }\n    /**\n     * get the category of the plugin\n     * @returns {string} name of the category\n     */\n    AmazonLocationServiceProvider.prototype.getCategory = function () {\n        return AmazonLocationServiceProvider.CATEGORY;\n    };\n    /**\n     * get provider name of the plugin\n     * @returns {string} name of the provider\n     */\n    AmazonLocationServiceProvider.prototype.getProviderName = function () {\n        return AmazonLocationServiceProvider.PROVIDER_NAME;\n    };\n    /**\n     * Configure Geo part with aws configuration\n     * @param {Object} config - Configuration of the Geo\n     * @return {Object} - Current configuration\n     */\n    AmazonLocationServiceProvider.prototype.configure = function (config) {\n        logger.debug('configure Amazon Location Service Provider', config);\n        if (!config)\n            return this._config;\n        this._config = Object.assign({}, this._config, config);\n        return this._config;\n    };\n    /**\n     * Get the map resources that are currently available through the provider\n     * @returns {AmazonLocationServiceMapStyle[]}- Array of available map resources\n     */\n    AmazonLocationServiceProvider.prototype.getAvailableMaps = function () {\n        this._verifyMapResources();\n        var mapStyles = [];\n        var availableMaps = this._config.maps.items;\n        var region = this._config.region;\n        for (var mapName in availableMaps) {\n            var style = availableMaps[mapName].style;\n            mapStyles.push({ mapName: mapName, style: style, region: region });\n        }\n        return mapStyles;\n    };\n    /**\n     * Get the map resource set as default in amplify config\n     * @returns {AmazonLocationServiceMapStyle} - Map resource set as the default in amplify config\n     */\n    AmazonLocationServiceProvider.prototype.getDefaultMap = function () {\n        this._verifyMapResources();\n        var mapName = this._config.maps.default;\n        var style = this._config.maps.items[mapName].style;\n        var region = this._config.region;\n        return { mapName: mapName, style: style, region: region };\n    };\n    /**\n     * Search by text input with optional parameters\n     * @param  {string} text - The text string that is to be searched for\n     * @param  {SearchByTextOptions} options? - Optional parameters to the search\n     * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n     */\n    AmazonLocationServiceProvider.prototype.searchByText = function (text, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_1, PascalResults, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Text: text,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        /**\n                         * Map search options to Amazon Location Service input object\n                         */\n                        if (options) {\n                            locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        command = new SearchPlaceIndexForTextCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_1 = _a.sent();\n                        logger.debug(error_1);\n                        throw error_1;\n                    case 5:\n                        PascalResults = response.Results.map(function (result) { return result.Place; });\n                        results = camelcaseKeys(PascalResults, {\n                            deep: true,\n                        });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Search for suggestions based on the input text\n     * @param  {string} text - The text string that is to be searched for\n     * @param  {SearchByTextOptions} options? - Optional parameters to the search\n     * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n     */\n    AmazonLocationServiceProvider.prototype.searchForSuggestions = function (text, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_2, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Text: text,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        /**\n                         * Map search options to Amazon Location Service input object\n                         */\n                        if (options) {\n                            locationServiceInput = __assign(__assign({}, locationServiceInput), mapSearchOptions(options, locationServiceInput));\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        command = new SearchPlaceIndexForSuggestionsCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_2 = _a.sent();\n                        logger.debug(error_2);\n                        throw error_2;\n                    case 5:\n                        results = response.Results.map(function (result) { return ({\n                            text: result.Text,\n                            placeId: result.PlaceId,\n                        }); });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._verifyPlaceId = function (placeId) {\n        if (placeId.length === 0) {\n            var errorString = 'PlaceId cannot be an empty string.';\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype.searchByPlaceId = function (placeId, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, client, searchByPlaceIdInput, command, response, error_3, place;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        this._verifyPlaceId(placeId);\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        searchByPlaceIdInput = {\n                            PlaceId: placeId,\n                            IndexName: (options === null || options === void 0 ? void 0 : options.searchIndexName) || this._config.search_indices.default,\n                        };\n                        command = new GetPlaceCommand(searchByPlaceIdInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_3 = _a.sent();\n                        logger.debug(error_3);\n                        throw error_3;\n                    case 5:\n                        place = response.Place;\n                        if (place) {\n                            return [2 /*return*/, camelcaseKeys(place, { deep: true })];\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Reverse geocoding search via a coordinate point on the map\n     * @param coordinates - Coordinates array for the search input\n     * @param options - Options parameters for the search\n     * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n     */\n    AmazonLocationServiceProvider.prototype.searchByCoordinates = function (coordinates, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, locationServiceInput, client, command, response, error_4, PascalResults, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifySearchIndex(options === null || options === void 0 ? void 0 : options.searchIndexName);\n                        locationServiceInput = {\n                            Position: coordinates,\n                            IndexName: this._config.search_indices.default,\n                        };\n                        if (options) {\n                            if (options.searchIndexName) {\n                                locationServiceInput.IndexName = options.searchIndexName;\n                            }\n                            locationServiceInput.MaxResults = options.maxResults;\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        command = new SearchPlaceIndexForPositionCommand(locationServiceInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_4 = _a.sent();\n                        logger.debug(error_4);\n                        throw error_4;\n                    case 5:\n                        PascalResults = response.Results.map(function (result) { return result.Place; });\n                        results = camelcaseKeys(PascalResults[0], {\n                            deep: true,\n                        });\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Create geofences inside of a geofence collection\n     * @param geofences - Array of geofence objects to create\n     * @param options? - Optional parameters for creating geofences\n     * @returns {Promise<AmazonLocationServiceSaveGeofencesResults>} - Promise that resolves to an object with:\n     *   successes: list of geofences successfully created\n     *   errors: list of geofences that failed to create\n     */\n    AmazonLocationServiceProvider.prototype.saveGeofences = function (geofences, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, PascalGeofences, results, geofenceBatches, apiLimit;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (geofences.length < 1) {\n                            throw new Error('Geofence input array is empty');\n                        }\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        // Verify geofence collection exists in aws-config.js\n                        try {\n                            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        }\n                        catch (error) {\n                            logger.debug(error);\n                            throw error;\n                        }\n                        validateGeofencesInput(geofences);\n                        PascalGeofences = geofences.map(function (_a) {\n                            var geofenceId = _a.geofenceId, polygon = _a.geometry.polygon;\n                            return {\n                                GeofenceId: geofenceId,\n                                Geometry: {\n                                    Polygon: polygon,\n                                },\n                            };\n                        });\n                        results = {\n                            successes: [],\n                            errors: [],\n                        };\n                        geofenceBatches = [];\n                        while (PascalGeofences.length > 0) {\n                            apiLimit = 10;\n                            geofenceBatches.push(PascalGeofences.splice(0, apiLimit));\n                        }\n                        return [4 /*yield*/, Promise.all(geofenceBatches.map(function (batch) { return __awaiter(_this, void 0, void 0, function () {\n                                var response, error_5;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            _a.trys.push([0, 2, , 3]);\n                                            return [4 /*yield*/, this._AmazonLocationServiceBatchPutGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                                        case 1:\n                                            response = _a.sent();\n                                            return [3 /*break*/, 3];\n                                        case 2:\n                                            error_5 = _a.sent();\n                                            // If the API call fails, add the geofences to the errors array and move to next batch\n                                            batch.forEach(function (geofence) {\n                                                results.errors.push({\n                                                    geofenceId: geofence.GeofenceId,\n                                                    error: {\n                                                        code: 'APIConnectionError',\n                                                        message: error_5.message,\n                                                    },\n                                                });\n                                            });\n                                            return [2 /*return*/];\n                                        case 3:\n                                            // Push all successes to results\n                                            response.Successes.forEach(function (success) {\n                                                var GeofenceId = success.GeofenceId, CreateTime = success.CreateTime, UpdateTime = success.UpdateTime;\n                                                results.successes.push({\n                                                    geofenceId: GeofenceId,\n                                                    createTime: CreateTime,\n                                                    updateTime: UpdateTime,\n                                                });\n                                            });\n                                            // Push all errors to results\n                                            response.Errors.forEach(function (error) {\n                                                var _a = error.Error, Code = _a.Code, Message = _a.Message, GeofenceId = error.GeofenceId;\n                                                results.errors.push({\n                                                    error: {\n                                                        code: Code,\n                                                        message: Message,\n                                                    },\n                                                    geofenceId: GeofenceId,\n                                                });\n                                            });\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Get geofence from a geofence collection\n     * @param geofenceId:string\n     * @param options?: Optional parameters for getGeofence\n     * @returns {Promise<AmazonLocationServiceGeofence>} - Promise that resolves to a geofence object\n     */\n    AmazonLocationServiceProvider.prototype.getGeofence = function (geofenceId, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, client, commandInput, command, response, error_6, GeofenceId, CreateTime, UpdateTime, Status, Geometry, geofence;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        // Verify geofence collection exists in aws-config.js\n                        try {\n                            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        }\n                        catch (error) {\n                            logger.debug(error);\n                            throw error;\n                        }\n                        validateGeofenceId(geofenceId);\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        commandInput = {\n                            GeofenceId: geofenceId,\n                            CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default,\n                        };\n                        command = new GetGeofenceCommand(commandInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_6 = _a.sent();\n                        logger.debug(error_6);\n                        throw error_6;\n                    case 5:\n                        GeofenceId = response.GeofenceId, CreateTime = response.CreateTime, UpdateTime = response.UpdateTime, Status = response.Status, Geometry = response.Geometry;\n                        geofence = {\n                            createTime: CreateTime,\n                            geofenceId: GeofenceId,\n                            geometry: {\n                                polygon: Geometry.Polygon,\n                            },\n                            status: Status,\n                            updateTime: UpdateTime,\n                        };\n                        return [2 /*return*/, geofence];\n                }\n            });\n        });\n    };\n    /**\n     * List geofences from a geofence collection\n     * @param  options?: ListGeofenceOptions\n     * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n     *   entries: list of geofences - 100 geofences are listed per page\n     *   nextToken: token for next page of geofences\n     */\n    AmazonLocationServiceProvider.prototype.listGeofences = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, client, listGeofencesInput, command, response, error_7, NextToken, Entries, results;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        // Verify geofence collection exists in aws-config.js\n                        try {\n                            this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        }\n                        catch (error) {\n                            logger.debug(error);\n                            throw error;\n                        }\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        listGeofencesInput = {\n                            NextToken: options === null || options === void 0 ? void 0 : options.nextToken,\n                            CollectionName: (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default,\n                        };\n                        command = new ListGeofencesCommand(listGeofencesInput);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 3:\n                        response = _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_7 = _a.sent();\n                        logger.debug(error_7);\n                        throw error_7;\n                    case 5:\n                        NextToken = response.NextToken, Entries = response.Entries;\n                        results = {\n                            entries: Entries.map(function (_a) {\n                                var GeofenceId = _a.GeofenceId, CreateTime = _a.CreateTime, UpdateTime = _a.UpdateTime, Status = _a.Status, Polygon = _a.Geometry.Polygon;\n                                return {\n                                    geofenceId: GeofenceId,\n                                    createTime: CreateTime,\n                                    updateTime: UpdateTime,\n                                    status: Status,\n                                    geometry: {\n                                        polygon: Polygon,\n                                    },\n                                };\n                            }),\n                            nextToken: NextToken,\n                        };\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * Delete geofences from a geofence collection\n     * @param geofenceIds: string|string[]\n     * @param options?: GeofenceOptions\n     * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n     *  successes: list of geofences successfully deleted\n     *  errors: list of geofences that failed to delete\n     */\n    AmazonLocationServiceProvider.prototype.deleteGeofences = function (geofenceIds, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentialsOK, badGeofenceIds, results, geofenceIdBatches, count;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (geofenceIds.length < 1) {\n                            throw new Error('GeofenceId input array is empty');\n                        }\n                        return [4 /*yield*/, this._ensureCredentials()];\n                    case 1:\n                        credentialsOK = _a.sent();\n                        if (!credentialsOK) {\n                            throw new Error('No credentials');\n                        }\n                        this._verifyGeofenceCollections(options === null || options === void 0 ? void 0 : options.collectionName);\n                        badGeofenceIds = geofenceIds.filter(function (geofenceId) {\n                            try {\n                                validateGeofenceId(geofenceId);\n                            }\n                            catch (error) {\n                                return true;\n                            }\n                        });\n                        if (badGeofenceIds.length > 0) {\n                            throw new Error(\"Invalid geofence ids: \" + badGeofenceIds.join(', '));\n                        }\n                        results = {\n                            successes: [],\n                            errors: [],\n                        };\n                        geofenceIdBatches = [];\n                        count = 0;\n                        while (count < geofenceIds.length) {\n                            geofenceIdBatches.push(geofenceIds.slice(count, (count += 10)));\n                        }\n                        return [4 /*yield*/, Promise.all(geofenceIdBatches.map(function (batch) { return __awaiter(_this, void 0, void 0, function () {\n                                var response, error_8, badGeofenceIds;\n                                var _a;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0:\n                                            _b.trys.push([0, 2, , 3]);\n                                            return [4 /*yield*/, this._AmazonLocationServiceBatchDeleteGeofenceCall(batch, (options === null || options === void 0 ? void 0 : options.collectionName) || this._config.geofenceCollections.default)];\n                                        case 1:\n                                            response = _b.sent();\n                                            return [3 /*break*/, 3];\n                                        case 2:\n                                            error_8 = _b.sent();\n                                            // If the API call fails, add the geofences to the errors array and move to next batch\n                                            batch.forEach(function (geofenceId) {\n                                                var errorObject = {\n                                                    geofenceId: geofenceId,\n                                                    error: {\n                                                        code: error_8.message,\n                                                        message: error_8.message,\n                                                    },\n                                                };\n                                                results.errors.push(errorObject);\n                                            });\n                                            return [2 /*return*/];\n                                        case 3:\n                                            badGeofenceIds = response.Errors.map(function (_a) {\n                                                var geofenceId = _a.geofenceId;\n                                                return geofenceId;\n                                            });\n                                            (_a = results.successes).push.apply(_a, __spread(batch.filter(function (Id) { return !badGeofenceIds.includes(Id); })));\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }))];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/, results];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    AmazonLocationServiceProvider.prototype._ensureCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, cred, error_9;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials)\n                            return [2 /*return*/, false];\n                        cred = Credentials.shear(credentials);\n                        logger.debug('Set credentials for storage. Credentials are:', cred);\n                        this._config.credentials = cred;\n                        return [2 /*return*/, true];\n                    case 2:\n                        error_9 = _a.sent();\n                        logger.debug('Ensure credentials error. Credentials are:', error_9);\n                        return [2 /*return*/, false];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._verifyMapResources = function () {\n        if (!this._config.maps) {\n            var errorString = \"No map resources found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n        if (!this._config.maps.default) {\n            var errorString = \"No default map resource found in amplify config, run 'amplify add geo' to create one and run `amplify push` after\";\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._verifySearchIndex = function (optionalSearchIndex) {\n        if ((!this._config.search_indices || !this._config.search_indices.default) &&\n            !optionalSearchIndex) {\n            var errorString = 'No Search Index found in amplify config, please run `amplify add geo` to create one and run `amplify push` after.';\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._verifyGeofenceCollections = function (optionalGeofenceCollectionName) {\n        if ((!this._config.geofenceCollections ||\n            !this._config.geofenceCollections.default) &&\n            !optionalGeofenceCollectionName) {\n            var errorString = 'No Geofence Collections found, please run `amplify add geo` to create one and run `amplify push` after.';\n            logger.debug(errorString);\n            throw new Error(errorString);\n        }\n    };\n    AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchPutGeofenceCall = function (PascalGeofences, collectionName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var geofenceInput, client, command, response, error_10;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        geofenceInput = {\n                            Entries: PascalGeofences,\n                            CollectionName: collectionName || this._config.geofenceCollections.default,\n                        };\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        command = new BatchPutGeofenceCommand(geofenceInput);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 2:\n                        response = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_10 = _a.sent();\n                        throw error_10;\n                    case 4: return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.prototype._AmazonLocationServiceBatchDeleteGeofenceCall = function (geofenceIds, collectionName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var deleteGeofencesInput, client, command, response, error_11;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        deleteGeofencesInput = {\n                            GeofenceIds: geofenceIds,\n                            CollectionName: collectionName || this._config.geofenceCollections.default,\n                        };\n                        client = new LocationClient({\n                            credentials: this._config.credentials,\n                            region: this._config.region,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        command = new BatchDeleteGeofenceCommand(deleteGeofencesInput);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, client.send(command)];\n                    case 2:\n                        response = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_11 = _a.sent();\n                        throw error_11;\n                    case 4: return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    AmazonLocationServiceProvider.CATEGORY = 'Geo';\n    AmazonLocationServiceProvider.PROVIDER_NAME = 'AmazonLocationService';\n    return AmazonLocationServiceProvider;\n}());\nexport { AmazonLocationServiceProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}