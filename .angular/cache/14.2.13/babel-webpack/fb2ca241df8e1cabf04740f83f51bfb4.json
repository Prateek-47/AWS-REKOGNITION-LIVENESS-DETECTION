{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, util } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nlet wasmReverse;\n\nfunction setup(backend) {\n  wasmReverse = backend.wasm.cwrap(Reverse, null, ['number', 'array', 'number', 'array', 'number', 'number' // out_id\n  ]);\n}\n\nexport function reverse(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dims\n  } = attrs;\n  const axes = util.parseAxisParam(dims, x.shape);\n\n  if (x.shape.length === 0) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  const out = backend.makeOutput(x.shape, x.dtype);\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const axesBytes = new Uint8Array(new Int32Array(axes).buffer);\n  const outShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  wasmReverse(xId, axesBytes, axes.length, outShapeBytes, x.shape.length, outId);\n  const reshaped = reshape({\n    inputs: {\n      x: out\n    },\n    attrs: {\n      shape: x.shape\n    },\n    backend\n  });\n  backend.disposeData(out.dataId);\n  return reshaped;\n}\nexport const reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'wasm',\n  kernelFunc: reverse,\n  setupFunc: setup\n};","map":{"version":3,"names":["Reverse","util","identity","reshape","wasmReverse","setup","backend","wasm","cwrap","reverse","args","inputs","attrs","x","dims","axes","parseAxisParam","shape","length","out","makeOutput","dtype","xId","dataIdMap","get","dataId","id","outId","axesBytes","Uint8Array","Int32Array","buffer","outShapeBytes","reshaped","disposeData","reverseConfig","kernelName","backendName","kernelFunc","setupFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Reverse.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, util } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nlet wasmReverse;\nfunction setup(backend) {\n    wasmReverse = backend.wasm.cwrap(Reverse, null, [\n        'number',\n        'array',\n        'number',\n        'array',\n        'number',\n        'number' // out_id\n    ]);\n}\nexport function reverse(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dims } = attrs;\n    const axes = util.parseAxisParam(dims, x.shape);\n    if (x.shape.length === 0) {\n        return identity({ inputs: { x }, backend });\n    }\n    const out = backend.makeOutput(x.shape, x.dtype);\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const axesBytes = new Uint8Array(new Int32Array(axes).buffer);\n    const outShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n    wasmReverse(xId, axesBytes, axes.length, outShapeBytes, x.shape.length, outId);\n    const reshaped = reshape({ inputs: { x: out }, attrs: { shape: x.shape }, backend });\n    backend.disposeData(out.dataId);\n    return reshaped;\n}\nexport const reverseConfig = {\n    kernelName: Reverse,\n    backendName: 'wasm',\n    kernelFunc: reverse,\n    setupFunc: setup\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,OAAT,EAAkBC,IAAlB,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,IAAIC,WAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,WAAW,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBR,OAAnB,EAA4B,IAA5B,EAAkC,CAC5C,QAD4C,EAE5C,OAF4C,EAG5C,QAH4C,EAI5C,OAJ4C,EAK5C,QAL4C,EAM5C,QAN4C,CAMnC;EANmC,CAAlC,CAAd;AAQH;;AACD,OAAO,SAASS,OAAT,CAAiBC,IAAjB,EAAuB;EAC1B,MAAM;IAAEC,MAAF;IAAUL,OAAV;IAAmBM;EAAnB,IAA6BF,IAAnC;EACA,MAAM;IAAEG;EAAF,IAAQF,MAAd;EACA,MAAM;IAAEG;EAAF,IAAWF,KAAjB;EACA,MAAMG,IAAI,GAAGd,IAAI,CAACe,cAAL,CAAoBF,IAApB,EAA0BD,CAAC,CAACI,KAA5B,CAAb;;EACA,IAAIJ,CAAC,CAACI,KAAF,CAAQC,MAAR,KAAmB,CAAvB,EAA0B;IACtB,OAAOhB,QAAQ,CAAC;MAAES,MAAM,EAAE;QAAEE;MAAF,CAAV;MAAiBP;IAAjB,CAAD,CAAf;EACH;;EACD,MAAMa,GAAG,GAAGb,OAAO,CAACc,UAAR,CAAmBP,CAAC,CAACI,KAArB,EAA4BJ,CAAC,CAACQ,KAA9B,CAAZ;EACA,MAAMC,GAAG,GAAGhB,OAAO,CAACiB,SAAR,CAAkBC,GAAlB,CAAsBX,CAAC,CAACY,MAAxB,EAAgCC,EAA5C;EACA,MAAMC,KAAK,GAAGrB,OAAO,CAACiB,SAAR,CAAkBC,GAAlB,CAAsBL,GAAG,CAACM,MAA1B,EAAkCC,EAAhD;EACA,MAAME,SAAS,GAAG,IAAIC,UAAJ,CAAe,IAAIC,UAAJ,CAAef,IAAf,EAAqBgB,MAApC,CAAlB;EACA,MAAMC,aAAa,GAAG,IAAIH,UAAJ,CAAe,IAAIC,UAAJ,CAAejB,CAAC,CAACI,KAAjB,EAAwBc,MAAvC,CAAtB;EACA3B,WAAW,CAACkB,GAAD,EAAMM,SAAN,EAAiBb,IAAI,CAACG,MAAtB,EAA8Bc,aAA9B,EAA6CnB,CAAC,CAACI,KAAF,CAAQC,MAArD,EAA6DS,KAA7D,CAAX;EACA,MAAMM,QAAQ,GAAG9B,OAAO,CAAC;IAAEQ,MAAM,EAAE;MAAEE,CAAC,EAAEM;IAAL,CAAV;IAAsBP,KAAK,EAAE;MAAEK,KAAK,EAAEJ,CAAC,CAACI;IAAX,CAA7B;IAAiDX;EAAjD,CAAD,CAAxB;EACAA,OAAO,CAAC4B,WAAR,CAAoBf,GAAG,CAACM,MAAxB;EACA,OAAOQ,QAAP;AACH;AACD,OAAO,MAAME,aAAa,GAAG;EACzBC,UAAU,EAAEpC,OADa;EAEzBqC,WAAW,EAAE,MAFY;EAGzBC,UAAU,EAAE7B,OAHa;EAIzB8B,SAAS,EAAElC;AAJc,CAAtB"},"metadata":{},"sourceType":"module"}