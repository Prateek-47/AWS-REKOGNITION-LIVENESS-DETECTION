{"ast":null,"code":"import { __awaiter, __generator, __read, __values } from \"tslib\";\nimport { OpType, QueryOne } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, indexNameFromKeys, monotonicUlidFactory } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\n\nvar AsyncStorageDatabase =\n/** @class */\nfunction () {\n  function AsyncStorageDatabase() {\n    /**\n     * Maps storeNames to a map of ulid->id\n     */\n    this._collectionInMemoryIndex = new Map();\n    this.storage = createInMemoryStore();\n  }\n  /**\n   * Collection index is map of stores (i.e. sync, metadata, mutation event, and data)\n   * @param storeName {string} - Name of the store\n   * @returns Map of ulid->id\n   */\n\n\n  AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n    if (!this._collectionInMemoryIndex.has(storeName)) {\n      this._collectionInMemoryIndex.set(storeName, new Map());\n    }\n\n    return this._collectionInMemoryIndex.get(storeName);\n  };\n  /**\n   * Return ULID for store if it exists, otherwise create a new one\n   * @param storeName {string} - Name of the store\n   * @returns ulid\n   */\n\n\n  AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n    if (!monotonicFactoriesMap.has(storeName)) {\n      monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n    }\n\n    return monotonicFactoriesMap.get(storeName);\n  };\n\n  AsyncStorageDatabase.prototype.init = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n\n      var e_1, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            this._collectionInMemoryIndex.clear();\n\n            return [4\n            /*yield*/\n            , this.storage.getAllKeys()];\n\n          case 1:\n            allKeys = _c.sent();\n            keysForCollectionEntries = [];\n            _c.label = 2;\n\n          case 2:\n            _c.trys.push([2, 12, 13, 14]);\n\n            allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n            _c.label = 3;\n\n          case 3:\n            if (!!allKeys_1_1.done) return [3\n            /*break*/\n            , 11];\n            key = allKeys_1_1.value;\n            _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n            if (!(dbName === DB_NAME)) return [3\n            /*break*/\n            , 10];\n            if (!(recordType === DATA)) return [3\n            /*break*/\n            , 9];\n            ulid = void 0;\n            if (!(id === undefined)) return [3\n            /*break*/\n            , 7];\n            id_1 = ulidOrId;\n            newUlid = this.getMonotonicFactory(storeName)();\n            oldKey = this.getLegacyKeyForItem(storeName, id_1);\n            newKey = this.getKeyForItem(storeName, id_1, newUlid);\n            return [4\n            /*yield*/\n            , this.storage.getItem(oldKey)];\n\n          case 4:\n            item = _c.sent();\n            return [4\n            /*yield*/\n            , this.storage.setItem(newKey, item)];\n\n          case 5:\n            _c.sent();\n\n            return [4\n            /*yield*/\n            , this.storage.removeItem(oldKey)];\n\n          case 6:\n            _c.sent();\n\n            ulid = newUlid;\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            ulid = ulidOrId;\n            _c.label = 8;\n\n          case 8:\n            this.getCollectionIndex(storeName).set(id, ulid);\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            if (recordType === COLLECTION) {\n              keysForCollectionEntries.push(key);\n            }\n\n            _c.label = 10;\n\n          case 10:\n            allKeys_1_1 = allKeys_1.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 11:\n            return [3\n            /*break*/\n            , 14];\n\n          case 12:\n            e_1_1 = _c.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            try {\n              if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 14:\n            if (!(keysForCollectionEntries.length > 0)) return [3\n            /*break*/\n            , 16];\n            return [4\n            /*yield*/\n            , this.storage.multiRemove(keysForCollectionEntries)];\n\n          case 15:\n            _c.sent();\n\n            _c.label = 16;\n\n          case 16:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.save = function (item, storeName, keys, keyValuesPath) {\n    var _a, _b;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var idxName, ulid, itemKey;\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            idxName = indexNameFromKeys(keys);\n            ulid = ((_a = this.getCollectionIndex(storeName)) === null || _a === void 0 ? void 0 : _a.get(idxName)) || this.getMonotonicFactory(storeName)();\n            itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid); // Set key in collection index\n\n            (_b = this.getCollectionIndex(storeName)) === null || _b === void 0 ? void 0 : _b.set(keyValuesPath, ulid); // Save item in db\n\n            return [4\n            /*yield*/\n            , this.storage.setItem(itemKey, JSON.stringify(item))];\n\n          case 1:\n            // Save item in db\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.batchSave = function (storeName, items, keys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, _loop_1, this_1, items_1, items_1_1, item, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n\n      var e_2, _a, e_3, _b;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            if (items.length === 0) {\n              return [2\n              /*return*/\n              , []];\n            }\n\n            result = [];\n            collection = this.getCollectionIndex(storeName);\n            keysToDelete = new Set();\n            keysToSave = new Set();\n            allItemsKeys = [];\n            itemsMap = {};\n\n            _loop_1 = function (item) {\n              // Extract keys from concatenated key path, map to item values\n              var keyValues = keys.map(function (field) {\n                return item[field];\n              });\n              var _deleted = item._deleted; // If id is in the store, retrieve, otherwise generate new ULID\n\n              var ulid = collection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) || this_1.getMonotonicFactory(storeName)(); // Generate the \"longer key\" for the item\n\n              var key = this_1.getKeyForItem(storeName, keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR), ulid);\n              allItemsKeys.push(key);\n              itemsMap[key] = {\n                ulid: ulid,\n                model: item\n              };\n\n              if (_deleted) {\n                keysToDelete.add(key);\n              } else {\n                keysToSave.add(key);\n              }\n            };\n\n            this_1 = this;\n\n            try {\n              /* Populate allItemKeys, keysToDelete, and keysToSave */\n              for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                item = items_1_1.value;\n\n                _loop_1(item);\n              }\n            } catch (e_2_1) {\n              e_2 = {\n                error: e_2_1\n              };\n            } finally {\n              try {\n                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n              } finally {\n                if (e_2) throw e_2.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.storage.multiGet(allItemsKeys)];\n\n          case 1:\n            existingRecordsMap = _c.sent();\n            existingRecordsKeys = existingRecordsMap.filter(function (_a) {\n              var _b = __read(_a, 2),\n                  v = _b[1];\n\n              return !!v;\n            }).reduce(function (set, _a) {\n              var _b = __read(_a, 1),\n                  k = _b[0];\n\n              return set.add(k);\n            }, new Set()); // Delete\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              if (keysToDelete.size === 0) {\n                resolve();\n                return;\n              }\n\n              var keysToDeleteArray = Array.from(keysToDelete);\n              keysToDeleteArray.forEach(function (key) {\n                // key: full db key\n                // keys: PK and/or SK keys\n                var primaryKeyValues = keys.map(function (field) {\n                  return itemsMap[key].model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.delete(primaryKeyValues);\n              });\n\n              _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n\n          case 2:\n            // Delete\n            _c.sent(); // Save\n\n\n            return [4\n            /*yield*/\n            , new Promise(function (resolve, reject) {\n              if (keysToSave.size === 0) {\n                resolve();\n                return;\n              }\n\n              var entriesToSet = Array.from(keysToSave).map(function (key) {\n                return [key, JSON.stringify(itemsMap[key].model)];\n              });\n              keysToSave.forEach(function (key) {\n                var _a = itemsMap[key],\n                    model = _a.model,\n                    ulid = _a.ulid; // Retrieve values from model, use as key for collection index\n\n                var keyValues = keys.map(function (field) {\n                  return model[field];\n                }).join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                collection.set(keyValues, ulid);\n              });\n\n              _this.storage.multiSet(entriesToSet, function (errors) {\n                if (errors && errors.length > 0) {\n                  reject(errors);\n                } else {\n                  resolve();\n                }\n              });\n            })];\n\n          case 3:\n            // Save\n            _c.sent();\n\n            try {\n              for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                key = allItemsKeys_1_1.value;\n\n                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                  result.push([itemsMap[key].model, OpType.DELETE]);\n                } else if (keysToSave.has(key)) {\n                  result.push([itemsMap[key].model, existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT]);\n                }\n              }\n            } catch (e_3_1) {\n              e_3 = {\n                error: e_3_1\n              };\n            } finally {\n              try {\n                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n              } finally {\n                if (e_3) throw e_3.error;\n              }\n            }\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.get = function (keyValuePath, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey, recordAsString, record;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(keyValuePath);\n            itemKey = this.getKeyForItem(storeName, keyValuePath, ulid);\n            return [4\n            /*yield*/\n            , this.storage.getItem(itemKey)];\n\n          case 1:\n            recordAsString = _a.sent();\n            record = recordAsString && JSON.parse(recordAsString);\n            return [2\n            /*return*/\n            , record];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = __read(firstOrLast === QueryOne.FIRST ? function () {\n              var e_4, _a, _b;\n\n              var id, ulid;\n\n              try {\n                for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                  _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                  break;\n                } // Get first element of the set\n\n              } catch (e_4_1) {\n                e_4 = {\n                  error: e_4_1\n                };\n              } finally {\n                try {\n                  if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                } finally {\n                  if (e_4) throw e_4.error;\n                }\n              }\n\n              return [id, ulid];\n            }() : function () {\n              var e_5, _a, _b;\n\n              var id, ulid;\n\n              try {\n                for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                  _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                  ;\n                } // Get last element of the set\n\n              } catch (e_5_1) {\n                e_5 = {\n                  error: e_5_1\n                };\n              } finally {\n                try {\n                  if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                } finally {\n                  if (e_5) throw e_5.error;\n                }\n              }\n\n              return [id, ulid];\n            }(), 2), itemId = _a[0], ulid = _a[1];\n            itemKey = this.getKeyForItem(storeName, itemId, ulid);\n            _b = itemKey;\n            if (!_b) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.storage.getItem(itemKey)];\n\n          case 1:\n            _b = _c.sent();\n            _c.label = 2;\n\n          case 2:\n            itemString = _b;\n            result = itemString ? JSON.parse(itemString) || undefined : undefined;\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * This function gets all the records stored in async storage for a particular storeName\n   * It then loads all the records for that filtered set of keys using multiGet()\n   */\n\n\n  AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n    return __awaiter(this, void 0, void 0, function () {\n      var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n\n      var e_6, _e;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            collection = this.getCollectionIndex(storeName);\n            _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n            start = Math.max(0, page * limit) || 0;\n            end = limit > 0 ? start + limit : undefined;\n            keysForStore = [];\n            count = 0;\n\n            try {\n              for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                count++;\n\n                if (count <= start) {\n                  continue;\n                }\n\n                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n\n                if (count === end) {\n                  break;\n                }\n              }\n            } catch (e_6_1) {\n              e_6 = {\n                error: e_6_1\n              };\n            } finally {\n              try {\n                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n              } finally {\n                if (e_6) throw e_6.error;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.storage.multiGet(keysForStore)];\n\n          case 1:\n            storeRecordStrings = _f.sent();\n            records = storeRecordStrings.filter(function (_a) {\n              var _b = __read(_a, 2),\n                  value = _b[1];\n\n              return value;\n            }).map(function (_a) {\n              var _b = __read(_a, 2),\n                  value = _b[1];\n\n              return JSON.parse(value);\n            });\n            return [2\n            /*return*/\n            , records];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.delete = function (key, storeName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ulid, itemKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ulid = this.getCollectionIndex(storeName).get(key);\n            itemKey = this.getKeyForItem(storeName, key, ulid);\n            this.getCollectionIndex(storeName).delete(key);\n            return [4\n            /*yield*/\n            , this.storage.removeItem(itemKey)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Clear the AsyncStorage of all DataStore entries\n   */\n\n\n  AsyncStorageDatabase.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var allKeys, allDataStoreKeys;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.storage.getAllKeys()];\n\n          case 1:\n            allKeys = _a.sent();\n            allDataStoreKeys = allKeys.filter(function (key) {\n              return key.startsWith(DB_NAME);\n            });\n            return [4\n            /*yield*/\n            , this.storage.multiRemove(allDataStoreKeys)];\n\n          case 2:\n            _a.sent();\n\n            this._collectionInMemoryIndex.clear();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n  };\n\n  AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n    return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n  };\n\n  AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n    return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n  };\n\n  return AsyncStorageDatabase;\n}();\n\nexport default AsyncStorageDatabase;","map":{"version":3,"names":["__awaiter","__generator","__read","__values","OpType","QueryOne","DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR","indexNameFromKeys","monotonicUlidFactory","createInMemoryStore","DB_NAME","COLLECTION","DATA","monotonicFactoriesMap","Map","AsyncStorageDatabase","_collectionInMemoryIndex","storage","prototype","getCollectionIndex","storeName","has","set","get","getMonotonicFactory","init","allKeys","keysForCollectionEntries","allKeys_1","allKeys_1_1","key","_a","dbName","recordType","ulidOrId","id","ulid","id_1","newUlid","oldKey","newKey","item","e_1_1","e_1","_b","_c","label","clear","getAllKeys","sent","trys","push","next","done","value","split","undefined","getLegacyKeyForItem","getKeyForItem","getItem","setItem","removeItem","error","return","call","length","multiRemove","save","keys","keyValuesPath","idxName","itemKey","JSON","stringify","batchSave","items","result","collection","keysToDelete","keysToSave","allItemsKeys","itemsMap","_loop_1","this_1","items_1","items_1_1","existingRecordsMap","existingRecordsKeys","allItemsKeys_1","allItemsKeys_1_1","e_2","e_3","_this","Set","keyValues","map","field","_deleted","join","model","add","e_2_1","multiGet","filter","v","reduce","k","Promise","resolve","reject","size","keysToDeleteArray","Array","from","forEach","primaryKeyValues","delete","errors","entriesToSet","multiSet","DELETE","UPDATE","INSERT","e_3_1","keyValuePath","recordAsString","record","parse","getOne","firstOrLast","itemId","itemString","FIRST","e_4","collection_1","collection_1_1","e_4_1","e_5","collection_2","collection_2_1","e_5_1","getAll","pagination","page","limit","start","end","keysForStore","count","collection_3","collection_3_1","_d","storeRecordStrings","records","e_6","_e","_f","Math","max","e_6_1","allDataStoreKeys","startsWith","getKeyPrefixForStoreItems"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/storage/adapter/AsyncStorageDatabase.js"],"sourcesContent":["import { __awaiter, __generator, __read, __values } from \"tslib\";\nimport { OpType, QueryOne, } from '../../types';\nimport { DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR, indexNameFromKeys, monotonicUlidFactory, } from '../../util';\nimport { createInMemoryStore } from './InMemoryStore';\nvar DB_NAME = '@AmplifyDatastore';\nvar COLLECTION = 'Collection';\nvar DATA = 'Data';\nvar monotonicFactoriesMap = new Map();\nvar AsyncStorageDatabase = /** @class */ (function () {\n    function AsyncStorageDatabase() {\n        /**\n         * Maps storeNames to a map of ulid->id\n         */\n        this._collectionInMemoryIndex = new Map();\n        this.storage = createInMemoryStore();\n    }\n    /**\n     * Collection index is map of stores (i.e. sync, metadata, mutation event, and data)\n     * @param storeName {string} - Name of the store\n     * @returns Map of ulid->id\n     */\n    AsyncStorageDatabase.prototype.getCollectionIndex = function (storeName) {\n        if (!this._collectionInMemoryIndex.has(storeName)) {\n            this._collectionInMemoryIndex.set(storeName, new Map());\n        }\n        return this._collectionInMemoryIndex.get(storeName);\n    };\n    /**\n     * Return ULID for store if it exists, otherwise create a new one\n     * @param storeName {string} - Name of the store\n     * @returns ulid\n     */\n    AsyncStorageDatabase.prototype.getMonotonicFactory = function (storeName) {\n        if (!monotonicFactoriesMap.has(storeName)) {\n            monotonicFactoriesMap.set(storeName, monotonicUlidFactory());\n        }\n        return monotonicFactoriesMap.get(storeName);\n    };\n    AsyncStorageDatabase.prototype.init = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var allKeys, keysForCollectionEntries, allKeys_1, allKeys_1_1, key, _a, dbName, storeName, recordType, ulidOrId, id, ulid, id_1, newUlid, oldKey, newKey, item, e_1_1;\n            var e_1, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        this._collectionInMemoryIndex.clear();\n                        return [4 /*yield*/, this.storage.getAllKeys()];\n                    case 1:\n                        allKeys = _c.sent();\n                        keysForCollectionEntries = [];\n                        _c.label = 2;\n                    case 2:\n                        _c.trys.push([2, 12, 13, 14]);\n                        allKeys_1 = __values(allKeys), allKeys_1_1 = allKeys_1.next();\n                        _c.label = 3;\n                    case 3:\n                        if (!!allKeys_1_1.done) return [3 /*break*/, 11];\n                        key = allKeys_1_1.value;\n                        _a = __read(key.split('::'), 5), dbName = _a[0], storeName = _a[1], recordType = _a[2], ulidOrId = _a[3], id = _a[4];\n                        if (!(dbName === DB_NAME)) return [3 /*break*/, 10];\n                        if (!(recordType === DATA)) return [3 /*break*/, 9];\n                        ulid = void 0;\n                        if (!(id === undefined)) return [3 /*break*/, 7];\n                        id_1 = ulidOrId;\n                        newUlid = this.getMonotonicFactory(storeName)();\n                        oldKey = this.getLegacyKeyForItem(storeName, id_1);\n                        newKey = this.getKeyForItem(storeName, id_1, newUlid);\n                        return [4 /*yield*/, this.storage.getItem(oldKey)];\n                    case 4:\n                        item = _c.sent();\n                        return [4 /*yield*/, this.storage.setItem(newKey, item)];\n                    case 5:\n                        _c.sent();\n                        return [4 /*yield*/, this.storage.removeItem(oldKey)];\n                    case 6:\n                        _c.sent();\n                        ulid = newUlid;\n                        return [3 /*break*/, 8];\n                    case 7:\n                        ulid = ulidOrId;\n                        _c.label = 8;\n                    case 8:\n                        this.getCollectionIndex(storeName).set(id, ulid);\n                        return [3 /*break*/, 10];\n                    case 9:\n                        if (recordType === COLLECTION) {\n                            keysForCollectionEntries.push(key);\n                        }\n                        _c.label = 10;\n                    case 10:\n                        allKeys_1_1 = allKeys_1.next();\n                        return [3 /*break*/, 3];\n                    case 11: return [3 /*break*/, 14];\n                    case 12:\n                        e_1_1 = _c.sent();\n                        e_1 = { error: e_1_1 };\n                        return [3 /*break*/, 14];\n                    case 13:\n                        try {\n                            if (allKeys_1_1 && !allKeys_1_1.done && (_b = allKeys_1.return)) _b.call(allKeys_1);\n                        }\n                        finally { if (e_1) throw e_1.error; }\n                        return [7 /*endfinally*/];\n                    case 14:\n                        if (!(keysForCollectionEntries.length > 0)) return [3 /*break*/, 16];\n                        return [4 /*yield*/, this.storage.multiRemove(keysForCollectionEntries)];\n                    case 15:\n                        _c.sent();\n                        _c.label = 16;\n                    case 16: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.save = function (item, storeName, keys, keyValuesPath) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function () {\n            var idxName, ulid, itemKey;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        idxName = indexNameFromKeys(keys);\n                        ulid = ((_a = this.getCollectionIndex(storeName)) === null || _a === void 0 ? void 0 : _a.get(idxName)) ||\n                            this.getMonotonicFactory(storeName)();\n                        itemKey = this.getKeyForItem(storeName, keyValuesPath, ulid);\n                        // Set key in collection index\n                        (_b = this.getCollectionIndex(storeName)) === null || _b === void 0 ? void 0 : _b.set(keyValuesPath, ulid);\n                        // Save item in db\n                        return [4 /*yield*/, this.storage.setItem(itemKey, JSON.stringify(item))];\n                    case 1:\n                        // Save item in db\n                        _c.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.batchSave = function (storeName, items, keys) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, collection, keysToDelete, keysToSave, allItemsKeys, itemsMap, _loop_1, this_1, items_1, items_1_1, item, existingRecordsMap, existingRecordsKeys, allItemsKeys_1, allItemsKeys_1_1, key;\n            var e_2, _a, e_3, _b;\n            var _this = this;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (items.length === 0) {\n                            return [2 /*return*/, []];\n                        }\n                        result = [];\n                        collection = this.getCollectionIndex(storeName);\n                        keysToDelete = new Set();\n                        keysToSave = new Set();\n                        allItemsKeys = [];\n                        itemsMap = {};\n                        _loop_1 = function (item) {\n                            // Extract keys from concatenated key path, map to item values\n                            var keyValues = keys.map(function (field) { return item[field]; });\n                            var _deleted = item._deleted;\n                            // If id is in the store, retrieve, otherwise generate new ULID\n                            var ulid = collection.get(keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR)) ||\n                                this_1.getMonotonicFactory(storeName)();\n                            // Generate the \"longer key\" for the item\n                            var key = this_1.getKeyForItem(storeName, keyValues.join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR), ulid);\n                            allItemsKeys.push(key);\n                            itemsMap[key] = { ulid: ulid, model: item };\n                            if (_deleted) {\n                                keysToDelete.add(key);\n                            }\n                            else {\n                                keysToSave.add(key);\n                            }\n                        };\n                        this_1 = this;\n                        try {\n                            /* Populate allItemKeys, keysToDelete, and keysToSave */\n                            for (items_1 = __values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {\n                                item = items_1_1.value;\n                                _loop_1(item);\n                            }\n                        }\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                        finally {\n                            try {\n                                if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                        }\n                        return [4 /*yield*/, this.storage.multiGet(allItemsKeys)];\n                    case 1:\n                        existingRecordsMap = _c.sent();\n                        existingRecordsKeys = existingRecordsMap\n                            .filter(function (_a) {\n                            var _b = __read(_a, 2), v = _b[1];\n                            return !!v;\n                        })\n                            .reduce(function (set, _a) {\n                            var _b = __read(_a, 1), k = _b[0];\n                            return set.add(k);\n                        }, new Set());\n                        // Delete\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                if (keysToDelete.size === 0) {\n                                    resolve();\n                                    return;\n                                }\n                                var keysToDeleteArray = Array.from(keysToDelete);\n                                keysToDeleteArray.forEach(function (key) {\n                                    // key: full db key\n                                    // keys: PK and/or SK keys\n                                    var primaryKeyValues = keys\n                                        .map(function (field) { return itemsMap[key].model[field]; })\n                                        .join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                                    collection.delete(primaryKeyValues);\n                                });\n                                _this.storage.multiRemove(keysToDeleteArray, function (errors) {\n                                    if (errors && errors.length > 0) {\n                                        reject(errors);\n                                    }\n                                    else {\n                                        resolve();\n                                    }\n                                });\n                            })];\n                    case 2:\n                        // Delete\n                        _c.sent();\n                        // Save\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                if (keysToSave.size === 0) {\n                                    resolve();\n                                    return;\n                                }\n                                var entriesToSet = Array.from(keysToSave).map(function (key) { return [\n                                    key,\n                                    JSON.stringify(itemsMap[key].model),\n                                ]; });\n                                keysToSave.forEach(function (key) {\n                                    var _a = itemsMap[key], model = _a.model, ulid = _a.ulid;\n                                    // Retrieve values from model, use as key for collection index\n                                    var keyValues = keys\n                                        .map(function (field) { return model[field]; })\n                                        .join(DEFAULT_PRIMARY_KEY_VALUE_SEPARATOR);\n                                    collection.set(keyValues, ulid);\n                                });\n                                _this.storage.multiSet(entriesToSet, function (errors) {\n                                    if (errors && errors.length > 0) {\n                                        reject(errors);\n                                    }\n                                    else {\n                                        resolve();\n                                    }\n                                });\n                            })];\n                    case 3:\n                        // Save\n                        _c.sent();\n                        try {\n                            for (allItemsKeys_1 = __values(allItemsKeys), allItemsKeys_1_1 = allItemsKeys_1.next(); !allItemsKeys_1_1.done; allItemsKeys_1_1 = allItemsKeys_1.next()) {\n                                key = allItemsKeys_1_1.value;\n                                if (keysToDelete.has(key) && existingRecordsKeys.has(key)) {\n                                    result.push([itemsMap[key].model, OpType.DELETE]);\n                                }\n                                else if (keysToSave.has(key)) {\n                                    result.push([\n                                        itemsMap[key].model,\n                                        existingRecordsKeys.has(key) ? OpType.UPDATE : OpType.INSERT,\n                                    ]);\n                                }\n                            }\n                        }\n                        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                        finally {\n                            try {\n                                if (allItemsKeys_1_1 && !allItemsKeys_1_1.done && (_b = allItemsKeys_1.return)) _b.call(allItemsKeys_1);\n                            }\n                            finally { if (e_3) throw e_3.error; }\n                        }\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.get = function (keyValuePath, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ulid, itemKey, recordAsString, record;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ulid = this.getCollectionIndex(storeName).get(keyValuePath);\n                        itemKey = this.getKeyForItem(storeName, keyValuePath, ulid);\n                        return [4 /*yield*/, this.storage.getItem(itemKey)];\n                    case 1:\n                        recordAsString = _a.sent();\n                        record = recordAsString && JSON.parse(recordAsString);\n                        return [2 /*return*/, record];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.getOne = function (firstOrLast, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var collection, _a, itemId, ulid, itemKey, itemString, _b, result;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        collection = this.getCollectionIndex(storeName);\n                        _a = __read(firstOrLast === QueryOne.FIRST\n                            ? (function () {\n                                var e_4, _a, _b;\n                                var id, ulid;\n                                try {\n                                    for (var collection_1 = __values(collection), collection_1_1 = collection_1.next(); !collection_1_1.done; collection_1_1 = collection_1.next()) {\n                                        _b = __read(collection_1_1.value, 2), id = _b[0], ulid = _b[1];\n                                        break;\n                                    } // Get first element of the set\n                                }\n                                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                                finally {\n                                    try {\n                                        if (collection_1_1 && !collection_1_1.done && (_a = collection_1.return)) _a.call(collection_1);\n                                    }\n                                    finally { if (e_4) throw e_4.error; }\n                                }\n                                return [id, ulid];\n                            })()\n                            : (function () {\n                                var e_5, _a, _b;\n                                var id, ulid;\n                                try {\n                                    for (var collection_2 = __values(collection), collection_2_1 = collection_2.next(); !collection_2_1.done; collection_2_1 = collection_2.next()) {\n                                        _b = __read(collection_2_1.value, 2), id = _b[0], ulid = _b[1];\n                                        ;\n                                    } // Get last element of the set\n                                }\n                                catch (e_5_1) { e_5 = { error: e_5_1 }; }\n                                finally {\n                                    try {\n                                        if (collection_2_1 && !collection_2_1.done && (_a = collection_2.return)) _a.call(collection_2);\n                                    }\n                                    finally { if (e_5) throw e_5.error; }\n                                }\n                                return [id, ulid];\n                            })(), 2), itemId = _a[0], ulid = _a[1];\n                        itemKey = this.getKeyForItem(storeName, itemId, ulid);\n                        _b = itemKey;\n                        if (!_b) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.storage.getItem(itemKey)];\n                    case 1:\n                        _b = (_c.sent());\n                        _c.label = 2;\n                    case 2:\n                        itemString = _b;\n                        result = itemString ? JSON.parse(itemString) || undefined : undefined;\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * This function gets all the records stored in async storage for a particular storeName\n     * It then loads all the records for that filtered set of keys using multiGet()\n     */\n    AsyncStorageDatabase.prototype.getAll = function (storeName, pagination) {\n        return __awaiter(this, void 0, void 0, function () {\n            var collection, _a, _b, page, _c, limit, start, end, keysForStore, count, collection_3, collection_3_1, _d, id, ulid, storeRecordStrings, records;\n            var e_6, _e;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        collection = this.getCollectionIndex(storeName);\n                        _a = pagination || {}, _b = _a.page, page = _b === void 0 ? 0 : _b, _c = _a.limit, limit = _c === void 0 ? 0 : _c;\n                        start = Math.max(0, page * limit) || 0;\n                        end = limit > 0 ? start + limit : undefined;\n                        keysForStore = [];\n                        count = 0;\n                        try {\n                            for (collection_3 = __values(collection), collection_3_1 = collection_3.next(); !collection_3_1.done; collection_3_1 = collection_3.next()) {\n                                _d = __read(collection_3_1.value, 2), id = _d[0], ulid = _d[1];\n                                count++;\n                                if (count <= start) {\n                                    continue;\n                                }\n                                keysForStore.push(this.getKeyForItem(storeName, id, ulid));\n                                if (count === end) {\n                                    break;\n                                }\n                            }\n                        }\n                        catch (e_6_1) { e_6 = { error: e_6_1 }; }\n                        finally {\n                            try {\n                                if (collection_3_1 && !collection_3_1.done && (_e = collection_3.return)) _e.call(collection_3);\n                            }\n                            finally { if (e_6) throw e_6.error; }\n                        }\n                        return [4 /*yield*/, this.storage.multiGet(keysForStore)];\n                    case 1:\n                        storeRecordStrings = _f.sent();\n                        records = storeRecordStrings\n                            .filter(function (_a) {\n                            var _b = __read(_a, 2), value = _b[1];\n                            return value;\n                        })\n                            .map(function (_a) {\n                            var _b = __read(_a, 2), value = _b[1];\n                            return JSON.parse(value);\n                        });\n                        return [2 /*return*/, records];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.delete = function (key, storeName) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ulid, itemKey;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ulid = this.getCollectionIndex(storeName).get(key);\n                        itemKey = this.getKeyForItem(storeName, key, ulid);\n                        this.getCollectionIndex(storeName).delete(key);\n                        return [4 /*yield*/, this.storage.removeItem(itemKey)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Clear the AsyncStorage of all DataStore entries\n     */\n    AsyncStorageDatabase.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var allKeys, allDataStoreKeys;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.storage.getAllKeys()];\n                    case 1:\n                        allKeys = _a.sent();\n                        allDataStoreKeys = allKeys.filter(function (key) { return key.startsWith(DB_NAME); });\n                        return [4 /*yield*/, this.storage.multiRemove(allDataStoreKeys)];\n                    case 2:\n                        _a.sent();\n                        this._collectionInMemoryIndex.clear();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AsyncStorageDatabase.prototype.getKeyForItem = function (storeName, id, ulid) {\n        return this.getKeyPrefixForStoreItems(storeName) + \"::\" + ulid + \"::\" + id;\n    };\n    AsyncStorageDatabase.prototype.getLegacyKeyForItem = function (storeName, id) {\n        return this.getKeyPrefixForStoreItems(storeName) + \"::\" + id;\n    };\n    AsyncStorageDatabase.prototype.getKeyPrefixForStoreItems = function (storeName) {\n        return DB_NAME + \"::\" + storeName + \"::\" + DATA;\n    };\n    return AsyncStorageDatabase;\n}());\nexport default AsyncStorageDatabase;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}