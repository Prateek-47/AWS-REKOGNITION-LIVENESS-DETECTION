{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __values } from \"tslib\";\n\nvar DoubleLinkedNode =\n/** @class */\nfunction () {\n  function DoubleLinkedNode(keyVal) {\n    this.key = keyVal ? keyVal : '';\n    this.prevNode = null;\n    this.nextNode = null;\n  }\n\n  return DoubleLinkedNode;\n}();\n/**\n * double linked list plus a hash table inside\n * each key in the cache stored as a node in the list\n * recently visited node will be rotated to the head\n * so the Last Recently Visited node will be at the tail\n *\n * @member head - dummy head of the linked list\n * @member tail - dummy tail of the linked list\n * @member hashtable - the hashtable which maps cache key to list node\n * @member length - length of the list\n */\n\n\nvar CacheList =\n/** @class */\nfunction () {\n  /**\n   * initialization\n   */\n  function CacheList() {\n    this.head = new DoubleLinkedNode();\n    this.tail = new DoubleLinkedNode();\n    this.hashtable = {};\n    this.length = 0;\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n  }\n  /**\n   * insert node to the head of the list\n   *\n   * @param node\n   */\n\n\n  CacheList.prototype.insertNodeToHead = function (node) {\n    var tmp = this.head.nextNode;\n    this.head.nextNode = node;\n    node.nextNode = tmp;\n    node.prevNode = this.head;\n    tmp.prevNode = node;\n    this.length = this.length + 1;\n  };\n  /**\n   * remove node\n   *\n   * @param node\n   */\n\n\n  CacheList.prototype.removeNode = function (node) {\n    node.prevNode.nextNode = node.nextNode;\n    node.nextNode.prevNode = node.prevNode;\n    node.prevNode = null;\n    node.nextNode = null;\n    this.length = this.length - 1;\n  };\n  /**\n   * @return true if list is empty\n   */\n\n\n  CacheList.prototype.isEmpty = function () {\n    return this.length === 0;\n  };\n  /**\n   * refresh node so it is rotated to the head\n   *\n   * @param key - key of the node\n   */\n\n\n  CacheList.prototype.refresh = function (key) {\n    var node = this.hashtable[key];\n    this.removeNode(node);\n    this.insertNodeToHead(node);\n  };\n  /**\n   * insert new node to the head and add it in the hashtable\n   *\n   * @param key - the key of the node\n   */\n\n\n  CacheList.prototype.insertItem = function (key) {\n    var node = new DoubleLinkedNode(key);\n    this.hashtable[key] = node;\n    this.insertNodeToHead(node);\n  };\n  /**\n   * @return the LAST Recently Visited key\n   */\n\n\n  CacheList.prototype.getLastItem = function () {\n    return this.tail.prevNode.key;\n  };\n  /**\n   * remove the cache key from the list and hashtable\n   * @param key - the key of the node\n   */\n\n\n  CacheList.prototype.removeItem = function (key) {\n    var removedItem = this.hashtable[key];\n    this.removeNode(removedItem);\n    delete this.hashtable[key];\n  };\n  /**\n   * @return length of the list\n   */\n\n\n  CacheList.prototype.getSize = function () {\n    return this.length;\n  };\n  /**\n   * @return true if the key is in the hashtable\n   * @param key\n   */\n\n\n  CacheList.prototype.containsKey = function (key) {\n    return key in this.hashtable;\n  };\n  /**\n   * clean up the list and hashtable\n   */\n\n\n  CacheList.prototype.clearList = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(Object.keys(this.hashtable)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var key = _c.value;\n\n        if (this.hashtable.hasOwnProperty(key)) {\n          delete this.hashtable[key];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this.head.nextNode = this.tail;\n    this.tail.prevNode = this.head;\n    this.length = 0;\n  };\n  /**\n   * @return all keys in the hashtable\n   */\n\n\n  CacheList.prototype.getKeys = function () {\n    return Object.keys(this.hashtable);\n  };\n  /**\n   * mainly for test\n   *\n   * @param key\n   * @return true if key is the head node\n   */\n\n\n  CacheList.prototype.isHeadNode = function (key) {\n    var node = this.hashtable[key];\n    return node.prevNode === this.head;\n  };\n  /**\n   * mainly for test\n   *\n   * @param key\n   * @return true if key is the tail node\n   */\n\n\n  CacheList.prototype.isTailNode = function (key) {\n    var node = this.hashtable[key];\n    return node.nextNode === this.tail;\n  };\n\n  return CacheList;\n}();\n\nexport default CacheList;","map":{"version":3,"names":["__values","DoubleLinkedNode","keyVal","key","prevNode","nextNode","CacheList","head","tail","hashtable","length","prototype","insertNodeToHead","node","tmp","removeNode","isEmpty","refresh","insertItem","getLastItem","removeItem","removedItem","getSize","containsKey","clearList","e_1","_a","_b","Object","keys","_c","next","done","value","hasOwnProperty","e_1_1","error","return","call","getKeys","isHeadNode","isTailNode"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/cache/lib-esm/Utils/CacheList.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __values } from \"tslib\";\nvar DoubleLinkedNode = /** @class */ (function () {\n    function DoubleLinkedNode(keyVal) {\n        this.key = keyVal ? keyVal : '';\n        this.prevNode = null;\n        this.nextNode = null;\n    }\n    return DoubleLinkedNode;\n}());\n/**\n * double linked list plus a hash table inside\n * each key in the cache stored as a node in the list\n * recently visited node will be rotated to the head\n * so the Last Recently Visited node will be at the tail\n *\n * @member head - dummy head of the linked list\n * @member tail - dummy tail of the linked list\n * @member hashtable - the hashtable which maps cache key to list node\n * @member length - length of the list\n */\nvar CacheList = /** @class */ (function () {\n    /**\n     * initialization\n     */\n    function CacheList() {\n        this.head = new DoubleLinkedNode();\n        this.tail = new DoubleLinkedNode();\n        this.hashtable = {};\n        this.length = 0;\n        this.head.nextNode = this.tail;\n        this.tail.prevNode = this.head;\n    }\n    /**\n     * insert node to the head of the list\n     *\n     * @param node\n     */\n    CacheList.prototype.insertNodeToHead = function (node) {\n        var tmp = this.head.nextNode;\n        this.head.nextNode = node;\n        node.nextNode = tmp;\n        node.prevNode = this.head;\n        tmp.prevNode = node;\n        this.length = this.length + 1;\n    };\n    /**\n     * remove node\n     *\n     * @param node\n     */\n    CacheList.prototype.removeNode = function (node) {\n        node.prevNode.nextNode = node.nextNode;\n        node.nextNode.prevNode = node.prevNode;\n        node.prevNode = null;\n        node.nextNode = null;\n        this.length = this.length - 1;\n    };\n    /**\n     * @return true if list is empty\n     */\n    CacheList.prototype.isEmpty = function () {\n        return this.length === 0;\n    };\n    /**\n     * refresh node so it is rotated to the head\n     *\n     * @param key - key of the node\n     */\n    CacheList.prototype.refresh = function (key) {\n        var node = this.hashtable[key];\n        this.removeNode(node);\n        this.insertNodeToHead(node);\n    };\n    /**\n     * insert new node to the head and add it in the hashtable\n     *\n     * @param key - the key of the node\n     */\n    CacheList.prototype.insertItem = function (key) {\n        var node = new DoubleLinkedNode(key);\n        this.hashtable[key] = node;\n        this.insertNodeToHead(node);\n    };\n    /**\n     * @return the LAST Recently Visited key\n     */\n    CacheList.prototype.getLastItem = function () {\n        return this.tail.prevNode.key;\n    };\n    /**\n     * remove the cache key from the list and hashtable\n     * @param key - the key of the node\n     */\n    CacheList.prototype.removeItem = function (key) {\n        var removedItem = this.hashtable[key];\n        this.removeNode(removedItem);\n        delete this.hashtable[key];\n    };\n    /**\n     * @return length of the list\n     */\n    CacheList.prototype.getSize = function () {\n        return this.length;\n    };\n    /**\n     * @return true if the key is in the hashtable\n     * @param key\n     */\n    CacheList.prototype.containsKey = function (key) {\n        return key in this.hashtable;\n    };\n    /**\n     * clean up the list and hashtable\n     */\n    CacheList.prototype.clearList = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.keys(this.hashtable)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var key = _c.value;\n                if (this.hashtable.hasOwnProperty(key)) {\n                    delete this.hashtable[key];\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.head.nextNode = this.tail;\n        this.tail.prevNode = this.head;\n        this.length = 0;\n    };\n    /**\n     * @return all keys in the hashtable\n     */\n    CacheList.prototype.getKeys = function () {\n        return Object.keys(this.hashtable);\n    };\n    /**\n     * mainly for test\n     *\n     * @param key\n     * @return true if key is the head node\n     */\n    CacheList.prototype.isHeadNode = function (key) {\n        var node = this.hashtable[key];\n        return node.prevNode === this.head;\n    };\n    /**\n     * mainly for test\n     *\n     * @param key\n     * @return true if key is the tail node\n     */\n    CacheList.prototype.isTailNode = function (key) {\n        var node = this.hashtable[key];\n        return node.nextNode === this.tail;\n    };\n    return CacheList;\n}());\nexport default CacheList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}