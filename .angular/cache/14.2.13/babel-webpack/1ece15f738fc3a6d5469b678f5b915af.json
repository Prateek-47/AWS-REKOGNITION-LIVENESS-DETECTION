{"ast":null,"code":"import { __rest } from '../../../node_modules/tslib/tslib.es6.mjs';\nimport React__default, { useCallback } from 'react';\nimport { useSelector } from '@xstate/react';\nimport { getServiceFacade } from '@aws-amplify/ui';\nimport 'aws-amplify';\nimport { AuthenticatorContext } from '../../context/AuthenticatorContext.mjs';\nimport { USE_AUTHENTICATOR_ERROR } from './constants.mjs';\nimport { getQRFields, getMachineFields, getTotpSecretCodeCallback, getComparator, defaultComparator } from './utils.mjs';\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)\n */\n\nfunction useAuthenticator(selector) {\n  const context = React__default.useContext(AuthenticatorContext);\n\n  if (!context) {\n    throw new Error(USE_AUTHENTICATOR_ERROR);\n  }\n\n  const {\n    service\n  } = context;\n  const {\n    send\n  } = service;\n  const xstateSelector = useCallback(state => Object.assign({}, getServiceFacade({\n    send,\n    state\n  })), [send]);\n  const comparator = selector ? getComparator(selector) : defaultComparator; // the purpose of `context.authStatus`is to intentionally override `facade.authStatus`. `facade.authStatus` does\n  // not update on external sign in events (for example when a user is not using the `Authenticator`).\n\n  const {\n    authStatus\n  } = context;\n  const facade = useSelector(service, xstateSelector, comparator);\n\n  const {\n    route,\n    totpSecretCode,\n    unverifiedContactMethods,\n    user\n  } = facade,\n        rest = __rest(facade, [\"route\", \"totpSecretCode\", \"unverifiedContactMethods\", \"user\"]); // do not memoize output. `service.getSnapshot` reference remains stable preventing\n  // `fields` from updating with current form state on value changes\n\n\n  const serviceSnapshot = service.getSnapshot(); // legacy `QRFields` values only used for SetupTOTP page to retrieve issuer information, will be removed in future\n\n  const QRFields = route === 'setupTOTP' ? getQRFields(serviceSnapshot) : null; // legacy `formFields` values required until form state is removed from state machine\n\n  const fields = getMachineFields(route, serviceSnapshot, unverifiedContactMethods);\n  return Object.assign(Object.assign({}, rest), {\n    authStatus,\n    route,\n    totpSecretCode,\n    unverifiedContactMethods,\n    user,\n\n    /** @deprecated For internal use only */\n    fields,\n    getTotpSecretCode: getTotpSecretCodeCallback(user),\n    QRFields\n  });\n}\n\nexport { useAuthenticator as default };","map":{"version":3,"names":["__rest","React__default","useCallback","useSelector","getServiceFacade","AuthenticatorContext","USE_AUTHENTICATOR_ERROR","getQRFields","getMachineFields","getTotpSecretCodeCallback","getComparator","defaultComparator","useAuthenticator","selector","context","useContext","Error","service","send","xstateSelector","state","Object","assign","comparator","authStatus","facade","route","totpSecretCode","unverifiedContactMethods","user","rest","serviceSnapshot","getSnapshot","QRFields","fields","getTotpSecretCode","default"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/useAuthenticator.mjs"],"sourcesContent":["import { __rest } from '../../../node_modules/tslib/tslib.es6.mjs';\nimport React__default, { useCallback } from 'react';\nimport { useSelector } from '@xstate/react';\nimport { getServiceFacade } from '@aws-amplify/ui';\nimport 'aws-amplify';\nimport { AuthenticatorContext } from '../../context/AuthenticatorContext.mjs';\nimport { USE_AUTHENTICATOR_ERROR } from './constants.mjs';\nimport { getQRFields, getMachineFields, getTotpSecretCodeCallback, getComparator, defaultComparator } from './utils.mjs';\n\n/**\n * [ðŸ“– Docs](https://ui.docs.amplify.aws/react/connected-components/authenticator/headless#useauthenticator-hook)\n */\nfunction useAuthenticator(selector) {\n    const context = React__default.useContext(AuthenticatorContext);\n    if (!context) {\n        throw new Error(USE_AUTHENTICATOR_ERROR);\n    }\n    const { service } = context;\n    const { send } = service;\n    const xstateSelector = useCallback((state) => (Object.assign({}, getServiceFacade({ send, state }))), [send]);\n    const comparator = selector ? getComparator(selector) : defaultComparator;\n    // the purpose of `context.authStatus`is to intentionally override `facade.authStatus`. `facade.authStatus` does\n    // not update on external sign in events (for example when a user is not using the `Authenticator`).\n    const { authStatus } = context;\n    const facade = useSelector(service, xstateSelector, comparator);\n    const { route, totpSecretCode, unverifiedContactMethods, user } = facade, rest = __rest(facade, [\"route\", \"totpSecretCode\", \"unverifiedContactMethods\", \"user\"]);\n    // do not memoize output. `service.getSnapshot` reference remains stable preventing\n    // `fields` from updating with current form state on value changes\n    const serviceSnapshot = service.getSnapshot();\n    // legacy `QRFields` values only used for SetupTOTP page to retrieve issuer information, will be removed in future\n    const QRFields = route === 'setupTOTP' ? getQRFields(serviceSnapshot) : null;\n    // legacy `formFields` values required until form state is removed from state machine\n    const fields = getMachineFields(route, serviceSnapshot, unverifiedContactMethods);\n    return Object.assign(Object.assign({}, rest), { authStatus,\n        route,\n        totpSecretCode,\n        unverifiedContactMethods,\n        user,\n        /** @deprecated For internal use only */\n        fields, getTotpSecretCode: getTotpSecretCodeCallback(user), QRFields });\n}\n\nexport { useAuthenticator as default };\n"],"mappings":"AAAA,SAASA,MAAT,QAAuB,2CAAvB;AACA,OAAOC,cAAP,IAAyBC,WAAzB,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,gBAAT,QAAiC,iBAAjC;AACA,OAAO,aAAP;AACA,SAASC,oBAAT,QAAqC,wCAArC;AACA,SAASC,uBAAT,QAAwC,iBAAxC;AACA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,yBAAxC,EAAmEC,aAAnE,EAAkFC,iBAAlF,QAA2G,aAA3G;AAEA;AACA;AACA;;AACA,SAASC,gBAAT,CAA0BC,QAA1B,EAAoC;EAChC,MAAMC,OAAO,GAAGb,cAAc,CAACc,UAAf,CAA0BV,oBAA1B,CAAhB;;EACA,IAAI,CAACS,OAAL,EAAc;IACV,MAAM,IAAIE,KAAJ,CAAUV,uBAAV,CAAN;EACH;;EACD,MAAM;IAAEW;EAAF,IAAcH,OAApB;EACA,MAAM;IAAEI;EAAF,IAAWD,OAAjB;EACA,MAAME,cAAc,GAAGjB,WAAW,CAAEkB,KAAD,IAAYC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBlB,gBAAgB,CAAC;IAAEc,IAAF;IAAQE;EAAR,CAAD,CAAlC,CAAb,EAAoE,CAACF,IAAD,CAApE,CAAlC;EACA,MAAMK,UAAU,GAAGV,QAAQ,GAAGH,aAAa,CAACG,QAAD,CAAhB,GAA6BF,iBAAxD,CARgC,CAShC;EACA;;EACA,MAAM;IAAEa;EAAF,IAAiBV,OAAvB;EACA,MAAMW,MAAM,GAAGtB,WAAW,CAACc,OAAD,EAAUE,cAAV,EAA0BI,UAA1B,CAA1B;;EACA,MAAM;IAAEG,KAAF;IAASC,cAAT;IAAyBC,wBAAzB;IAAmDC;EAAnD,IAA4DJ,MAAlE;EAAA,MAA0EK,IAAI,GAAG9B,MAAM,CAACyB,MAAD,EAAS,CAAC,OAAD,EAAU,gBAAV,EAA4B,0BAA5B,EAAwD,MAAxD,CAAT,CAAvF,CAbgC,CAchC;EACA;;;EACA,MAAMM,eAAe,GAAGd,OAAO,CAACe,WAAR,EAAxB,CAhBgC,CAiBhC;;EACA,MAAMC,QAAQ,GAAGP,KAAK,KAAK,WAAV,GAAwBnB,WAAW,CAACwB,eAAD,CAAnC,GAAuD,IAAxE,CAlBgC,CAmBhC;;EACA,MAAMG,MAAM,GAAG1B,gBAAgB,CAACkB,KAAD,EAAQK,eAAR,EAAyBH,wBAAzB,CAA/B;EACA,OAAOP,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBQ,IAAlB,CAAd,EAAuC;IAAEN,UAAF;IAC1CE,KAD0C;IAE1CC,cAF0C;IAG1CC,wBAH0C;IAI1CC,IAJ0C;;IAK1C;IACAK,MAN0C;IAMlCC,iBAAiB,EAAE1B,yBAAyB,CAACoB,IAAD,CANV;IAMkBI;EANlB,CAAvC,CAAP;AAOH;;AAED,SAASrB,gBAAgB,IAAIwB,OAA7B"},"metadata":{},"sourceType":"module"}