{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport const resolveRegionConfig = input => {\n  const {\n    region,\n    useFipsEndpoint\n  } = input;\n\n  if (!region) {\n    throw new Error(\"Region is missing\");\n  }\n\n  return { ...input,\n    region: function () {\n      var _ref = _asyncToGenerator(function* () {\n        if (typeof region === \"string\") {\n          return getRealRegion(region);\n        }\n\n        const providedRegion = yield region();\n        return getRealRegion(providedRegion);\n      });\n\n      return function region() {\n        return _ref.apply(this, arguments);\n      };\n    }(),\n    useFipsEndpoint: function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        const providedRegion = typeof region === \"string\" ? region : yield region();\n\n        if (isFipsRegion(providedRegion)) {\n          return true;\n        }\n\n        return typeof useFipsEndpoint !== \"function\" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();\n      });\n\n      return function useFipsEndpoint() {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  };\n};","map":{"version":3,"names":["getRealRegion","isFipsRegion","resolveRegionConfig","input","region","useFipsEndpoint","Error","providedRegion","Promise","resolve"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/config-resolver/dist-es/regionConfig/resolveRegionConfig.js"],"sourcesContent":["import { getRealRegion } from \"./getRealRegion\";\nimport { isFipsRegion } from \"./isFipsRegion\";\nexport const resolveRegionConfig = (input) => {\n    const { region, useFipsEndpoint } = input;\n    if (!region) {\n        throw new Error(\"Region is missing\");\n    }\n    return {\n        ...input,\n        region: async () => {\n            if (typeof region === \"string\") {\n                return getRealRegion(region);\n            }\n            const providedRegion = await region();\n            return getRealRegion(providedRegion);\n        },\n        useFipsEndpoint: async () => {\n            const providedRegion = typeof region === \"string\" ? region : await region();\n            if (isFipsRegion(providedRegion)) {\n                return true;\n            }\n            return typeof useFipsEndpoint !== \"function\" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();\n        },\n    };\n};\n"],"mappings":";AAAA,SAASA,aAAT,QAA8B,iBAA9B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;EAC1C,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAA8BF,KAApC;;EACA,IAAI,CAACC,MAAL,EAAa;IACT,MAAM,IAAIE,KAAJ,CAAU,mBAAV,CAAN;EACH;;EACD,OAAO,EACH,GAAGH,KADA;IAEHC,MAAM;MAAA,6BAAE,aAAY;QAChB,IAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;UAC5B,OAAOJ,aAAa,CAACI,MAAD,CAApB;QACH;;QACD,MAAMG,cAAc,SAASH,MAAM,EAAnC;QACA,OAAOJ,aAAa,CAACO,cAAD,CAApB;MACH,CANK;;MAAA;QAAA;MAAA;IAAA,GAFH;IASHF,eAAe;MAAA,8BAAE,aAAY;QACzB,MAAME,cAAc,GAAG,OAAOH,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,SAA4CA,MAAM,EAAzE;;QACA,IAAIH,YAAY,CAACM,cAAD,CAAhB,EAAkC;UAC9B,OAAO,IAAP;QACH;;QACD,OAAO,OAAOF,eAAP,KAA2B,UAA3B,GAAwCG,OAAO,CAACC,OAAR,CAAgB,CAAC,CAACJ,eAAlB,CAAxC,GAA6EA,eAAe,EAAnG;MACH,CANc;;MAAA;QAAA;MAAA;IAAA;EATZ,CAAP;AAiBH,CAtBM"},"metadata":{},"sourceType":"module"}