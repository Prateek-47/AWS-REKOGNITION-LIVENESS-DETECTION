{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends, __values } from \"tslib\";\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\n\nvar InMemoryCacheClass =\n/** @class */\nfunction (_super) {\n  __extends(InMemoryCacheClass, _super);\n  /**\n   * initialize the cache\n   *\n   * @param config - the configuration of the cache\n   */\n\n\n  function InMemoryCacheClass(config) {\n    var _this = this;\n\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    logger.debug('now we start!');\n    _this.cacheList = [];\n    _this.curSizeInBytes = 0;\n    _this.maxPriority = 5;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this); // initialize list for every priority\n\n    for (var i = 0; i < _this.maxPriority; i += 1) {\n      _this.cacheList[i] = new CacheList();\n    }\n\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n\n\n  InMemoryCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes -= amount;\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n\n\n  InMemoryCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n    this.curSizeInBytes += amount;\n  };\n  /**\n   * check whether item is expired\n   *\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n\n\n  InMemoryCacheClass.prototype._isExpired = function (key) {\n    var text = CacheObject.getItem(key);\n    var item = JSON.parse(text);\n\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCacheClass.prototype._removeItem = function (prefixedKey, listIdx) {\n    // delete the key from the list\n    this.cacheList[listIdx].removeItem(prefixedKey); // decrease the current size of the cache\n\n    this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize); // finally remove the item from memory\n\n\n    CacheObject.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   * @param listIdx - indicates which cache list the key belongs to\n   */\n\n\n  InMemoryCacheClass.prototype._setItem = function (prefixedKey, item, listIdx) {\n    // insert the key into the list\n    this.cacheList[listIdx].insertItem(prefixedKey); // increase the current size of the cache\n\n    this._increaseCurSizeInBytes(item.byteSize); // finally add the item into memory\n\n\n    CacheObject.setItem(prefixedKey, JSON.stringify(item));\n  };\n  /**\n   * see whether cache is full\n   *\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n\n\n  InMemoryCacheClass.prototype._isCacheFull = function (itemSize) {\n    return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n  };\n  /**\n   * check whether the cache contains the key\n   *\n   * @param key\n   */\n\n\n  InMemoryCacheClass.prototype.containsKey = function (key) {\n    var prefixedKey = this.config.keyPrefix + key;\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      if (this.cacheList[i].containsKey(prefixedKey)) {\n        return i + 1;\n      }\n    }\n\n    return -1;\n  };\n  /**\n   * * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param options - optional, the specified meta-data\n   *\n   * @throws if the item is too big which exceeds the limit of single item size\n   * @throws if the key is invalid\n   */\n\n\n  InMemoryCacheClass.prototype.setItem = function (key, value, options) {\n    var prefixedKey = this.config.keyPrefix + key; // invalid keys\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions); // check wether this item is too big;\n\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    } // if key already in the cache, then delete it.\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    } // pop out items in the cache when cache is full based on LRU\n    // first start from lowest priority cache list\n\n\n    var cacheListIdx = this.maxPriority - 1;\n\n    while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n      if (!this.cacheList[cacheListIdx].isEmpty()) {\n        var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n\n        this._removeItem(popedItemKey, cacheListIdx);\n      } else {\n        cacheListIdx -= 1;\n      }\n    }\n\n    this._setItem(prefixedKey, item, Number(item.priority) - 1);\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   *\n   * @param key - the key of the item\n   * @param options - the options of callback function\n   */\n\n\n  InMemoryCacheClass.prototype.getItem = function (key, options) {\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    } // check whether it's in the cachelist\n\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      if (this._isExpired(prefixedKey)) {\n        // if expired, remove that item and return null\n        this._removeItem(prefixedKey, presentKeyPrio - 1);\n      } else {\n        // if not expired, great, return the value and refresh it\n        ret = CacheObject.getItem(prefixedKey);\n        var item = JSON.parse(ret);\n        this.cacheList[item.priority - 1].refresh(prefixedKey);\n        return item.data;\n      }\n    }\n\n    if (options && options.callback !== undefined) {\n      var val = options.callback();\n\n      if (val !== null) {\n        this.setItem(key, val, options);\n      }\n\n      return val;\n    }\n\n    return null;\n  };\n  /**\n   * remove item from the cache\n   *\n   * @param key - the key of the item\n   */\n\n\n  InMemoryCacheClass.prototype.removeItem = function (key) {\n    var prefixedKey = this.config.keyPrefix + key; // check if the key is in the cache\n\n    var presentKeyPrio = this.containsKey(key);\n\n    if (presentKeyPrio !== -1) {\n      this._removeItem(prefixedKey, presentKeyPrio - 1);\n    }\n  };\n  /**\n   * clear the entire cache\n   */\n\n\n  InMemoryCacheClass.prototype.clear = function () {\n    var e_1, _a;\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_1 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n\n          this._removeItem(key, i);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   */\n\n\n  InMemoryCacheClass.prototype.getAllKeys = function () {\n    var e_2, _a;\n\n    var keys = [];\n\n    for (var i = 0; i < this.maxPriority; i += 1) {\n      try {\n        for (var _b = (e_2 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n          keys.push(key.substring(this.config.keyPrefix.length));\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return the current size of the cache\n   */\n\n\n  InMemoryCacheClass.prototype.getCacheCurSize = function () {\n    return this.curSizeInBytes;\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   */\n\n\n  InMemoryCacheClass.prototype.createInstance = function (config) {\n    return new InMemoryCacheClass(config);\n  };\n\n  return InMemoryCacheClass;\n}(StorageCache);\n\nexport { InMemoryCacheClass };\nexport var InMemoryCache = new InMemoryCacheClass();","map":{"version":3,"names":["__extends","__values","CacheList","defaultConfig","getCurrTime","CacheObject","StorageCache","ConsoleLogger","Logger","logger","InMemoryCacheClass","_super","config","_this","cacheConfig","Object","assign","call","debug","cacheList","curSizeInBytes","maxPriority","getItem","bind","setItem","removeItem","i","prototype","_decreaseCurSizeInBytes","amount","_increaseCurSizeInBytes","_isExpired","key","text","item","JSON","parse","expires","_removeItem","prefixedKey","listIdx","byteSize","_setItem","insertItem","stringify","_isCacheFull","itemSize","capacityInBytes","containsKey","keyPrefix","value","options","cacheCurSizeKey","warn","cacheItemOptions","priority","undefined","defaultPriority","defaultTTL","fillCacheItem","itemMaxSize","presentKeyPrio","cacheListIdx","isEmpty","popedItemKey","getLastItem","Number","ret","refresh","data","callback","val","clear","e_1","_a","_b","getKeys","_c","next","done","e_1_1","error","return","getAllKeys","e_2","keys","push","substring","length","e_2_1","getCacheCurSize","createInstance","InMemoryCache"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/cache/lib-esm/InMemoryCache.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends, __values } from \"tslib\";\nimport { CacheList, defaultConfig, getCurrTime, CacheObject } from './Utils';\nimport { StorageCache } from './StorageCache';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('InMemoryCache');\n/**\n * Customized in-memory cache with LRU implemented\n * @member cacheObj - object which store items\n * @member cacheList - list of keys in the cache with LRU\n * @member curSizeInBytes - current size of the cache\n * @member maxPriority - max of the priority\n * @member cacheSizeLimit - the limit of cache size\n */\nvar InMemoryCacheClass = /** @class */ (function (_super) {\n    __extends(InMemoryCacheClass, _super);\n    /**\n     * initialize the cache\n     *\n     * @param config - the configuration of the cache\n     */\n    function InMemoryCacheClass(config) {\n        var _this = this;\n        var cacheConfig = config\n            ? Object.assign({}, defaultConfig, config)\n            : defaultConfig;\n        _this = _super.call(this, cacheConfig) || this;\n        logger.debug('now we start!');\n        _this.cacheList = [];\n        _this.curSizeInBytes = 0;\n        _this.maxPriority = 5;\n        _this.getItem = _this.getItem.bind(_this);\n        _this.setItem = _this.setItem.bind(_this);\n        _this.removeItem = _this.removeItem.bind(_this);\n        // initialize list for every priority\n        for (var i = 0; i < _this.maxPriority; i += 1) {\n            _this.cacheList[i] = new CacheList();\n        }\n        return _this;\n    }\n    /**\n     * decrease current size of the cache\n     *\n     * @param amount - the amount of the cache size which needs to be decreased\n     */\n    InMemoryCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes -= amount;\n    };\n    /**\n     * increase current size of the cache\n     *\n     * @param amount - the amount of the cache szie which need to be increased\n     */\n    InMemoryCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n        this.curSizeInBytes += amount;\n    };\n    /**\n     * check whether item is expired\n     *\n     * @param key - the key of the item\n     *\n     * @return true if the item is expired.\n     */\n    InMemoryCacheClass.prototype._isExpired = function (key) {\n        var text = CacheObject.getItem(key);\n        var item = JSON.parse(text);\n        if (getCurrTime() >= item.expires) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * delete item from cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCacheClass.prototype._removeItem = function (prefixedKey, listIdx) {\n        // delete the key from the list\n        this.cacheList[listIdx].removeItem(prefixedKey);\n        // decrease the current size of the cache\n        this._decreaseCurSizeInBytes(JSON.parse(CacheObject.getItem(prefixedKey)).byteSize);\n        // finally remove the item from memory\n        CacheObject.removeItem(prefixedKey);\n    };\n    /**\n     * put item into cache\n     *\n     * @param prefixedKey - the key of the item\n     * @param itemData - the value of the item\n     * @param itemSizeInBytes - the byte size of the item\n     * @param listIdx - indicates which cache list the key belongs to\n     */\n    InMemoryCacheClass.prototype._setItem = function (prefixedKey, item, listIdx) {\n        // insert the key into the list\n        this.cacheList[listIdx].insertItem(prefixedKey);\n        // increase the current size of the cache\n        this._increaseCurSizeInBytes(item.byteSize);\n        // finally add the item into memory\n        CacheObject.setItem(prefixedKey, JSON.stringify(item));\n    };\n    /**\n     * see whether cache is full\n     *\n     * @param itemSize\n     *\n     * @return true if cache is full\n     */\n    InMemoryCacheClass.prototype._isCacheFull = function (itemSize) {\n        return this.curSizeInBytes + itemSize > this.config.capacityInBytes;\n    };\n    /**\n     * check whether the cache contains the key\n     *\n     * @param key\n     */\n    InMemoryCacheClass.prototype.containsKey = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            if (this.cacheList[i].containsKey(prefixedKey)) {\n                return i + 1;\n            }\n        }\n        return -1;\n    };\n    /**\n     * * Set item into cache. You can put number, string, boolean or object.\n     * The cache will first check whether has the same key.\n     * If it has, it will delete the old item and then put the new item in\n     * The cache will pop out items if it is full\n     * You can specify the cache item options. The cache will abort and output a warning:\n     * If the key is invalid\n     * If the size of the item exceeds itemMaxSize.\n     * If the value is undefined\n     * If incorrect cache item configuration\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param value - the value of the item\n     * @param options - optional, the specified meta-data\n     *\n     * @throws if the item is too big which exceeds the limit of single item size\n     * @throws if the key is invalid\n     */\n    InMemoryCacheClass.prototype.setItem = function (key, value, options) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // invalid keys\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return;\n        }\n        if (typeof value === 'undefined') {\n            logger.warn(\"The value of item should not be undefined!\");\n            return;\n        }\n        var cacheItemOptions = {\n            priority: options && options.priority !== undefined\n                ? options.priority\n                : this.config.defaultPriority,\n            expires: options && options.expires !== undefined\n                ? options.expires\n                : this.config.defaultTTL + getCurrTime(),\n        };\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n            return;\n        }\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n        // check wether this item is too big;\n        if (item.byteSize > this.config.itemMaxSize) {\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n            return;\n        }\n        // if key already in the cache, then delete it.\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n        // pop out items in the cache when cache is full based on LRU\n        // first start from lowest priority cache list\n        var cacheListIdx = this.maxPriority - 1;\n        while (this._isCacheFull(item.byteSize) && cacheListIdx >= 0) {\n            if (!this.cacheList[cacheListIdx].isEmpty()) {\n                var popedItemKey = this.cacheList[cacheListIdx].getLastItem();\n                this._removeItem(popedItemKey, cacheListIdx);\n            }\n            else {\n                cacheListIdx -= 1;\n            }\n        }\n        this._setItem(prefixedKey, item, Number(item.priority) - 1);\n    };\n    /**\n     * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n     * If you specified callback function in the options,\n     * then the function will be executed if no such item in the cache\n     * and finally put the return value into cache.\n     * Please make sure the callback function will return the value you want to put into the cache.\n     * The cache will abort output a warning:\n     * If the key is invalid\n     *\n     * @param key - the key of the item\n     * @param options - the options of callback function\n     */\n    InMemoryCacheClass.prototype.getItem = function (key, options) {\n        var ret = null;\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return null;\n        }\n        // check whether it's in the cachelist\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            if (this._isExpired(prefixedKey)) {\n                // if expired, remove that item and return null\n                this._removeItem(prefixedKey, presentKeyPrio - 1);\n            }\n            else {\n                // if not expired, great, return the value and refresh it\n                ret = CacheObject.getItem(prefixedKey);\n                var item = JSON.parse(ret);\n                this.cacheList[item.priority - 1].refresh(prefixedKey);\n                return item.data;\n            }\n        }\n        if (options && options.callback !== undefined) {\n            var val = options.callback();\n            if (val !== null) {\n                this.setItem(key, val, options);\n            }\n            return val;\n        }\n        return null;\n    };\n    /**\n     * remove item from the cache\n     *\n     * @param key - the key of the item\n     */\n    InMemoryCacheClass.prototype.removeItem = function (key) {\n        var prefixedKey = this.config.keyPrefix + key;\n        // check if the key is in the cache\n        var presentKeyPrio = this.containsKey(key);\n        if (presentKeyPrio !== -1) {\n            this._removeItem(prefixedKey, presentKeyPrio - 1);\n        }\n    };\n    /**\n     * clear the entire cache\n     */\n    InMemoryCacheClass.prototype.clear = function () {\n        var e_1, _a;\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            try {\n                for (var _b = (e_1 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var key = _c.value;\n                    this._removeItem(key, i);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n        }\n    };\n    /**\n     * Return all the keys in the cache.\n     */\n    InMemoryCacheClass.prototype.getAllKeys = function () {\n        var e_2, _a;\n        var keys = [];\n        for (var i = 0; i < this.maxPriority; i += 1) {\n            try {\n                for (var _b = (e_2 = void 0, __values(this.cacheList[i].getKeys())), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var key = _c.value;\n                    keys.push(key.substring(this.config.keyPrefix.length));\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        return keys;\n    };\n    /**\n     * return the current size of the cache\n     *\n     * @return the current size of the cache\n     */\n    InMemoryCacheClass.prototype.getCacheCurSize = function () {\n        return this.curSizeInBytes;\n    };\n    /**\n     * Return a new instance of cache with customized configuration.\n     * @param config - the customized configuration\n     */\n    InMemoryCacheClass.prototype.createInstance = function (config) {\n        return new InMemoryCacheClass(config);\n    };\n    return InMemoryCacheClass;\n}(StorageCache));\nexport { InMemoryCacheClass };\nexport var InMemoryCache = new InMemoryCacheClass();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}