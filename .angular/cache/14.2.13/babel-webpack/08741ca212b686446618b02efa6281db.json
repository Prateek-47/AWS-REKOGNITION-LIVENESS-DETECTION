{"ast":null,"code":"import { lowerCase } from \"lower-case\"; // Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\n\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g]; // Remove all non-word characters.\n\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\n\nexport function noCase(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.splitRegexp,\n      splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a,\n      _b = options.stripRegexp,\n      stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b,\n      _c = options.transform,\n      transform = _c === void 0 ? lowerCase : _c,\n      _d = options.delimiter,\n      delimiter = _d === void 0 ? \" \" : _d;\n  var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n  var start = 0;\n  var end = result.length; // Trim the delimiter from around the output string.\n\n  while (result.charAt(start) === \"\\0\") start++;\n\n  while (result.charAt(end - 1) === \"\\0\") end--; // Transform each token independently.\n\n\n  return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\n\nfunction replace(input, re, value) {\n  if (re instanceof RegExp) return input.replace(re, value);\n  return re.reduce(function (input, re) {\n    return input.replace(re, value);\n  }, input);\n}","map":{"version":3,"names":["lowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","noCase","input","options","_a","splitRegexp","_b","stripRegexp","_c","transform","_d","delimiter","result","replace","start","end","length","charAt","slice","split","map","join","re","value","RegExp","reduce"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/no-case/dist.es2015/index.js"],"sourcesContent":["import { lowerCase } from \"lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? \" \" : _d;\n    var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n    var start = 0;\n    var end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    // Transform each token independently.\n    return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n    if (re instanceof RegExp)\n        return input.replace(re, value);\n    return re.reduce(function (input, re) { return input.replace(re, value); }, input);\n}\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B,C,CACA;;AACA,IAAIC,oBAAoB,GAAG,CAAC,oBAAD,EAAuB,sBAAvB,CAA3B,C,CACA;;AACA,IAAIC,oBAAoB,GAAG,cAA3B;AACA;AACA;AACA;;AACA,OAAO,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,OAAvB,EAAgC;EACnC,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;IAAEA,OAAO,GAAG,EAAV;EAAe;;EACzC,IAAIC,EAAE,GAAGD,OAAO,CAACE,WAAjB;EAAA,IAA8BA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBL,oBAAhB,GAAuCK,EAAnF;EAAA,IAAuFE,EAAE,GAAGH,OAAO,CAACI,WAApG;EAAA,IAAiHA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBN,oBAAhB,GAAuCM,EAAtK;EAAA,IAA0KE,EAAE,GAAGL,OAAO,CAACM,SAAvL;EAAA,IAAkMA,SAAS,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBV,SAAhB,GAA4BU,EAA1O;EAAA,IAA8OE,EAAE,GAAGP,OAAO,CAACQ,SAA3P;EAAA,IAAsQA,SAAS,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,GAAhB,GAAsBA,EAAxS;EACA,IAAIE,MAAM,GAAGC,OAAO,CAACA,OAAO,CAACX,KAAD,EAAQG,WAAR,EAAqB,QAArB,CAAR,EAAwCE,WAAxC,EAAqD,IAArD,CAApB;EACA,IAAIO,KAAK,GAAG,CAAZ;EACA,IAAIC,GAAG,GAAGH,MAAM,CAACI,MAAjB,CALmC,CAMnC;;EACA,OAAOJ,MAAM,CAACK,MAAP,CAAcH,KAAd,MAAyB,IAAhC,EACIA,KAAK;;EACT,OAAOF,MAAM,CAACK,MAAP,CAAcF,GAAG,GAAG,CAApB,MAA2B,IAAlC,EACIA,GAAG,GAV4B,CAWnC;;;EACA,OAAOH,MAAM,CAACM,KAAP,CAAaJ,KAAb,EAAoBC,GAApB,EAAyBI,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,CAAyCX,SAAzC,EAAoDY,IAApD,CAAyDV,SAAzD,CAAP;AACH;AACD;AACA;AACA;;AACA,SAASE,OAAT,CAAiBX,KAAjB,EAAwBoB,EAAxB,EAA4BC,KAA5B,EAAmC;EAC/B,IAAID,EAAE,YAAYE,MAAlB,EACI,OAAOtB,KAAK,CAACW,OAAN,CAAcS,EAAd,EAAkBC,KAAlB,CAAP;EACJ,OAAOD,EAAE,CAACG,MAAH,CAAU,UAAUvB,KAAV,EAAiBoB,EAAjB,EAAqB;IAAE,OAAOpB,KAAK,CAACW,OAAN,CAAcS,EAAd,EAAkBC,KAAlB,CAAP;EAAkC,CAAnE,EAAqErB,KAArE,CAAP;AACH"},"metadata":{},"sourceType":"module"}