{"ast":null,"code":"import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\nexport class EventStreamCodec {\n  constructor(toUtf8, fromUtf8) {\n    this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n    this.messageBuffer = [];\n    this.isEndOfStream = false;\n  }\n\n  feed(message) {\n    this.messageBuffer.push(this.decode(message));\n  }\n\n  endOfStream() {\n    this.isEndOfStream = true;\n  }\n\n  getMessage() {\n    const message = this.messageBuffer.pop();\n    const isEndOfStream = this.isEndOfStream;\n    return {\n      getMessage() {\n        return message;\n      },\n\n      isEndOfStream() {\n        return isEndOfStream;\n      }\n\n    };\n  }\n\n  getAvailableMessages() {\n    const messages = this.messageBuffer;\n    this.messageBuffer = [];\n    const isEndOfStream = this.isEndOfStream;\n    return {\n      getMessages() {\n        return messages;\n      },\n\n      isEndOfStream() {\n        return isEndOfStream;\n      }\n\n    };\n  }\n\n  encode({\n    headers: rawHeaders,\n    body\n  }) {\n    const headers = this.headerMarshaller.format(rawHeaders);\n    const length = headers.byteLength + body.byteLength + 16;\n    const out = new Uint8Array(length);\n    const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n    const checksum = new Crc32();\n    view.setUint32(0, length, false);\n    view.setUint32(4, headers.byteLength, false);\n    view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n    out.set(headers, 12);\n    out.set(body, headers.byteLength + 12);\n    view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n    return out;\n  }\n\n  decode(message) {\n    const {\n      headers,\n      body\n    } = splitMessage(message);\n    return {\n      headers: this.headerMarshaller.parse(headers),\n      body\n    };\n  }\n\n  formatHeaders(rawHeaders) {\n    return this.headerMarshaller.format(rawHeaders);\n  }\n\n}","map":{"version":3,"names":["Crc32","HeaderMarshaller","splitMessage","EventStreamCodec","constructor","toUtf8","fromUtf8","headerMarshaller","messageBuffer","isEndOfStream","feed","message","push","decode","endOfStream","getMessage","pop","getAvailableMessages","messages","getMessages","encode","headers","rawHeaders","body","format","length","byteLength","out","Uint8Array","view","DataView","buffer","byteOffset","checksum","setUint32","update","subarray","digest","set","parse","formatHeaders"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/eventstream-codec/dist-es/EventStreamCodec.js"],"sourcesContent":["import { Crc32 } from \"@aws-crypto/crc32\";\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\nimport { splitMessage } from \"./splitMessage\";\nexport class EventStreamCodec {\n    constructor(toUtf8, fromUtf8) {\n        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\n        this.messageBuffer = [];\n        this.isEndOfStream = false;\n    }\n    feed(message) {\n        this.messageBuffer.push(this.decode(message));\n    }\n    endOfStream() {\n        this.isEndOfStream = true;\n    }\n    getMessage() {\n        const message = this.messageBuffer.pop();\n        const isEndOfStream = this.isEndOfStream;\n        return {\n            getMessage() {\n                return message;\n            },\n            isEndOfStream() {\n                return isEndOfStream;\n            },\n        };\n    }\n    getAvailableMessages() {\n        const messages = this.messageBuffer;\n        this.messageBuffer = [];\n        const isEndOfStream = this.isEndOfStream;\n        return {\n            getMessages() {\n                return messages;\n            },\n            isEndOfStream() {\n                return isEndOfStream;\n            },\n        };\n    }\n    encode({ headers: rawHeaders, body }) {\n        const headers = this.headerMarshaller.format(rawHeaders);\n        const length = headers.byteLength + body.byteLength + 16;\n        const out = new Uint8Array(length);\n        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\n        const checksum = new Crc32();\n        view.setUint32(0, length, false);\n        view.setUint32(4, headers.byteLength, false);\n        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\n        out.set(headers, 12);\n        out.set(body, headers.byteLength + 12);\n        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\n        return out;\n    }\n    decode(message) {\n        const { headers, body } = splitMessage(message);\n        return { headers: this.headerMarshaller.parse(headers), body };\n    }\n    formatHeaders(rawHeaders) {\n        return this.headerMarshaller.format(rawHeaders);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}