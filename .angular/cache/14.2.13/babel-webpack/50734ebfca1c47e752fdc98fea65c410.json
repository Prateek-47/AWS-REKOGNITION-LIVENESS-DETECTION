{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length; // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n\n  const outputShape = [];\n  let product = 1;\n  let unknownIndex = -1;\n\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(`only one output dimension may be -1, not both ${unknownIndex} and ${d}`);\n      }\n\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(`size ${d} must be non-negative, not ${size}`);\n      }\n\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error('reshape cannot infer the missing ' + 'input size for an empty tensor unless all ' + 'specified input sizes are non-zero');\n    }\n\n    const missing = Math.trunc(denseSize / product);\n\n    if (product * missing !== denseSize) {\n      throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n\n  const outputSize = util.sizeFromShape(outputShape);\n\n  if (outputSize !== denseSize) {\n    throw new Error(`Input to reshape is a tensor with ${denseSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides = [];\n\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides = [];\n\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n\n  return [newIndices, [nnz, outputRank], outputShape];\n}","map":{"version":3,"names":["util","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","sizeFromShape","nnz","outputRank","length","outputShape","product","unknownIndex","d","size","Error","push","missing","Math","trunc","outputSize","inputRank","inputStrides","outputStrides","newIndices","getArrayFromDType","i","id","j"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n    const denseSize = util.sizeFromShape(inputShape);\n    const nnz = inputIndicesShape[0];\n    const outputRank = targetShape.length;\n    // Compute the output shape. Determine product of specified dimensions, and\n    // find the index of the unspecified one.\n    const outputShape = [];\n    let product = 1;\n    let unknownIndex = -1;\n    for (let d = 0; d < outputRank; ++d) {\n        const size = targetShape[d];\n        if (size === -1) {\n            if (unknownIndex !== -1) {\n                throw new Error(`only one output dimension may be -1, not both ${unknownIndex} and ${d}`);\n            }\n            unknownIndex = d;\n            outputShape.push(1);\n        }\n        else {\n            if (size < 0) {\n                throw new Error(`size ${d} must be non-negative, not ${size}`);\n            }\n            product *= size;\n            outputShape.push(size);\n        }\n    }\n    if (unknownIndex !== -1) {\n        if (product <= 0) {\n            throw new Error('reshape cannot infer the missing ' +\n                'input size for an empty tensor unless all ' +\n                'specified input sizes are non-zero');\n        }\n        const missing = Math.trunc(denseSize / product);\n        if (product * missing !== denseSize) {\n            throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n        }\n        outputShape[unknownIndex] = missing;\n    }\n    const outputSize = util.sizeFromShape(outputShape);\n    if (outputSize !== denseSize) {\n        throw new Error(`Input to reshape is a tensor with ${denseSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n    }\n    const inputRank = inputShape.length;\n    const inputStrides = [];\n    if (inputRank > 0) {\n        inputStrides[inputRank - 1] = 1;\n        for (let d = inputRank - 2; d >= 0; --d) {\n            inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n        }\n    }\n    const outputStrides = [];\n    if (outputRank > 0) {\n        outputStrides[outputRank - 1] = 1;\n        for (let d = outputRank - 2; d >= 0; --d) {\n            outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n        }\n    }\n    const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n    for (let i = 0; i < nnz; ++i) {\n        let id = 0;\n        for (let j = 0; j < inputRank; ++j) {\n            // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n            id += inputIndices[i * inputRank + j] * inputStrides[j];\n        }\n        for (let j = 0; j < outputRank; ++j) {\n            // newIndices is a 2d tensor with shape of [nnz, outputRank]\n            newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n            id %= outputStrides[j];\n        }\n    }\n    return [newIndices, [nnz, outputRank], outputShape];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}