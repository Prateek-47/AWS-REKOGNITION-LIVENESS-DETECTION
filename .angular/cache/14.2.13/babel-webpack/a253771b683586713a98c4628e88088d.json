{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative } from '@tensorflow/tfjs-core';\nlet wasmDepthwiseConv2d;\n\nfunction setup(backend) {\n  wasmDepthwiseConv2d = backend.wasm.cwrap(DepthwiseConv2dNative, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction depthwiseConv2d(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const $dilations = dilations == null ? [1, 1] : dilations;\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmDepthwiseConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\n\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: depthwiseConv2d\n};","map":{"version":3,"names":["backend_util","DepthwiseConv2dNative","wasmDepthwiseConv2d","setup","backend","wasm","cwrap","depthwiseConv2d","args","inputs","attrs","x","filter","xId","dataIdMap","get","dataId","id","filterId","strides","dilations","pad","dimRoundingMode","$dilations","convInfo","computeConv2DInfo","shape","filterHeight","filterWidth","padTop","padInfo","top","padRight","right","padBottom","bottom","padLeft","left","dilationHeight","dilationWidth","strideHeight","strideWidth","inputChannels","inChannels","outputChannels","outChannels","isSamePad","type","dataFormat","Error","out","makeOutput","outShape","outId","depthwiseConv2dNativeConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/DepthwiseConv2dNative.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative } from '@tensorflow/tfjs-core';\nlet wasmDepthwiseConv2d;\nfunction setup(backend) {\n    wasmDepthwiseConv2d =\n        backend.wasm.cwrap(DepthwiseConv2dNative, null /* void */, [\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n            'number',\n        ]);\n}\nfunction depthwiseConv2d(args) {\n    const { inputs, attrs, backend } = args;\n    const { x, filter } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const filterId = backend.dataIdMap.get(filter.dataId).id;\n    const { strides, dilations, pad, dimRoundingMode } = attrs;\n    const $dilations = dilations == null ? [1, 1] : dilations;\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padRight = convInfo.padInfo.right;\n    const padBottom = convInfo.padInfo.bottom;\n    const padLeft = convInfo.padInfo.left;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const inputChannels = convInfo.inChannels;\n    const outputChannels = convInfo.outChannels;\n    const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n    if (convInfo.dataFormat !== 'channelsLast') {\n        throw new Error(`wasm backend DepthwiseConv2dNative does not support dataFormat:'` +\n            `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n    }\n    const out = backend.makeOutput(convInfo.outShape, 'float32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmDepthwiseConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n    return out;\n}\nexport const depthwiseConv2dNativeConfig = {\n    kernelName: DepthwiseConv2dNative,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: depthwiseConv2d\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,qBAAvB,QAAoD,uBAApD;AACA,IAAIC,mBAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,mBAAmB,GACfE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBL,qBAAnB,EAA0C;EAAK;EAA/C,EAA2D,CACvD,QADuD,EAEvD,QAFuD,EAGvD,QAHuD,EAIvD,QAJuD,EAKvD,QALuD,EAMvD,QANuD,EAOvD,QAPuD,EAQvD,QARuD,EASvD,QATuD,EAUvD,QAVuD,EAWvD,QAXuD,EAYvD,QAZuD,EAavD,QAbuD,EAcvD,QAduD,EAevD,QAfuD,EAgBvD,QAhBuD,EAiBvD,QAjBuD,EAkBvD,QAlBuD,EAmBvD,QAnBuD,CAA3D,CADJ;AAsBH;;AACD,SAASM,eAAT,CAAyBC,IAAzB,EAA+B;EAC3B,MAAM;IAAEC,MAAF;IAAUC,KAAV;IAAiBN;EAAjB,IAA6BI,IAAnC;EACA,MAAM;IAAEG,CAAF;IAAKC;EAAL,IAAgBH,MAAtB;EACA,MAAMI,GAAG,GAAGT,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBJ,CAAC,CAACK,MAAxB,EAAgCC,EAA5C;EACA,MAAMC,QAAQ,GAAGd,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBH,MAAM,CAACI,MAA7B,EAAqCC,EAAtD;EACA,MAAM;IAAEE,OAAF;IAAWC,SAAX;IAAsBC,GAAtB;IAA2BC;EAA3B,IAA+CZ,KAArD;EACA,MAAMa,UAAU,GAAGH,SAAS,IAAI,IAAb,GAAoB,CAAC,CAAD,EAAI,CAAJ,CAApB,GAA6BA,SAAhD;EACA,MAAMI,QAAQ,GAAGxB,YAAY,CAACyB,iBAAb,CAA+Bd,CAAC,CAACe,KAAjC,EAAwCd,MAAM,CAACc,KAA/C,EAAsDP,OAAtD,EAA+DI,UAA/D,EAA2EF,GAA3E,EAAgFC,eAAhF,EAAiG;EAAK;EAAtG,CAAjB;EACA,MAAMK,YAAY,GAAGH,QAAQ,CAACG,YAA9B;EACA,MAAMC,WAAW,GAAGJ,QAAQ,CAACI,WAA7B;EACA,MAAMC,MAAM,GAAGL,QAAQ,CAACM,OAAT,CAAiBC,GAAhC;EACA,MAAMC,QAAQ,GAAGR,QAAQ,CAACM,OAAT,CAAiBG,KAAlC;EACA,MAAMC,SAAS,GAAGV,QAAQ,CAACM,OAAT,CAAiBK,MAAnC;EACA,MAAMC,OAAO,GAAGZ,QAAQ,CAACM,OAAT,CAAiBO,IAAjC;EACA,MAAMC,cAAc,GAAGd,QAAQ,CAACc,cAAhC;EACA,MAAMC,aAAa,GAAGf,QAAQ,CAACe,aAA/B;EACA,MAAMC,YAAY,GAAGhB,QAAQ,CAACgB,YAA9B;EACA,MAAMC,WAAW,GAAGjB,QAAQ,CAACiB,WAA7B;EACA,MAAMC,aAAa,GAAGlB,QAAQ,CAACmB,UAA/B;EACA,MAAMC,cAAc,GAAGpB,QAAQ,CAACqB,WAAhC;EACA,MAAMC,SAAS,GAAGtB,QAAQ,CAACM,OAAT,CAAiBiB,IAAjB,KAA0B,MAA1B,GAAmC,CAAnC,GAAuC,CAAzD;;EACA,IAAIvB,QAAQ,CAACwB,UAAT,KAAwB,cAA5B,EAA4C;IACxC,MAAM,IAAIC,KAAJ,CAAW,kEAAD,GACX,GAAEzB,QAAQ,CAACwB,UAAW,+BADrB,CAAN;EAEH;;EACD,MAAME,GAAG,GAAG9C,OAAO,CAAC+C,UAAR,CAAmB3B,QAAQ,CAAC4B,QAA5B,EAAsC,SAAtC,CAAZ;EACA,MAAMC,KAAK,GAAGjD,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBmC,GAAG,CAAClC,MAA1B,EAAkCC,EAAhD;EACAf,mBAAmB,CAACW,GAAD,EAAMF,CAAC,CAACe,KAAF,CAAQ,CAAR,CAAN,EAAkBf,CAAC,CAACe,KAAF,CAAQ,CAAR,CAAlB,EAA8Bf,CAAC,CAACe,KAAF,CAAQ,CAAR,CAA9B,EAA0CR,QAA1C,EAAoDS,YAApD,EAAkEC,WAAlE,EAA+EC,MAA/E,EAAuFG,QAAvF,EAAiGE,SAAjG,EAA4GE,OAA5G,EAAqHU,SAArH,EAAgIR,cAAhI,EAAgJC,aAAhJ,EAA+JC,YAA/J,EAA6KC,WAA7K,EAA0LC,aAA1L,EAAyME,cAAzM,EAAyNS,KAAzN,CAAnB;EACA,OAAOH,GAAP;AACH;;AACD,OAAO,MAAMI,2BAA2B,GAAG;EACvCC,UAAU,EAAEtD,qBAD2B;EAEvCuD,WAAW,EAAE,MAF0B;EAGvCC,SAAS,EAAEtD,KAH4B;EAIvCuD,UAAU,EAAEnD;AAJ2B,CAApC"},"metadata":{},"sourceType":"module"}