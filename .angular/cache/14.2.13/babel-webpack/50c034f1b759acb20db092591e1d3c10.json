{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCanonicalHeaders } from './getCanonicalHeaders';\nimport { getCanonicalQueryString } from './getCanonicalQueryString';\nimport { getCanonicalUri } from './getCanonicalUri';\nimport { getHashedPayload } from './getHashedPayload';\nimport { getSignedHeaders } from './getSignedHeaders';\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\n\nexport var getCanonicalRequest = function (_a, uriEscapePath) {\n  var body = _a.body,\n      headers = _a.headers,\n      method = _a.method,\n      url = _a.url;\n\n  if (uriEscapePath === void 0) {\n    uriEscapePath = true;\n  }\n\n  return [method, getCanonicalUri(url.pathname, uriEscapePath), getCanonicalQueryString(url.searchParams), getCanonicalHeaders(headers), getSignedHeaders(headers), getHashedPayload(body)].join('\\n');\n};","map":{"version":3,"names":["getCanonicalHeaders","getCanonicalQueryString","getCanonicalUri","getHashedPayload","getSignedHeaders","getCanonicalRequest","_a","uriEscapePath","body","headers","method","url","pathname","searchParams","join"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalRequest.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCanonicalHeaders } from './getCanonicalHeaders';\nimport { getCanonicalQueryString } from './getCanonicalQueryString';\nimport { getCanonicalUri } from './getCanonicalUri';\nimport { getHashedPayload } from './getHashedPayload';\nimport { getSignedHeaders } from './getSignedHeaders';\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nexport var getCanonicalRequest = function (_a, uriEscapePath) {\n    var body = _a.body, headers = _a.headers, method = _a.method, url = _a.url;\n    if (uriEscapePath === void 0) { uriEscapePath = true; }\n    return [\n        method,\n        getCanonicalUri(url.pathname, uriEscapePath),\n        getCanonicalQueryString(url.searchParams),\n        getCanonicalHeaders(headers),\n        getSignedHeaders(headers),\n        getHashedPayload(body),\n    ].join('\\n');\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,mBAAT,QAAoC,uBAApC;AACA,SAASC,uBAAT,QAAwC,2BAAxC;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,mBAAmB,GAAG,UAAUC,EAAV,EAAcC,aAAd,EAA6B;EAC1D,IAAIC,IAAI,GAAGF,EAAE,CAACE,IAAd;EAAA,IAAoBC,OAAO,GAAGH,EAAE,CAACG,OAAjC;EAAA,IAA0CC,MAAM,GAAGJ,EAAE,CAACI,MAAtD;EAAA,IAA8DC,GAAG,GAAGL,EAAE,CAACK,GAAvE;;EACA,IAAIJ,aAAa,KAAK,KAAK,CAA3B,EAA8B;IAAEA,aAAa,GAAG,IAAhB;EAAuB;;EACvD,OAAO,CACHG,MADG,EAEHR,eAAe,CAACS,GAAG,CAACC,QAAL,EAAeL,aAAf,CAFZ,EAGHN,uBAAuB,CAACU,GAAG,CAACE,YAAL,CAHpB,EAIHb,mBAAmB,CAACS,OAAD,CAJhB,EAKHL,gBAAgB,CAACK,OAAD,CALb,EAMHN,gBAAgB,CAACK,IAAD,CANb,EAOLM,IAPK,CAOA,IAPA,CAAP;AAQH,CAXM"},"metadata":{},"sourceType":"module"}