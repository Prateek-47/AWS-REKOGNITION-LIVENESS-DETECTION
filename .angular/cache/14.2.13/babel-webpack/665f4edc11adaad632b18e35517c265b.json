{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue = backend.data.get(defaultValue.dataId).values[0];\n  const outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"names":["backend_util","SparseToDense","scatterImpl","sparseToDense","args","inputs","backend","attrs","sparseIndices","sparseValues","defaultValue","outputShape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","sumDupeIndices","indicesBuf","bufferSync","updatesBuf","$defaultValue","data","get","dataId","values","outBuf","makeTensorInfo","dtype","sparseToDenseConfig","kernelName","backendName","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseToDense.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function sparseToDense(args) {\n    const { inputs, backend, attrs } = args;\n    const { sparseIndices, sparseValues, defaultValue } = inputs;\n    const { outputShape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    const indicesBuf = backend.bufferSync(sparseIndices);\n    const updatesBuf = backend.bufferSync(sparseValues);\n    const $defaultValue = backend.data.get(defaultValue.dataId).values[0];\n    const outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\nexport const sparseToDenseConfig = {\n    kernelName: SparseToDense,\n    backendName: 'cpu',\n    kernelFunc: sparseToDense\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,uBAA5C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;EAChC,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI,aAAF;IAAiBC,YAAjB;IAA+BC;EAA/B,IAAgDL,MAAtD;EACA,MAAM;IAAEM;EAAF,IAAkBJ,KAAxB;EACA,MAAM;IAAEK,SAAF;IAAaC,UAAb;IAAyBC,SAAzB;IAAoCC,OAApC;IAA6CC;EAA7C,IAA4DhB,YAAY,CAACiB,eAAb,CAA6BR,YAA7B,EAA2CD,aAA3C,EAA0DG,WAA1D,CAAlE;EACA,MAAMO,cAAc,GAAG,KAAvB;EACA,MAAMC,UAAU,GAAGb,OAAO,CAACc,UAAR,CAAmBZ,aAAnB,CAAnB;EACA,MAAMa,UAAU,GAAGf,OAAO,CAACc,UAAR,CAAmBX,YAAnB,CAAnB;EACA,MAAMa,aAAa,GAAGhB,OAAO,CAACiB,IAAR,CAAaC,GAAb,CAAiBd,YAAY,CAACe,MAA9B,EAAsCC,MAAtC,CAA6C,CAA7C,CAAtB;EACA,MAAMC,MAAM,GAAGzB,WAAW,CAACiB,UAAD,EAAaE,UAAb,EAAyBV,WAAzB,EAAsCK,UAAtC,EAAkDF,SAAlD,EAA6DD,UAA7D,EAAyED,SAAzE,EAAoFG,OAApF,EAA6FO,aAA7F,EAA4GJ,cAA5G,CAA1B;EACA,OAAOZ,OAAO,CAACsB,cAAR,CAAuBjB,WAAvB,EAAoCgB,MAAM,CAACE,KAA3C,EAAkDF,MAAM,CAACD,MAAzD,CAAP;AACH;AACD,OAAO,MAAMI,mBAAmB,GAAG;EAC/BC,UAAU,EAAE9B,aADmB;EAE/B+B,WAAW,EAAE,KAFkB;EAG/BC,UAAU,EAAE9B;AAHmB,CAA5B"},"metadata":{},"sourceType":"module"}