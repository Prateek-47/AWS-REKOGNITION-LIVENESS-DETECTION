{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { defaultConfig, getCurrTime } from './Utils';\nimport { StorageCache } from './StorageCache';\nvar logger = new Logger('Cache');\n/**\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\n */\n\nvar BrowserStorageCacheClass =\n/** @class */\nfunction (_super) {\n  __extends(BrowserStorageCacheClass, _super);\n  /**\n   * initialize the cache\n   * @param config - the configuration of the cache\n   */\n\n\n  function BrowserStorageCacheClass(config) {\n    var _this = this;\n\n    var cacheConfig = config ? Object.assign({}, defaultConfig, config) : defaultConfig;\n    _this = _super.call(this, cacheConfig) || this;\n    _this.config.storage = cacheConfig.storage;\n    _this.getItem = _this.getItem.bind(_this);\n    _this.setItem = _this.setItem.bind(_this);\n    _this.removeItem = _this.removeItem.bind(_this);\n    return _this;\n  }\n  /**\n   * decrease current size of the cache\n   *\n   * @private\n   * @param amount - the amount of the cache size which needs to be decreased\n   */\n\n\n  BrowserStorageCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n    var curSize = this.getCacheCurSize();\n    this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\n  };\n  /**\n   * increase current size of the cache\n   *\n   * @private\n   * @param amount - the amount of the cache szie which need to be increased\n   */\n\n\n  BrowserStorageCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n    var curSize = this.getCacheCurSize();\n    this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\n  };\n  /**\n   * update the visited time if item has been visited\n   *\n   * @private\n   * @param item - the item which need to be refreshed\n   * @param prefixedKey - the key of the item\n   *\n   * @return the refreshed item\n   */\n\n\n  BrowserStorageCacheClass.prototype._refreshItem = function (item, prefixedKey) {\n    item.visitedTime = getCurrTime();\n    this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n    return item;\n  };\n  /**\n   * check wether item is expired\n   *\n   * @private\n   * @param key - the key of the item\n   *\n   * @return true if the item is expired.\n   */\n\n\n  BrowserStorageCacheClass.prototype._isExpired = function (key) {\n    var text = this.config.storage.getItem(key);\n    var item = JSON.parse(text);\n\n    if (getCurrTime() >= item.expires) {\n      return true;\n    }\n\n    return false;\n  };\n  /**\n   * delete item from cache\n   *\n   * @private\n   * @param prefixedKey - the key of the item\n   * @param size - optional, the byte size of the item\n   */\n\n\n  BrowserStorageCacheClass.prototype._removeItem = function (prefixedKey, size) {\n    var itemSize = size ? size : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\n\n    this._decreaseCurSizeInBytes(itemSize); // remove the cache item\n\n\n    this.config.storage.removeItem(prefixedKey);\n  };\n  /**\n   * put item into cache\n   *\n   * @private\n   * @param prefixedKey - the key of the item\n   * @param itemData - the value of the item\n   * @param itemSizeInBytes - the byte size of the item\n   */\n\n\n  BrowserStorageCacheClass.prototype._setItem = function (prefixedKey, item) {\n    // update the cache size\n    this._increaseCurSizeInBytes(item.byteSize);\n\n    try {\n      this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n    } catch (setItemErr) {\n      // if failed, we need to rollback the cache size\n      this._decreaseCurSizeInBytes(item.byteSize);\n\n      logger.error(\"Failed to set item \" + setItemErr);\n    }\n  };\n  /**\n   * total space needed when poping out items\n   *\n   * @private\n   * @param itemSize\n   *\n   * @return total space needed\n   */\n\n\n  BrowserStorageCacheClass.prototype._sizeToPop = function (itemSize) {\n    var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\n    var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\n    return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;\n  };\n  /**\n   * see whether cache is full\n   *\n   * @private\n   * @param itemSize\n   *\n   * @return true if cache is full\n   */\n\n\n  BrowserStorageCacheClass.prototype._isCacheFull = function (itemSize) {\n    return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\n  };\n  /**\n   * scan the storage and find out all the keys owned by this cache\n   * also clean the expired keys while scanning\n   *\n   * @private\n   *\n   * @return array of keys\n   */\n\n\n  BrowserStorageCacheClass.prototype._findValidKeys = function () {\n    var keys = [];\n    var keyInCache = []; // get all keys in Storage\n\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      keyInCache.push(this.config.storage.key(i));\n    } // find those items which belong to our cache and also clean those expired items\n\n\n    for (var i = 0; i < keyInCache.length; i += 1) {\n      var key = keyInCache[i];\n\n      if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n        if (this._isExpired(key)) {\n          this._removeItem(key);\n        } else {\n          keys.push(key);\n        }\n      }\n    }\n\n    return keys;\n  };\n  /**\n   * get all the items we have, sort them by their priority,\n   * if priority is same, sort them by their last visited time\n   * pop out items from the low priority (5 is the lowest)\n   *\n   * @private\n   * @param keys - all the keys in this cache\n   * @param sizeToPop - the total size of the items which needed to be poped out\n   */\n\n\n  BrowserStorageCacheClass.prototype._popOutItems = function (keys, sizeToPop) {\n    var items = [];\n    var remainedSize = sizeToPop; // get the items from Storage\n\n    for (var i = 0; i < keys.length; i += 1) {\n      var val = this.config.storage.getItem(keys[i]);\n\n      if (val != null) {\n        var item = JSON.parse(val);\n        items.push(item);\n      }\n    } // first compare priority\n    // then compare visited time\n\n\n    items.sort(function (a, b) {\n      if (a.priority > b.priority) {\n        return -1;\n      } else if (a.priority < b.priority) {\n        return 1;\n      } else {\n        if (a.visitedTime < b.visitedTime) {\n          return -1;\n        } else return 1;\n      }\n    });\n\n    for (var i = 0; i < items.length; i += 1) {\n      // pop out items until we have enough room for new item\n      this._removeItem(items[i].key, items[i].byteSize);\n\n      remainedSize -= items[i].byteSize;\n\n      if (remainedSize <= 0) {\n        return;\n      }\n    }\n  };\n  /**\n   * Set item into cache. You can put number, string, boolean or object.\n   * The cache will first check whether has the same key.\n   * If it has, it will delete the old item and then put the new item in\n   * The cache will pop out items if it is full\n   * You can specify the cache item options. The cache will abort and output a warning:\n   * If the key is invalid\n   * If the size of the item exceeds itemMaxSize.\n   * If the value is undefined\n   * If incorrect cache item configuration\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param value - the value of the item\n   * @param {Object} [options] - optional, the specified meta-data\n   */\n\n\n  BrowserStorageCacheClass.prototype.setItem = function (key, value, options) {\n    logger.log(\"Set item: key is \" + key + \", value is \" + value + \" with options: \" + options);\n    var prefixedKey = this.config.keyPrefix + key; // invalid keys\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return;\n    }\n\n    if (typeof value === 'undefined') {\n      logger.warn(\"The value of item should not be undefined!\");\n      return;\n    }\n\n    var cacheItemOptions = {\n      priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,\n      expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + getCurrTime()\n    };\n\n    if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n      logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n      return;\n    }\n\n    var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions); // check wether this item is too big;\n\n    if (item.byteSize > this.config.itemMaxSize) {\n      logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n      return;\n    }\n\n    try {\n      // first look into the storage, if it exists, delete it.\n      var val = this.config.storage.getItem(prefixedKey);\n\n      if (val) {\n        this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n      } // check whether the cache is full\n\n\n      if (this._isCacheFull(item.byteSize)) {\n        var validKeys = this._findValidKeys(); // check again and then pop out items\n\n\n        if (this._isCacheFull(item.byteSize)) {\n          var sizeToPop = this._sizeToPop(item.byteSize);\n\n          this._popOutItems(validKeys, sizeToPop);\n        }\n      } // put item in the cache\n      // may failed due to storage full\n\n\n      this._setItem(prefixedKey, item);\n    } catch (e) {\n      logger.warn(\"setItem failed! \" + e);\n    }\n  };\n  /**\n   * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n   * If you specified callback function in the options,\n   * then the function will be executed if no such item in the cache\n   * and finally put the return value into cache.\n   * Please make sure the callback function will return the value you want to put into the cache.\n   * The cache will abort output a warning:\n   * If the key is invalid\n   * If error happened with browser storage\n   *\n   * @param key - the key of the item\n   * @param {Object} [options] - the options of callback function\n   *\n   * @return - return the value of the item\n   */\n\n\n  BrowserStorageCacheClass.prototype.getItem = function (key, options) {\n    logger.log(\"Get item: key is \" + key + \" with options \" + options);\n    var ret = null;\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n      return null;\n    }\n\n    try {\n      ret = this.config.storage.getItem(prefixedKey);\n\n      if (ret != null) {\n        if (this._isExpired(prefixedKey)) {\n          // if expired, remove that item and return null\n          this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\n\n          ret = null;\n        } else {\n          // if not expired, great, return the value and refresh it\n          var item = JSON.parse(ret);\n          item = this._refreshItem(item, prefixedKey);\n          return item.data;\n        }\n      }\n\n      if (options && options.callback !== undefined) {\n        var val = options.callback();\n\n        if (val !== null) {\n          this.setItem(key, val, options);\n        }\n\n        return val;\n      }\n\n      return null;\n    } catch (e) {\n      logger.warn(\"getItem failed! \" + e);\n      return null;\n    }\n  };\n  /**\n   * remove item from the cache\n   * The cache will abort output a warning:\n   * If error happened with browser storage\n   * @param key - the key of the item\n   */\n\n\n  BrowserStorageCacheClass.prototype.removeItem = function (key) {\n    logger.log(\"Remove item: key is \" + key);\n    var prefixedKey = this.config.keyPrefix + key;\n\n    if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {\n      return;\n    }\n\n    try {\n      var val = this.config.storage.getItem(prefixedKey);\n\n      if (val) {\n        this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n      }\n    } catch (e) {\n      logger.warn(\"removeItem failed! \" + e);\n    }\n  };\n  /**\n   * clear the entire cache\n   * The cache will abort output a warning:\n   * If error happened with browser storage\n   */\n\n\n  BrowserStorageCacheClass.prototype.clear = function () {\n    logger.log(\"Clear Cache\");\n    var keysToRemove = [];\n\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      var key = this.config.storage.key(i);\n\n      if (key.indexOf(this.config.keyPrefix) === 0) {\n        keysToRemove.push(key);\n      }\n    }\n\n    try {\n      for (var i = 0; i < keysToRemove.length; i += 1) {\n        this.config.storage.removeItem(keysToRemove[i]);\n      }\n    } catch (e) {\n      logger.warn(\"clear failed! \" + e);\n    }\n  };\n  /**\n   * Return all the keys in the cache.\n   *\n   * @return - all keys in the cache\n   */\n\n\n  BrowserStorageCacheClass.prototype.getAllKeys = function () {\n    var keys = [];\n\n    for (var i = 0; i < this.config.storage.length; i += 1) {\n      var key = this.config.storage.key(i);\n\n      if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {\n        keys.push(key.substring(this.config.keyPrefix.length));\n      }\n    }\n\n    return keys;\n  };\n  /**\n   * return the current size of the cache\n   *\n   * @return - current size of the cache\n   */\n\n\n  BrowserStorageCacheClass.prototype.getCacheCurSize = function () {\n    var ret = this.config.storage.getItem(this.cacheCurSizeKey);\n\n    if (!ret) {\n      this.config.storage.setItem(this.cacheCurSizeKey, '0');\n      ret = '0';\n    }\n\n    return Number(ret);\n  };\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param config - the customized configuration\n   *\n   * @return - new instance of Cache\n   */\n\n\n  BrowserStorageCacheClass.prototype.createInstance = function (config) {\n    if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\n      logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\n      config.keyPrefix = getCurrTime.toString();\n    }\n\n    return new BrowserStorageCacheClass(config);\n  };\n\n  return BrowserStorageCacheClass;\n}(StorageCache);\n\nexport { BrowserStorageCacheClass };\nexport var BrowserStorageCache = new BrowserStorageCacheClass();\nAmplify.register(BrowserStorageCache);","map":{"version":3,"names":["__extends","Amplify","ConsoleLogger","Logger","defaultConfig","getCurrTime","StorageCache","logger","BrowserStorageCacheClass","_super","config","_this","cacheConfig","Object","assign","call","storage","getItem","bind","setItem","removeItem","prototype","_decreaseCurSizeInBytes","amount","curSize","getCacheCurSize","cacheCurSizeKey","toString","_increaseCurSizeInBytes","_refreshItem","item","prefixedKey","visitedTime","JSON","stringify","_isExpired","key","text","parse","expires","_removeItem","size","itemSize","byteSize","_setItem","setItemErr","error","_sizeToPop","spaceItemNeed","capacityInBytes","cacheThresholdSpace","warningThreshold","_isCacheFull","_findValidKeys","keys","keyInCache","i","length","push","indexOf","keyPrefix","_popOutItems","sizeToPop","items","remainedSize","val","sort","a","b","priority","value","options","log","warn","cacheItemOptions","undefined","defaultPriority","defaultTTL","fillCacheItem","itemMaxSize","validKeys","e","ret","data","callback","clear","keysToRemove","getAllKeys","substring","Number","createInstance","BrowserStorageCache","register"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/cache/lib-esm/BrowserStorageCache.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __extends } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { defaultConfig, getCurrTime } from './Utils';\nimport { StorageCache } from './StorageCache';\nvar logger = new Logger('Cache');\n/**\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\n */\nvar BrowserStorageCacheClass = /** @class */ (function (_super) {\n    __extends(BrowserStorageCacheClass, _super);\n    /**\n     * initialize the cache\n     * @param config - the configuration of the cache\n     */\n    function BrowserStorageCacheClass(config) {\n        var _this = this;\n        var cacheConfig = config\n            ? Object.assign({}, defaultConfig, config)\n            : defaultConfig;\n        _this = _super.call(this, cacheConfig) || this;\n        _this.config.storage = cacheConfig.storage;\n        _this.getItem = _this.getItem.bind(_this);\n        _this.setItem = _this.setItem.bind(_this);\n        _this.removeItem = _this.removeItem.bind(_this);\n        return _this;\n    }\n    /**\n     * decrease current size of the cache\n     *\n     * @private\n     * @param amount - the amount of the cache size which needs to be decreased\n     */\n    BrowserStorageCacheClass.prototype._decreaseCurSizeInBytes = function (amount) {\n        var curSize = this.getCacheCurSize();\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());\n    };\n    /**\n     * increase current size of the cache\n     *\n     * @private\n     * @param amount - the amount of the cache szie which need to be increased\n     */\n    BrowserStorageCacheClass.prototype._increaseCurSizeInBytes = function (amount) {\n        var curSize = this.getCacheCurSize();\n        this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());\n    };\n    /**\n     * update the visited time if item has been visited\n     *\n     * @private\n     * @param item - the item which need to be refreshed\n     * @param prefixedKey - the key of the item\n     *\n     * @return the refreshed item\n     */\n    BrowserStorageCacheClass.prototype._refreshItem = function (item, prefixedKey) {\n        item.visitedTime = getCurrTime();\n        this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n        return item;\n    };\n    /**\n     * check wether item is expired\n     *\n     * @private\n     * @param key - the key of the item\n     *\n     * @return true if the item is expired.\n     */\n    BrowserStorageCacheClass.prototype._isExpired = function (key) {\n        var text = this.config.storage.getItem(key);\n        var item = JSON.parse(text);\n        if (getCurrTime() >= item.expires) {\n            return true;\n        }\n        return false;\n    };\n    /**\n     * delete item from cache\n     *\n     * @private\n     * @param prefixedKey - the key of the item\n     * @param size - optional, the byte size of the item\n     */\n    BrowserStorageCacheClass.prototype._removeItem = function (prefixedKey, size) {\n        var itemSize = size\n            ? size\n            : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;\n        this._decreaseCurSizeInBytes(itemSize);\n        // remove the cache item\n        this.config.storage.removeItem(prefixedKey);\n    };\n    /**\n     * put item into cache\n     *\n     * @private\n     * @param prefixedKey - the key of the item\n     * @param itemData - the value of the item\n     * @param itemSizeInBytes - the byte size of the item\n     */\n    BrowserStorageCacheClass.prototype._setItem = function (prefixedKey, item) {\n        // update the cache size\n        this._increaseCurSizeInBytes(item.byteSize);\n        try {\n            this.config.storage.setItem(prefixedKey, JSON.stringify(item));\n        }\n        catch (setItemErr) {\n            // if failed, we need to rollback the cache size\n            this._decreaseCurSizeInBytes(item.byteSize);\n            logger.error(\"Failed to set item \" + setItemErr);\n        }\n    };\n    /**\n     * total space needed when poping out items\n     *\n     * @private\n     * @param itemSize\n     *\n     * @return total space needed\n     */\n    BrowserStorageCacheClass.prototype._sizeToPop = function (itemSize) {\n        var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;\n        var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;\n        return spaceItemNeed > cacheThresholdSpace\n            ? spaceItemNeed\n            : cacheThresholdSpace;\n    };\n    /**\n     * see whether cache is full\n     *\n     * @private\n     * @param itemSize\n     *\n     * @return true if cache is full\n     */\n    BrowserStorageCacheClass.prototype._isCacheFull = function (itemSize) {\n        return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;\n    };\n    /**\n     * scan the storage and find out all the keys owned by this cache\n     * also clean the expired keys while scanning\n     *\n     * @private\n     *\n     * @return array of keys\n     */\n    BrowserStorageCacheClass.prototype._findValidKeys = function () {\n        var keys = [];\n        var keyInCache = [];\n        // get all keys in Storage\n        for (var i = 0; i < this.config.storage.length; i += 1) {\n            keyInCache.push(this.config.storage.key(i));\n        }\n        // find those items which belong to our cache and also clean those expired items\n        for (var i = 0; i < keyInCache.length; i += 1) {\n            var key = keyInCache[i];\n            if (key.indexOf(this.config.keyPrefix) === 0 &&\n                key !== this.cacheCurSizeKey) {\n                if (this._isExpired(key)) {\n                    this._removeItem(key);\n                }\n                else {\n                    keys.push(key);\n                }\n            }\n        }\n        return keys;\n    };\n    /**\n     * get all the items we have, sort them by their priority,\n     * if priority is same, sort them by their last visited time\n     * pop out items from the low priority (5 is the lowest)\n     *\n     * @private\n     * @param keys - all the keys in this cache\n     * @param sizeToPop - the total size of the items which needed to be poped out\n     */\n    BrowserStorageCacheClass.prototype._popOutItems = function (keys, sizeToPop) {\n        var items = [];\n        var remainedSize = sizeToPop;\n        // get the items from Storage\n        for (var i = 0; i < keys.length; i += 1) {\n            var val = this.config.storage.getItem(keys[i]);\n            if (val != null) {\n                var item = JSON.parse(val);\n                items.push(item);\n            }\n        }\n        // first compare priority\n        // then compare visited time\n        items.sort(function (a, b) {\n            if (a.priority > b.priority) {\n                return -1;\n            }\n            else if (a.priority < b.priority) {\n                return 1;\n            }\n            else {\n                if (a.visitedTime < b.visitedTime) {\n                    return -1;\n                }\n                else\n                    return 1;\n            }\n        });\n        for (var i = 0; i < items.length; i += 1) {\n            // pop out items until we have enough room for new item\n            this._removeItem(items[i].key, items[i].byteSize);\n            remainedSize -= items[i].byteSize;\n            if (remainedSize <= 0) {\n                return;\n            }\n        }\n    };\n    /**\n     * Set item into cache. You can put number, string, boolean or object.\n     * The cache will first check whether has the same key.\n     * If it has, it will delete the old item and then put the new item in\n     * The cache will pop out items if it is full\n     * You can specify the cache item options. The cache will abort and output a warning:\n     * If the key is invalid\n     * If the size of the item exceeds itemMaxSize.\n     * If the value is undefined\n     * If incorrect cache item configuration\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param value - the value of the item\n     * @param {Object} [options] - optional, the specified meta-data\n     */\n    BrowserStorageCacheClass.prototype.setItem = function (key, value, options) {\n        logger.log(\"Set item: key is \" + key + \", value is \" + value + \" with options: \" + options);\n        var prefixedKey = this.config.keyPrefix + key;\n        // invalid keys\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return;\n        }\n        if (typeof value === 'undefined') {\n            logger.warn(\"The value of item should not be undefined!\");\n            return;\n        }\n        var cacheItemOptions = {\n            priority: options && options.priority !== undefined\n                ? options.priority\n                : this.config.defaultPriority,\n            expires: options && options.expires !== undefined\n                ? options.expires\n                : this.config.defaultTTL + getCurrTime(),\n        };\n        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {\n            logger.warn(\"Invalid parameter: priority due to out or range. It should be within 1 and 5.\");\n            return;\n        }\n        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);\n        // check wether this item is too big;\n        if (item.byteSize > this.config.itemMaxSize) {\n            logger.warn(\"Item with key: \" + key + \" you are trying to put into is too big!\");\n            return;\n        }\n        try {\n            // first look into the storage, if it exists, delete it.\n            var val = this.config.storage.getItem(prefixedKey);\n            if (val) {\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n            }\n            // check whether the cache is full\n            if (this._isCacheFull(item.byteSize)) {\n                var validKeys = this._findValidKeys();\n                // check again and then pop out items\n                if (this._isCacheFull(item.byteSize)) {\n                    var sizeToPop = this._sizeToPop(item.byteSize);\n                    this._popOutItems(validKeys, sizeToPop);\n                }\n            }\n            // put item in the cache\n            // may failed due to storage full\n            this._setItem(prefixedKey, item);\n        }\n        catch (e) {\n            logger.warn(\"setItem failed! \" + e);\n        }\n    };\n    /**\n     * Get item from cache. It will return null if item doesnâ€™t exist or it has been expired.\n     * If you specified callback function in the options,\n     * then the function will be executed if no such item in the cache\n     * and finally put the return value into cache.\n     * Please make sure the callback function will return the value you want to put into the cache.\n     * The cache will abort output a warning:\n     * If the key is invalid\n     * If error happened with browser storage\n     *\n     * @param key - the key of the item\n     * @param {Object} [options] - the options of callback function\n     *\n     * @return - return the value of the item\n     */\n    BrowserStorageCacheClass.prototype.getItem = function (key, options) {\n        logger.log(\"Get item: key is \" + key + \" with options \" + options);\n        var ret = null;\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            logger.warn(\"Invalid key: should not be empty or 'CurSize'\");\n            return null;\n        }\n        try {\n            ret = this.config.storage.getItem(prefixedKey);\n            if (ret != null) {\n                if (this._isExpired(prefixedKey)) {\n                    // if expired, remove that item and return null\n                    this._removeItem(prefixedKey, JSON.parse(ret).byteSize);\n                    ret = null;\n                }\n                else {\n                    // if not expired, great, return the value and refresh it\n                    var item = JSON.parse(ret);\n                    item = this._refreshItem(item, prefixedKey);\n                    return item.data;\n                }\n            }\n            if (options && options.callback !== undefined) {\n                var val = options.callback();\n                if (val !== null) {\n                    this.setItem(key, val, options);\n                }\n                return val;\n            }\n            return null;\n        }\n        catch (e) {\n            logger.warn(\"getItem failed! \" + e);\n            return null;\n        }\n    };\n    /**\n     * remove item from the cache\n     * The cache will abort output a warning:\n     * If error happened with browser storage\n     * @param key - the key of the item\n     */\n    BrowserStorageCacheClass.prototype.removeItem = function (key) {\n        logger.log(\"Remove item: key is \" + key);\n        var prefixedKey = this.config.keyPrefix + key;\n        if (prefixedKey === this.config.keyPrefix ||\n            prefixedKey === this.cacheCurSizeKey) {\n            return;\n        }\n        try {\n            var val = this.config.storage.getItem(prefixedKey);\n            if (val) {\n                this._removeItem(prefixedKey, JSON.parse(val).byteSize);\n            }\n        }\n        catch (e) {\n            logger.warn(\"removeItem failed! \" + e);\n        }\n    };\n    /**\n     * clear the entire cache\n     * The cache will abort output a warning:\n     * If error happened with browser storage\n     */\n    BrowserStorageCacheClass.prototype.clear = function () {\n        logger.log(\"Clear Cache\");\n        var keysToRemove = [];\n        for (var i = 0; i < this.config.storage.length; i += 1) {\n            var key = this.config.storage.key(i);\n            if (key.indexOf(this.config.keyPrefix) === 0) {\n                keysToRemove.push(key);\n            }\n        }\n        try {\n            for (var i = 0; i < keysToRemove.length; i += 1) {\n                this.config.storage.removeItem(keysToRemove[i]);\n            }\n        }\n        catch (e) {\n            logger.warn(\"clear failed! \" + e);\n        }\n    };\n    /**\n     * Return all the keys in the cache.\n     *\n     * @return - all keys in the cache\n     */\n    BrowserStorageCacheClass.prototype.getAllKeys = function () {\n        var keys = [];\n        for (var i = 0; i < this.config.storage.length; i += 1) {\n            var key = this.config.storage.key(i);\n            if (key.indexOf(this.config.keyPrefix) === 0 &&\n                key !== this.cacheCurSizeKey) {\n                keys.push(key.substring(this.config.keyPrefix.length));\n            }\n        }\n        return keys;\n    };\n    /**\n     * return the current size of the cache\n     *\n     * @return - current size of the cache\n     */\n    BrowserStorageCacheClass.prototype.getCacheCurSize = function () {\n        var ret = this.config.storage.getItem(this.cacheCurSizeKey);\n        if (!ret) {\n            this.config.storage.setItem(this.cacheCurSizeKey, '0');\n            ret = '0';\n        }\n        return Number(ret);\n    };\n    /**\n     * Return a new instance of cache with customized configuration.\n     * @param config - the customized configuration\n     *\n     * @return - new instance of Cache\n     */\n    BrowserStorageCacheClass.prototype.createInstance = function (config) {\n        if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\n            logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\n            config.keyPrefix = getCurrTime.toString();\n        }\n        return new BrowserStorageCacheClass(config);\n    };\n    return BrowserStorageCacheClass;\n}(StorageCache));\nexport { BrowserStorageCacheClass };\nexport var BrowserStorageCache = new BrowserStorageCacheClass();\nAmplify.register(BrowserStorageCache);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}