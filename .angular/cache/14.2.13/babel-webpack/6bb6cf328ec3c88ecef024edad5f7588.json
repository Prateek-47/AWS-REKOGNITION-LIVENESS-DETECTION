{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport { getInAppMessages } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { addEventListener, AWSPinpointProviderCommon } from '../../../common';\nimport SessionTracker from '../../SessionTracker';\nimport { InAppMessageInteractionEvent } from '../../types';\nimport { AWSPinpointMessageEvent } from './types';\nimport { clearMemo, dispatchInAppMessagingEvent, extractContent, extractMetadata, getStartOfDay, interpretLayout, isBeforeEndDate, logger, matchesAttributes, matchesEventType, matchesMetrics, recordAnalyticsEvent } from './utils';\nvar MESSAGE_DAILY_COUNT_KEY = 'pinpointProvider_inAppMessages_dailyCount';\nvar MESSAGE_TOTAL_COUNT_KEY = 'pinpointProvider_inAppMessages_totalCount';\n\nvar AWSPinpointProvider =\n/** @class */\nfunction (_super) {\n  __extends(AWSPinpointProvider, _super);\n\n  function AWSPinpointProvider() {\n    var _this = _super.call(this, logger) || this;\n\n    _this.configured = false;\n\n    _this.configure = function (config) {\n      if (config === void 0) {\n        config = {};\n      }\n\n      _this.config = __assign(__assign({}, _super.prototype.configure.call(_this, config)), {\n        endpointInfo: {\n          channelType: 'IN_APP'\n        }\n      }); // some configuration steps should not be re-run even if provider is re-configured for some reason\n\n      if (!_this.configured) {\n        _this.sessionTracker = new SessionTracker(_this.sessionStateChangeHandler);\n\n        _this.sessionTracker.start(); // wire up default Pinpoint message event handling\n\n\n        addEventListener(InAppMessageInteractionEvent.MESSAGE_DISPLAYED, function (message) {\n          _this.recordMessageEvent(message, AWSPinpointMessageEvent.MESSAGE_DISPLAYED);\n        });\n        addEventListener(InAppMessageInteractionEvent.MESSAGE_DISMISSED, function (message) {\n          _this.recordMessageEvent(message, AWSPinpointMessageEvent.MESSAGE_DISMISSED);\n        });\n        addEventListener(InAppMessageInteractionEvent.MESSAGE_ACTION_TAKEN, function (message) {\n          _this.recordMessageEvent(message, AWSPinpointMessageEvent.MESSAGE_ACTION_TAKEN);\n        });\n      }\n\n      _this.configured = true;\n      dispatchInAppMessagingEvent('pinpointProvider_configured', null);\n      return _this.config;\n    };\n\n    _this.getInAppMessages = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, appId, credentials, endpointId, region, input, response, messages, err_1;\n\n        return __generator(this, function (_b) {\n          switch (_b.label) {\n            case 0:\n              if (!!this.initialized) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this.init()];\n\n            case 1:\n              _b.sent();\n\n              _b.label = 2;\n\n            case 2:\n              // There is no way to granuarly reconcile the filter memoization as the keys are composited from a message id and\n              // event properties thus opting to just clear them out when getting messages rather than leave potentially\n              // obsolete entries that will no longer serve any purpose.\n              clearMemo();\n              _b.label = 3;\n\n            case 3:\n              _b.trys.push([3, 6,, 7]);\n\n              return [4\n              /*yield*/\n              , this.updateEndpoint()];\n\n            case 4:\n              _b.sent();\n\n              _a = this.config, appId = _a.appId, credentials = _a.credentials, endpointId = _a.endpointId, region = _a.region;\n              input = {\n                ApplicationId: appId,\n                EndpointId: endpointId\n              };\n              this.logger.debug('getting in-app messages');\n              return [4\n              /*yield*/\n              , getInAppMessages({\n                credentials: credentials,\n                region: region\n              }, input)];\n\n            case 5:\n              response = _b.sent();\n              messages = response.InAppMessagesResponse.InAppMessageCampaigns;\n              dispatchInAppMessagingEvent('getInAppMessages', messages);\n              return [2\n              /*return*/\n              , messages];\n\n            case 6:\n              err_1 = _b.sent();\n              this.logger.error('Error getting in-app messages', err_1);\n              throw err_1;\n\n            case 7:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    _this.processInAppMessages = function (messages, event) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var highestPrioritySeen;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!!this.initialized) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this.init()];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              return [2\n              /*return*/\n              , this.normalizeMessages(messages.reduce(function (acc, message) {\n                var messageQualifies = matchesEventType(message, event) && matchesAttributes(message, event) && matchesMetrics(message, event) && isBeforeEndDate(message) && _this.isBelowCap(message); // filter all qualifying messages returning only those that are of (relative) highest priority\n\n\n                if (messageQualifies) {\n                  // have not yet encountered message with priority\n                  if (!highestPrioritySeen) {\n                    // this message has priority, so reset the accumulator with this message only\n                    if (message.Priority) {\n                      highestPrioritySeen = message.Priority;\n                      return [message];\n                    } else {\n                      // this message also has no priority, so just add this message to accumulator\n                      acc.push(message);\n                    } // have previously encountered message with priority, so only messages with priority matter now\n\n                  } else if (message.Priority) {\n                    // this message has higher priority (lower number), so reset the accumulator with this message only\n                    if (message.Priority < highestPrioritySeen) {\n                      highestPrioritySeen = message.Priority;\n                      return [message]; // this message has the same priority, so just add this message to accumulator\n                    } else if (message.Priority === highestPrioritySeen) {\n                      acc.push(message);\n                    }\n                  }\n                }\n\n                return acc;\n              }, []))];\n          }\n        });\n      });\n    };\n\n    _this.sessionStateChangeHandler = function (state) {\n      if (state === 'started') {\n        // reset all session counts\n        _this.sessionMessageCountMap = {};\n      }\n    };\n\n    _this.isBelowCap = function (_a) {\n      var CampaignId = _a.CampaignId,\n          SessionCap = _a.SessionCap,\n          DailyCap = _a.DailyCap,\n          TotalCap = _a.TotalCap;\n\n      var _b = _this.getMessageCounts(CampaignId),\n          sessionCount = _b.sessionCount,\n          dailyCount = _b.dailyCount,\n          totalCount = _b.totalCount;\n\n      return (!SessionCap || sessionCount < SessionCap) && (!DailyCap || dailyCount < DailyCap) && (!TotalCap || totalCount < TotalCap);\n    }; // Use the current session count in memory or initialize as empty count\n\n\n    _this.getSessionCount = function (messageId) {\n      return _this.sessionMessageCountMap[messageId] || 0;\n    };\n\n    _this.getDailyCount = function () {\n      var storage = _this.config.storage;\n      var today = getStartOfDay();\n      var item = storage.getItem(MESSAGE_DAILY_COUNT_KEY); // Parse stored count or initialize as empty count\n\n      var counter = item ? JSON.parse(item) : {\n        count: 0,\n        lastCountTimestamp: today\n      }; // If the stored counter timestamp is today, use it as the count, otherwise reset to 0\n\n      return counter.lastCountTimestamp === today ? counter.count : 0;\n    };\n\n    _this.getTotalCountMap = function () {\n      var storage = _this.config.storage;\n      var item = storage.getItem(MESSAGE_TOTAL_COUNT_KEY); // Parse stored count map or initialize as empty\n\n      return item ? JSON.parse(item) : {};\n    };\n\n    _this.getTotalCount = function (messageId) {\n      var countMap = _this.getTotalCountMap(); // Return stored count or initialize as empty count\n\n\n      return countMap[messageId] || 0;\n    };\n\n    _this.getMessageCounts = function (messageId) {\n      try {\n        return {\n          sessionCount: _this.getSessionCount(messageId),\n          dailyCount: _this.getDailyCount(),\n          totalCount: _this.getTotalCount(messageId)\n        };\n      } catch (err) {\n        _this.logger.error('Failed to get message counts from storage', err);\n      }\n    };\n\n    _this.setSessionCount = function (messageId, count) {\n      _this.sessionMessageCountMap[messageId] = count;\n    };\n\n    _this.setDailyCount = function (count) {\n      var storage = _this.config.storage;\n      var dailyCount = {\n        count: count,\n        lastCountTimestamp: getStartOfDay()\n      };\n\n      try {\n        storage.setItem(MESSAGE_DAILY_COUNT_KEY, JSON.stringify(dailyCount));\n      } catch (err) {\n        _this.logger.error('Failed to save daily message count to storage', err);\n      }\n    };\n\n    _this.setTotalCountMap = function (countMap) {\n      var storage = _this.config.storage;\n\n      try {\n        storage.setItem(MESSAGE_TOTAL_COUNT_KEY, JSON.stringify(countMap));\n      } catch (err) {\n        _this.logger.error('Failed to save total count to storage', err);\n      }\n    };\n\n    _this.setTotalCount = function (messageId, count) {\n      var _a;\n\n      var updatedMap = __assign(__assign({}, _this.getTotalCountMap()), (_a = {}, _a[messageId] = count, _a));\n\n      _this.setTotalCountMap(updatedMap);\n    };\n\n    _this.incrementCounts = function (messageId) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, sessionCount, dailyCount, totalCount;\n\n        return __generator(this, function (_b) {\n          _a = this.getMessageCounts(messageId), sessionCount = _a.sessionCount, dailyCount = _a.dailyCount, totalCount = _a.totalCount;\n          this.setSessionCount(messageId, sessionCount + 1);\n          this.setDailyCount(dailyCount + 1);\n          this.setTotalCount(messageId, totalCount + 1);\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    };\n\n    _this.normalizeMessages = function (messages) {\n      return messages.map(function (message) {\n        var CampaignId = message.CampaignId,\n            InAppMessage = message.InAppMessage;\n        return {\n          id: CampaignId,\n          content: extractContent(message),\n          layout: interpretLayout(InAppMessage.Layout),\n          metadata: extractMetadata(message)\n        };\n      });\n    };\n\n    _this.recordMessageEvent = function (message, event) {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!!this.initialized) return [3\n              /*break*/\n              , 2];\n              return [4\n              /*yield*/\n              , this.init()];\n\n            case 1:\n              _a.sent();\n\n              _a.label = 2;\n\n            case 2:\n              recordAnalyticsEvent(event, message);\n              if (!(event === AWSPinpointMessageEvent.MESSAGE_DISPLAYED)) return [3\n              /*break*/\n              , 4];\n              return [4\n              /*yield*/\n              , this.incrementCounts(message.id)];\n\n            case 3:\n              _a.sent();\n\n              _a.label = 4;\n\n            case 4:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    _this.sessionMessageCountMap = {};\n    return _this;\n  }\n  /**\n   * get the sub-category of the plugin\n   */\n\n\n  AWSPinpointProvider.prototype.getSubCategory = function () {\n    return AWSPinpointProvider.subCategory;\n  };\n\n  AWSPinpointProvider.subCategory = 'InAppMessaging';\n  return AWSPinpointProvider;\n}(AWSPinpointProviderCommon);\n\nexport default AWSPinpointProvider;","map":{"version":3,"names":["__assign","__awaiter","__extends","__generator","getInAppMessages","addEventListener","AWSPinpointProviderCommon","SessionTracker","InAppMessageInteractionEvent","AWSPinpointMessageEvent","clearMemo","dispatchInAppMessagingEvent","extractContent","extractMetadata","getStartOfDay","interpretLayout","isBeforeEndDate","logger","matchesAttributes","matchesEventType","matchesMetrics","recordAnalyticsEvent","MESSAGE_DAILY_COUNT_KEY","MESSAGE_TOTAL_COUNT_KEY","AWSPinpointProvider","_super","_this","call","configured","configure","config","prototype","endpointInfo","channelType","sessionTracker","sessionStateChangeHandler","start","MESSAGE_DISPLAYED","message","recordMessageEvent","MESSAGE_DISMISSED","MESSAGE_ACTION_TAKEN","_a","appId","credentials","endpointId","region","input","response","messages","err_1","_b","label","initialized","init","sent","trys","push","updateEndpoint","ApplicationId","EndpointId","debug","InAppMessagesResponse","InAppMessageCampaigns","error","processInAppMessages","event","highestPrioritySeen","normalizeMessages","reduce","acc","messageQualifies","isBelowCap","Priority","state","sessionMessageCountMap","CampaignId","SessionCap","DailyCap","TotalCap","getMessageCounts","sessionCount","dailyCount","totalCount","getSessionCount","messageId","getDailyCount","storage","today","item","getItem","counter","JSON","parse","count","lastCountTimestamp","getTotalCountMap","getTotalCount","countMap","err","setSessionCount","setDailyCount","setItem","stringify","setTotalCountMap","setTotalCount","updatedMap","incrementCounts","map","InAppMessage","id","content","layout","Layout","metadata","getSubCategory","subCategory"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/notifications/lib-esm/InAppMessaging/Providers/AWSPinpointProvider/index.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __extends, __generator } from \"tslib\";\nimport { getInAppMessages, } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { addEventListener, AWSPinpointProviderCommon } from '../../../common';\nimport SessionTracker from '../../SessionTracker';\nimport { InAppMessageInteractionEvent, } from '../../types';\nimport { AWSPinpointMessageEvent, } from './types';\nimport { clearMemo, dispatchInAppMessagingEvent, extractContent, extractMetadata, getStartOfDay, interpretLayout, isBeforeEndDate, logger, matchesAttributes, matchesEventType, matchesMetrics, recordAnalyticsEvent, } from './utils';\nvar MESSAGE_DAILY_COUNT_KEY = 'pinpointProvider_inAppMessages_dailyCount';\nvar MESSAGE_TOTAL_COUNT_KEY = 'pinpointProvider_inAppMessages_totalCount';\nvar AWSPinpointProvider = /** @class */ (function (_super) {\n    __extends(AWSPinpointProvider, _super);\n    function AWSPinpointProvider() {\n        var _this = _super.call(this, logger) || this;\n        _this.configured = false;\n        _this.configure = function (config) {\n            if (config === void 0) { config = {}; }\n            _this.config = __assign(__assign({}, _super.prototype.configure.call(_this, config)), { endpointInfo: { channelType: 'IN_APP' } });\n            // some configuration steps should not be re-run even if provider is re-configured for some reason\n            if (!_this.configured) {\n                _this.sessionTracker = new SessionTracker(_this.sessionStateChangeHandler);\n                _this.sessionTracker.start();\n                // wire up default Pinpoint message event handling\n                addEventListener(InAppMessageInteractionEvent.MESSAGE_DISPLAYED, function (message) {\n                    _this.recordMessageEvent(message, AWSPinpointMessageEvent.MESSAGE_DISPLAYED);\n                });\n                addEventListener(InAppMessageInteractionEvent.MESSAGE_DISMISSED, function (message) {\n                    _this.recordMessageEvent(message, AWSPinpointMessageEvent.MESSAGE_DISMISSED);\n                });\n                addEventListener(InAppMessageInteractionEvent.MESSAGE_ACTION_TAKEN, function (message) {\n                    _this.recordMessageEvent(message, AWSPinpointMessageEvent.MESSAGE_ACTION_TAKEN);\n                });\n            }\n            _this.configured = true;\n            dispatchInAppMessagingEvent('pinpointProvider_configured', null);\n            return _this.config;\n        };\n        _this.getInAppMessages = function () { return __awaiter(_this, void 0, void 0, function () {\n            var _a, appId, credentials, endpointId, region, input, response, messages, err_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!!this.initialized) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.init()];\n                    case 1:\n                        _b.sent();\n                        _b.label = 2;\n                    case 2:\n                        // There is no way to granuarly reconcile the filter memoization as the keys are composited from a message id and\n                        // event properties thus opting to just clear them out when getting messages rather than leave potentially\n                        // obsolete entries that will no longer serve any purpose.\n                        clearMemo();\n                        _b.label = 3;\n                    case 3:\n                        _b.trys.push([3, 6, , 7]);\n                        return [4 /*yield*/, this.updateEndpoint()];\n                    case 4:\n                        _b.sent();\n                        _a = this.config, appId = _a.appId, credentials = _a.credentials, endpointId = _a.endpointId, region = _a.region;\n                        input = {\n                            ApplicationId: appId,\n                            EndpointId: endpointId,\n                        };\n                        this.logger.debug('getting in-app messages');\n                        return [4 /*yield*/, getInAppMessages({ credentials: credentials, region: region }, input)];\n                    case 5:\n                        response = _b.sent();\n                        messages = response.InAppMessagesResponse.InAppMessageCampaigns;\n                        dispatchInAppMessagingEvent('getInAppMessages', messages);\n                        return [2 /*return*/, messages];\n                    case 6:\n                        err_1 = _b.sent();\n                        this.logger.error('Error getting in-app messages', err_1);\n                        throw err_1;\n                    case 7: return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.processInAppMessages = function (messages, event) { return __awaiter(_this, void 0, void 0, function () {\n            var highestPrioritySeen;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this.initialized) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.init()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/, this.normalizeMessages(messages.reduce(function (acc, message) {\n                            var messageQualifies = matchesEventType(message, event) &&\n                                matchesAttributes(message, event) &&\n                                matchesMetrics(message, event) &&\n                                isBeforeEndDate(message) &&\n                                _this.isBelowCap(message);\n                            // filter all qualifying messages returning only those that are of (relative) highest priority\n                            if (messageQualifies) {\n                                // have not yet encountered message with priority\n                                if (!highestPrioritySeen) {\n                                    // this message has priority, so reset the accumulator with this message only\n                                    if (message.Priority) {\n                                        highestPrioritySeen = message.Priority;\n                                        return [message];\n                                    }\n                                    else {\n                                        // this message also has no priority, so just add this message to accumulator\n                                        acc.push(message);\n                                    }\n                                    // have previously encountered message with priority, so only messages with priority matter now\n                                }\n                                else if (message.Priority) {\n                                    // this message has higher priority (lower number), so reset the accumulator with this message only\n                                    if (message.Priority < highestPrioritySeen) {\n                                        highestPrioritySeen = message.Priority;\n                                        return [message];\n                                        // this message has the same priority, so just add this message to accumulator\n                                    }\n                                    else if (message.Priority === highestPrioritySeen) {\n                                        acc.push(message);\n                                    }\n                                }\n                            }\n                            return acc;\n                        }, []))];\n                }\n            });\n        }); };\n        _this.sessionStateChangeHandler = function (state) {\n            if (state === 'started') {\n                // reset all session counts\n                _this.sessionMessageCountMap = {};\n            }\n        };\n        _this.isBelowCap = function (_a) {\n            var CampaignId = _a.CampaignId, SessionCap = _a.SessionCap, DailyCap = _a.DailyCap, TotalCap = _a.TotalCap;\n            var _b = _this.getMessageCounts(CampaignId), sessionCount = _b.sessionCount, dailyCount = _b.dailyCount, totalCount = _b.totalCount;\n            return ((!SessionCap || sessionCount < SessionCap) &&\n                (!DailyCap || dailyCount < DailyCap) &&\n                (!TotalCap || totalCount < TotalCap));\n        };\n        // Use the current session count in memory or initialize as empty count\n        _this.getSessionCount = function (messageId) {\n            return _this.sessionMessageCountMap[messageId] || 0;\n        };\n        _this.getDailyCount = function () {\n            var storage = _this.config.storage;\n            var today = getStartOfDay();\n            var item = storage.getItem(MESSAGE_DAILY_COUNT_KEY);\n            // Parse stored count or initialize as empty count\n            var counter = item\n                ? JSON.parse(item)\n                : { count: 0, lastCountTimestamp: today };\n            // If the stored counter timestamp is today, use it as the count, otherwise reset to 0\n            return counter.lastCountTimestamp === today ? counter.count : 0;\n        };\n        _this.getTotalCountMap = function () {\n            var storage = _this.config.storage;\n            var item = storage.getItem(MESSAGE_TOTAL_COUNT_KEY);\n            // Parse stored count map or initialize as empty\n            return item ? JSON.parse(item) : {};\n        };\n        _this.getTotalCount = function (messageId) {\n            var countMap = _this.getTotalCountMap();\n            // Return stored count or initialize as empty count\n            return countMap[messageId] || 0;\n        };\n        _this.getMessageCounts = function (messageId) {\n            try {\n                return {\n                    sessionCount: _this.getSessionCount(messageId),\n                    dailyCount: _this.getDailyCount(),\n                    totalCount: _this.getTotalCount(messageId),\n                };\n            }\n            catch (err) {\n                _this.logger.error('Failed to get message counts from storage', err);\n            }\n        };\n        _this.setSessionCount = function (messageId, count) {\n            _this.sessionMessageCountMap[messageId] = count;\n        };\n        _this.setDailyCount = function (count) {\n            var storage = _this.config.storage;\n            var dailyCount = {\n                count: count,\n                lastCountTimestamp: getStartOfDay(),\n            };\n            try {\n                storage.setItem(MESSAGE_DAILY_COUNT_KEY, JSON.stringify(dailyCount));\n            }\n            catch (err) {\n                _this.logger.error('Failed to save daily message count to storage', err);\n            }\n        };\n        _this.setTotalCountMap = function (countMap) {\n            var storage = _this.config.storage;\n            try {\n                storage.setItem(MESSAGE_TOTAL_COUNT_KEY, JSON.stringify(countMap));\n            }\n            catch (err) {\n                _this.logger.error('Failed to save total count to storage', err);\n            }\n        };\n        _this.setTotalCount = function (messageId, count) {\n            var _a;\n            var updatedMap = __assign(__assign({}, _this.getTotalCountMap()), (_a = {}, _a[messageId] = count, _a));\n            _this.setTotalCountMap(updatedMap);\n        };\n        _this.incrementCounts = function (messageId) { return __awaiter(_this, void 0, void 0, function () {\n            var _a, sessionCount, dailyCount, totalCount;\n            return __generator(this, function (_b) {\n                _a = this.getMessageCounts(messageId), sessionCount = _a.sessionCount, dailyCount = _a.dailyCount, totalCount = _a.totalCount;\n                this.setSessionCount(messageId, sessionCount + 1);\n                this.setDailyCount(dailyCount + 1);\n                this.setTotalCount(messageId, totalCount + 1);\n                return [2 /*return*/];\n            });\n        }); };\n        _this.normalizeMessages = function (messages) {\n            return messages.map(function (message) {\n                var CampaignId = message.CampaignId, InAppMessage = message.InAppMessage;\n                return {\n                    id: CampaignId,\n                    content: extractContent(message),\n                    layout: interpretLayout(InAppMessage.Layout),\n                    metadata: extractMetadata(message),\n                };\n            });\n        };\n        _this.recordMessageEvent = function (message, event) { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!!this.initialized) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.init()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        recordAnalyticsEvent(event, message);\n                        if (!(event === AWSPinpointMessageEvent.MESSAGE_DISPLAYED)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.incrementCounts(message.id)];\n                    case 3:\n                        _a.sent();\n                        _a.label = 4;\n                    case 4: return [2 /*return*/];\n                }\n            });\n        }); };\n        _this.sessionMessageCountMap = {};\n        return _this;\n    }\n    /**\n     * get the sub-category of the plugin\n     */\n    AWSPinpointProvider.prototype.getSubCategory = function () {\n        return AWSPinpointProvider.subCategory;\n    };\n    AWSPinpointProvider.subCategory = 'InAppMessaging';\n    return AWSPinpointProvider;\n}(AWSPinpointProviderCommon));\nexport default AWSPinpointProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}