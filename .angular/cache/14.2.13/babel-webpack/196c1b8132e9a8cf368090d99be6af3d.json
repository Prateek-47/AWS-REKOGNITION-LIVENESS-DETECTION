{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\n\nfunction unpack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    value\n  } = inputs;\n  let {\n    axis\n  } = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const numOutputs = value.shape[axis];\n  const rank = value.shape.length;\n  const outShape = new Array(rank - 1);\n  let outIndex = 0;\n\n  for (let i = 0; i < rank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = value.shape[i];\n    }\n  }\n\n  const outs = new Array(numOutputs);\n  const begin = new Array(rank).fill(0);\n  const size = value.shape.slice();\n  size[axis] = 1;\n\n  for (let i = 0; i < outs.length; i++) {\n    begin[axis] = i;\n    outs[i] = slice({\n      inputs: {\n        x: value\n      },\n      attrs: {\n        begin,\n        size\n      },\n      backend\n    });\n  }\n\n  return outs.map(({\n    dataId,\n    dtype\n  }) => ({\n    dataId,\n    dtype,\n    shape: outShape\n  }));\n}\n\nexport const unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'wasm',\n  kernelFunc: unpack\n};","map":{"version":3,"names":["Unpack","slice","unpack","args","inputs","backend","attrs","value","axis","shape","length","numOutputs","rank","outShape","Array","outIndex","i","outs","begin","fill","size","x","map","dataId","dtype","unpackConfig","kernelName","backendName","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Unpack.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nfunction unpack(args) {\n    const { inputs, backend, attrs } = args;\n    const { value } = inputs;\n    let { axis } = attrs;\n    if (axis < 0) {\n        axis += value.shape.length;\n    }\n    const numOutputs = value.shape[axis];\n    const rank = value.shape.length;\n    const outShape = new Array(rank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < rank; i++) {\n        if (i !== axis) {\n            outShape[outIndex++] = value.shape[i];\n        }\n    }\n    const outs = new Array(numOutputs);\n    const begin = new Array(rank).fill(0);\n    const size = value.shape.slice();\n    size[axis] = 1;\n    for (let i = 0; i < outs.length; i++) {\n        begin[axis] = i;\n        outs[i] = slice({ inputs: { x: value }, attrs: { begin, size }, backend });\n    }\n    return outs.map(({ dataId, dtype }) => ({ dataId, dtype, shape: outShape }));\n}\nexport const unpackConfig = {\n    kernelName: Unpack,\n    backendName: 'wasm',\n    kernelFunc: unpack,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,KAAT,QAAsB,SAAtB;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EAClB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAYH,MAAlB;EACA,IAAI;IAAEI;EAAF,IAAWF,KAAf;;EACA,IAAIE,IAAI,GAAG,CAAX,EAAc;IACVA,IAAI,IAAID,KAAK,CAACE,KAAN,CAAYC,MAApB;EACH;;EACD,MAAMC,UAAU,GAAGJ,KAAK,CAACE,KAAN,CAAYD,IAAZ,CAAnB;EACA,MAAMI,IAAI,GAAGL,KAAK,CAACE,KAAN,CAAYC,MAAzB;EACA,MAAMG,QAAQ,GAAG,IAAIC,KAAJ,CAAUF,IAAI,GAAG,CAAjB,CAAjB;EACA,IAAIG,QAAQ,GAAG,CAAf;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;IAC3B,IAAIA,CAAC,KAAKR,IAAV,EAAgB;MACZK,QAAQ,CAACE,QAAQ,EAAT,CAAR,GAAuBR,KAAK,CAACE,KAAN,CAAYO,CAAZ,CAAvB;IACH;EACJ;;EACD,MAAMC,IAAI,GAAG,IAAIH,KAAJ,CAAUH,UAAV,CAAb;EACA,MAAMO,KAAK,GAAG,IAAIJ,KAAJ,CAAUF,IAAV,EAAgBO,IAAhB,CAAqB,CAArB,CAAd;EACA,MAAMC,IAAI,GAAGb,KAAK,CAACE,KAAN,CAAYR,KAAZ,EAAb;EACAmB,IAAI,CAACZ,IAAD,CAAJ,GAAa,CAAb;;EACA,KAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,IAAI,CAACP,MAAzB,EAAiCM,CAAC,EAAlC,EAAsC;IAClCE,KAAK,CAACV,IAAD,CAAL,GAAcQ,CAAd;IACAC,IAAI,CAACD,CAAD,CAAJ,GAAUf,KAAK,CAAC;MAAEG,MAAM,EAAE;QAAEiB,CAAC,EAAEd;MAAL,CAAV;MAAwBD,KAAK,EAAE;QAAEY,KAAF;QAASE;MAAT,CAA/B;MAAgDf;IAAhD,CAAD,CAAf;EACH;;EACD,OAAOY,IAAI,CAACK,GAAL,CAAS,CAAC;IAAEC,MAAF;IAAUC;EAAV,CAAD,MAAwB;IAAED,MAAF;IAAUC,KAAV;IAAiBf,KAAK,EAAEI;EAAxB,CAAxB,CAAT,CAAP;AACH;;AACD,OAAO,MAAMY,YAAY,GAAG;EACxBC,UAAU,EAAE1B,MADY;EAExB2B,WAAW,EAAE,MAFW;EAGxBC,UAAU,EAAE1B;AAHY,CAArB"},"metadata":{},"sourceType":"module"}