{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { fromHex } from \"@aws-sdk/util-hex-encoding\";\nexport const getEventSigningTransformStream = (initialSignature, messageSigner, eventStreamCodec) => {\n  let priorSignature = initialSignature;\n  const transformer = {\n    start() {},\n\n    transform(chunk, controller) {\n      return _asyncToGenerator(function* () {\n        try {\n          const now = new Date();\n          const dateHeader = {\n            \":date\": {\n              type: \"timestamp\",\n              value: now\n            }\n          };\n          const signedMessage = yield messageSigner.sign({\n            message: {\n              body: chunk,\n              headers: dateHeader\n            },\n            priorSignature: priorSignature\n          }, {\n            signingDate: now\n          });\n          priorSignature = signedMessage.signature;\n          const serializedSigned = eventStreamCodec.encode({\n            headers: { ...dateHeader,\n              \":chunk-signature\": {\n                type: \"binary\",\n                value: fromHex(signedMessage.signature)\n              }\n            },\n            body: chunk\n          });\n          controller.enqueue(serializedSigned);\n        } catch (error) {\n          controller.error(error);\n        }\n      })();\n    }\n\n  };\n  return new TransformStream({ ...transformer\n  });\n};","map":{"version":3,"names":["fromHex","getEventSigningTransformStream","initialSignature","messageSigner","eventStreamCodec","priorSignature","transformer","start","transform","chunk","controller","now","Date","dateHeader","type","value","signedMessage","sign","message","body","headers","signingDate","signature","serializedSigned","encode","enqueue","error","TransformStream"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/middleware-websocket/dist-es/get-event-signing-stream.js"],"sourcesContent":["import { fromHex } from \"@aws-sdk/util-hex-encoding\";\nexport const getEventSigningTransformStream = (initialSignature, messageSigner, eventStreamCodec) => {\n    let priorSignature = initialSignature;\n    const transformer = {\n        start() { },\n        async transform(chunk, controller) {\n            try {\n                const now = new Date();\n                const dateHeader = {\n                    \":date\": { type: \"timestamp\", value: now },\n                };\n                const signedMessage = await messageSigner.sign({\n                    message: {\n                        body: chunk,\n                        headers: dateHeader,\n                    },\n                    priorSignature: priorSignature,\n                }, {\n                    signingDate: now,\n                });\n                priorSignature = signedMessage.signature;\n                const serializedSigned = eventStreamCodec.encode({\n                    headers: {\n                        ...dateHeader,\n                        \":chunk-signature\": {\n                            type: \"binary\",\n                            value: fromHex(signedMessage.signature),\n                        },\n                    },\n                    body: chunk,\n                });\n                controller.enqueue(serializedSigned);\n            }\n            catch (error) {\n                controller.error(error);\n            }\n        },\n    };\n    return new TransformStream({ ...transformer });\n};\n"],"mappings":";AAAA,SAASA,OAAT,QAAwB,4BAAxB;AACA,OAAO,MAAMC,8BAA8B,GAAG,CAACC,gBAAD,EAAmBC,aAAnB,EAAkCC,gBAAlC,KAAuD;EACjG,IAAIC,cAAc,GAAGH,gBAArB;EACA,MAAMI,WAAW,GAAG;IAChBC,KAAK,GAAG,CAAG,CADK;;IAEVC,SAAN,CAAgBC,KAAhB,EAAuBC,UAAvB,EAAmC;MAAA;QAC/B,IAAI;UACA,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;UACA,MAAMC,UAAU,GAAG;YACf,SAAS;cAAEC,IAAI,EAAE,WAAR;cAAqBC,KAAK,EAAEJ;YAA5B;UADM,CAAnB;UAGA,MAAMK,aAAa,SAASb,aAAa,CAACc,IAAd,CAAmB;YAC3CC,OAAO,EAAE;cACLC,IAAI,EAAEV,KADD;cAELW,OAAO,EAAEP;YAFJ,CADkC;YAK3CR,cAAc,EAAEA;UAL2B,CAAnB,EAMzB;YACCgB,WAAW,EAAEV;UADd,CANyB,CAA5B;UASAN,cAAc,GAAGW,aAAa,CAACM,SAA/B;UACA,MAAMC,gBAAgB,GAAGnB,gBAAgB,CAACoB,MAAjB,CAAwB;YAC7CJ,OAAO,EAAE,EACL,GAAGP,UADE;cAEL,oBAAoB;gBAChBC,IAAI,EAAE,QADU;gBAEhBC,KAAK,EAAEf,OAAO,CAACgB,aAAa,CAACM,SAAf;cAFE;YAFf,CADoC;YAQ7CH,IAAI,EAAEV;UARuC,CAAxB,CAAzB;UAUAC,UAAU,CAACe,OAAX,CAAmBF,gBAAnB;QACH,CA1BD,CA2BA,OAAOG,KAAP,EAAc;UACVhB,UAAU,CAACgB,KAAX,CAAiBA,KAAjB;QACH;MA9B8B;IA+BlC;;EAjCe,CAApB;EAmCA,OAAO,IAAIC,eAAJ,CAAoB,EAAE,GAAGrB;EAAL,CAApB,CAAP;AACH,CAtCM"},"metadata":{},"sourceType":"module"}