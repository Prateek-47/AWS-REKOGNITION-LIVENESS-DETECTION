{"ast":null,"code":"import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getEventStreamPlugin } from \"@aws-sdk/middleware-eventstream\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getWebSocketPlugin } from \"@aws-sdk/middleware-websocket\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { StartFaceLivenessSessionRequestFilterSensitiveLog, StartFaceLivenessSessionResponseFilterSensitiveLog } from \"../models/models_0\";\nimport { de_StartFaceLivenessSessionCommand, se_StartFaceLivenessSessionCommand } from \"../protocols/Aws_restJson1\";\nexport { $Command };\nexport class StartFaceLivenessSessionCommand extends $Command {\n  static getEndpointParameterInstructions() {\n    return {\n      UseFIPS: {\n        type: \"builtInParams\",\n        name: \"useFipsEndpoint\"\n      },\n      Endpoint: {\n        type: \"builtInParams\",\n        name: \"endpoint\"\n      },\n      Region: {\n        type: \"builtInParams\",\n        name: \"region\"\n      },\n      UseDualStack: {\n        type: \"builtInParams\",\n        name: \"useDualstackEndpoint\"\n      }\n    };\n  }\n\n  constructor(input) {\n    super();\n    this.input = input;\n  }\n\n  resolveMiddleware(clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    this.middlewareStack.use(getEndpointPlugin(configuration, StartFaceLivenessSessionCommand.getEndpointParameterInstructions()));\n    this.middlewareStack.use(getEventStreamPlugin(configuration));\n    this.middlewareStack.use(getWebSocketPlugin(configuration, {\n      headerPrefix: \"x-amz-rekognition-streaming-liveness-\"\n    }));\n    const stack = clientStack.concat(this.middlewareStack);\n    const {\n      logger\n    } = configuration;\n    const clientName = \"RekognitionStreamingClient\";\n    const commandName = \"StartFaceLivenessSessionCommand\";\n    const handlerExecutionContext = {\n      logger,\n      clientName,\n      commandName,\n      inputFilterSensitiveLog: StartFaceLivenessSessionRequestFilterSensitiveLog,\n      outputFilterSensitiveLog: StartFaceLivenessSessionResponseFilterSensitiveLog\n    };\n    const {\n      requestHandler\n    } = configuration;\n    return stack.resolve(request => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n  }\n\n  serialize(input, context) {\n    return se_StartFaceLivenessSessionCommand(input, context);\n  }\n\n  deserialize(output, context) {\n    return de_StartFaceLivenessSessionCommand(output, context);\n  }\n\n}","map":{"version":3,"names":["getEndpointPlugin","getEventStreamPlugin","getSerdePlugin","getWebSocketPlugin","Command","$Command","StartFaceLivenessSessionRequestFilterSensitiveLog","StartFaceLivenessSessionResponseFilterSensitiveLog","de_StartFaceLivenessSessionCommand","se_StartFaceLivenessSessionCommand","StartFaceLivenessSessionCommand","getEndpointParameterInstructions","UseFIPS","type","name","Endpoint","Region","UseDualStack","constructor","input","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","headerPrefix","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/client-rekognitionstreaming/dist-es/commands/StartFaceLivenessSessionCommand.js"],"sourcesContent":["import { getEndpointPlugin } from \"@aws-sdk/middleware-endpoint\";\nimport { getEventStreamPlugin } from \"@aws-sdk/middleware-eventstream\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { getWebSocketPlugin } from \"@aws-sdk/middleware-websocket\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { StartFaceLivenessSessionRequestFilterSensitiveLog, StartFaceLivenessSessionResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { de_StartFaceLivenessSessionCommand, se_StartFaceLivenessSessionCommand } from \"../protocols/Aws_restJson1\";\nexport { $Command };\nexport class StartFaceLivenessSessionCommand extends $Command {\n    static getEndpointParameterInstructions() {\n        return {\n            UseFIPS: { type: \"builtInParams\", name: \"useFipsEndpoint\" },\n            Endpoint: { type: \"builtInParams\", name: \"endpoint\" },\n            Region: { type: \"builtInParams\", name: \"region\" },\n            UseDualStack: { type: \"builtInParams\", name: \"useDualstackEndpoint\" },\n        };\n    }\n    constructor(input) {\n        super();\n        this.input = input;\n    }\n    resolveMiddleware(clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        this.middlewareStack.use(getEndpointPlugin(configuration, StartFaceLivenessSessionCommand.getEndpointParameterInstructions()));\n        this.middlewareStack.use(getEventStreamPlugin(configuration));\n        this.middlewareStack.use(getWebSocketPlugin(configuration, { headerPrefix: \"x-amz-rekognition-streaming-liveness-\" }));\n        const stack = clientStack.concat(this.middlewareStack);\n        const { logger } = configuration;\n        const clientName = \"RekognitionStreamingClient\";\n        const commandName = \"StartFaceLivenessSessionCommand\";\n        const handlerExecutionContext = {\n            logger,\n            clientName,\n            commandName,\n            inputFilterSensitiveLog: StartFaceLivenessSessionRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: StartFaceLivenessSessionResponseFilterSensitiveLog,\n        };\n        const { requestHandler } = configuration;\n        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);\n    }\n    serialize(input, context) {\n        return se_StartFaceLivenessSessionCommand(input, context);\n    }\n    deserialize(output, context) {\n        return de_StartFaceLivenessSessionCommand(output, context);\n    }\n}\n"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,8BAAlC;AACA,SAASC,oBAAT,QAAqC,iCAArC;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,kBAAT,QAAmC,+BAAnC;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA,SAASC,iDAAT,EAA4DC,kDAA5D,QAAuH,oBAAvH;AACA,SAASC,kCAAT,EAA6CC,kCAA7C,QAAuF,4BAAvF;AACA,SAASJ,QAAT;AACA,OAAO,MAAMK,+BAAN,SAA8CL,QAA9C,CAAuD;EACnB,OAAhCM,gCAAgC,GAAG;IACtC,OAAO;MACHC,OAAO,EAAE;QAAEC,IAAI,EAAE,eAAR;QAAyBC,IAAI,EAAE;MAA/B,CADN;MAEHC,QAAQ,EAAE;QAAEF,IAAI,EAAE,eAAR;QAAyBC,IAAI,EAAE;MAA/B,CAFP;MAGHE,MAAM,EAAE;QAAEH,IAAI,EAAE,eAAR;QAAyBC,IAAI,EAAE;MAA/B,CAHL;MAIHG,YAAY,EAAE;QAAEJ,IAAI,EAAE,eAAR;QAAyBC,IAAI,EAAE;MAA/B;IAJX,CAAP;EAMH;;EACDI,WAAW,CAACC,KAAD,EAAQ;IACf;IACA,KAAKA,KAAL,GAAaA,KAAb;EACH;;EACDC,iBAAiB,CAACC,WAAD,EAAcC,aAAd,EAA6BC,OAA7B,EAAsC;IACnD,KAAKC,eAAL,CAAqBC,GAArB,CAAyBvB,cAAc,CAACoB,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,KAAKH,eAAL,CAAqBC,GAArB,CAAyBzB,iBAAiB,CAACsB,aAAD,EAAgBZ,+BAA+B,CAACC,gCAAhC,EAAhB,CAA1C;IACA,KAAKa,eAAL,CAAqBC,GAArB,CAAyBxB,oBAAoB,CAACqB,aAAD,CAA7C;IACA,KAAKE,eAAL,CAAqBC,GAArB,CAAyBtB,kBAAkB,CAACmB,aAAD,EAAgB;MAAEM,YAAY,EAAE;IAAhB,CAAhB,CAA3C;IACA,MAAMC,KAAK,GAAGR,WAAW,CAACS,MAAZ,CAAmB,KAAKN,eAAxB,CAAd;IACA,MAAM;MAAEO;IAAF,IAAaT,aAAnB;IACA,MAAMU,UAAU,GAAG,4BAAnB;IACA,MAAMC,WAAW,GAAG,iCAApB;IACA,MAAMC,uBAAuB,GAAG;MAC5BH,MAD4B;MAE5BC,UAF4B;MAG5BC,WAH4B;MAI5BE,uBAAuB,EAAE7B,iDAJG;MAK5B8B,wBAAwB,EAAE7B;IALE,CAAhC;IAOA,MAAM;MAAE8B;IAAF,IAAqBf,aAA3B;IACA,OAAOO,KAAK,CAACS,OAAN,CAAeC,OAAD,IAAaF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuChB,OAAO,IAAI,EAAlD,CAA3B,EAAkFW,uBAAlF,CAAP;EACH;;EACDR,SAAS,CAACP,KAAD,EAAQsB,OAAR,EAAiB;IACtB,OAAOhC,kCAAkC,CAACU,KAAD,EAAQsB,OAAR,CAAzC;EACH;;EACDd,WAAW,CAACe,MAAD,EAASD,OAAT,EAAkB;IACzB,OAAOjC,kCAAkC,CAACkC,MAAD,EAASD,OAAT,CAAzC;EACH;;AArCyD"},"metadata":{},"sourceType":"module"}