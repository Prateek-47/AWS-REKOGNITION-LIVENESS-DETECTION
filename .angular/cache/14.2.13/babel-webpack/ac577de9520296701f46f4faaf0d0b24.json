{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D } from '@tensorflow/tfjs-core';\nlet wasmConv2d;\n\nfunction setup(backend) {\n  wasmConv2d = backend.wasm.cwrap(Conv2D, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction conv2d(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const filterId = backend.dataIdMap.get(filter.dataId).id;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    dataFormat\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n  const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(`wasm backend Conv2D does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\n\nexport const conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: conv2d\n};","map":{"version":3,"names":["backend_util","Conv2D","wasmConv2d","setup","backend","wasm","cwrap","conv2d","args","inputs","attrs","x","filter","xId","dataIdMap","get","dataId","id","filterId","strides","dilations","pad","dimRoundingMode","dataFormat","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","filterHeight","filterWidth","padTop","padInfo","top","padRight","right","padBottom","bottom","padLeft","left","dilationHeight","dilationWidth","strideHeight","strideWidth","inputChannels","inChannels","outputChannels","outChannels","isSamePad","type","Error","out","makeOutput","outShape","outId","conv2DConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Conv2D.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D } from '@tensorflow/tfjs-core';\nlet wasmConv2d;\nfunction setup(backend) {\n    wasmConv2d = backend.wasm.cwrap(Conv2D, null /* void */, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n    ]);\n}\nfunction conv2d(args) {\n    const { inputs, attrs, backend } = args;\n    const { x, filter } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const filterId = backend.dataIdMap.get(filter.dataId).id;\n    const { strides, dilations, pad, dimRoundingMode, dataFormat } = attrs;\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false, $dataFormat);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padRight = convInfo.padInfo.right;\n    const padBottom = convInfo.padInfo.bottom;\n    const padLeft = convInfo.padInfo.left;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const inputChannels = convInfo.inChannels;\n    const outputChannels = convInfo.outChannels;\n    const isSamePad = convInfo.padInfo.type === 'SAME' ? 1 : 0;\n    if (convInfo.dataFormat !== 'channelsLast') {\n        throw new Error(`wasm backend Conv2D does not support dataFormat:'` +\n            `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n    }\n    const out = backend.makeOutput(convInfo.outShape, 'float32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmConv2d(xId, x.shape[0], x.shape[1], x.shape[2], filterId, filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, isSamePad, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n    return out;\n}\nexport const conv2DConfig = {\n    kernelName: Conv2D,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: conv2d\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}