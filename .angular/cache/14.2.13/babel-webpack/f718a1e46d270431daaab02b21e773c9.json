{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nimport _asyncIterator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncIterator.js\";\nexport function getUnmarshalledStream(source, options) {\n  const messageUnmarshaller = getMessageUnmarshaller(options.deserializer, options.toUtf8);\n  return {\n    [Symbol.asyncIterator]: _wrapAsyncGenerator(function* () {\n      var _iteratorAbruptCompletion = false;\n      var _didIteratorError = false;\n\n      var _iteratorError;\n\n      try {\n        for (var _iterator = _asyncIterator(source), _step; _iteratorAbruptCompletion = !(_step = yield _awaitAsyncGenerator(_iterator.next())).done; _iteratorAbruptCompletion = false) {\n          const chunk = _step.value;\n          const message = options.eventStreamCodec.decode(chunk);\n          const type = yield _awaitAsyncGenerator(messageUnmarshaller(message));\n          if (type === undefined) continue;\n          yield type;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (_iteratorAbruptCompletion && _iterator.return != null) {\n            yield _awaitAsyncGenerator(_iterator.return());\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    })\n  };\n}\nexport function getMessageUnmarshaller(deserializer, toUtf8) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (message) {\n      const {\n        value: messageType\n      } = message.headers[\":message-type\"];\n\n      if (messageType === \"error\") {\n        const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n        unmodeledError.name = message.headers[\":error-code\"].value;\n        throw unmodeledError;\n      } else if (messageType === \"exception\") {\n        const code = message.headers[\":exception-type\"].value;\n        const exception = {\n          [code]: message\n        };\n        const deserializedException = yield deserializer(exception);\n\n        if (deserializedException.$unknown) {\n          const error = new Error(toUtf8(message.body));\n          error.name = code;\n          throw error;\n        }\n\n        throw deserializedException[code];\n      } else if (messageType === \"event\") {\n        const event = {\n          [message.headers[\":event-type\"].value]: message\n        };\n        const deserialized = yield deserializer(event);\n        if (deserialized.$unknown) return;\n        return deserialized;\n      } else {\n        throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n      }\n    });\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}","map":{"version":3,"names":["getUnmarshalledStream","source","options","messageUnmarshaller","getMessageUnmarshaller","deserializer","toUtf8","Symbol","asyncIterator","chunk","message","eventStreamCodec","decode","type","undefined","value","messageType","headers","unmodeledError","Error","name","code","exception","deserializedException","$unknown","error","body","event","deserialized"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/eventstream-serde-universal/dist-es/getUnmarshalledStream.js"],"sourcesContent":["export function getUnmarshalledStream(source, options) {\n    const messageUnmarshaller = getMessageUnmarshaller(options.deserializer, options.toUtf8);\n    return {\n        [Symbol.asyncIterator]: async function* () {\n            for await (const chunk of source) {\n                const message = options.eventStreamCodec.decode(chunk);\n                const type = await messageUnmarshaller(message);\n                if (type === undefined)\n                    continue;\n                yield type;\n            }\n        },\n    };\n}\nexport function getMessageUnmarshaller(deserializer, toUtf8) {\n    return async function (message) {\n        const { value: messageType } = message.headers[\":message-type\"];\n        if (messageType === \"error\") {\n            const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\n            unmodeledError.name = message.headers[\":error-code\"].value;\n            throw unmodeledError;\n        }\n        else if (messageType === \"exception\") {\n            const code = message.headers[\":exception-type\"].value;\n            const exception = { [code]: message };\n            const deserializedException = await deserializer(exception);\n            if (deserializedException.$unknown) {\n                const error = new Error(toUtf8(message.body));\n                error.name = code;\n                throw error;\n            }\n            throw deserializedException[code];\n        }\n        else if (messageType === \"event\") {\n            const event = {\n                [message.headers[\":event-type\"].value]: message,\n            };\n            const deserialized = await deserializer(event);\n            if (deserialized.$unknown)\n                return;\n            return deserialized;\n        }\n        else {\n            throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\n        }\n    };\n}\n"],"mappings":";;;;AAAA,OAAO,SAASA,qBAAT,CAA+BC,MAA/B,EAAuCC,OAAvC,EAAgD;EACnD,MAAMC,mBAAmB,GAAGC,sBAAsB,CAACF,OAAO,CAACG,YAAT,EAAuBH,OAAO,CAACI,MAA/B,CAAlD;EACA,OAAO;IACH,CAACC,MAAM,CAACC,aAAR,uBAAwB,aAAmB;MAAA;MAAA;;MAAA;;MAAA;QACvC,oCAA0BP,MAA1B,uIAAkC;UAAA,MAAjBQ,KAAiB;UAC9B,MAAMC,OAAO,GAAGR,OAAO,CAACS,gBAAR,CAAyBC,MAAzB,CAAgCH,KAAhC,CAAhB;UACA,MAAMI,IAAI,8BAASV,mBAAmB,CAACO,OAAD,CAA5B,CAAV;UACA,IAAIG,IAAI,KAAKC,SAAb,EACI;UACJ,MAAMD,IAAN;QACH;MAPsC;QAAA;QAAA;MAAA;QAAA;UAAA;YAAA;UAAA;QAAA;UAAA;YAAA;UAAA;QAAA;MAAA;IAQ1C,CARD;EADG,CAAP;AAWH;AACD,OAAO,SAAST,sBAAT,CAAgCC,YAAhC,EAA8CC,MAA9C,EAAsD;EACzD;IAAA,8BAAO,WAAgBI,OAAhB,EAAyB;MAC5B,MAAM;QAAEK,KAAK,EAAEC;MAAT,IAAyBN,OAAO,CAACO,OAAR,CAAgB,eAAhB,CAA/B;;MACA,IAAID,WAAW,KAAK,OAApB,EAA6B;QACzB,MAAME,cAAc,GAAG,IAAIC,KAAJ,CAAUT,OAAO,CAACO,OAAR,CAAgB,gBAAhB,EAAkCF,KAAlC,IAA2C,cAArD,CAAvB;QACAG,cAAc,CAACE,IAAf,GAAsBV,OAAO,CAACO,OAAR,CAAgB,aAAhB,EAA+BF,KAArD;QACA,MAAMG,cAAN;MACH,CAJD,MAKK,IAAIF,WAAW,KAAK,WAApB,EAAiC;QAClC,MAAMK,IAAI,GAAGX,OAAO,CAACO,OAAR,CAAgB,iBAAhB,EAAmCF,KAAhD;QACA,MAAMO,SAAS,GAAG;UAAE,CAACD,IAAD,GAAQX;QAAV,CAAlB;QACA,MAAMa,qBAAqB,SAASlB,YAAY,CAACiB,SAAD,CAAhD;;QACA,IAAIC,qBAAqB,CAACC,QAA1B,EAAoC;UAChC,MAAMC,KAAK,GAAG,IAAIN,KAAJ,CAAUb,MAAM,CAACI,OAAO,CAACgB,IAAT,CAAhB,CAAd;UACAD,KAAK,CAACL,IAAN,GAAaC,IAAb;UACA,MAAMI,KAAN;QACH;;QACD,MAAMF,qBAAqB,CAACF,IAAD,CAA3B;MACH,CAVI,MAWA,IAAIL,WAAW,KAAK,OAApB,EAA6B;QAC9B,MAAMW,KAAK,GAAG;UACV,CAACjB,OAAO,CAACO,OAAR,CAAgB,aAAhB,EAA+BF,KAAhC,GAAwCL;QAD9B,CAAd;QAGA,MAAMkB,YAAY,SAASvB,YAAY,CAACsB,KAAD,CAAvC;QACA,IAAIC,YAAY,CAACJ,QAAjB,EACI;QACJ,OAAOI,YAAP;MACH,CARI,MASA;QACD,MAAMT,KAAK,CAAE,8BAA6BT,OAAO,CAACO,OAAR,CAAgB,aAAhB,EAA+BF,KAAM,EAApE,CAAX;MACH;IACJ,CA9BD;;IAAA;MAAA;IAAA;EAAA;AA+BH"},"metadata":{},"sourceType":"module"}