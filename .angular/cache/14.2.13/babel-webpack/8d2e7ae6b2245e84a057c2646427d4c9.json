{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (g && (g = 0, op[0] && (_ = 0)), _) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * @private For internal Amplify use.\n *\n * Creates a new scope for promises, observables, and other types of work or\n * processes that may be running in the background. This manager provides\n * an singular entrypoint to request termination and await completion.\n *\n * As work completes on its own prior to close, the manager removes them\n * from the registry to avoid holding references to completed jobs.\n */\n\n\nvar BackgroundProcessManager =\n/** @class */\nfunction () {\n  /**\n   * Creates a new manager for promises, observables, and other types\n   * of work that may be running in the background. This manager provides\n   * a centralized mechanism to request termination and await completion.\n   */\n  function BackgroundProcessManager() {\n    /**\n     * A string indicating whether the manager is accepting new work (\"Open\"),\n     * waiting for work to complete (\"Closing\"), or fully done with all\n     * submitted work and *not* accepting new jobs (\"Closed\").\n     */\n    this._state = BackgroundProcessManagerState.Open;\n    /**\n     * The list of outstanding jobs we'll need to wait for upon `close()`\n     */\n\n    this.jobs = new Set();\n  }\n\n  BackgroundProcessManager.prototype.add = function (jobOrDescription, optionalDescription) {\n    var job;\n    var description;\n\n    if (typeof jobOrDescription === 'string') {\n      job = undefined;\n      description = jobOrDescription;\n    } else {\n      job = jobOrDescription;\n      description = optionalDescription;\n    }\n\n    var error = this.closedFailure(description);\n    if (error) return error;\n\n    if (job === undefined) {\n      return this.addHook(description);\n    } else if (typeof job === 'function') {\n      return this.addFunction(job, description);\n    } else if (job instanceof BackgroundProcessManager) {\n      return this.addManager(job, description);\n    } else {\n      throw new Error('If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.');\n    }\n  };\n  /**\n   * Adds a **cleaner** function that doesn't immediately get executed.\n   * Instead, the caller gets a **terminate** function back. The *cleaner* is\n   * invoked only once the mananger *closes* or the returned **terminate**\n   * function is called.\n   *\n   * @param clean The cleanup function.\n   * @param description Optional description to help identify pending jobs.\n   * @returns A terminate function.\n   */\n\n\n  BackgroundProcessManager.prototype.addCleaner = function (clean, description) {\n    var _this = this;\n\n    var _a = this.addHook(description),\n        resolve = _a.resolve,\n        onTerminate = _a.onTerminate;\n\n    var proxy = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , clean()];\n\n            case 1:\n              _a.sent();\n\n              resolve();\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    };\n\n    onTerminate.then(proxy);\n    return proxy;\n  };\n\n  BackgroundProcessManager.prototype.addFunction = function (job, description) {\n    // the function we call when we want to try to terminate this job.\n    var terminate; // the promise the job can opt into listening to for termination.\n\n    var onTerminate = new Promise(function (resolve) {\n      terminate = resolve;\n    }); // finally! start the job.\n\n    var jobResult = job(onTerminate); // depending on what the job gives back, register the result\n    // so we can monitor for completion.\n\n    if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === 'function') {\n      this.registerPromise(jobResult, terminate, description);\n    } // At the end of the day, or you know, method call, it doesn't matter\n    // what the return value is at all; we just pass it through to the\n    // caller.\n\n\n    return jobResult;\n  };\n\n  BackgroundProcessManager.prototype.addManager = function (manager, description) {\n    var _this = this;\n\n    this.addCleaner(function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , manager.close()];\n\n            case 1:\n              return [2\n              /*return*/\n              , _a.sent()];\n          }\n        });\n      });\n    }, description);\n  };\n  /**\n   * Creates and registers a fabricated job for processes that need to operate\n   * with callbacks/hooks. The returned `resolve` and `reject`\n   * functions can be used to signal the job is done successfully or not.\n   * The returned `onTerminate` is a promise that will resolve when the\n   * manager is requesting the termination of the job.\n   *\n   * @param description Optional description to help identify pending jobs.\n   * @returns `{ resolve, reject, onTerminate }`\n   */\n\n\n  BackgroundProcessManager.prototype.addHook = function (description) {\n    // the resolve/reject functions we'll provide to the caller to signal\n    // the state of the job.\n    var resolve;\n    var reject; // the underlying promise we'll use to manage it, pretty much like\n    // any other promise.\n\n    var promise = new Promise(function (res, rej) {\n      resolve = res;\n      reject = rej;\n    }); // the function we call when we want to try to terminate this job.\n\n    var terminate; // the promise the job can opt into listening to for termination.\n\n    var onTerminate = new Promise(function (resolveTerminate) {\n      terminate = resolveTerminate;\n    });\n    this.registerPromise(promise, terminate, description);\n    return {\n      resolve: resolve,\n      reject: reject,\n      onTerminate: onTerminate\n    };\n  };\n  /**\n   * Adds a Promise based job to the list of jobs for monitoring and listens\n   * for either a success or failure, upon which the job is considered \"done\"\n   * and removed from the registry.\n   *\n   * @param promise A promise that is on its way to being returned to a\n   * caller, which needs to be tracked as a background job.\n   * @param terminate The termination function to register, which can be\n   * invoked to request the job stop.\n   * @param description Optional description to help identify pending jobs.\n   */\n\n\n  BackgroundProcessManager.prototype.registerPromise = function (promise, terminate, description) {\n    var _this = this;\n\n    var jobEntry = {\n      promise: promise,\n      terminate: terminate,\n      description: description\n    };\n    this.jobs.add(jobEntry); // in all of my testing, it is safe to multi-subscribe to a promise.\n    // so, rather than create another layer of promising, we're just going\n    // to hook into the promise we already have, and when it's done\n    // (successfully or not), we no longer need to wait for it upon close.\n    //\n    // sorry this is a bit hand-wavy:\n    //\n    // i believe we use `.then` and `.catch` instead of `.finally` because\n    // `.finally` is invoked in a different order in the sequence, and this\n    // breaks assumptions throughout and causes failures.\n\n    promise.then(function () {\n      _this.jobs.delete(jobEntry);\n    }).catch(function () {\n      _this.jobs.delete(jobEntry);\n    });\n  };\n\n  Object.defineProperty(BackgroundProcessManager.prototype, \"length\", {\n    /**\n     * The number of jobs being waited on.\n     *\n     * We don't use this for anything. It's just informational for the caller,\n     * and can be used in logging and testing.\n     *\n     * @returns the number of jobs.\n     */\n    get: function () {\n      return this.jobs.size;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"state\", {\n    /**\n     * The execution state of the manager. One of:\n     *\n     * 1. \"Open\" -> Accepting new jobs\n     * 1. \"Closing\" -> Not accepting new work. Waiting for jobs to complete.\n     * 1. \"Closed\" -> Not accepting new work. All submitted jobs are complete.\n     */\n    get: function () {\n      return this._state;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"pending\", {\n    /**\n     * The registered `description` of all still-pending jobs.\n     *\n     * @returns descriptions as an array.\n     */\n    get: function () {\n      return Array.from(this.jobs).map(function (job) {\n        return job.description;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isOpen\", {\n    /**\n     * Whether the manager is accepting new jobs.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Open;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosing\", {\n    /**\n     * Whether the manager is rejecting new work, but still waiting for\n     * submitted work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closing;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(BackgroundProcessManager.prototype, \"isClosed\", {\n    /**\n     * Whether the manager is rejecting work and done waiting for submitted\n     * work to complete.\n     */\n    get: function () {\n      return this._state === BackgroundProcessManagerState.Closed;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BackgroundProcessManager.prototype.closedFailure = function (description) {\n    if (!this.isOpen) {\n      return Promise.reject(new BackgroundManagerNotOpenError([\"The manager is \".concat(this.state, \".\"), \"You tried to add \\\"\".concat(description, \"\\\".\"), \"Pending jobs: [\\n\".concat(this.pending.map(function (t) {\n        return '    ' + t;\n      }).join(',\\n'), \"\\n]\")].join('\\n')));\n    }\n  };\n  /**\n   * Signals jobs to stop (for those that accept interruptions) and waits\n   * for confirmation that jobs have stopped.\n   *\n   * This immediately puts the manager into a closing state and just begins\n   * to reject new work. After all work in the manager is complete, the\n   * manager goes into a `Completed` state and `close()` returns.\n   *\n   * This call is idempotent.\n   *\n   * If the manager is already closing or closed, `finalCleaup` is not executed.\n   *\n   * @param onClosed\n   * @returns The settled results of each still-running job's promise. If the\n   * manager is already closed, this will contain the results as of when the\n   * manager's `close()` was called in an `Open` state.\n   */\n\n\n  BackgroundProcessManager.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, job;\n\n      var e_1, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            if (!this.isOpen) return [3\n            /*break*/\n            , 2];\n            this._state = BackgroundProcessManagerState.Closing;\n\n            try {\n              for (_a = __values(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                job = _b.value;\n\n                try {\n                  job.terminate();\n                } catch (error) {\n                  // Due to potential races with a job's natural completion, it's\n                  // reasonable to expect the termination call to fail. Hence,\n                  // not logging as an error.\n                  console.warn(\"Failed to send termination signal to job. Error: \".concat(error.message), job);\n                }\n              }\n            } catch (e_1_1) {\n              e_1 = {\n                error: e_1_1\n              };\n            } finally {\n              try {\n                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n              } finally {\n                if (e_1) throw e_1.error;\n              }\n            } // Use `allSettled()` because we want to wait for all to finish. We do\n            // not want to stop waiting if there is a failure.\n\n\n            this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function (j) {\n              return j.promise;\n            }));\n            return [4\n            /*yield*/\n            , this._closingPromise];\n\n          case 1:\n            _d.sent();\n\n            this._state = BackgroundProcessManagerState.Closed;\n            _d.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , this._closingPromise];\n        }\n      });\n    });\n  };\n  /**\n   * Signals the manager to start accepting work (again) and returns once\n   * the manager is ready to do so.\n   *\n   * If the state is already `Open`, this call is a no-op.\n   *\n   * If the state is `Closed`, this call simply updates state and returns.\n   *\n   * If the state is `Closing`, this call waits for completion before it\n   * updates the state and returns.\n   */\n\n\n  BackgroundProcessManager.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isClosing) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.close()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            this._state = BackgroundProcessManagerState.Open;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return BackgroundProcessManager;\n}();\n\nexport { BackgroundProcessManager };\n/**\n *\n */\n\nvar BackgroundManagerNotOpenError =\n/** @class */\nfunction (_super) {\n  __extends(BackgroundManagerNotOpenError, _super);\n\n  function BackgroundManagerNotOpenError(message) {\n    return _super.call(this, \"BackgroundManagerNotOpenError: \".concat(message)) || this;\n  }\n\n  return BackgroundManagerNotOpenError;\n}(Error);\n\nexport { BackgroundManagerNotOpenError };\n/**\n * All possible states a `BackgroundProcessManager` instance can be in.\n */\n\nexport var BackgroundProcessManagerState;\n\n(function (BackgroundProcessManagerState) {\n  /**\n   * Accepting new jobs.\n   */\n  BackgroundProcessManagerState[\"Open\"] = \"Open\";\n  /**\n   * Not accepting new jobs. Waiting for submitted jobs to complete.\n   */\n\n  BackgroundProcessManagerState[\"Closing\"] = \"Closing\";\n  /**\n   * Not accepting new jobs. All submitted jobs are complete.\n   */\n\n  BackgroundProcessManagerState[\"Closed\"] = \"Closed\";\n})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));","map":{"version":3,"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","pop","length","push","__values","o","s","m","i","BackgroundProcessManager","_state","BackgroundProcessManagerState","Open","jobs","Set","add","jobOrDescription","optionalDescription","job","description","undefined","error","closedFailure","addHook","addFunction","addManager","Error","addCleaner","clean","_this","_a","onTerminate","proxy","terminate","jobResult","registerPromise","manager","close","promise","res","rej","resolveTerminate","jobEntry","delete","catch","defineProperty","get","size","enumerable","configurable","from","map","Closing","Closed","isOpen","BackgroundManagerNotOpenError","concat","state","pending","join","_b","e_1","_c","_d","console","warn","message","e_1_1","return","_closingPromise","allSettled","j","open","isClosing","_super"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/core/lib-esm/Util/BackgroundProcessManager.js"],"sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @private For internal Amplify use.\n *\n * Creates a new scope for promises, observables, and other types of work or\n * processes that may be running in the background. This manager provides\n * an singular entrypoint to request termination and await completion.\n *\n * As work completes on its own prior to close, the manager removes them\n * from the registry to avoid holding references to completed jobs.\n */\nvar BackgroundProcessManager = /** @class */ (function () {\n    /**\n     * Creates a new manager for promises, observables, and other types\n     * of work that may be running in the background. This manager provides\n     * a centralized mechanism to request termination and await completion.\n     */\n    function BackgroundProcessManager() {\n        /**\n         * A string indicating whether the manager is accepting new work (\"Open\"),\n         * waiting for work to complete (\"Closing\"), or fully done with all\n         * submitted work and *not* accepting new jobs (\"Closed\").\n         */\n        this._state = BackgroundProcessManagerState.Open;\n        /**\n         * The list of outstanding jobs we'll need to wait for upon `close()`\n         */\n        this.jobs = new Set();\n    }\n    BackgroundProcessManager.prototype.add = function (jobOrDescription, optionalDescription) {\n        var job;\n        var description;\n        if (typeof jobOrDescription === 'string') {\n            job = undefined;\n            description = jobOrDescription;\n        }\n        else {\n            job = jobOrDescription;\n            description = optionalDescription;\n        }\n        var error = this.closedFailure(description);\n        if (error)\n            return error;\n        if (job === undefined) {\n            return this.addHook(description);\n        }\n        else if (typeof job === 'function') {\n            return this.addFunction(job, description);\n        }\n        else if (job instanceof BackgroundProcessManager) {\n            return this.addManager(job, description);\n        }\n        else {\n            throw new Error('If `job` is provided, it must be an Observable, Function, or BackgroundProcessManager.');\n        }\n    };\n    /**\n     * Adds a **cleaner** function that doesn't immediately get executed.\n     * Instead, the caller gets a **terminate** function back. The *cleaner* is\n     * invoked only once the mananger *closes* or the returned **terminate**\n     * function is called.\n     *\n     * @param clean The cleanup function.\n     * @param description Optional description to help identify pending jobs.\n     * @returns A terminate function.\n     */\n    BackgroundProcessManager.prototype.addCleaner = function (clean, description) {\n        var _this = this;\n        var _a = this.addHook(description), resolve = _a.resolve, onTerminate = _a.onTerminate;\n        var proxy = function () { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, clean()];\n                    case 1:\n                        _a.sent();\n                        resolve();\n                        return [2 /*return*/];\n                }\n            });\n        }); };\n        onTerminate.then(proxy);\n        return proxy;\n    };\n    BackgroundProcessManager.prototype.addFunction = function (job, description) {\n        // the function we call when we want to try to terminate this job.\n        var terminate;\n        // the promise the job can opt into listening to for termination.\n        var onTerminate = new Promise(function (resolve) {\n            terminate = resolve;\n        });\n        // finally! start the job.\n        var jobResult = job(onTerminate);\n        // depending on what the job gives back, register the result\n        // so we can monitor for completion.\n        if (typeof (jobResult === null || jobResult === void 0 ? void 0 : jobResult.then) === 'function') {\n            this.registerPromise(jobResult, terminate, description);\n        }\n        // At the end of the day, or you know, method call, it doesn't matter\n        // what the return value is at all; we just pass it through to the\n        // caller.\n        return jobResult;\n    };\n    BackgroundProcessManager.prototype.addManager = function (manager, description) {\n        var _this = this;\n        this.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, manager.close()];\n                case 1: return [2 /*return*/, _a.sent()];\n            }\n        }); }); }, description);\n    };\n    /**\n     * Creates and registers a fabricated job for processes that need to operate\n     * with callbacks/hooks. The returned `resolve` and `reject`\n     * functions can be used to signal the job is done successfully or not.\n     * The returned `onTerminate` is a promise that will resolve when the\n     * manager is requesting the termination of the job.\n     *\n     * @param description Optional description to help identify pending jobs.\n     * @returns `{ resolve, reject, onTerminate }`\n     */\n    BackgroundProcessManager.prototype.addHook = function (description) {\n        // the resolve/reject functions we'll provide to the caller to signal\n        // the state of the job.\n        var resolve;\n        var reject;\n        // the underlying promise we'll use to manage it, pretty much like\n        // any other promise.\n        var promise = new Promise(function (res, rej) {\n            resolve = res;\n            reject = rej;\n        });\n        // the function we call when we want to try to terminate this job.\n        var terminate;\n        // the promise the job can opt into listening to for termination.\n        var onTerminate = new Promise(function (resolveTerminate) {\n            terminate = resolveTerminate;\n        });\n        this.registerPromise(promise, terminate, description);\n        return {\n            resolve: resolve,\n            reject: reject,\n            onTerminate: onTerminate,\n        };\n    };\n    /**\n     * Adds a Promise based job to the list of jobs for monitoring and listens\n     * for either a success or failure, upon which the job is considered \"done\"\n     * and removed from the registry.\n     *\n     * @param promise A promise that is on its way to being returned to a\n     * caller, which needs to be tracked as a background job.\n     * @param terminate The termination function to register, which can be\n     * invoked to request the job stop.\n     * @param description Optional description to help identify pending jobs.\n     */\n    BackgroundProcessManager.prototype.registerPromise = function (promise, terminate, description) {\n        var _this = this;\n        var jobEntry = { promise: promise, terminate: terminate, description: description };\n        this.jobs.add(jobEntry);\n        // in all of my testing, it is safe to multi-subscribe to a promise.\n        // so, rather than create another layer of promising, we're just going\n        // to hook into the promise we already have, and when it's done\n        // (successfully or not), we no longer need to wait for it upon close.\n        //\n        // sorry this is a bit hand-wavy:\n        //\n        // i believe we use `.then` and `.catch` instead of `.finally` because\n        // `.finally` is invoked in a different order in the sequence, and this\n        // breaks assumptions throughout and causes failures.\n        promise\n            .then(function () {\n            _this.jobs.delete(jobEntry);\n        })\n            .catch(function () {\n            _this.jobs.delete(jobEntry);\n        });\n    };\n    Object.defineProperty(BackgroundProcessManager.prototype, \"length\", {\n        /**\n         * The number of jobs being waited on.\n         *\n         * We don't use this for anything. It's just informational for the caller,\n         * and can be used in logging and testing.\n         *\n         * @returns the number of jobs.\n         */\n        get: function () {\n            return this.jobs.size;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"state\", {\n        /**\n         * The execution state of the manager. One of:\n         *\n         * 1. \"Open\" -> Accepting new jobs\n         * 1. \"Closing\" -> Not accepting new work. Waiting for jobs to complete.\n         * 1. \"Closed\" -> Not accepting new work. All submitted jobs are complete.\n         */\n        get: function () {\n            return this._state;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"pending\", {\n        /**\n         * The registered `description` of all still-pending jobs.\n         *\n         * @returns descriptions as an array.\n         */\n        get: function () {\n            return Array.from(this.jobs).map(function (job) { return job.description; });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"isOpen\", {\n        /**\n         * Whether the manager is accepting new jobs.\n         */\n        get: function () {\n            return this._state === BackgroundProcessManagerState.Open;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"isClosing\", {\n        /**\n         * Whether the manager is rejecting new work, but still waiting for\n         * submitted work to complete.\n         */\n        get: function () {\n            return this._state === BackgroundProcessManagerState.Closing;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BackgroundProcessManager.prototype, \"isClosed\", {\n        /**\n         * Whether the manager is rejecting work and done waiting for submitted\n         * work to complete.\n         */\n        get: function () {\n            return this._state === BackgroundProcessManagerState.Closed;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BackgroundProcessManager.prototype.closedFailure = function (description) {\n        if (!this.isOpen) {\n            return Promise.reject(new BackgroundManagerNotOpenError([\n                \"The manager is \".concat(this.state, \".\"),\n                \"You tried to add \\\"\".concat(description, \"\\\".\"),\n                \"Pending jobs: [\\n\".concat(this.pending\n                    .map(function (t) { return '    ' + t; })\n                    .join(',\\n'), \"\\n]\"),\n            ].join('\\n')));\n        }\n    };\n    /**\n     * Signals jobs to stop (for those that accept interruptions) and waits\n     * for confirmation that jobs have stopped.\n     *\n     * This immediately puts the manager into a closing state and just begins\n     * to reject new work. After all work in the manager is complete, the\n     * manager goes into a `Completed` state and `close()` returns.\n     *\n     * This call is idempotent.\n     *\n     * If the manager is already closing or closed, `finalCleaup` is not executed.\n     *\n     * @param onClosed\n     * @returns The settled results of each still-running job's promise. If the\n     * manager is already closed, this will contain the results as of when the\n     * manager's `close()` was called in an `Open` state.\n     */\n    BackgroundProcessManager.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, job;\n            var e_1, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        if (!this.isOpen) return [3 /*break*/, 2];\n                        this._state = BackgroundProcessManagerState.Closing;\n                        try {\n                            for (_a = __values(Array.from(this.jobs)), _b = _a.next(); !_b.done; _b = _a.next()) {\n                                job = _b.value;\n                                try {\n                                    job.terminate();\n                                }\n                                catch (error) {\n                                    // Due to potential races with a job's natural completion, it's\n                                    // reasonable to expect the termination call to fail. Hence,\n                                    // not logging as an error.\n                                    console.warn(\"Failed to send termination signal to job. Error: \".concat(error.message), job);\n                                }\n                            }\n                        }\n                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                        finally {\n                            try {\n                                if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                        }\n                        // Use `allSettled()` because we want to wait for all to finish. We do\n                        // not want to stop waiting if there is a failure.\n                        this._closingPromise = Promise.allSettled(Array.from(this.jobs).map(function (j) { return j.promise; }));\n                        return [4 /*yield*/, this._closingPromise];\n                    case 1:\n                        _d.sent();\n                        this._state = BackgroundProcessManagerState.Closed;\n                        _d.label = 2;\n                    case 2: return [2 /*return*/, this._closingPromise];\n                }\n            });\n        });\n    };\n    /**\n     * Signals the manager to start accepting work (again) and returns once\n     * the manager is ready to do so.\n     *\n     * If the state is already `Open`, this call is a no-op.\n     *\n     * If the state is `Closed`, this call simply updates state and returns.\n     *\n     * If the state is `Closing`, this call waits for completion before it\n     * updates the state and returns.\n     */\n    BackgroundProcessManager.prototype.open = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isClosing) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.close()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2:\n                        this._state = BackgroundProcessManagerState.Open;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return BackgroundProcessManager;\n}());\nexport { BackgroundProcessManager };\n/**\n *\n */\nvar BackgroundManagerNotOpenError = /** @class */ (function (_super) {\n    __extends(BackgroundManagerNotOpenError, _super);\n    function BackgroundManagerNotOpenError(message) {\n        return _super.call(this, \"BackgroundManagerNotOpenError: \".concat(message)) || this;\n    }\n    return BackgroundManagerNotOpenError;\n}(Error));\nexport { BackgroundManagerNotOpenError };\n/**\n * All possible states a `BackgroundProcessManager` instance can be in.\n */\nexport var BackgroundProcessManagerState;\n(function (BackgroundProcessManagerState) {\n    /**\n     * Accepting new jobs.\n     */\n    BackgroundProcessManagerState[\"Open\"] = \"Open\";\n    /**\n     * Not accepting new jobs. Waiting for submitted jobs to complete.\n     */\n    BackgroundProcessManagerState[\"Closing\"] = \"Closing\";\n    /**\n     * Not accepting new jobs. All submitted jobs are complete.\n     */\n    BackgroundProcessManagerState[\"Closed\"] = \"Closed\";\n})(BackgroundProcessManagerState || (BackgroundProcessManagerState = {}));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}