{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function oneHot(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices\n  } = inputs;\n  const {\n    depth,\n    onValue,\n    offValue\n  } = attrs;\n  assertNotComplex(indices, 'oneHot');\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\nexport const oneHotConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot\n};","map":{"version":3,"names":["OneHot","util","assertNotComplex","oneHot","args","inputs","backend","attrs","indices","depth","onValue","offValue","indicesSize","sizeFromShape","shape","res","Float32Array","fill","indicesVal","data","get","dataId","values","event","makeTensorInfo","oneHotConfig","kernelName","backendName","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/OneHot.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function oneHot(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices } = inputs;\n    const { depth, onValue, offValue } = attrs;\n    assertNotComplex(indices, 'oneHot');\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const res = new Float32Array(indicesSize * depth);\n    res.fill(offValue);\n    const indicesVal = backend.data.get(indices.dataId).values;\n    for (let event = 0; event < indicesSize; ++event) {\n        if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n            res[event * depth + indicesVal[event]] = onValue;\n        }\n    }\n    return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\nexport const oneHotConfig = {\n    kernelName: OneHot,\n    backendName: 'cpu',\n    kernelFunc: oneHot\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,EAAiBC,IAAjB,QAA6B,uBAA7B;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,OAAO,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EACzB,MAAM;IAAEC,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAA6BH,IAAnC;EACA,MAAM;IAAEI;EAAF,IAAcH,MAApB;EACA,MAAM;IAAEI,KAAF;IAASC,OAAT;IAAkBC;EAAlB,IAA+BJ,KAArC;EACAL,gBAAgB,CAACM,OAAD,EAAU,QAAV,CAAhB;EACA,MAAMI,WAAW,GAAGX,IAAI,CAACY,aAAL,CAAmBL,OAAO,CAACM,KAA3B,CAApB;EACA,MAAMC,GAAG,GAAG,IAAIC,YAAJ,CAAiBJ,WAAW,GAAGH,KAA/B,CAAZ;EACAM,GAAG,CAACE,IAAJ,CAASN,QAAT;EACA,MAAMO,UAAU,GAAGZ,OAAO,CAACa,IAAR,CAAaC,GAAb,CAAiBZ,OAAO,CAACa,MAAzB,EAAiCC,MAApD;;EACA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGX,WAA5B,EAAyC,EAAEW,KAA3C,EAAkD;IAC9C,IAAIL,UAAU,CAACK,KAAD,CAAV,IAAqB,CAArB,IAA0BL,UAAU,CAACK,KAAD,CAAV,GAAoBd,KAAlD,EAAyD;MACrDM,GAAG,CAACQ,KAAK,GAAGd,KAAR,GAAgBS,UAAU,CAACK,KAAD,CAA3B,CAAH,GAAyCb,OAAzC;IACH;EACJ;;EACD,OAAOJ,OAAO,CAACkB,cAAR,CAAuB,CAAC,GAAGhB,OAAO,CAACM,KAAZ,EAAmBL,KAAnB,CAAvB,EAAkD,OAAlD,EAA2DM,GAA3D,CAAP;AACH;AACD,OAAO,MAAMU,YAAY,GAAG;EACxBC,UAAU,EAAE1B,MADY;EAExB2B,WAAW,EAAE,KAFW;EAGxBC,UAAU,EAAEzB;AAHY,CAArB"},"metadata":{},"sourceType":"module"}