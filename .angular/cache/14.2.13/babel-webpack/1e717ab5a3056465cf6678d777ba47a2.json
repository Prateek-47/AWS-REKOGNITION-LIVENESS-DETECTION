{"ast":null,"code":"import { toHex } from \"@aws-sdk/util-hex-encoding\";\nexport class Int64 {\n  constructor(bytes) {\n    this.bytes = bytes;\n\n    if (bytes.byteLength !== 8) {\n      throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n    }\n  }\n\n  static fromNumber(number) {\n    if (number > 9223372036854776000 || number < -9223372036854776000) {\n      throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n    }\n\n    const bytes = new Uint8Array(8);\n\n    for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n      bytes[i] = remaining;\n    }\n\n    if (number < 0) {\n      negate(bytes);\n    }\n\n    return new Int64(bytes);\n  }\n\n  valueOf() {\n    const bytes = this.bytes.slice(0);\n    const negative = bytes[0] & 0b10000000;\n\n    if (negative) {\n      negate(bytes);\n    }\n\n    return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n  }\n\n  toString() {\n    return String(this.valueOf());\n  }\n\n}\n\nfunction negate(bytes) {\n  for (let i = 0; i < 8; i++) {\n    bytes[i] ^= 0xff;\n  }\n\n  for (let i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) break;\n  }\n}","map":{"version":3,"names":["toHex","Int64","constructor","bytes","byteLength","Error","fromNumber","number","Uint8Array","i","remaining","Math","abs","round","negate","valueOf","slice","negative","parseInt","toString","String"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/eventstream-codec/dist-es/Int64.js"],"sourcesContent":["import { toHex } from \"@aws-sdk/util-hex-encoding\";\nexport class Int64 {\n    constructor(bytes) {\n        this.bytes = bytes;\n        if (bytes.byteLength !== 8) {\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\n        }\n    }\n    static fromNumber(number) {\n        if (number > 9223372036854776000 || number < -9223372036854776000) {\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\n        }\n        const bytes = new Uint8Array(8);\n        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n            bytes[i] = remaining;\n        }\n        if (number < 0) {\n            negate(bytes);\n        }\n        return new Int64(bytes);\n    }\n    valueOf() {\n        const bytes = this.bytes.slice(0);\n        const negative = bytes[0] & 0b10000000;\n        if (negative) {\n            negate(bytes);\n        }\n        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\n    }\n    toString() {\n        return String(this.valueOf());\n    }\n}\nfunction negate(bytes) {\n    for (let i = 0; i < 8; i++) {\n        bytes[i] ^= 0xff;\n    }\n    for (let i = 7; i > -1; i--) {\n        bytes[i]++;\n        if (bytes[i] !== 0)\n            break;\n    }\n}\n"],"mappings":"AAAA,SAASA,KAAT,QAAsB,4BAAtB;AACA,OAAO,MAAMC,KAAN,CAAY;EACfC,WAAW,CAACC,KAAD,EAAQ;IACf,KAAKA,KAAL,GAAaA,KAAb;;IACA,IAAIA,KAAK,CAACC,UAAN,KAAqB,CAAzB,EAA4B;MACxB,MAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;IACH;EACJ;;EACgB,OAAVC,UAAU,CAACC,MAAD,EAAS;IACtB,IAAIA,MAAM,GAAG,mBAAT,IAAgCA,MAAM,GAAG,CAAC,mBAA9C,EAAmE;MAC/D,MAAM,IAAIF,KAAJ,CAAW,GAAEE,MAAO,qEAApB,CAAN;IACH;;IACD,MAAMJ,KAAK,GAAG,IAAIK,UAAJ,CAAe,CAAf,CAAd;;IACA,KAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,KAAL,CAAWN,MAAX,CAAT,CAA5B,EAA0DE,CAAC,GAAG,CAAC,CAAL,IAAUC,SAAS,GAAG,CAAhF,EAAmFD,CAAC,IAAIC,SAAS,IAAI,GAArG,EAA0G;MACtGP,KAAK,CAACM,CAAD,CAAL,GAAWC,SAAX;IACH;;IACD,IAAIH,MAAM,GAAG,CAAb,EAAgB;MACZO,MAAM,CAACX,KAAD,CAAN;IACH;;IACD,OAAO,IAAIF,KAAJ,CAAUE,KAAV,CAAP;EACH;;EACDY,OAAO,GAAG;IACN,MAAMZ,KAAK,GAAG,KAAKA,KAAL,CAAWa,KAAX,CAAiB,CAAjB,CAAd;IACA,MAAMC,QAAQ,GAAGd,KAAK,CAAC,CAAD,CAAL,GAAW,UAA5B;;IACA,IAAIc,QAAJ,EAAc;MACVH,MAAM,CAACX,KAAD,CAAN;IACH;;IACD,OAAOe,QAAQ,CAAClB,KAAK,CAACG,KAAD,CAAN,EAAe,EAAf,CAAR,IAA8Bc,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAA9C,CAAP;EACH;;EACDE,QAAQ,GAAG;IACP,OAAOC,MAAM,CAAC,KAAKL,OAAL,EAAD,CAAb;EACH;;AA9Bc;;AAgCnB,SAASD,MAAT,CAAgBX,KAAhB,EAAuB;EACnB,KAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;IACxBN,KAAK,CAACM,CAAD,CAAL,IAAY,IAAZ;EACH;;EACD,KAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAAC,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;IACzBN,KAAK,CAACM,CAAD,CAAL;IACA,IAAIN,KAAK,CAACM,CAAD,CAAL,KAAa,CAAjB,EACI;EACP;AACJ"},"metadata":{},"sourceType":"module"}