{"ast":null,"code":"import { __awaiter } from '../../../node_modules/tslib/tslib.es6.mjs';\nimport { Auth } from 'aws-amplify';\nimport { getActorContext, getSortedFormFields, isString, areEmptyArrays, areEmptyObjects } from '@aws-amplify/ui';\nimport { isComponentRouteKey } from '../utils.mjs';\n\nconst defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\n\n\nfunction areSelectorDepsEqual(currentDeps, nextDeps) {\n  if (currentDeps.length !== nextDeps.length) {\n    return false;\n  }\n\n  return currentDeps.every((currentDep, index) => {\n    const nextDep = nextDeps[index];\n\n    if (areEmptyArrays(currentDep, nextDep) || areEmptyObjects(currentDep, nextDep)) {\n      return true;\n    }\n\n    return currentDep === nextDep;\n  });\n}\n\nconst getComparator = selector => (currentFacade, nextFacade) => {\n  const currentSelectorDeps = selector(currentFacade);\n  const nextSelectorDeps = selector(nextFacade); // Shallow compare the array values\n\n  return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\n\nconst getQRFields = state => {\n  var _a, _b, _c;\n\n  return Object.assign({}, (_c = (_b = (_a = getActorContext(state)) === null || _a === void 0 ? void 0 : _a.formFields) === null || _b === void 0 ? void 0 : _b.setupTOTP) === null || _c === void 0 ? void 0 : _c.QR);\n};\n\nconst getTotpSecretCodeCallback = user => function getTotpSecretCode() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return yield Auth.setupTOTP(user);\n  });\n};\n\nconst flattenFormFields = fields => fields.flatMap(([name, options]) => Object.assign({\n  name\n}, options));\n\nconst convertContactMethodsToFields = unverifiedContactMethods => {\n  return unverifiedContactMethods && Object.entries(unverifiedContactMethods).map(([name, value]) => {\n    const valueIsString = isString(value);\n\n    if (!valueIsString || !name) {\n      return {};\n    }\n\n    return {\n      name,\n      label: value,\n      type: 'radio',\n      value\n    };\n  });\n};\n/**\n * Retrieves default and custom (RWA only, to be updated) form field values from state machine\n * for subcomponent routes that render fields\n */\n\n\nconst getMachineFields = (route, state, unverifiedContactMethods) => {\n  if (isComponentRouteKey(route)) {\n    return route === 'verifyUser' ? convertContactMethodsToFields(unverifiedContactMethods) : flattenFormFields(getSortedFormFields(route, state));\n  }\n\n  return [];\n};\n\nexport { areSelectorDepsEqual, defaultComparator, getComparator, getMachineFields, getQRFields, getTotpSecretCodeCallback };","map":{"version":3,"names":["__awaiter","Auth","getActorContext","getSortedFormFields","isString","areEmptyArrays","areEmptyObjects","isComponentRouteKey","defaultComparator","areSelectorDepsEqual","currentDeps","nextDeps","length","every","currentDep","index","nextDep","getComparator","selector","currentFacade","nextFacade","currentSelectorDeps","nextSelectorDeps","getQRFields","state","_a","_b","_c","Object","assign","formFields","setupTOTP","QR","getTotpSecretCodeCallback","user","getTotpSecretCode","flattenFormFields","fields","flatMap","name","options","convertContactMethodsToFields","unverifiedContactMethods","entries","map","value","valueIsString","label","type","getMachineFields","route"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticator/utils.mjs"],"sourcesContent":["import { __awaiter } from '../../../node_modules/tslib/tslib.es6.mjs';\nimport { Auth } from 'aws-amplify';\nimport { getActorContext, getSortedFormFields, isString, areEmptyArrays, areEmptyObjects } from '@aws-amplify/ui';\nimport { isComponentRouteKey } from '../utils.mjs';\n\nconst defaultComparator = () => false;\n/**\n * Does an ordering and shallow comparison of each array value,\n * plus a value equality check for empty objects and arrays.\n */\nfunction areSelectorDepsEqual(currentDeps, nextDeps) {\n    if (currentDeps.length !== nextDeps.length) {\n        return false;\n    }\n    return currentDeps.every((currentDep, index) => {\n        const nextDep = nextDeps[index];\n        if (areEmptyArrays(currentDep, nextDep) ||\n            areEmptyObjects(currentDep, nextDep)) {\n            return true;\n        }\n        return currentDep === nextDep;\n    });\n}\nconst getComparator = (selector) => (currentFacade, nextFacade) => {\n    const currentSelectorDeps = selector(currentFacade);\n    const nextSelectorDeps = selector(nextFacade);\n    // Shallow compare the array values\n    return areSelectorDepsEqual(currentSelectorDeps, nextSelectorDeps);\n};\nconst getQRFields = (state) => {\n    var _a, _b, _c;\n    return (Object.assign({}, (_c = (_b = (_a = getActorContext(state)) === null || _a === void 0 ? void 0 : _a.formFields) === null || _b === void 0 ? void 0 : _b.setupTOTP) === null || _c === void 0 ? void 0 : _c.QR));\n};\nconst getTotpSecretCodeCallback = (user) => function getTotpSecretCode() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return yield Auth.setupTOTP(user);\n    });\n};\nconst flattenFormFields = (fields) => fields.flatMap(([name, options]) => (Object.assign({ name }, options)));\nconst convertContactMethodsToFields = (unverifiedContactMethods) => {\n    return (unverifiedContactMethods &&\n        Object.entries(unverifiedContactMethods).map(([name, value]) => {\n            const valueIsString = isString(value);\n            if (!valueIsString || !name) {\n                return {};\n            }\n            return { name, label: value, type: 'radio', value };\n        }));\n};\n/**\n * Retrieves default and custom (RWA only, to be updated) form field values from state machine\n * for subcomponent routes that render fields\n */\nconst getMachineFields = (route, state, unverifiedContactMethods) => {\n    if (isComponentRouteKey(route)) {\n        return route === 'verifyUser'\n            ? convertContactMethodsToFields(unverifiedContactMethods)\n            : flattenFormFields(getSortedFormFields(route, state));\n    }\n    return [];\n};\n\nexport { areSelectorDepsEqual, defaultComparator, getComparator, getMachineFields, getQRFields, getTotpSecretCodeCallback };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}