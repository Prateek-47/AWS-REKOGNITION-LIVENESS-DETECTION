{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nlet wasmMean;\n\nfunction setup(backend) {\n  wasmMean = backend.wasm.cwrap(Mean, null\n  /*void*/\n  , ['number, number, number']);\n}\n\nexport function mean(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  let inputId = xId;\n  let input = x;\n  const {\n    transposed,\n    axes,\n    originalAxes,\n    inputWasTransposed\n  } = permuteAxesAndTranspose(x, axis, backend);\n  let reductionAxes = axes;\n\n  if (inputWasTransposed) {\n    const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n\n    if (transposedId !== xId) {\n      // transpose was not a no-op. We will need to dispose of this\n      // once we are done.\n      input = transposed;\n      inputId = transposedId;\n      reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, input.shape.length);\n    }\n  }\n\n  backend_util.assertAxesAreInnerMostDims('mean', reductionAxes, input.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(input.shape, reductionAxes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  let castedInput = input;\n\n  if (input.dtype !== 'float32') {\n    castedInput = cast({\n      backend,\n      inputs: {\n        x: input\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    inputId = backend.dataIdMap.get(castedInput.dataId).id;\n  }\n\n  const out = backend.makeOutput(outShape, 'float32');\n\n  if (util.sizeFromShape(input.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmMean(inputId, reduceSize, outId);\n  }\n\n  if (inputWasTransposed) {\n    // dispose of the transposed tensor.\n    backend.disposeData(transposed.dataId);\n  }\n\n  if (keepDims) {\n    // reshape\n    const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n    out.shape = newShape;\n  }\n\n  if (input.dtype !== 'float32') {\n    backend.disposeData(castedInput.dataId);\n  }\n\n  return out;\n}\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: mean\n};","map":{"version":3,"names":["backend_util","Mean","util","cast","permuteAxesAndTranspose","wasmMean","setup","backend","wasm","cwrap","mean","args","inputs","attrs","axis","keepDims","x","xId","dataIdMap","get","dataId","id","inputId","input","transposed","axes","originalAxes","inputWasTransposed","reductionAxes","transposedId","getInnerMostAxes","length","shape","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","reduceSize","sizeFromShape","castedInput","dtype","out","makeOutput","outId","disposeData","newShape","expandShapeToKeepDim","meanConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Mean.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { permuteAxesAndTranspose } from './kernel_utils';\nlet wasmMean;\nfunction setup(backend) {\n    wasmMean =\n        backend.wasm.cwrap(Mean, null /*void*/, ['number, number, number']);\n}\nexport function mean(args) {\n    const { backend, inputs, attrs } = args;\n    const { axis, keepDims } = attrs;\n    const { x } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    let inputId = xId;\n    let input = x;\n    const { transposed, axes, originalAxes, inputWasTransposed } = permuteAxesAndTranspose(x, axis, backend);\n    let reductionAxes = axes;\n    if (inputWasTransposed) {\n        const transposedId = backend.dataIdMap.get(transposed.dataId).id;\n        if (transposedId !== xId) {\n            // transpose was not a no-op. We will need to dispose of this\n            // once we are done.\n            input = transposed;\n            inputId = transposedId;\n            reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, input.shape.length);\n        }\n    }\n    backend_util.assertAxesAreInnerMostDims('mean', reductionAxes, input.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(input.shape, reductionAxes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    let castedInput = input;\n    if (input.dtype !== 'float32') {\n        castedInput =\n            cast({ backend, inputs: { x: input }, attrs: { dtype: 'float32' } });\n        inputId = backend.dataIdMap.get(castedInput.dataId).id;\n    }\n    const out = backend.makeOutput(outShape, 'float32');\n    if (util.sizeFromShape(input.shape) !== 0) {\n        const outId = backend.dataIdMap.get(out.dataId).id;\n        wasmMean(inputId, reduceSize, outId);\n    }\n    if (inputWasTransposed) {\n        // dispose of the transposed tensor.\n        backend.disposeData(transposed.dataId);\n    }\n    if (keepDims) {\n        // reshape\n        const newShape = backend_util.expandShapeToKeepDim(out.shape, originalAxes);\n        out.shape = newShape;\n    }\n    if (input.dtype !== 'float32') {\n        backend.disposeData(castedInput.dataId);\n    }\n    return out;\n}\nexport const meanConfig = {\n    kernelName: Mean,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: mean\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}