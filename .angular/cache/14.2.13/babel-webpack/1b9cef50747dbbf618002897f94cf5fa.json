{"ast":null,"code":"import $9IrjX$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport { forwardRef as $9IrjX$forwardRef, Children as $9IrjX$Children, isValidElement as $9IrjX$isValidElement, createElement as $9IrjX$createElement, cloneElement as $9IrjX$cloneElement, Fragment as $9IrjX$Fragment } from \"react\";\nimport { composeRefs as $9IrjX$composeRefs } from \"@radix-ui/react-compose-refs\";\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\nconst $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/$9IrjX$forwardRef((props, forwardedRef) => {\n  const {\n    children: children,\n    ...slotProps\n  } = props;\n  const childrenArray = $9IrjX$Children.toArray(children);\n  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);\n\n  if (slottable) {\n    // the new element to render is the one passed as a child of `Slottable`\n    const newElement = slottable.props.children;\n    const newChildren = childrenArray.map(child => {\n      if (child === slottable) {\n        // because the new element will be the one rendered, we are only interested\n        // in grabbing its children (`newElement.props.children`)\n        if ($9IrjX$Children.count(newElement) > 1) return $9IrjX$Children.only(null);\n        return /*#__PURE__*/$9IrjX$isValidElement(newElement) ? newElement.props.children : null;\n      } else return child;\n    });\n    return /*#__PURE__*/$9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n      ref: forwardedRef\n    }), /*#__PURE__*/$9IrjX$isValidElement(newElement) ? /*#__PURE__*/$9IrjX$cloneElement(newElement, undefined, newChildren) : null);\n  }\n\n  return /*#__PURE__*/$9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n    ref: forwardedRef\n  }), children);\n});\n$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = 'Slot';\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\nconst $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/$9IrjX$forwardRef((props, forwardedRef) => {\n  const {\n    children: children,\n    ...slotProps\n  } = props;\n  if ( /*#__PURE__*/$9IrjX$isValidElement(children)) return /*#__PURE__*/$9IrjX$cloneElement(children, { ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),\n    ref: $9IrjX$composeRefs(forwardedRef, children.ref)\n  });\n  return $9IrjX$Children.count(children) > 1 ? $9IrjX$Children.only(null) : null;\n});\n$5e63c961fc1ce211$var$SlotClone.displayName = 'SlotClone';\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({\n  children: children\n}) => {\n  return /*#__PURE__*/$9IrjX$createElement($9IrjX$Fragment, null, children);\n};\n/* ---------------------------------------------------------------------------------------------- */\n\n\nfunction $5e63c961fc1ce211$var$isSlottable(child) {\n  return /*#__PURE__*/$9IrjX$isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;\n}\n\nfunction $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {\n  // all child props should override\n  const overrideProps = { ...childProps\n  };\n\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName); // if it's a handler, modify the override by composing the base handler\n\n    if (isHandler) overrideProps[propName] = (...args) => {\n      childPropValue === null || childPropValue === void 0 || childPropValue(...args);\n      slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);\n    };else if (propName === 'style') overrideProps[propName] = { ...slotPropValue,\n      ...childPropValue\n    };else if (propName === 'className') overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(' ');\n  }\n\n  return { ...slotProps,\n    ...overrideProps\n  };\n}\n\nconst $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = $5e63c961fc1ce211$export$8c6ed5c666ac1360;\nexport { $5e63c961fc1ce211$export$8c6ed5c666ac1360 as Slot, $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 as Slottable, $5e63c961fc1ce211$export$be92b6f5f03c0fe9 as Root };","map":{"version":3,"names":["$9IrjX$babelruntimehelpersesmextends","forwardRef","$9IrjX$forwardRef","Children","$9IrjX$Children","isValidElement","$9IrjX$isValidElement","createElement","$9IrjX$createElement","cloneElement","$9IrjX$cloneElement","Fragment","$9IrjX$Fragment","composeRefs","$9IrjX$composeRefs","$5e63c961fc1ce211$export$8c6ed5c666ac1360","props","forwardedRef","children","slotProps","childrenArray","toArray","slottable","find","$5e63c961fc1ce211$var$isSlottable","newElement","newChildren","map","child","count","only","$5e63c961fc1ce211$var$SlotClone","ref","undefined","displayName","$5e63c961fc1ce211$var$mergeProps","$5e63c961fc1ce211$export$d9f1ccf0bdb05d45","type","childProps","overrideProps","propName","slotPropValue","childPropValue","isHandler","test","args","filter","Boolean","join","$5e63c961fc1ce211$export$be92b6f5f03c0fe9","Slot","Slottable","Root"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@radix-ui/react-slot/dist/index.module.js"],"sourcesContent":["import $9IrjX$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $9IrjX$forwardRef, Children as $9IrjX$Children, isValidElement as $9IrjX$isValidElement, createElement as $9IrjX$createElement, cloneElement as $9IrjX$cloneElement, Fragment as $9IrjX$Fragment} from \"react\";\nimport {composeRefs as $9IrjX$composeRefs} from \"@radix-ui/react-compose-refs\";\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$8c6ed5c666ac1360 = /*#__PURE__*/ $9IrjX$forwardRef((props, forwardedRef)=>{\n    const { children: children , ...slotProps } = props;\n    const childrenArray = $9IrjX$Children.toArray(children);\n    const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);\n    if (slottable) {\n        // the new element to render is the one passed as a child of `Slottable`\n        const newElement = slottable.props.children;\n        const newChildren = childrenArray.map((child)=>{\n            if (child === slottable) {\n                // because the new element will be the one rendered, we are only interested\n                // in grabbing its children (`newElement.props.children`)\n                if ($9IrjX$Children.count(newElement) > 1) return $9IrjX$Children.only(null);\n                return /*#__PURE__*/ $9IrjX$isValidElement(newElement) ? newElement.props.children : null;\n            } else return child;\n        });\n        return /*#__PURE__*/ $9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n            ref: forwardedRef\n        }), /*#__PURE__*/ $9IrjX$isValidElement(newElement) ? /*#__PURE__*/ $9IrjX$cloneElement(newElement, undefined, newChildren) : null);\n    }\n    return /*#__PURE__*/ $9IrjX$createElement($5e63c961fc1ce211$var$SlotClone, $9IrjX$babelruntimehelpersesmextends({}, slotProps, {\n        ref: forwardedRef\n    }), children);\n});\n$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = 'Slot';\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$var$SlotClone = /*#__PURE__*/ $9IrjX$forwardRef((props, forwardedRef)=>{\n    const { children: children , ...slotProps } = props;\n    if (/*#__PURE__*/ $9IrjX$isValidElement(children)) return /*#__PURE__*/ $9IrjX$cloneElement(children, {\n        ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),\n        ref: $9IrjX$composeRefs(forwardedRef, children.ref)\n    });\n    return $9IrjX$Children.count(children) > 1 ? $9IrjX$Children.only(null) : null;\n});\n$5e63c961fc1ce211$var$SlotClone.displayName = 'SlotClone';\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/ const $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children: children  })=>{\n    return /*#__PURE__*/ $9IrjX$createElement($9IrjX$Fragment, null, children);\n};\n/* ---------------------------------------------------------------------------------------------- */ function $5e63c961fc1ce211$var$isSlottable(child) {\n    return /*#__PURE__*/ $9IrjX$isValidElement(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;\n}\nfunction $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {\n    // all child props should override\n    const overrideProps = {\n        ...childProps\n    };\n    for(const propName in childProps){\n        const slotPropValue = slotProps[propName];\n        const childPropValue = childProps[propName];\n        const isHandler = /^on[A-Z]/.test(propName); // if it's a handler, modify the override by composing the base handler\n        if (isHandler) overrideProps[propName] = (...args)=>{\n            childPropValue === null || childPropValue === void 0 || childPropValue(...args);\n            slotPropValue === null || slotPropValue === void 0 || slotPropValue(...args);\n        };\n        else if (propName === 'style') overrideProps[propName] = {\n            ...slotPropValue,\n            ...childPropValue\n        };\n        else if (propName === 'className') overrideProps[propName] = [\n            slotPropValue,\n            childPropValue\n        ].filter(Boolean).join(' ');\n    }\n    return {\n        ...slotProps,\n        ...overrideProps\n    };\n}\nconst $5e63c961fc1ce211$export$be92b6f5f03c0fe9 = $5e63c961fc1ce211$export$8c6ed5c666ac1360;\n\n\n\n\nexport {$5e63c961fc1ce211$export$8c6ed5c666ac1360 as Slot, $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 as Slottable, $5e63c961fc1ce211$export$be92b6f5f03c0fe9 as Root};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}