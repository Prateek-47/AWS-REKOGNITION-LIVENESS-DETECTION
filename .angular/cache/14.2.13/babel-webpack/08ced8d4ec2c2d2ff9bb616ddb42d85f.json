{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nlet wasmBatchNorm;\n\nfunction setup(backend) {\n  wasmBatchNorm = backend.wasm.cwrap(FusedBatchNorm, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction fusedBatchNorm(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    varianceEpsilon\n  } = attrs;\n  const {\n    x,\n    mean,\n    variance,\n    offset,\n    scale\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const meanId = backend.dataIdMap.get(mean.dataId).id;\n  const varianceId = backend.dataIdMap.get(variance.dataId).id;\n  const offsetId = offset != null ? backend.dataIdMap.get(offset.dataId).id : 0;\n  const scaleId = scale != null ? backend.dataIdMap.get(scale.dataId).id : 0;\n  const out = backend.makeOutput(x.shape, x.dtype); // Short-circuit zero-sized tensors.\n\n  if (util.sizeFromShape(x.shape) === 0) {\n    return out;\n  }\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmBatchNorm(xId, meanId, varianceId, offsetId, scaleId, varianceEpsilon, outId);\n  return out;\n}\n\nexport const fusedBatchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: fusedBatchNorm\n};","map":{"version":3,"names":["FusedBatchNorm","util","wasmBatchNorm","setup","backend","wasm","cwrap","fusedBatchNorm","args","inputs","attrs","varianceEpsilon","x","mean","variance","offset","scale","xId","dataIdMap","get","dataId","id","meanId","varianceId","offsetId","scaleId","out","makeOutput","shape","dtype","sizeFromShape","outId","fusedBatchNormConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/FusedBatchNorm.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nlet wasmBatchNorm;\nfunction setup(backend) {\n    wasmBatchNorm = backend.wasm.cwrap(FusedBatchNorm, null /* void */, ['number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\nfunction fusedBatchNorm(args) {\n    const { backend, inputs, attrs } = args;\n    const { varianceEpsilon } = attrs;\n    const { x, mean, variance, offset, scale } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const meanId = backend.dataIdMap.get(mean.dataId).id;\n    const varianceId = backend.dataIdMap.get(variance.dataId).id;\n    const offsetId = offset != null ? backend.dataIdMap.get(offset.dataId).id : 0;\n    const scaleId = scale != null ? backend.dataIdMap.get(scale.dataId).id : 0;\n    const out = backend.makeOutput(x.shape, x.dtype);\n    // Short-circuit zero-sized tensors.\n    if (util.sizeFromShape(x.shape) === 0) {\n        return out;\n    }\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmBatchNorm(xId, meanId, varianceId, offsetId, scaleId, varianceEpsilon, outId);\n    return out;\n}\nexport const fusedBatchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: fusedBatchNorm\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,EAAyBC,IAAzB,QAAqC,uBAArC;AACA,IAAIC,aAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,aAAa,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBN,cAAnB,EAAmC;EAAK;EAAxC,EAAoD,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,EAAmD,QAAnD,EAA6D,QAA7D,CAApD,CAAhB;AACH;;AACD,SAASO,cAAT,CAAwBC,IAAxB,EAA8B;EAC1B,MAAM;IAAEJ,OAAF;IAAWK,MAAX;IAAmBC;EAAnB,IAA6BF,IAAnC;EACA,MAAM;IAAEG;EAAF,IAAsBD,KAA5B;EACA,MAAM;IAAEE,CAAF;IAAKC,IAAL;IAAWC,QAAX;IAAqBC,MAArB;IAA6BC;EAA7B,IAAuCP,MAA7C;EACA,MAAMQ,GAAG,GAAGb,OAAO,CAACc,SAAR,CAAkBC,GAAlB,CAAsBP,CAAC,CAACQ,MAAxB,EAAgCC,EAA5C;EACA,MAAMC,MAAM,GAAGlB,OAAO,CAACc,SAAR,CAAkBC,GAAlB,CAAsBN,IAAI,CAACO,MAA3B,EAAmCC,EAAlD;EACA,MAAME,UAAU,GAAGnB,OAAO,CAACc,SAAR,CAAkBC,GAAlB,CAAsBL,QAAQ,CAACM,MAA/B,EAAuCC,EAA1D;EACA,MAAMG,QAAQ,GAAGT,MAAM,IAAI,IAAV,GAAiBX,OAAO,CAACc,SAAR,CAAkBC,GAAlB,CAAsBJ,MAAM,CAACK,MAA7B,EAAqCC,EAAtD,GAA2D,CAA5E;EACA,MAAMI,OAAO,GAAGT,KAAK,IAAI,IAAT,GAAgBZ,OAAO,CAACc,SAAR,CAAkBC,GAAlB,CAAsBH,KAAK,CAACI,MAA5B,EAAoCC,EAApD,GAAyD,CAAzE;EACA,MAAMK,GAAG,GAAGtB,OAAO,CAACuB,UAAR,CAAmBf,CAAC,CAACgB,KAArB,EAA4BhB,CAAC,CAACiB,KAA9B,CAAZ,CAT0B,CAU1B;;EACA,IAAI5B,IAAI,CAAC6B,aAAL,CAAmBlB,CAAC,CAACgB,KAArB,MAAgC,CAApC,EAAuC;IACnC,OAAOF,GAAP;EACH;;EACD,MAAMK,KAAK,GAAG3B,OAAO,CAACc,SAAR,CAAkBC,GAAlB,CAAsBO,GAAG,CAACN,MAA1B,EAAkCC,EAAhD;EACAnB,aAAa,CAACe,GAAD,EAAMK,MAAN,EAAcC,UAAd,EAA0BC,QAA1B,EAAoCC,OAApC,EAA6Cd,eAA7C,EAA8DoB,KAA9D,CAAb;EACA,OAAOL,GAAP;AACH;;AACD,OAAO,MAAMM,oBAAoB,GAAG;EAChCC,UAAU,EAAEjC,cADoB;EAEhCkC,WAAW,EAAE,MAFmB;EAGhCC,SAAS,EAAEhC,KAHqB;EAIhCiC,UAAU,EAAE7B;AAJoB,CAA7B"},"metadata":{},"sourceType":"module"}