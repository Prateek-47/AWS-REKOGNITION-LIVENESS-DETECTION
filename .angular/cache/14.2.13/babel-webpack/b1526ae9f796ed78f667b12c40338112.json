{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _awaitAsyncGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator.js\";\nimport _wrapAsyncGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator.js\";\nexport const readableStreamtoIterable = readableStream => ({\n  [Symbol.asyncIterator]: _wrapAsyncGenerator(function* () {\n    const reader = readableStream.getReader();\n\n    try {\n      while (true) {\n        const {\n          done,\n          value\n        } = yield _awaitAsyncGenerator(reader.read());\n        if (done) return;\n        yield value;\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  })\n});\nexport const iterableToReadableStream = asyncIterable => {\n  const iterator = asyncIterable[Symbol.asyncIterator]();\n  return new ReadableStream({\n    pull(controller) {\n      return _asyncToGenerator(function* () {\n        const {\n          done,\n          value\n        } = yield iterator.next();\n\n        if (done) {\n          return controller.close();\n        }\n\n        controller.enqueue(value);\n      })();\n    }\n\n  });\n};","map":{"version":3,"names":["readableStreamtoIterable","readableStream","Symbol","asyncIterator","reader","getReader","done","value","read","releaseLock","iterableToReadableStream","asyncIterable","iterator","ReadableStream","pull","controller","next","close","enqueue"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/eventstream-serde-browser/dist-es/utils.js"],"sourcesContent":["export const readableStreamtoIterable = (readableStream) => ({\n    [Symbol.asyncIterator]: async function* () {\n        const reader = readableStream.getReader();\n        try {\n            while (true) {\n                const { done, value } = await reader.read();\n                if (done)\n                    return;\n                yield value;\n            }\n        }\n        finally {\n            reader.releaseLock();\n        }\n    },\n});\nexport const iterableToReadableStream = (asyncIterable) => {\n    const iterator = asyncIterable[Symbol.asyncIterator]();\n    return new ReadableStream({\n        async pull(controller) {\n            const { done, value } = await iterator.next();\n            if (done) {\n                return controller.close();\n            }\n            controller.enqueue(value);\n        },\n    });\n};\n"],"mappings":";;;AAAA,OAAO,MAAMA,wBAAwB,GAAIC,cAAD,KAAqB;EACzD,CAACC,MAAM,CAACC,aAAR,uBAAwB,aAAmB;IACvC,MAAMC,MAAM,GAAGH,cAAc,CAACI,SAAf,EAAf;;IACA,IAAI;MACA,OAAO,IAAP,EAAa;QACT,MAAM;UAAEC,IAAF;UAAQC;QAAR,+BAAwBH,MAAM,CAACI,IAAP,EAAxB,CAAN;QACA,IAAIF,IAAJ,EACI;QACJ,MAAMC,KAAN;MACH;IACJ,CAPD,SAQQ;MACJH,MAAM,CAACK,WAAP;IACH;EACJ,CAbD;AADyD,CAArB,CAAjC;AAgBP,OAAO,MAAMC,wBAAwB,GAAIC,aAAD,IAAmB;EACvD,MAAMC,QAAQ,GAAGD,aAAa,CAACT,MAAM,CAACC,aAAR,CAAb,EAAjB;EACA,OAAO,IAAIU,cAAJ,CAAmB;IAChBC,IAAN,CAAWC,UAAX,EAAuB;MAAA;QACnB,MAAM;UAAET,IAAF;UAAQC;QAAR,UAAwBK,QAAQ,CAACI,IAAT,EAA9B;;QACA,IAAIV,IAAJ,EAAU;UACN,OAAOS,UAAU,CAACE,KAAX,EAAP;QACH;;QACDF,UAAU,CAACG,OAAX,CAAmBX,KAAnB;MALmB;IAMtB;;EAPqB,CAAnB,CAAP;AASH,CAXM"},"metadata":{},"sourceType":"module"}