{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { fill } from './Fill';\nimport { CppDType } from './types';\nlet wasmPadV2;\n\nfunction setup(backend) {\n  wasmPadV2 = backend.wasm.cwrap(PadV2, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'array', 'array', 'number', 'number']);\n}\n\nfunction pad(args) {\n  const {\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      paddings,\n      constantValue\n    }\n  } = args;\n  const outShape = paddings.map((p, i) => p[0]\n  /* beforePad */\n  + x.shape[i] + p[1]\n  /* afterPad */\n  );\n\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    return fill({\n      backend,\n      attrs: {\n        shape: outShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const out = backend.makeOutput(outShape, x.dtype);\n  const outTensorData = backend.dataIdMap.get(out.dataId);\n  const outId = outTensorData.id;\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const prePaddingsFlat = paddings.map(padTuple => padTuple[0]);\n  const postPaddingsFlat = paddings.map(padTuple => padTuple[1]);\n  const prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n  const postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n  wasmPadV2(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes, postPaddingsBytes, constantValue, outId);\n  return out;\n}\n\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'wasm',\n  kernelFunc: pad,\n  setupFunc: setup\n};","map":{"version":3,"names":["PadV2","util","fill","CppDType","wasmPadV2","setup","backend","wasm","cwrap","pad","args","inputs","x","attrs","paddings","constantValue","outShape","map","p","i","shape","sizeFromShape","value","dtype","xId","dataIdMap","get","dataId","id","out","makeOutput","outTensorData","outId","xShapeBytes","Uint8Array","Int32Array","buffer","prePaddingsFlat","padTuple","postPaddingsFlat","prePaddingsBytes","postPaddingsBytes","length","padV2Config","kernelName","backendName","kernelFunc","setupFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/PadV2.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { fill } from './Fill';\nimport { CppDType } from './types';\nlet wasmPadV2;\nfunction setup(backend) {\n    wasmPadV2 = backend.wasm.cwrap(PadV2, null /* void */, [\n        'number',\n        'array',\n        'number',\n        'number',\n        'array',\n        'array',\n        'number',\n        'number',\n    ]);\n}\nfunction pad(args) {\n    const { inputs: { x }, backend, attrs: { paddings, constantValue } } = args;\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    if (util.sizeFromShape(x.shape) === 0) {\n        // Short-circuit the computation, since x doesn't have value, only\n        // the shape is used to compute output shape to pad.\n        return fill({\n            backend,\n            attrs: { shape: outShape, value: constantValue, dtype: x.dtype }\n        });\n    }\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const out = backend.makeOutput(outShape, x.dtype);\n    const outTensorData = backend.dataIdMap.get(out.dataId);\n    const outId = outTensorData.id;\n    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n    const prePaddingsFlat = paddings.map(padTuple => padTuple[0]);\n    const postPaddingsFlat = paddings.map(padTuple => padTuple[1]);\n    const prePaddingsBytes = new Uint8Array(new Int32Array(prePaddingsFlat).buffer);\n    const postPaddingsBytes = new Uint8Array(new Int32Array(postPaddingsFlat).buffer);\n    wasmPadV2(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], prePaddingsBytes, postPaddingsBytes, constantValue, outId);\n    return out;\n}\nexport const padV2Config = {\n    kernelName: PadV2,\n    backendName: 'wasm',\n    kernelFunc: pad,\n    setupFunc: setup\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}