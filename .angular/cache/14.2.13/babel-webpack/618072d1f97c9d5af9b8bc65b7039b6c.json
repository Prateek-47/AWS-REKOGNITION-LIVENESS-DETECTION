{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n/**\n * Returns a canonical uri.\n *\n * @param pathname `pathname` from request url.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns URI-encoded version of the absolute path component URL (everything between the host and the question mark\n * character (?) that starts the query string parameters). If the absolute path is empty, a forward slash character (/).\n *\n * @internal\n */\nexport var getCanonicalUri = function (pathname, uriEscapePath) {\n  if (uriEscapePath === void 0) {\n    uriEscapePath = true;\n  }\n\n  return pathname ? uriEscapePath ? encodeURIComponent(pathname).replace(/%2F/g, '/') : pathname : '/';\n};","map":{"version":3,"names":["getCanonicalUri","pathname","uriEscapePath","encodeURIComponent","replace"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getCanonicalUri.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns a canonical uri.\n *\n * @param pathname `pathname` from request url.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns URI-encoded version of the absolute path component URL (everything between the host and the question mark\n * character (?) that starts the query string parameters). If the absolute path is empty, a forward slash character (/).\n *\n * @internal\n */\nexport var getCanonicalUri = function (pathname, uriEscapePath) {\n    if (uriEscapePath === void 0) { uriEscapePath = true; }\n    return pathname\n        ? uriEscapePath\n            ? encodeURIComponent(pathname).replace(/%2F/g, '/')\n            : pathname\n        : '/';\n};\n"],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,eAAe,GAAG,UAAUC,QAAV,EAAoBC,aAApB,EAAmC;EAC5D,IAAIA,aAAa,KAAK,KAAK,CAA3B,EAA8B;IAAEA,aAAa,GAAG,IAAhB;EAAuB;;EACvD,OAAOD,QAAQ,GACTC,aAAa,GACTC,kBAAkB,CAACF,QAAD,CAAlB,CAA6BG,OAA7B,CAAqC,MAArC,EAA6C,GAA7C,CADS,GAETH,QAHK,GAIT,GAJN;AAKH,CAPM"},"metadata":{},"sourceType":"module"}