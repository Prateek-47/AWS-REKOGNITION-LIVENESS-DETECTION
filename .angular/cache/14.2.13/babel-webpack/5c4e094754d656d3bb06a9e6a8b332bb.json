{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\n\nvar DataStoreConnectivity =\n/** @class */\nfunction () {\n  function DataStoreConnectivity() {\n    this.connectionStatus = {\n      online: false\n    };\n  }\n\n  DataStoreConnectivity.prototype.status = function () {\n    var _this = this;\n\n    if (this.observer) {\n      throw new Error('Subscriber already exists');\n    }\n\n    return new Observable(function (observer) {\n      _this.observer = observer; // Will be used to forward socket connection changes, enhancing Reachability\n\n      _this.subscription = ReachabilityMonitor.subscribe(function (_a) {\n        var online = _a.online;\n        _this.connectionStatus.online = online;\n\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        observer.next(observerResult);\n      });\n      return function () {\n        clearTimeout(_this.timeout);\n\n        _this.unsubscribe();\n      };\n    });\n  };\n\n  DataStoreConnectivity.prototype.unsubscribe = function () {\n    if (this.subscription) {\n      clearTimeout(this.timeout);\n      this.subscription.unsubscribe();\n    }\n  }; // for consistency with other background processors.\n\n\n  DataStoreConnectivity.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        this.unsubscribe();\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  DataStoreConnectivity.prototype.socketDisconnected = function () {\n    var _this = this;\n\n    if (this.observer && typeof this.observer.next === 'function') {\n      this.observer.next({\n        online: false\n      }); // Notify network issue from the socket\n\n      this.timeout = setTimeout(function () {\n        var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n\n\n        _this.observer.next(observerResult);\n      }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n    }\n  };\n\n  return DataStoreConnectivity;\n}();\n\nexport default DataStoreConnectivity;","map":{"version":3,"names":["__assign","__awaiter","__generator","Observable","ConsoleLogger","Logger","ReachabilityMonitor","logger","RECONNECTING_IN","DataStoreConnectivity","connectionStatus","online","prototype","status","_this","observer","Error","subscription","subscribe","_a","observerResult","next","clearTimeout","timeout","unsubscribe","stop","socketDisconnected","setTimeout"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/sync/datastoreConnectivity.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport Observable from 'zen-observable-ts';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { ReachabilityMonitor } from './datastoreReachability';\nvar logger = new Logger('DataStore');\nvar RECONNECTING_IN = 5000; // 5s this may be configurable in the future\nvar DataStoreConnectivity = /** @class */ (function () {\n    function DataStoreConnectivity() {\n        this.connectionStatus = {\n            online: false,\n        };\n    }\n    DataStoreConnectivity.prototype.status = function () {\n        var _this = this;\n        if (this.observer) {\n            throw new Error('Subscriber already exists');\n        }\n        return new Observable(function (observer) {\n            _this.observer = observer;\n            // Will be used to forward socket connection changes, enhancing Reachability\n            _this.subscription = ReachabilityMonitor.subscribe(function (_a) {\n                var online = _a.online;\n                _this.connectionStatus.online = online;\n                var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n                observer.next(observerResult);\n            });\n            return function () {\n                clearTimeout(_this.timeout);\n                _this.unsubscribe();\n            };\n        });\n    };\n    DataStoreConnectivity.prototype.unsubscribe = function () {\n        if (this.subscription) {\n            clearTimeout(this.timeout);\n            this.subscription.unsubscribe();\n        }\n    };\n    // for consistency with other background processors.\n    DataStoreConnectivity.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                this.unsubscribe();\n                return [2 /*return*/];\n            });\n        });\n    };\n    DataStoreConnectivity.prototype.socketDisconnected = function () {\n        var _this = this;\n        if (this.observer && typeof this.observer.next === 'function') {\n            this.observer.next({ online: false }); // Notify network issue from the socket\n            this.timeout = setTimeout(function () {\n                var observerResult = __assign({}, _this.connectionStatus); // copyOf status\n                _this.observer.next(observerResult);\n            }, RECONNECTING_IN); // giving time for socket cleanup and network status stabilization\n        }\n    };\n    return DataStoreConnectivity;\n}());\nexport default DataStoreConnectivity;\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD,C,CACA;AACA;;AACA,OAAOC,UAAP,MAAuB,mBAAvB;AACA,SAASC,aAAa,IAAIC,MAA1B,QAAwC,mBAAxC;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,IAAIC,MAAM,GAAG,IAAIF,MAAJ,CAAW,WAAX,CAAb;AACA,IAAIG,eAAe,GAAG,IAAtB,C,CAA4B;;AAC5B,IAAIC,qBAAqB;AAAG;AAAe,YAAY;EACnD,SAASA,qBAAT,GAAiC;IAC7B,KAAKC,gBAAL,GAAwB;MACpBC,MAAM,EAAE;IADY,CAAxB;EAGH;;EACDF,qBAAqB,CAACG,SAAtB,CAAgCC,MAAhC,GAAyC,YAAY;IACjD,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAI,KAAKC,QAAT,EAAmB;MACf,MAAM,IAAIC,KAAJ,CAAU,2BAAV,CAAN;IACH;;IACD,OAAO,IAAIb,UAAJ,CAAe,UAAUY,QAAV,EAAoB;MACtCD,KAAK,CAACC,QAAN,GAAiBA,QAAjB,CADsC,CAEtC;;MACAD,KAAK,CAACG,YAAN,GAAqBX,mBAAmB,CAACY,SAApB,CAA8B,UAAUC,EAAV,EAAc;QAC7D,IAAIR,MAAM,GAAGQ,EAAE,CAACR,MAAhB;QACAG,KAAK,CAACJ,gBAAN,CAAuBC,MAAvB,GAAgCA,MAAhC;;QACA,IAAIS,cAAc,GAAGpB,QAAQ,CAAC,EAAD,EAAKc,KAAK,CAACJ,gBAAX,CAA7B,CAH6D,CAGF;;;QAC3DK,QAAQ,CAACM,IAAT,CAAcD,cAAd;MACH,CALoB,CAArB;MAMA,OAAO,YAAY;QACfE,YAAY,CAACR,KAAK,CAACS,OAAP,CAAZ;;QACAT,KAAK,CAACU,WAAN;MACH,CAHD;IAIH,CAbM,CAAP;EAcH,CAnBD;;EAoBAf,qBAAqB,CAACG,SAAtB,CAAgCY,WAAhC,GAA8C,YAAY;IACtD,IAAI,KAAKP,YAAT,EAAuB;MACnBK,YAAY,CAAC,KAAKC,OAAN,CAAZ;MACA,KAAKN,YAAL,CAAkBO,WAAlB;IACH;EACJ,CALD,CA1BmD,CAgCnD;;;EACAf,qBAAqB,CAACG,SAAtB,CAAgCa,IAAhC,GAAuC,YAAY;IAC/C,OAAOxB,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,OAAOC,WAAW,CAAC,IAAD,EAAO,UAAUiB,EAAV,EAAc;QACnC,KAAKK,WAAL;QACA,OAAO,CAAC;QAAE;QAAH,CAAP;MACH,CAHiB,CAAlB;IAIH,CALe,CAAhB;EAMH,CAPD;;EAQAf,qBAAqB,CAACG,SAAtB,CAAgCc,kBAAhC,GAAqD,YAAY;IAC7D,IAAIZ,KAAK,GAAG,IAAZ;;IACA,IAAI,KAAKC,QAAL,IAAiB,OAAO,KAAKA,QAAL,CAAcM,IAArB,KAA8B,UAAnD,EAA+D;MAC3D,KAAKN,QAAL,CAAcM,IAAd,CAAmB;QAAEV,MAAM,EAAE;MAAV,CAAnB,EAD2D,CACpB;;MACvC,KAAKY,OAAL,GAAeI,UAAU,CAAC,YAAY;QAClC,IAAIP,cAAc,GAAGpB,QAAQ,CAAC,EAAD,EAAKc,KAAK,CAACJ,gBAAX,CAA7B,CADkC,CACyB;;;QAC3DI,KAAK,CAACC,QAAN,CAAeM,IAAf,CAAoBD,cAApB;MACH,CAHwB,EAGtBZ,eAHsB,CAAzB,CAF2D,CAKtC;IACxB;EACJ,CATD;;EAUA,OAAOC,qBAAP;AACH,CApD0C,EAA3C;;AAqDA,eAAeA,qBAAf"},"metadata":{},"sourceType":"module"}