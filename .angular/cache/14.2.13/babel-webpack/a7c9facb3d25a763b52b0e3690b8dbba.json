{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Max':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Mean':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Min':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Sum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'All':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Any':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'ArgMax':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfOps.argMax(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'ArgMin':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfOps.argMin(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'Prod':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Cumsum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const exclusive = getParamValue('exclusive', node, tensorMap, context);\n        const reverse = getParamValue('reverse', node, tensorMap, context);\n        return [tfOps.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n      }\n\n    case 'Bincount':\n      const x = getParamValue('x', node, tensorMap, context);\n      const weights = getParamValue('weights', node, tensorMap, context);\n      const size = getParamValue('size', node, tensorMap, context);\n      return [tfOps.bincount(x, weights, size)];\n\n    case 'DenseBincount':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const weights = getParamValue('weights', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n        return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'reduction';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","axis","keepDims","max","mean","min","sum","all","any","argMax","argMin","prod","exclusive","reverse","cumsum","x","weights","size","bincount","binaryOutput","denseBincount","TypeError","CATEGORY"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Max': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Mean': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Min': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Sum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'All': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Any': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'ArgMax': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [tfOps.argMax(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'ArgMin': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [tfOps.argMin(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Prod': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Cumsum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const exclusive = getParamValue('exclusive', node, tensorMap, context);\n            const reverse = getParamValue('reverse', node, tensorMap, context);\n            return [tfOps.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n        }\n        case 'Bincount':\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            return [tfOps.bincount(x, weights, size)];\n        case 'DenseBincount': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n            return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'reduction';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}