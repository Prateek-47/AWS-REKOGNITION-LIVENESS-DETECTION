{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core'; // tslint:disable-next-line: no-imports-from-dist\n\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat':\n      {\n        const n = getParamValue('n', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        let inputs = getParamValue('tensors', node, tensorMap, context);\n        inputs = inputs.slice(0, n);\n        return [tfOps.concat(inputs, axis)];\n      }\n\n    case 'Gather':\n      {\n        const input = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n      }\n\n    case 'GatherV2':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const batchDims = getParamValue('batchDims', node, tensorMap, context);\n        const input = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n      }\n\n    case 'Reverse':\n      {\n        const dims = getParamValue('dims', node, tensorMap, context);\n        const axis = [];\n\n        for (let i = 0; i < dims.length; i++) {\n          if (dims[i]) {\n            axis.push(i);\n          }\n        }\n\n        const input = getParamValue('x', node, tensorMap, context);\n        return [tfOps.reverse(input, axis)];\n      }\n\n    case 'ReverseV2':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const input = getParamValue('x', node, tensorMap, context);\n        return [tfOps.reverse(input, axis)];\n      }\n\n    case 'Slice':\n      {\n        // tslint:disable-next-line:no-any\n        const begin = getParamValue('begin', node, tensorMap, context); // tslint:disable-next-line:no-any\n\n        const size = getParamValue('size', node, tensorMap, context);\n        return [tfOps.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n      }\n\n    case 'StridedSlice':\n      {\n        const begin = getParamValue('begin', node, tensorMap, context);\n        const end = getParamValue('end', node, tensorMap, context);\n        const strides = getParamValue('strides', node, tensorMap, context);\n        const beginMask = getParamValue('beginMask', node, tensorMap, context);\n        const endMask = getParamValue('endMask', node, tensorMap, context);\n        const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n        const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n        const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n        const tensor = getParamValue('x', node, tensorMap, context);\n        return [tfOps.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n      }\n\n    case 'Pack':\n      {\n        return tidy(() => {\n          const axis = getParamValue('axis', node, tensorMap, context);\n          const tensors = getParamValue('tensors', node, tensorMap, context); // Reshape the tensors to the first tensor's shape if they don't\n          // match.\n\n          const shape = tensors[0].shape;\n          const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n          const mapped = tensors.map(tensor => {\n            const sameShape = util.arraysEqual(tensor.shape, shape);\n\n            if (!sameShape && !util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {\n              throw new Error('the input tensors shape does not match');\n            }\n\n            return sameShape ? tensor : tfOps.reshape(tensor, shape);\n          });\n          return [tfOps.stack(mapped, axis)];\n        });\n      }\n\n    case 'Unpack':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        return tfOps.unstack(tensor, axis);\n      }\n\n    case 'Tile':\n      {\n        const reps = getParamValue('reps', node, tensorMap, context);\n        return [tfOps.tile(getParamValue('x', node, tensorMap, context), reps)];\n      }\n\n    case 'Split':\n    case 'SplitV':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n        const tensor = getParamValue('x', node, tensorMap, context);\n        return tfOps.split(tensor, numOrSizeSplits, axis);\n      }\n\n    case 'ScatterNd':\n      {\n        const indices = getParamValue('indices', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const shape = getParamValue('shape', node, tensorMap, context);\n        return [tfOps.scatterND(indices, values, shape)];\n      }\n\n    case 'GatherNd':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const indices = getParamValue('indices', node, tensorMap, context);\n        return [tfOps.gatherND(x, indices)];\n      }\n\n    case 'SparseToDense':\n      {\n        const indices = getParamValue('sparseIndices', node, tensorMap, context);\n        const shape = getParamValue('outputShape', node, tensorMap, context);\n        const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n        const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        return [tfOps.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ? defaultValue : tfOps.cast(defaultValue, sparseValues.dtype))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'slice_join';","map":{"version":3,"names":["tidy","util","tfOps","getParamValue","executeOp","node","tensorMap","context","op","n","axis","inputs","slice","concat","input","indices","gather","cast","batchDims","dims","i","length","push","reverse","begin","size","end","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tensor","stridedSlice","tensors","shape","squeezedShape","squeeze","mapped","map","sameShape","arraysEqual","Error","reshape","stack","unstack","reps","tile","numOrSizeSplits","split","values","scatterND","x","gatherND","sparseValues","defaultValue","sparseToDense","dtype","TypeError","CATEGORY"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n            const n = getParamValue('n', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            let inputs = getParamValue('tensors', node, tensorMap, context);\n            inputs = inputs.slice(0, n);\n            return [tfOps.concat(inputs, axis)];\n        }\n        case 'Gather': {\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const batchDims = getParamValue('batchDims', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n            const dims = getParamValue('dims', node, tensorMap, context);\n            const axis = [];\n            for (let i = 0; i < dims.length; i++) {\n                if (dims[i]) {\n                    axis.push(i);\n                }\n            }\n            const input = getParamValue('x', node, tensorMap, context);\n            return [tfOps.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            return [tfOps.reverse(input, axis)];\n        }\n        case 'Slice': {\n            // tslint:disable-next-line:no-any\n            const begin = getParamValue('begin', node, tensorMap, context);\n            // tslint:disable-next-line:no-any\n            const size = getParamValue('size', node, tensorMap, context);\n            return [tfOps.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n        }\n        case 'StridedSlice': {\n            const begin = getParamValue('begin', node, tensorMap, context);\n            const end = getParamValue('end', node, tensorMap, context);\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const beginMask = getParamValue('beginMask', node, tensorMap, context);\n            const endMask = getParamValue('endMask', node, tensorMap, context);\n            const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n            const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n            const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return [tfOps.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n            return tidy(() => {\n                const axis = getParamValue('axis', node, tensorMap, context);\n                const tensors = getParamValue('tensors', node, tensorMap, context);\n                // Reshape the tensors to the first tensor's shape if they don't\n                // match.\n                const shape = tensors[0].shape;\n                const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n                const mapped = tensors.map(tensor => {\n                    const sameShape = util.arraysEqual(tensor.shape, shape);\n                    if (!sameShape &&\n                        !util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {\n                        throw new Error('the input tensors shape does not match');\n                    }\n                    return sameShape ? tensor : tfOps.reshape(tensor, shape);\n                });\n                return [tfOps.stack(mapped, axis)];\n            });\n        }\n        case 'Unpack': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            return tfOps.unstack(tensor, axis);\n        }\n        case 'Tile': {\n            const reps = getParamValue('reps', node, tensorMap, context);\n            return [tfOps.tile(getParamValue('x', node, tensorMap, context), reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return tfOps.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const shape = getParamValue('shape', node, tensorMap, context);\n            return [tfOps.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [tfOps.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n            const indices = getParamValue('sparseIndices', node, tensorMap, context);\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            return [tfOps.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ?\n                    defaultValue :\n                    tfOps.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'slice_join';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}