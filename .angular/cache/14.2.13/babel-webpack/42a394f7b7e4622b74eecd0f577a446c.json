{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { getSignedHeaders } from './utils/getSignedHeaders';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { AMZ_DATE_HEADER, AUTH_HEADER, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, TOKEN_HEADER } from './constants';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\n\nexport var signRequest = function (request, options) {\n  var signingValues = getSigningValues(options);\n  var accessKeyId = signingValues.accessKeyId,\n      credentialScope = signingValues.credentialScope,\n      longDate = signingValues.longDate,\n      sessionToken = signingValues.sessionToken; // create the request to sign\n\n  var headers = __assign({}, request.headers);\n\n  headers[HOST_HEADER] = request.url.host;\n  headers[AMZ_DATE_HEADER] = longDate;\n\n  if (sessionToken) {\n    headers[TOKEN_HEADER] = sessionToken;\n  }\n\n  var requestToSign = __assign(__assign({}, request), {\n    headers: headers\n  }); // calculate and add the signature to the request\n\n\n  var signature = getSignature(requestToSign, signingValues);\n  var credentialEntry = \"Credential=\".concat(accessKeyId, \"/\").concat(credentialScope);\n  var signedHeadersEntry = \"SignedHeaders=\".concat(getSignedHeaders(headers));\n  var signatureEntry = \"Signature=\".concat(signature);\n  headers[AUTH_HEADER] = \"\".concat(SHA256_ALGORITHM_IDENTIFIER, \" \").concat(credentialEntry, \", \").concat(signedHeadersEntry, \", \").concat(signatureEntry);\n  return requestToSign;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","getSignedHeaders","getSigningValues","AMZ_DATE_HEADER","AUTH_HEADER","HOST_HEADER","SHA256_ALGORITHM_IDENTIFIER","TOKEN_HEADER","getSignature","signRequest","request","options","signingValues","accessKeyId","credentialScope","longDate","sessionToken","headers","url","host","requestToSign","signature","credentialEntry","concat","signedHeadersEntry","signatureEntry"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/signRequest.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { getSignedHeaders } from './utils/getSignedHeaders';\nimport { getSigningValues } from './utils/getSigningValues';\nimport { AMZ_DATE_HEADER, AUTH_HEADER, HOST_HEADER, SHA256_ALGORITHM_IDENTIFIER, TOKEN_HEADER, } from './constants';\nimport { getSignature } from './utils/getSignature';\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nexport var signRequest = function (request, options) {\n    var signingValues = getSigningValues(options);\n    var accessKeyId = signingValues.accessKeyId, credentialScope = signingValues.credentialScope, longDate = signingValues.longDate, sessionToken = signingValues.sessionToken;\n    // create the request to sign\n    var headers = __assign({}, request.headers);\n    headers[HOST_HEADER] = request.url.host;\n    headers[AMZ_DATE_HEADER] = longDate;\n    if (sessionToken) {\n        headers[TOKEN_HEADER] = sessionToken;\n    }\n    var requestToSign = __assign(__assign({}, request), { headers: headers });\n    // calculate and add the signature to the request\n    var signature = getSignature(requestToSign, signingValues);\n    var credentialEntry = \"Credential=\".concat(accessKeyId, \"/\").concat(credentialScope);\n    var signedHeadersEntry = \"SignedHeaders=\".concat(getSignedHeaders(headers));\n    var signatureEntry = \"Signature=\".concat(signature);\n    headers[AUTH_HEADER] = \"\".concat(SHA256_ALGORITHM_IDENTIFIER, \" \").concat(credentialEntry, \", \").concat(signedHeadersEntry, \", \").concat(signatureEntry);\n    return requestToSign;\n};\n"],"mappings":"AAAA;AACA;AACA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;IACpC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IACP;;IACD,OAAON,CAAP;EACH,CAPD;;EAQA,OAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,SAASO,gBAAT,QAAiC,0BAAjC;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,eAAT,EAA0BC,WAA1B,EAAuCC,WAAvC,EAAoDC,2BAApD,EAAiFC,YAAjF,QAAsG,aAAtG;AACA,SAASC,YAAT,QAA6B,sBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,WAAW,GAAG,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;EACjD,IAAIC,aAAa,GAAGV,gBAAgB,CAACS,OAAD,CAApC;EACA,IAAIE,WAAW,GAAGD,aAAa,CAACC,WAAhC;EAAA,IAA6CC,eAAe,GAAGF,aAAa,CAACE,eAA7E;EAAA,IAA8FC,QAAQ,GAAGH,aAAa,CAACG,QAAvH;EAAA,IAAiIC,YAAY,GAAGJ,aAAa,CAACI,YAA9J,CAFiD,CAGjD;;EACA,IAAIC,OAAO,GAAG9B,QAAQ,CAAC,EAAD,EAAKuB,OAAO,CAACO,OAAb,CAAtB;;EACAA,OAAO,CAACZ,WAAD,CAAP,GAAuBK,OAAO,CAACQ,GAAR,CAAYC,IAAnC;EACAF,OAAO,CAACd,eAAD,CAAP,GAA2BY,QAA3B;;EACA,IAAIC,YAAJ,EAAkB;IACdC,OAAO,CAACV,YAAD,CAAP,GAAwBS,YAAxB;EACH;;EACD,IAAII,aAAa,GAAGjC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKuB,OAAL,CAAT,EAAwB;IAAEO,OAAO,EAAEA;EAAX,CAAxB,CAA5B,CAViD,CAWjD;;;EACA,IAAII,SAAS,GAAGb,YAAY,CAACY,aAAD,EAAgBR,aAAhB,CAA5B;EACA,IAAIU,eAAe,GAAG,cAAcC,MAAd,CAAqBV,WAArB,EAAkC,GAAlC,EAAuCU,MAAvC,CAA8CT,eAA9C,CAAtB;EACA,IAAIU,kBAAkB,GAAG,iBAAiBD,MAAjB,CAAwBtB,gBAAgB,CAACgB,OAAD,CAAxC,CAAzB;EACA,IAAIQ,cAAc,GAAG,aAAaF,MAAb,CAAoBF,SAApB,CAArB;EACAJ,OAAO,CAACb,WAAD,CAAP,GAAuB,GAAGmB,MAAH,CAAUjB,2BAAV,EAAuC,GAAvC,EAA4CiB,MAA5C,CAAmDD,eAAnD,EAAoE,IAApE,EAA0EC,MAA1E,CAAiFC,kBAAjF,EAAqG,IAArG,EAA2GD,MAA3G,CAAkHE,cAAlH,CAAvB;EACA,OAAOL,aAAP;AACH,CAlBM"},"metadata":{},"sourceType":"module"}