{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nlet wasmMaxPool;\n\nfunction setup(backend) {\n  wasmMaxPool = backend.wasm.cwrap(MaxPool, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number']);\n}\n\nfunction maxPool(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const x = inputs.x;\n  const xId = backend.dataIdMap.get(x.dataId).id; // TF API supports int32 input. CPU and WebGL backend also support int32\n  // input. WASM backend doesn't support it because it uses xnnpack which only\n  // supports float32.\n  //\n  // Add the following assert only for the WASM backend instead of at core op\n  // level.\n  //\n  // TODO: add support for int32 input.\n\n  util.assert(x.dtype === 'float32', () => `Error in MaxPool: only float32 input is supported. Got ${x.dtype}.`);\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padRight = convInfo.padInfo.right;\n  const padBottom = convInfo.padInfo.bottom;\n  const padLeft = convInfo.padInfo.left;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const inputChannels = convInfo.inChannels;\n  const outputChannels = convInfo.outChannels;\n\n  if (convInfo.dataFormat !== 'channelsLast') {\n    throw new Error(`wasm backend does not support dataFormat:'` + `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n  }\n\n  const out = backend.makeOutput(convInfo.outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmMaxPool(xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n  return out;\n}\n\nexport const maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: maxPool\n};","map":{"version":3,"names":["backend_util","MaxPool","util","wasmMaxPool","setup","backend","wasm","cwrap","maxPool","args","inputs","attrs","x","xId","dataIdMap","get","dataId","id","assert","dtype","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","filterHeight","filterWidth","padTop","padInfo","top","padRight","right","padBottom","bottom","padLeft","left","dilationHeight","dilationWidth","strideHeight","strideWidth","inputChannels","inChannels","outputChannels","outChannels","dataFormat","Error","out","makeOutput","outShape","outId","maxPoolConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/MaxPool.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nlet wasmMaxPool;\nfunction setup(backend) {\n    wasmMaxPool = backend.wasm.cwrap(MaxPool, null /* void */, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n    ]);\n}\nfunction maxPool(args) {\n    const { inputs, attrs, backend } = args;\n    const x = inputs.x;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    // TF API supports int32 input. CPU and WebGL backend also support int32\n    // input. WASM backend doesn't support it because it uses xnnpack which only\n    // supports float32.\n    //\n    // Add the following assert only for the WASM backend instead of at core op\n    // level.\n    //\n    // TODO: add support for int32 input.\n    util.assert(x.dtype === 'float32', () => `Error in MaxPool: only float32 input is supported. Got ${x.dtype}.`);\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const padTop = convInfo.padInfo.top;\n    const padRight = convInfo.padInfo.right;\n    const padBottom = convInfo.padInfo.bottom;\n    const padLeft = convInfo.padInfo.left;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const inputChannels = convInfo.inChannels;\n    const outputChannels = convInfo.outChannels;\n    if (convInfo.dataFormat !== 'channelsLast') {\n        throw new Error(`wasm backend does not support dataFormat:'` +\n            `${convInfo.dataFormat}'. Please use 'channelsLast'.`);\n    }\n    const out = backend.makeOutput(convInfo.outShape, 'float32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmMaxPool(xId, x.shape[0], x.shape[1], x.shape[2], filterHeight, filterWidth, padTop, padRight, padBottom, padLeft, dilationHeight, dilationWidth, strideHeight, strideWidth, inputChannels, outputChannels, outId);\n    return out;\n}\nexport const maxPoolConfig = {\n    kernelName: MaxPool,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: maxPool\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}