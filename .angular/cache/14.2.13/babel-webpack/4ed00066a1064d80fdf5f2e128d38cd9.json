{"ast":null,"code":"import { __awaiter, __generator, __read, __spread, __values } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { browserOrNode, ConsoleLogger as Logger, BackgroundProcessManager, Hub } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG, CONNECTION_STATE_CHANGE as PUBSUB_CONNECTION_STATE_CHANGE, ConnectionState } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType } from '../types';\nimport { getNow, SYNC, USER } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, getIdentifierValue, predicateToGraphQLCondition } from './utils';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\nexport var ControlMessage;\n\n(function (ControlMessage) {\n  ControlMessage[\"SYNC_ENGINE_STORAGE_SUBSCRIBED\"] = \"storageSubscribed\";\n  ControlMessage[\"SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\"] = \"subscriptionsEstablished\";\n  ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_STARTED\"] = \"syncQueriesStarted\";\n  ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_READY\"] = \"syncQueriesReady\";\n  ControlMessage[\"SYNC_ENGINE_MODEL_SYNCED\"] = \"modelSynced\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED\"] = \"outboxMutationEnqueued\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED\"] = \"outboxMutationProcessed\";\n  ControlMessage[\"SYNC_ENGINE_OUTBOX_STATUS\"] = \"outboxStatus\";\n  ControlMessage[\"SYNC_ENGINE_NETWORK_STATUS\"] = \"networkStatus\";\n  ControlMessage[\"SYNC_ENGINE_READY\"] = \"ready\";\n})(ControlMessage || (ControlMessage = {}));\n\nvar SyncEngine =\n/** @class */\nfunction () {\n  function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, conflictHandler, errorHandler, syncPredicates, amplifyConfig, authModeStrategy, amplifyContext, connectivityMonitor) {\n    var _this = this;\n\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.namespaceResolver = namespaceResolver;\n    this.modelClasses = modelClasses;\n    this.userModelClasses = userModelClasses;\n    this.storage = storage;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.amplifyContext = amplifyContext;\n    this.connectivityMonitor = connectivityMonitor;\n    this.online = false;\n    this.modelSyncedStatus = new WeakMap();\n    this.connectionDisrupted = false;\n    this.runningProcesses = new BackgroundProcessManager();\n    this.waitForSleepState = new Promise(function (resolve) {\n      _this.syncQueriesObservableStartSleeping = resolve;\n    });\n    var MutationEvent = this.modelClasses['MutationEvent'];\n    this.outbox = new MutationEventOutbox(this.schema, MutationEvent, modelInstanceCreator, ownSymbol);\n    this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n    this.syncQueriesProcessor = new SyncProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);\n    this.subscriptionsProcessor = new SubscriptionProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);\n    this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, this.amplifyConfig, this.authModeStrategy, errorHandler, conflictHandler, this.amplifyContext);\n    this.datastoreConnectivity = this.connectivityMonitor || new DataStoreConnectivity();\n  }\n\n  SyncEngine.prototype.getModelSyncedStatus = function (modelConstructor) {\n    return this.modelSyncedStatus.get(modelConstructor);\n  };\n\n  SyncEngine.prototype.start = function (params) {\n    var _this = this;\n\n    return new Observable(function (observer) {\n      logger.log('starting sync engine...');\n      var subscriptions = [];\n\n      _this.runningProcesses.add(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var err_1, startPromise, hasMutationsInOutbox;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , this.setupModels(params)];\n\n              case 1:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _a.sent();\n                observer.error(err_1);\n                return [2\n                /*return*/\n                ];\n\n              case 3:\n                startPromise = new Promise(function (doneStarting, failedStarting) {\n                  _this.datastoreConnectivity.status().subscribe(function (_a) {\n                    var online = _a.online;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var _this = this;\n\n                      return __generator(this, function (_b) {\n                        return [2\n                        /*return*/\n                        , this.runningProcesses.isOpen && this.runningProcesses.add(function (onTerminate) {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var ctlSubsObservable_1, dataSubsObservable, err_2, error_1;\n\n                            var _a;\n\n                            var _this = this;\n\n                            return __generator(this, function (_b) {\n                              switch (_b.label) {\n                                case 0:\n                                  if (!(online && !this.online)) return [3\n                                  /*break*/\n                                  , 10];\n                                  this.online = online;\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                    data: {\n                                      active: this.online\n                                    }\n                                  });\n                                  dataSubsObservable = void 0;\n                                  if (!isNode) return [3\n                                  /*break*/\n                                  , 1];\n                                  logger.warn('Realtime disabled when in a server-side environment');\n                                  return [3\n                                  /*break*/\n                                  , 6];\n\n                                case 1:\n                                  this.stopDisruptionListener = this.startDisruptionListener(); //#region GraphQL Subscriptions\n\n                                  _a = __read(this.subscriptionsProcessor.start(), 2), ctlSubsObservable_1 = _a[0], dataSubsObservable = _a[1];\n                                  _b.label = 2;\n\n                                case 2:\n                                  _b.trys.push([2, 4,, 5]);\n\n                                  return [4\n                                  /*yield*/\n                                  , new Promise(function (resolve, reject) {\n                                    onTerminate.then(reject);\n                                    var ctlSubsSubscription = ctlSubsObservable_1.subscribe({\n                                      next: function (msg) {\n                                        if (msg === CONTROL_MSG.CONNECTED) {\n                                          resolve();\n                                        }\n                                      },\n                                      error: function (err) {\n                                        reject(err);\n\n                                        var handleDisconnect = _this.disconnectionHandler();\n\n                                        handleDisconnect(err);\n                                      }\n                                    });\n                                    subscriptions.push(ctlSubsSubscription);\n                                  })];\n\n                                case 3:\n                                  _b.sent();\n\n                                  return [3\n                                  /*break*/\n                                  , 5];\n\n                                case 4:\n                                  err_2 = _b.sent();\n                                  observer.error(err_2);\n                                  failedStarting();\n                                  return [2\n                                  /*return*/\n                                  ];\n\n                                case 5:\n                                  logger.log('Realtime ready');\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\n                                  });\n                                  _b.label = 6;\n\n                                case 6:\n                                  _b.trys.push([6, 8,, 9]);\n\n                                  return [4\n                                  /*yield*/\n                                  , new Promise(function (resolve, reject) {\n                                    var syncQuerySubscription = _this.syncQueriesObservable().subscribe({\n                                      next: function (message) {\n                                        var type = message.type;\n\n                                        if (type === ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY) {\n                                          resolve();\n                                        }\n\n                                        observer.next(message);\n                                      },\n                                      complete: function () {\n                                        resolve();\n                                      },\n                                      error: function (error) {\n                                        reject(error);\n                                      }\n                                    });\n\n                                    if (syncQuerySubscription) {\n                                      subscriptions.push(syncQuerySubscription);\n                                    }\n                                  })];\n\n                                case 7:\n                                  _b.sent();\n\n                                  return [3\n                                  /*break*/\n                                  , 9];\n\n                                case 8:\n                                  error_1 = _b.sent();\n                                  observer.error(error_1);\n                                  failedStarting();\n                                  return [2\n                                  /*return*/\n                                  ];\n\n                                case 9:\n                                  //#endregion\n                                  //#region process mutations (outbox)\n                                  subscriptions.push(this.mutationsProcessor.start().subscribe(function (_a) {\n                                    var modelDefinition = _a.modelDefinition,\n                                        item = _a.model,\n                                        hasMore = _a.hasMore;\n                                    return _this.runningProcesses.add(function () {\n                                      return __awaiter(_this, void 0, void 0, function () {\n                                        var modelConstructor, model;\n\n                                        var _this = this;\n\n                                        return __generator(this, function (_a) {\n                                          switch (_a.label) {\n                                            case 0:\n                                              modelConstructor = this.userModelClasses[modelDefinition.name];\n                                              model = this.modelInstanceCreator(modelConstructor, item);\n                                              return [4\n                                              /*yield*/\n                                              , this.storage.runExclusive(function (storage) {\n                                                return _this.modelMerger.merge(storage, model, modelDefinition);\n                                              })];\n\n                                            case 1:\n                                              _a.sent();\n\n                                              observer.next({\n                                                type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED,\n                                                data: {\n                                                  model: modelConstructor,\n                                                  element: model\n                                                }\n                                              });\n                                              observer.next({\n                                                type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                                data: {\n                                                  isEmpty: !hasMore\n                                                }\n                                              });\n                                              return [2\n                                              /*return*/\n                                              ];\n                                          }\n                                        });\n                                      });\n                                    }, 'mutation processor event');\n                                  })); //#endregion\n                                  //#region Merge subscriptions buffer\n                                  // TODO: extract to function\n\n                                  if (!isNode) {\n                                    subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                                      var _b = __read(_a, 3),\n                                          _transformerMutationType = _b[0],\n                                          modelDefinition = _b[1],\n                                          item = _b[2];\n\n                                      return _this.runningProcesses.add(function () {\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                          var modelConstructor, model;\n\n                                          var _this = this;\n\n                                          return __generator(this, function (_a) {\n                                            switch (_a.label) {\n                                              case 0:\n                                                modelConstructor = this.userModelClasses[modelDefinition.name];\n                                                model = this.modelInstanceCreator(modelConstructor, item);\n                                                return [4\n                                                /*yield*/\n                                                , this.storage.runExclusive(function (storage) {\n                                                  return _this.modelMerger.merge(storage, model, modelDefinition);\n                                                })];\n\n                                              case 1:\n                                                _a.sent();\n\n                                                return [2\n                                                /*return*/\n                                                ];\n                                            }\n                                          });\n                                        });\n                                      }, 'subscription dataSubsObservable event');\n                                    }));\n                                  }\n\n                                  return [3\n                                  /*break*/\n                                  , 11];\n\n                                case 10:\n                                  if (!online) {\n                                    this.online = online;\n                                    observer.next({\n                                      type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                      data: {\n                                        active: this.online\n                                      }\n                                    });\n                                    subscriptions.forEach(function (sub) {\n                                      return sub.unsubscribe();\n                                    });\n                                    subscriptions = [];\n                                  }\n\n                                  _b.label = 11;\n\n                                case 11:\n                                  doneStarting();\n                                  return [2\n                                  /*return*/\n                                  ];\n                              }\n                            });\n                          });\n                        }, 'datastore connectivity event')];\n                      });\n                    });\n                  });\n                });\n                this.storage.observe(null, null, ownSymbol).filter(function (_a) {\n                  var model = _a.model;\n\n                  var modelDefinition = _this.getModelDefinition(model);\n\n                  return modelDefinition.syncable === true;\n                }).subscribe({\n                  next: function (_a) {\n                    var opType = _a.opType,\n                        model = _a.model,\n                        element = _a.element,\n                        condition = _a.condition;\n                    return __awaiter(_this, void 0, void 0, function () {\n                      var _this = this;\n\n                      return __generator(this, function (_b) {\n                        return [2\n                        /*return*/\n                        , this.runningProcesses.add(function () {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var namespace, MutationEventConstructor, modelDefinition, graphQLCondition, mutationEvent;\n                            return __generator(this, function (_a) {\n                              switch (_a.label) {\n                                case 0:\n                                  namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                                  MutationEventConstructor = this.modelClasses['MutationEvent'];\n                                  modelDefinition = this.getModelDefinition(model);\n                                  graphQLCondition = predicateToGraphQLCondition(condition, modelDefinition);\n                                  mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                                  return [4\n                                  /*yield*/\n                                  , this.outbox.enqueue(this.storage, mutationEvent)];\n\n                                case 1:\n                                  _a.sent();\n\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED,\n                                    data: {\n                                      model: model,\n                                      element: element\n                                    }\n                                  });\n                                  observer.next({\n                                    type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                    data: {\n                                      isEmpty: false\n                                    }\n                                  });\n                                  return [4\n                                  /*yield*/\n                                  , startPromise];\n\n                                case 2:\n                                  _a.sent(); // Set by the this.datastoreConnectivity.status().subscribe() loop\n\n\n                                  if (this.online) {\n                                    this.mutationsProcessor.resume();\n                                  }\n\n                                  return [2\n                                  /*return*/\n                                  ];\n                              }\n                            });\n                          });\n                        }, 'storage event')];\n                      });\n                    });\n                  }\n                });\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED\n                });\n                return [4\n                /*yield*/\n                , this.outbox.peek(this.storage)];\n\n              case 4:\n                hasMutationsInOutbox = _a.sent() === undefined;\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                  data: {\n                    isEmpty: hasMutationsInOutbox\n                  }\n                });\n                return [4\n                /*yield*/\n                , startPromise];\n\n              case 5:\n                _a.sent();\n\n                observer.next({\n                  type: ControlMessage.SYNC_ENGINE_READY\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }, 'sync start');\n    });\n  };\n\n  SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n    return __awaiter(this, void 0, void 0, function () {\n      var modelLastSync, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = Map.bind;\n            return [4\n            /*yield*/\n            , this.runningProcesses.add(function () {\n              return _this.getModelsMetadata();\n            }, 'sync/index getModelsMetadataWithNextFullSync')];\n\n          case 1:\n            modelLastSync = new (_a.apply(Map, [void 0, _b.sent().map(function (_a) {\n              var namespace = _a.namespace,\n                  model = _a.model,\n                  lastSync = _a.lastSync,\n                  lastFullSync = _a.lastFullSync,\n                  fullSyncInterval = _a.fullSyncInterval,\n                  lastSyncPredicate = _a.lastSyncPredicate;\n              var nextFullSync = lastFullSync + fullSyncInterval;\n              var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp ? 0 // perform full sync if expired\n              : lastSync; // perform delta sync\n\n              return [_this.schema.namespaces[namespace].models[model], [namespace, syncFrom]];\n            })]))();\n            return [2\n            /*return*/\n            , modelLastSync];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.syncQueriesObservable = function () {\n    var _this = this;\n\n    if (!this.online) {\n      return Observable.of();\n    }\n\n    return new Observable(function (observer) {\n      var syncQueriesSubscription;\n      _this.runningProcesses.isOpen && _this.runningProcesses.add(function (onTerminate) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var terminated, _loop_1, this_1;\n\n          var _this = this;\n\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                terminated = false;\n\n                _loop_1 = function () {\n                  var count, modelLastSync, paginatingModels, lastFullSyncStartedAt, syncInterval, start, syncDuration, lastStartedAt, msNextFullSync;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        count = new WeakMap();\n                        return [4\n                        /*yield*/\n                        , this_1.getModelsMetadataWithNextFullSync(Date.now())];\n\n                      case 1:\n                        modelLastSync = _a.sent();\n                        paginatingModels = new Set(modelLastSync.keys());\n                        return [4\n                        /*yield*/\n                        , new Promise(function (resolve, reject) {\n                          if (!_this.runningProcesses.isOpen) resolve();\n                          onTerminate.then(function () {\n                            return resolve();\n                          });\n                          syncQueriesSubscription = _this.syncQueriesProcessor.start(modelLastSync).subscribe({\n                            next: function (_a) {\n                              var namespace = _a.namespace,\n                                  modelDefinition = _a.modelDefinition,\n                                  items = _a.items,\n                                  done = _a.done,\n                                  startedAt = _a.startedAt,\n                                  isFullSync = _a.isFullSync;\n                              return __awaiter(_this, void 0, void 0, function () {\n                                var modelConstructor, modelName, modelMetadata_1, lastFullSync, fullSyncInterval, counts;\n\n                                var _this = this;\n\n                                return __generator(this, function (_b) {\n                                  switch (_b.label) {\n                                    case 0:\n                                      modelConstructor = this.userModelClasses[modelDefinition.name];\n\n                                      if (!count.has(modelConstructor)) {\n                                        count.set(modelConstructor, {\n                                          new: 0,\n                                          updated: 0,\n                                          deleted: 0\n                                        });\n                                        start = getNow();\n                                        lastStartedAt = lastStartedAt === undefined ? startedAt : Math.max(lastStartedAt, startedAt);\n                                      }\n                                      /**\n                                       * If there are mutations in the outbox for a given id, those need to be\n                                       * merged individually. Otherwise, we can merge them in batches.\n                                       */\n\n\n                                      return [4\n                                      /*yield*/\n                                      , this.storage.runExclusive(function (storage) {\n                                        return __awaiter(_this, void 0, void 0, function () {\n                                          var idsInOutbox, oneByOne, page, opTypeCount, oneByOne_1, oneByOne_1_1, item, opType, e_1_1, _a, _b, _c, counts;\n\n                                          var e_1, _d;\n\n                                          return __generator(this, function (_e) {\n                                            switch (_e.label) {\n                                              case 0:\n                                                return [4\n                                                /*yield*/\n                                                , this.outbox.getModelIds(storage)];\n\n                                              case 1:\n                                                idsInOutbox = _e.sent();\n                                                oneByOne = [];\n                                                page = items.filter(function (item) {\n                                                  var itemId = getIdentifierValue(modelDefinition, item);\n\n                                                  if (!idsInOutbox.has(itemId)) {\n                                                    return true;\n                                                  }\n\n                                                  oneByOne.push(item);\n                                                  return false;\n                                                });\n                                                opTypeCount = [];\n                                                _e.label = 2;\n\n                                              case 2:\n                                                _e.trys.push([2, 7, 8, 9]);\n\n                                                oneByOne_1 = __values(oneByOne), oneByOne_1_1 = oneByOne_1.next();\n                                                _e.label = 3;\n\n                                              case 3:\n                                                if (!!oneByOne_1_1.done) return [3\n                                                /*break*/\n                                                , 6];\n                                                item = oneByOne_1_1.value;\n                                                return [4\n                                                /*yield*/\n                                                , this.modelMerger.merge(storage, item, modelDefinition)];\n\n                                              case 4:\n                                                opType = _e.sent();\n\n                                                if (opType !== undefined) {\n                                                  opTypeCount.push([item, opType]);\n                                                }\n\n                                                _e.label = 5;\n\n                                              case 5:\n                                                oneByOne_1_1 = oneByOne_1.next();\n                                                return [3\n                                                /*break*/\n                                                , 3];\n\n                                              case 6:\n                                                return [3\n                                                /*break*/\n                                                , 9];\n\n                                              case 7:\n                                                e_1_1 = _e.sent();\n                                                e_1 = {\n                                                  error: e_1_1\n                                                };\n                                                return [3\n                                                /*break*/\n                                                , 9];\n\n                                              case 8:\n                                                try {\n                                                  if (oneByOne_1_1 && !oneByOne_1_1.done && (_d = oneByOne_1.return)) _d.call(oneByOne_1);\n                                                } finally {\n                                                  if (e_1) throw e_1.error;\n                                                }\n\n                                                return [7\n                                                /*endfinally*/\n                                                ];\n\n                                              case 9:\n                                                _b = (_a = opTypeCount.push).apply;\n                                                _c = [opTypeCount];\n                                                return [4\n                                                /*yield*/\n                                                , this.modelMerger.mergePage(storage, modelConstructor, page, modelDefinition)];\n\n                                              case 10:\n                                                _b.apply(_a, _c.concat([__spread.apply(void 0, [_e.sent()])]));\n\n                                                counts = count.get(modelConstructor);\n                                                opTypeCount.forEach(function (_a) {\n                                                  var _b = __read(_a, 2),\n                                                      opType = _b[1];\n\n                                                  switch (opType) {\n                                                    case OpType.INSERT:\n                                                      counts.new++;\n                                                      break;\n\n                                                    case OpType.UPDATE:\n                                                      counts.updated++;\n                                                      break;\n\n                                                    case OpType.DELETE:\n                                                      counts.deleted++;\n                                                      break;\n\n                                                    default:\n                                                      throw new Error(\"Invalid opType \" + opType);\n                                                  }\n                                                });\n                                                return [2\n                                                /*return*/\n                                                ];\n                                            }\n                                          });\n                                        });\n                                      })];\n\n                                    case 1:\n                                      /**\n                                       * If there are mutations in the outbox for a given id, those need to be\n                                       * merged individually. Otherwise, we can merge them in batches.\n                                       */\n                                      _b.sent();\n\n                                      if (!done) return [3\n                                      /*break*/\n                                      , 4];\n                                      modelName = modelDefinition.name;\n                                      return [4\n                                      /*yield*/\n                                      , this.getModelMetadata(namespace, modelName)];\n\n                                    case 2:\n                                      modelMetadata_1 = _b.sent();\n                                      lastFullSync = modelMetadata_1.lastFullSync, fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                                      syncInterval = fullSyncInterval;\n                                      lastFullSyncStartedAt = lastFullSyncStartedAt === undefined ? lastFullSync : Math.max(lastFullSyncStartedAt, isFullSync ? startedAt : lastFullSync);\n                                      modelMetadata_1 = this.modelClasses.ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                                        draft.lastSync = startedAt;\n                                        draft.lastFullSync = isFullSync ? startedAt : modelMetadata_1.lastFullSync;\n                                      });\n                                      return [4\n                                      /*yield*/\n                                      , this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n\n                                    case 3:\n                                      _b.sent();\n\n                                      counts = count.get(modelConstructor);\n                                      this.modelSyncedStatus.set(modelConstructor, true);\n                                      observer.next({\n                                        type: ControlMessage.SYNC_ENGINE_MODEL_SYNCED,\n                                        data: {\n                                          model: modelConstructor,\n                                          isFullSync: isFullSync,\n                                          isDeltaSync: !isFullSync,\n                                          counts: counts\n                                        }\n                                      });\n                                      paginatingModels.delete(modelDefinition);\n\n                                      if (paginatingModels.size === 0) {\n                                        syncDuration = getNow() - start;\n                                        resolve();\n                                        observer.next({\n                                          type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n                                        });\n                                        syncQueriesSubscription.unsubscribe();\n                                      }\n\n                                      _b.label = 4;\n\n                                    case 4:\n                                      return [2\n                                      /*return*/\n                                      ];\n                                  }\n                                });\n                              });\n                            },\n                            error: function (error) {\n                              observer.error(error);\n                            }\n                          });\n                          observer.next({\n                            type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_STARTED,\n                            data: {\n                              models: Array.from(paginatingModels).map(function (_a) {\n                                var name = _a.name;\n                                return name;\n                              })\n                            }\n                          });\n                        })];\n\n                      case 2:\n                        _a.sent();\n\n                        if (!lastFullSyncStartedAt) {\n                          msNextFullSync = syncInterval - syncDuration;\n                        } else {\n                          msNextFullSync = lastFullSyncStartedAt + syncInterval - (lastStartedAt + syncDuration);\n                        }\n\n                        logger.debug(\"Next fullSync in \" + msNextFullSync / 1000 + \" seconds. (\" + new Date(Date.now() + msNextFullSync) + \")\"); // TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n                        // a lot of thought into what that contract looks like to\n                        //  support possible use-cases:\n                        //\n                        //  1. non-cancelable\n                        //  2. cancelable, unsleep on exit()\n                        //  3. cancelable, throw Error on exit()\n                        //  4. cancelable, callback first on exit()?\n                        //  5. ... etc. ? ...\n                        //\n                        // TLDR; this is a lot of complexity here for a sleep(),\n                        // but, it's not clear to me yet how to support an\n                        // extensible, centralized cancelable `sleep()` elegantly.\n\n                        return [4\n                        /*yield*/\n                        , this_1.runningProcesses.add(function (onTerminate) {\n                          return __awaiter(_this, void 0, void 0, function () {\n                            var sleepTimer, unsleep, sleep;\n\n                            var _this = this;\n\n                            return __generator(this, function (_a) {\n                              sleep = new Promise(function (_unsleep) {\n                                unsleep = _unsleep;\n                                sleepTimer = setTimeout(unsleep, msNextFullSync);\n                              });\n                              onTerminate.then(function () {\n                                terminated = true;\n\n                                _this.syncQueriesObservableStartSleeping();\n\n                                unsleep();\n                              });\n                              this.unsleepSyncQueriesObservable = unsleep;\n                              this.syncQueriesObservableStartSleeping();\n                              return [2\n                              /*return*/\n                              , sleep];\n                            });\n                          });\n                        }, 'syncQueriesObservable sleep')];\n\n                      case 3:\n                        // TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n                        // a lot of thought into what that contract looks like to\n                        //  support possible use-cases:\n                        //\n                        //  1. non-cancelable\n                        //  2. cancelable, unsleep on exit()\n                        //  3. cancelable, throw Error on exit()\n                        //  4. cancelable, callback first on exit()?\n                        //  5. ... etc. ? ...\n                        //\n                        // TLDR; this is a lot of complexity here for a sleep(),\n                        // but, it's not clear to me yet how to support an\n                        // extensible, centralized cancelable `sleep()` elegantly.\n                        _a.sent();\n\n                        this_1.unsleepSyncQueriesObservable = null;\n                        this_1.waitForSleepState = new Promise(function (resolve) {\n                          _this.syncQueriesObservableStartSleeping = resolve;\n                        });\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                };\n\n                this_1 = this;\n                _a.label = 1;\n\n              case 1:\n                if (!(!observer.closed && !terminated)) return [3\n                /*break*/\n                , 3];\n                return [5\n                /*yield**/\n                , _loop_1()];\n\n              case 2:\n                _a.sent();\n\n                return [3\n                /*break*/\n                , 1];\n\n              case 3:\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }, 'syncQueriesObservable main');\n    });\n  };\n\n  SyncEngine.prototype.disconnectionHandler = function () {\n    var _this = this;\n\n    return function (msg) {\n      // This implementation is tied to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n      if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg || PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n        _this.datastoreConnectivity.socketDisconnected();\n      }\n    };\n  };\n\n  SyncEngine.prototype.unsubscribeConnectivity = function () {\n    this.datastoreConnectivity.unsubscribe();\n  };\n  /**\n   * Stops all subscription activities and resolves when all activies report\n   * that they're disconnected, done retrying, etc..\n   */\n\n\n  SyncEngine.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('stopping sync engine');\n            /**\n             * Gracefully disconnecting subscribers first just prevents *more* work\n             * from entering the pipelines.\n             */\n\n            this.unsubscribeConnectivity();\n            /**\n             * Stop listening for websocket connection disruption\n             */\n\n            this.stopDisruptionListener && this.stopDisruptionListener();\n            /**\n             * aggressively shut down any lingering background processes.\n             * some of this might be semi-redundant with unsubscribing. however,\n             * unsubscribing doesn't allow us to wait for settling.\n             * (Whereas `stop()` does.)\n             */\n\n            return [4\n            /*yield*/\n            , this.mutationsProcessor.stop()];\n\n          case 1:\n            /**\n             * aggressively shut down any lingering background processes.\n             * some of this might be semi-redundant with unsubscribing. however,\n             * unsubscribing doesn't allow us to wait for settling.\n             * (Whereas `stop()` does.)\n             */\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.subscriptionsProcessor.stop()];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.datastoreConnectivity.stop()];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.syncQueriesProcessor.stop()];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 5:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 6:\n            _a.sent();\n\n            logger.debug('sync engine stopped and ready to restart');\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.setupModels = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fullSyncInterval, ModelMetadataConstructor, models, savedModel, promises, result, _a, _b, modelMetadata, modelName, e_2_1;\n\n      var e_2, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            fullSyncInterval = params.fullSyncInterval;\n            ModelMetadataConstructor = this.modelClasses.ModelMetadata;\n            models = [];\n            Object.values(this.schema.namespaces).forEach(function (namespace) {\n              Object.values(namespace.models).filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n              }).forEach(function (model) {\n                models.push([namespace.name, model]);\n\n                if (namespace.name === USER) {\n                  var modelConstructor = _this.userModelClasses[model.name];\n\n                  _this.modelSyncedStatus.set(modelConstructor, false);\n                }\n              });\n            });\n            promises = models.map(function (_a) {\n              var _b = __read(_a, 2),\n                  namespace = _b[0],\n                  model = _b[1];\n\n              return __awaiter(_this, void 0, void 0, function () {\n                var modelMetadata, syncPredicate, lastSyncPredicate, prevSyncPredicate, syncPredicateUpdated_1;\n\n                var _c, _d, _e, _f;\n\n                return __generator(this, function (_g) {\n                  switch (_g.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , this.getModelMetadata(namespace, model.name)];\n\n                    case 1:\n                      modelMetadata = _g.sent();\n                      syncPredicate = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n                      lastSyncPredicate = syncPredicate ? JSON.stringify(syncPredicate) : null;\n                      if (!(modelMetadata === undefined)) return [3\n                      /*break*/\n                      , 3];\n                      return [4\n                      /*yield*/\n                      , this.storage.save(this.modelInstanceCreator(ModelMetadataConstructor, {\n                        model: model.name,\n                        namespace: namespace,\n                        lastSync: null,\n                        fullSyncInterval: fullSyncInterval,\n                        lastFullSync: null,\n                        lastSyncPredicate: lastSyncPredicate\n                      }), undefined, ownSymbol)];\n\n                    case 2:\n                      _c = __read.apply(void 0, [_g.sent(), 1]), _d = __read(_c[0], 1), savedModel = _d[0];\n                      return [3\n                      /*break*/\n                      , 5];\n\n                    case 3:\n                      prevSyncPredicate = modelMetadata.lastSyncPredicate ? modelMetadata.lastSyncPredicate : null;\n                      syncPredicateUpdated_1 = prevSyncPredicate !== lastSyncPredicate;\n                      return [4\n                      /*yield*/\n                      , this.storage.save(ModelMetadataConstructor.copyOf(modelMetadata, function (draft) {\n                        draft.fullSyncInterval = fullSyncInterval; // perform a base sync if the syncPredicate changed in between calls to DataStore.start\n                        // ensures that the local store contains all the data specified by the syncExpression\n\n                        if (syncPredicateUpdated_1) {\n                          draft.lastSync = null;\n                          draft.lastFullSync = null;\n                          draft.lastSyncPredicate = lastSyncPredicate;\n                        }\n                      }))];\n\n                    case 4:\n                      _e = __read.apply(void 0, [_g.sent(), 1]), _f = __read(_e[0], 1), savedModel = _f[0];\n                      _g.label = 5;\n\n                    case 5:\n                      return [2\n                      /*return*/\n                      , savedModel];\n                  }\n                });\n              });\n            });\n            result = {};\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 2:\n            _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();\n            _d.label = 3;\n\n          case 3:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            modelMetadata = _b.value;\n            modelName = modelMetadata.model;\n            result[modelName] = modelMetadata;\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_2_1 = _d.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelsMetadata = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, modelsMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            return [4\n            /*yield*/\n            , this.storage.query(ModelMetadata)];\n\n          case 1:\n            modelsMetadata = _a.sent();\n            return [2\n            /*return*/\n            , modelsMetadata];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n    return __awaiter(this, void 0, void 0, function () {\n      var ModelMetadata, predicate, _a, modelMetadata;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            ModelMetadata = this.modelClasses.ModelMetadata;\n            predicate = ModelPredicateCreator.createFromAST(this.schema.namespaces[SYNC].models[ModelMetadata.name], {\n              and: [{\n                namespace: {\n                  eq: namespace\n                }\n              }, {\n                model: {\n                  eq: model\n                }\n              }]\n            });\n            return [4\n            /*yield*/\n            , this.storage.query(ModelMetadata, predicate, {\n              page: 0,\n              limit: 1\n            })];\n\n          case 1:\n            _a = __read.apply(void 0, [_b.sent(), 1]), modelMetadata = _a[0];\n            return [2\n            /*return*/\n            , modelMetadata];\n        }\n      });\n    });\n  };\n\n  SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n    var namespaceName = this.namespaceResolver(modelConstructor);\n    var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n    return modelDefinition;\n  };\n\n  SyncEngine.getNamespace = function () {\n    var namespace = {\n      name: SYNC,\n      relationships: {},\n      enums: {\n        OperationType: {\n          name: 'OperationType',\n          values: ['CREATE', 'UPDATE', 'DELETE']\n        }\n      },\n      nonModels: {},\n      models: {\n        MutationEvent: {\n          name: 'MutationEvent',\n          pluralName: 'MutationEvents',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            data: {\n              name: 'data',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            modelId: {\n              name: 'modelId',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            operation: {\n              name: 'operation',\n              type: {\n                enum: 'Operationtype'\n              },\n              isArray: false,\n              isRequired: true\n            },\n            condition: {\n              name: 'condition',\n              type: 'String',\n              isArray: false,\n              isRequired: true\n            }\n          }\n        },\n        ModelMetadata: {\n          name: 'ModelMetadata',\n          pluralName: 'ModelsMetadata',\n          syncable: false,\n          fields: {\n            id: {\n              name: 'id',\n              type: 'ID',\n              isRequired: true,\n              isArray: false\n            },\n            namespace: {\n              name: 'namespace',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            model: {\n              name: 'model',\n              type: 'String',\n              isRequired: true,\n              isArray: false\n            },\n            lastSync: {\n              name: 'lastSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            lastFullSync: {\n              name: 'lastFullSync',\n              type: 'Int',\n              isRequired: false,\n              isArray: false\n            },\n            fullSyncInterval: {\n              name: 'fullSyncInterval',\n              type: 'Int',\n              isRequired: true,\n              isArray: false\n            },\n            lastSyncPredicate: {\n              name: 'lastSyncPredicate',\n              type: 'String',\n              isRequired: false,\n              isArray: false\n            }\n          }\n        }\n      }\n    };\n    return namespace;\n  };\n  /**\n   * listen for websocket connection disruption\n   *\n   * May indicate there was a period of time where messages\n   * from AppSync were missed. A sync needs to be triggered to\n   * retrieve the missed data.\n   */\n\n\n  SyncEngine.prototype.startDisruptionListener = function () {\n    var _this = this;\n\n    return Hub.listen('api', function (data) {\n      if (data.source === 'PubSub' && data.payload.event === PUBSUB_CONNECTION_STATE_CHANGE) {\n        var connectionState = data.payload.data.connectionState;\n\n        switch (connectionState) {\n          // Do not need to listen for ConnectionDisruptedPendingNetwork\n          // Normal network reconnection logic will handle the sync\n          case ConnectionState.ConnectionDisrupted:\n            _this.connectionDisrupted = true;\n            break;\n\n          case ConnectionState.Connected:\n            if (_this.connectionDisrupted) {\n              _this.scheduleSync();\n            }\n\n            _this.connectionDisrupted = false;\n            break;\n        }\n      }\n    });\n  };\n  /*\n   * Schedule a sync to start when syncQueriesObservable enters sleep state\n   * Start sync immediately if syncQueriesObservable is already in sleep state\n   */\n\n\n  SyncEngine.prototype.scheduleSync = function () {\n    var _this = this;\n\n    return this.runningProcesses.isOpen && this.runningProcesses.add(function () {\n      return _this.waitForSleepState.then(function () {\n        // unsleepSyncQueriesObservable will be set if waitForSleepState has resolved\n        _this.unsleepSyncQueriesObservable();\n      });\n    });\n  };\n\n  return SyncEngine;\n}();\n\nexport { SyncEngine };","map":{"version":3,"names":["__awaiter","__generator","__read","__spread","__values","browserOrNode","ConsoleLogger","Logger","BackgroundProcessManager","Hub","CONTROL_MSG","PUBSUB_CONTROL_MSG","CONNECTION_STATE_CHANGE","PUBSUB_CONNECTION_STATE_CHANGE","ConnectionState","Observable","ModelPredicateCreator","OpType","getNow","SYNC","USER","DataStoreConnectivity","ModelMerger","MutationEventOutbox","MutationProcessor","SubscriptionProcessor","SyncProcessor","createMutationInstanceFromModelOperation","getIdentifierValue","predicateToGraphQLCondition","isNode","logger","ownSymbol","Symbol","ControlMessage","SyncEngine","schema","namespaceResolver","modelClasses","userModelClasses","storage","modelInstanceCreator","conflictHandler","errorHandler","syncPredicates","amplifyConfig","authModeStrategy","amplifyContext","connectivityMonitor","_this","online","modelSyncedStatus","WeakMap","connectionDisrupted","runningProcesses","waitForSleepState","Promise","resolve","syncQueriesObservableStartSleeping","MutationEvent","outbox","modelMerger","syncQueriesProcessor","subscriptionsProcessor","mutationsProcessor","datastoreConnectivity","prototype","getModelSyncedStatus","modelConstructor","get","start","params","observer","log","subscriptions","add","err_1","startPromise","hasMutationsInOutbox","_a","label","trys","push","setupModels","sent","error","doneStarting","failedStarting","status","subscribe","_b","isOpen","onTerminate","ctlSubsObservable_1","dataSubsObservable","err_2","error_1","next","type","SYNC_ENGINE_NETWORK_STATUS","data","active","warn","stopDisruptionListener","startDisruptionListener","reject","then","ctlSubsSubscription","msg","CONNECTED","err","handleDisconnect","disconnectionHandler","SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED","syncQuerySubscription","syncQueriesObservable","message","SYNC_ENGINE_SYNC_QUERIES_READY","complete","modelDefinition","item","model","hasMore","name","runExclusive","merge","SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED","element","SYNC_ENGINE_OUTBOX_STATUS","isEmpty","_transformerMutationType","forEach","sub","unsubscribe","observe","filter","getModelDefinition","syncable","opType","condition","namespace","MutationEventConstructor","graphQLCondition","mutationEvent","namespaces","relationships","enqueue","SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED","resume","SYNC_ENGINE_STORAGE_SUBSCRIBED","peek","undefined","SYNC_ENGINE_READY","getModelsMetadataWithNextFullSync","currentTimeStamp","modelLastSync","Map","bind","getModelsMetadata","apply","map","lastSync","lastFullSync","fullSyncInterval","lastSyncPredicate","nextFullSync","syncFrom","models","of","syncQueriesSubscription","terminated","_loop_1","this_1","count","paginatingModels","lastFullSyncStartedAt","syncInterval","syncDuration","lastStartedAt","msNextFullSync","Date","now","Set","keys","items","done","startedAt","isFullSync","modelName","modelMetadata_1","counts","has","set","new","updated","deleted","Math","max","idsInOutbox","oneByOne","page","opTypeCount","oneByOne_1","oneByOne_1_1","e_1_1","_c","e_1","_d","_e","getModelIds","itemId","value","return","call","mergePage","concat","INSERT","UPDATE","DELETE","Error","getModelMetadata","ModelMetadata","copyOf","draft","save","SYNC_ENGINE_MODEL_SYNCED","isDeltaSync","delete","size","SYNC_ENGINE_SYNC_QUERIES_STARTED","Array","from","debug","sleepTimer","unsleep","sleep","_unsleep","setTimeout","unsleepSyncQueriesObservable","closed","CONNECTION_CLOSED","TIMEOUT_DISCONNECT","socketDisconnected","unsubscribeConnectivity","stop","close","open","ModelMetadataConstructor","savedModel","promises","result","modelMetadata","e_2_1","e_2","Object","values","syncPredicate","prevSyncPredicate","syncPredicateUpdated_1","_f","_g","getPredicates","JSON","stringify","all","modelsMetadata","query","predicate","createFromAST","and","eq","limit","namespaceName","getNamespace","enums","OperationType","nonModels","pluralName","fields","id","isRequired","isArray","modelId","operation","enum","listen","source","payload","event","connectionState","ConnectionDisrupted","Connected","scheduleSync"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/sync/index.js"],"sourcesContent":["import { __awaiter, __generator, __read, __spread, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { browserOrNode, ConsoleLogger as Logger, BackgroundProcessManager, Hub, } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG, CONNECTION_STATE_CHANGE as PUBSUB_CONNECTION_STATE_CHANGE, ConnectionState, } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ModelPredicateCreator } from '../predicates';\nimport { OpType, } from '../types';\nimport { getNow, SYNC, USER } from '../util';\nimport DataStoreConnectivity from './datastoreConnectivity';\nimport { ModelMerger } from './merger';\nimport { MutationEventOutbox } from './outbox';\nimport { MutationProcessor } from './processors/mutation';\nimport { CONTROL_MSG, SubscriptionProcessor } from './processors/subscription';\nimport { SyncProcessor } from './processors/sync';\nimport { createMutationInstanceFromModelOperation, getIdentifierValue, predicateToGraphQLCondition, } from './utils';\nvar isNode = browserOrNode().isNode;\nvar logger = new Logger('DataStore');\nvar ownSymbol = Symbol('sync');\nexport var ControlMessage;\n(function (ControlMessage) {\n    ControlMessage[\"SYNC_ENGINE_STORAGE_SUBSCRIBED\"] = \"storageSubscribed\";\n    ControlMessage[\"SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED\"] = \"subscriptionsEstablished\";\n    ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_STARTED\"] = \"syncQueriesStarted\";\n    ControlMessage[\"SYNC_ENGINE_SYNC_QUERIES_READY\"] = \"syncQueriesReady\";\n    ControlMessage[\"SYNC_ENGINE_MODEL_SYNCED\"] = \"modelSynced\";\n    ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED\"] = \"outboxMutationEnqueued\";\n    ControlMessage[\"SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED\"] = \"outboxMutationProcessed\";\n    ControlMessage[\"SYNC_ENGINE_OUTBOX_STATUS\"] = \"outboxStatus\";\n    ControlMessage[\"SYNC_ENGINE_NETWORK_STATUS\"] = \"networkStatus\";\n    ControlMessage[\"SYNC_ENGINE_READY\"] = \"ready\";\n})(ControlMessage || (ControlMessage = {}));\nvar SyncEngine = /** @class */ (function () {\n    function SyncEngine(schema, namespaceResolver, modelClasses, userModelClasses, storage, modelInstanceCreator, conflictHandler, errorHandler, syncPredicates, amplifyConfig, authModeStrategy, amplifyContext, connectivityMonitor) {\n        var _this = this;\n        if (amplifyConfig === void 0) { amplifyConfig = {}; }\n        this.schema = schema;\n        this.namespaceResolver = namespaceResolver;\n        this.modelClasses = modelClasses;\n        this.userModelClasses = userModelClasses;\n        this.storage = storage;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.syncPredicates = syncPredicates;\n        this.amplifyConfig = amplifyConfig;\n        this.authModeStrategy = authModeStrategy;\n        this.amplifyContext = amplifyContext;\n        this.connectivityMonitor = connectivityMonitor;\n        this.online = false;\n        this.modelSyncedStatus = new WeakMap();\n        this.connectionDisrupted = false;\n        this.runningProcesses = new BackgroundProcessManager();\n        this.waitForSleepState = new Promise(function (resolve) {\n            _this.syncQueriesObservableStartSleeping = resolve;\n        });\n        var MutationEvent = this.modelClasses['MutationEvent'];\n        this.outbox = new MutationEventOutbox(this.schema, MutationEvent, modelInstanceCreator, ownSymbol);\n        this.modelMerger = new ModelMerger(this.outbox, ownSymbol);\n        this.syncQueriesProcessor = new SyncProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);\n        this.subscriptionsProcessor = new SubscriptionProcessor(this.schema, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, errorHandler, this.amplifyContext);\n        this.mutationsProcessor = new MutationProcessor(this.schema, this.storage, this.userModelClasses, this.outbox, this.modelInstanceCreator, MutationEvent, this.amplifyConfig, this.authModeStrategy, errorHandler, conflictHandler, this.amplifyContext);\n        this.datastoreConnectivity =\n            this.connectivityMonitor || new DataStoreConnectivity();\n    }\n    SyncEngine.prototype.getModelSyncedStatus = function (modelConstructor) {\n        return this.modelSyncedStatus.get(modelConstructor);\n    };\n    SyncEngine.prototype.start = function (params) {\n        var _this = this;\n        return new Observable(function (observer) {\n            logger.log('starting sync engine...');\n            var subscriptions = [];\n            _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                var err_1, startPromise, hasMutationsInOutbox;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            _a.trys.push([0, 2, , 3]);\n                            return [4 /*yield*/, this.setupModels(params)];\n                        case 1:\n                            _a.sent();\n                            return [3 /*break*/, 3];\n                        case 2:\n                            err_1 = _a.sent();\n                            observer.error(err_1);\n                            return [2 /*return*/];\n                        case 3:\n                            startPromise = new Promise(function (doneStarting, failedStarting) {\n                                _this.datastoreConnectivity.status().subscribe(function (_a) {\n                                    var online = _a.online;\n                                    return __awaiter(_this, void 0, void 0, function () {\n                                        var _this = this;\n                                        return __generator(this, function (_b) {\n                                            return [2 /*return*/, this.runningProcesses.isOpen &&\n                                                    this.runningProcesses.add(function (onTerminate) { return __awaiter(_this, void 0, void 0, function () {\n                                                        var ctlSubsObservable_1, dataSubsObservable, err_2, error_1;\n                                                        var _a;\n                                                        var _this = this;\n                                                        return __generator(this, function (_b) {\n                                                            switch (_b.label) {\n                                                                case 0:\n                                                                    if (!(online && !this.online)) return [3 /*break*/, 10];\n                                                                    this.online = online;\n                                                                    observer.next({\n                                                                        type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                                                        data: {\n                                                                            active: this.online,\n                                                                        },\n                                                                    });\n                                                                    dataSubsObservable = void 0;\n                                                                    if (!isNode) return [3 /*break*/, 1];\n                                                                    logger.warn('Realtime disabled when in a server-side environment');\n                                                                    return [3 /*break*/, 6];\n                                                                case 1:\n                                                                    this.stopDisruptionListener =\n                                                                        this.startDisruptionListener();\n                                                                    //#region GraphQL Subscriptions\n                                                                    _a = __read(this.subscriptionsProcessor.start(), 2), ctlSubsObservable_1 = _a[0], dataSubsObservable = _a[1];\n                                                                    _b.label = 2;\n                                                                case 2:\n                                                                    _b.trys.push([2, 4, , 5]);\n                                                                    return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                                                            onTerminate.then(reject);\n                                                                            var ctlSubsSubscription = ctlSubsObservable_1.subscribe({\n                                                                                next: function (msg) {\n                                                                                    if (msg === CONTROL_MSG.CONNECTED) {\n                                                                                        resolve();\n                                                                                    }\n                                                                                },\n                                                                                error: function (err) {\n                                                                                    reject(err);\n                                                                                    var handleDisconnect = _this.disconnectionHandler();\n                                                                                    handleDisconnect(err);\n                                                                                },\n                                                                            });\n                                                                            subscriptions.push(ctlSubsSubscription);\n                                                                        })];\n                                                                case 3:\n                                                                    _b.sent();\n                                                                    return [3 /*break*/, 5];\n                                                                case 4:\n                                                                    err_2 = _b.sent();\n                                                                    observer.error(err_2);\n                                                                    failedStarting();\n                                                                    return [2 /*return*/];\n                                                                case 5:\n                                                                    logger.log('Realtime ready');\n                                                                    observer.next({\n                                                                        type: ControlMessage.SYNC_ENGINE_SUBSCRIPTIONS_ESTABLISHED,\n                                                                    });\n                                                                    _b.label = 6;\n                                                                case 6:\n                                                                    _b.trys.push([6, 8, , 9]);\n                                                                    return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                                                            var syncQuerySubscription = _this.syncQueriesObservable().subscribe({\n                                                                                next: function (message) {\n                                                                                    var type = message.type;\n                                                                                    if (type ===\n                                                                                        ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY) {\n                                                                                        resolve();\n                                                                                    }\n                                                                                    observer.next(message);\n                                                                                },\n                                                                                complete: function () {\n                                                                                    resolve();\n                                                                                },\n                                                                                error: function (error) {\n                                                                                    reject(error);\n                                                                                },\n                                                                            });\n                                                                            if (syncQuerySubscription) {\n                                                                                subscriptions.push(syncQuerySubscription);\n                                                                            }\n                                                                        })];\n                                                                case 7:\n                                                                    _b.sent();\n                                                                    return [3 /*break*/, 9];\n                                                                case 8:\n                                                                    error_1 = _b.sent();\n                                                                    observer.error(error_1);\n                                                                    failedStarting();\n                                                                    return [2 /*return*/];\n                                                                case 9:\n                                                                    //#endregion\n                                                                    //#region process mutations (outbox)\n                                                                    subscriptions.push(this.mutationsProcessor\n                                                                        .start()\n                                                                        .subscribe(function (_a) {\n                                                                        var modelDefinition = _a.modelDefinition, item = _a.model, hasMore = _a.hasMore;\n                                                                        return _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                                                                            var modelConstructor, model;\n                                                                            var _this = this;\n                                                                            return __generator(this, function (_a) {\n                                                                                switch (_a.label) {\n                                                                                    case 0:\n                                                                                        modelConstructor = this.userModelClasses[modelDefinition.name];\n                                                                                        model = this.modelInstanceCreator(modelConstructor, item);\n                                                                                        return [4 /*yield*/, this.storage.runExclusive(function (storage) {\n                                                                                                return _this.modelMerger.merge(storage, model, modelDefinition);\n                                                                                            })];\n                                                                                    case 1:\n                                                                                        _a.sent();\n                                                                                        observer.next({\n                                                                                            type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_PROCESSED,\n                                                                                            data: {\n                                                                                                model: modelConstructor,\n                                                                                                element: model,\n                                                                                            },\n                                                                                        });\n                                                                                        observer.next({\n                                                                                            type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                                                                            data: {\n                                                                                                isEmpty: !hasMore,\n                                                                                            },\n                                                                                        });\n                                                                                        return [2 /*return*/];\n                                                                                }\n                                                                            });\n                                                                        }); }, 'mutation processor event');\n                                                                    }));\n                                                                    //#endregion\n                                                                    //#region Merge subscriptions buffer\n                                                                    // TODO: extract to function\n                                                                    if (!isNode) {\n                                                                        subscriptions.push(dataSubsObservable.subscribe(function (_a) {\n                                                                            var _b = __read(_a, 3), _transformerMutationType = _b[0], modelDefinition = _b[1], item = _b[2];\n                                                                            return _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                                                                                var modelConstructor, model;\n                                                                                var _this = this;\n                                                                                return __generator(this, function (_a) {\n                                                                                    switch (_a.label) {\n                                                                                        case 0:\n                                                                                            modelConstructor = this.userModelClasses[modelDefinition.name];\n                                                                                            model = this.modelInstanceCreator(modelConstructor, item);\n                                                                                            return [4 /*yield*/, this.storage.runExclusive(function (storage) {\n                                                                                                    return _this.modelMerger.merge(storage, model, modelDefinition);\n                                                                                                })];\n                                                                                        case 1:\n                                                                                            _a.sent();\n                                                                                            return [2 /*return*/];\n                                                                                    }\n                                                                                });\n                                                                            }); }, 'subscription dataSubsObservable event');\n                                                                        }));\n                                                                    }\n                                                                    return [3 /*break*/, 11];\n                                                                case 10:\n                                                                    if (!online) {\n                                                                        this.online = online;\n                                                                        observer.next({\n                                                                            type: ControlMessage.SYNC_ENGINE_NETWORK_STATUS,\n                                                                            data: {\n                                                                                active: this.online,\n                                                                            },\n                                                                        });\n                                                                        subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n                                                                        subscriptions = [];\n                                                                    }\n                                                                    _b.label = 11;\n                                                                case 11:\n                                                                    doneStarting();\n                                                                    return [2 /*return*/];\n                                                            }\n                                                        });\n                                                    }); }, 'datastore connectivity event')];\n                                        });\n                                    });\n                                });\n                            });\n                            this.storage\n                                .observe(null, null, ownSymbol)\n                                .filter(function (_a) {\n                                var model = _a.model;\n                                var modelDefinition = _this.getModelDefinition(model);\n                                return modelDefinition.syncable === true;\n                            })\n                                .subscribe({\n                                next: function (_a) {\n                                    var opType = _a.opType, model = _a.model, element = _a.element, condition = _a.condition;\n                                    return __awaiter(_this, void 0, void 0, function () {\n                                        var _this = this;\n                                        return __generator(this, function (_b) {\n                                            return [2 /*return*/, this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                                                    var namespace, MutationEventConstructor, modelDefinition, graphQLCondition, mutationEvent;\n                                                    return __generator(this, function (_a) {\n                                                        switch (_a.label) {\n                                                            case 0:\n                                                                namespace = this.schema.namespaces[this.namespaceResolver(model)];\n                                                                MutationEventConstructor = this.modelClasses['MutationEvent'];\n                                                                modelDefinition = this.getModelDefinition(model);\n                                                                graphQLCondition = predicateToGraphQLCondition(condition, modelDefinition);\n                                                                mutationEvent = createMutationInstanceFromModelOperation(namespace.relationships, this.getModelDefinition(model), opType, model, element, graphQLCondition, MutationEventConstructor, this.modelInstanceCreator);\n                                                                return [4 /*yield*/, this.outbox.enqueue(this.storage, mutationEvent)];\n                                                            case 1:\n                                                                _a.sent();\n                                                                observer.next({\n                                                                    type: ControlMessage.SYNC_ENGINE_OUTBOX_MUTATION_ENQUEUED,\n                                                                    data: {\n                                                                        model: model,\n                                                                        element: element,\n                                                                    },\n                                                                });\n                                                                observer.next({\n                                                                    type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                                                    data: {\n                                                                        isEmpty: false,\n                                                                    },\n                                                                });\n                                                                return [4 /*yield*/, startPromise];\n                                                            case 2:\n                                                                _a.sent();\n                                                                // Set by the this.datastoreConnectivity.status().subscribe() loop\n                                                                if (this.online) {\n                                                                    this.mutationsProcessor.resume();\n                                                                }\n                                                                return [2 /*return*/];\n                                                        }\n                                                    });\n                                                }); }, 'storage event')];\n                                        });\n                                    });\n                                },\n                            });\n                            observer.next({\n                                type: ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED,\n                            });\n                            return [4 /*yield*/, this.outbox.peek(this.storage)];\n                        case 4:\n                            hasMutationsInOutbox = (_a.sent()) === undefined;\n                            observer.next({\n                                type: ControlMessage.SYNC_ENGINE_OUTBOX_STATUS,\n                                data: {\n                                    isEmpty: hasMutationsInOutbox,\n                                },\n                            });\n                            return [4 /*yield*/, startPromise];\n                        case 5:\n                            _a.sent();\n                            observer.next({\n                                type: ControlMessage.SYNC_ENGINE_READY,\n                            });\n                            return [2 /*return*/];\n                    }\n                });\n            }); }, 'sync start');\n        });\n    };\n    SyncEngine.prototype.getModelsMetadataWithNextFullSync = function (currentTimeStamp) {\n        return __awaiter(this, void 0, void 0, function () {\n            var modelLastSync, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = Map.bind;\n                        return [4 /*yield*/, this.runningProcesses.add(function () { return _this.getModelsMetadata(); }, 'sync/index getModelsMetadataWithNextFullSync')];\n                    case 1:\n                        modelLastSync = new (_a.apply(Map, [void 0, (_b.sent()).map(function (_a) {\n                                var namespace = _a.namespace, model = _a.model, lastSync = _a.lastSync, lastFullSync = _a.lastFullSync, fullSyncInterval = _a.fullSyncInterval, lastSyncPredicate = _a.lastSyncPredicate;\n                                var nextFullSync = lastFullSync + fullSyncInterval;\n                                var syncFrom = !lastFullSync || nextFullSync < currentTimeStamp\n                                    ? 0 // perform full sync if expired\n                                    : lastSync; // perform delta sync\n                                return [\n                                    _this.schema.namespaces[namespace].models[model],\n                                    [namespace, syncFrom],\n                                ];\n                            })]))();\n                        return [2 /*return*/, modelLastSync];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.syncQueriesObservable = function () {\n        var _this = this;\n        if (!this.online) {\n            return Observable.of();\n        }\n        return new Observable(function (observer) {\n            var syncQueriesSubscription;\n            _this.runningProcesses.isOpen &&\n                _this.runningProcesses.add(function (onTerminate) { return __awaiter(_this, void 0, void 0, function () {\n                    var terminated, _loop_1, this_1;\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                terminated = false;\n                                _loop_1 = function () {\n                                    var count, modelLastSync, paginatingModels, lastFullSyncStartedAt, syncInterval, start, syncDuration, lastStartedAt, msNextFullSync;\n                                    return __generator(this, function (_a) {\n                                        switch (_a.label) {\n                                            case 0:\n                                                count = new WeakMap();\n                                                return [4 /*yield*/, this_1.getModelsMetadataWithNextFullSync(Date.now())];\n                                            case 1:\n                                                modelLastSync = _a.sent();\n                                                paginatingModels = new Set(modelLastSync.keys());\n                                                return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                                        if (!_this.runningProcesses.isOpen)\n                                                            resolve();\n                                                        onTerminate.then(function () { return resolve(); });\n                                                        syncQueriesSubscription = _this.syncQueriesProcessor\n                                                            .start(modelLastSync)\n                                                            .subscribe({\n                                                            next: function (_a) {\n                                                                var namespace = _a.namespace, modelDefinition = _a.modelDefinition, items = _a.items, done = _a.done, startedAt = _a.startedAt, isFullSync = _a.isFullSync;\n                                                                return __awaiter(_this, void 0, void 0, function () {\n                                                                    var modelConstructor, modelName, modelMetadata_1, lastFullSync, fullSyncInterval, counts;\n                                                                    var _this = this;\n                                                                    return __generator(this, function (_b) {\n                                                                        switch (_b.label) {\n                                                                            case 0:\n                                                                                modelConstructor = this.userModelClasses[modelDefinition.name];\n                                                                                if (!count.has(modelConstructor)) {\n                                                                                    count.set(modelConstructor, {\n                                                                                        new: 0,\n                                                                                        updated: 0,\n                                                                                        deleted: 0,\n                                                                                    });\n                                                                                    start = getNow();\n                                                                                    lastStartedAt =\n                                                                                        lastStartedAt === undefined\n                                                                                            ? startedAt\n                                                                                            : Math.max(lastStartedAt, startedAt);\n                                                                                }\n                                                                                /**\n                                                                                 * If there are mutations in the outbox for a given id, those need to be\n                                                                                 * merged individually. Otherwise, we can merge them in batches.\n                                                                                 */\n                                                                                return [4 /*yield*/, this.storage.runExclusive(function (storage) { return __awaiter(_this, void 0, void 0, function () {\n                                                                                        var idsInOutbox, oneByOne, page, opTypeCount, oneByOne_1, oneByOne_1_1, item, opType, e_1_1, _a, _b, _c, counts;\n                                                                                        var e_1, _d;\n                                                                                        return __generator(this, function (_e) {\n                                                                                            switch (_e.label) {\n                                                                                                case 0: return [4 /*yield*/, this.outbox.getModelIds(storage)];\n                                                                                                case 1:\n                                                                                                    idsInOutbox = _e.sent();\n                                                                                                    oneByOne = [];\n                                                                                                    page = items.filter(function (item) {\n                                                                                                        var itemId = getIdentifierValue(modelDefinition, item);\n                                                                                                        if (!idsInOutbox.has(itemId)) {\n                                                                                                            return true;\n                                                                                                        }\n                                                                                                        oneByOne.push(item);\n                                                                                                        return false;\n                                                                                                    });\n                                                                                                    opTypeCount = [];\n                                                                                                    _e.label = 2;\n                                                                                                case 2:\n                                                                                                    _e.trys.push([2, 7, 8, 9]);\n                                                                                                    oneByOne_1 = __values(oneByOne), oneByOne_1_1 = oneByOne_1.next();\n                                                                                                    _e.label = 3;\n                                                                                                case 3:\n                                                                                                    if (!!oneByOne_1_1.done) return [3 /*break*/, 6];\n                                                                                                    item = oneByOne_1_1.value;\n                                                                                                    return [4 /*yield*/, this.modelMerger.merge(storage, item, modelDefinition)];\n                                                                                                case 4:\n                                                                                                    opType = _e.sent();\n                                                                                                    if (opType !== undefined) {\n                                                                                                        opTypeCount.push([item, opType]);\n                                                                                                    }\n                                                                                                    _e.label = 5;\n                                                                                                case 5:\n                                                                                                    oneByOne_1_1 = oneByOne_1.next();\n                                                                                                    return [3 /*break*/, 3];\n                                                                                                case 6: return [3 /*break*/, 9];\n                                                                                                case 7:\n                                                                                                    e_1_1 = _e.sent();\n                                                                                                    e_1 = { error: e_1_1 };\n                                                                                                    return [3 /*break*/, 9];\n                                                                                                case 8:\n                                                                                                    try {\n                                                                                                        if (oneByOne_1_1 && !oneByOne_1_1.done && (_d = oneByOne_1.return)) _d.call(oneByOne_1);\n                                                                                                    }\n                                                                                                    finally { if (e_1) throw e_1.error; }\n                                                                                                    return [7 /*endfinally*/];\n                                                                                                case 9:\n                                                                                                    _b = (_a = opTypeCount.push).apply;\n                                                                                                    _c = [opTypeCount];\n                                                                                                    return [4 /*yield*/, this.modelMerger.mergePage(storage, modelConstructor, page, modelDefinition)];\n                                                                                                case 10:\n                                                                                                    _b.apply(_a, _c.concat([__spread.apply(void 0, [(_e.sent())])]));\n                                                                                                    counts = count.get(modelConstructor);\n                                                                                                    opTypeCount.forEach(function (_a) {\n                                                                                                        var _b = __read(_a, 2), opType = _b[1];\n                                                                                                        switch (opType) {\n                                                                                                            case OpType.INSERT:\n                                                                                                                counts.new++;\n                                                                                                                break;\n                                                                                                            case OpType.UPDATE:\n                                                                                                                counts.updated++;\n                                                                                                                break;\n                                                                                                            case OpType.DELETE:\n                                                                                                                counts.deleted++;\n                                                                                                                break;\n                                                                                                            default:\n                                                                                                                throw new Error(\"Invalid opType \" + opType);\n                                                                                                        }\n                                                                                                    });\n                                                                                                    return [2 /*return*/];\n                                                                                            }\n                                                                                        });\n                                                                                    }); })];\n                                                                            case 1:\n                                                                                /**\n                                                                                 * If there are mutations in the outbox for a given id, those need to be\n                                                                                 * merged individually. Otherwise, we can merge them in batches.\n                                                                                 */\n                                                                                _b.sent();\n                                                                                if (!done) return [3 /*break*/, 4];\n                                                                                modelName = modelDefinition.name;\n                                                                                return [4 /*yield*/, this.getModelMetadata(namespace, modelName)];\n                                                                            case 2:\n                                                                                modelMetadata_1 = _b.sent();\n                                                                                lastFullSync = modelMetadata_1.lastFullSync, fullSyncInterval = modelMetadata_1.fullSyncInterval;\n                                                                                syncInterval = fullSyncInterval;\n                                                                                lastFullSyncStartedAt =\n                                                                                    lastFullSyncStartedAt === undefined\n                                                                                        ? lastFullSync\n                                                                                        : Math.max(lastFullSyncStartedAt, isFullSync ? startedAt : lastFullSync);\n                                                                                modelMetadata_1 = this.modelClasses\n                                                                                    .ModelMetadata.copyOf(modelMetadata_1, function (draft) {\n                                                                                    draft.lastSync = startedAt;\n                                                                                    draft.lastFullSync = isFullSync\n                                                                                        ? startedAt\n                                                                                        : modelMetadata_1.lastFullSync;\n                                                                                });\n                                                                                return [4 /*yield*/, this.storage.save(modelMetadata_1, undefined, ownSymbol)];\n                                                                            case 3:\n                                                                                _b.sent();\n                                                                                counts = count.get(modelConstructor);\n                                                                                this.modelSyncedStatus.set(modelConstructor, true);\n                                                                                observer.next({\n                                                                                    type: ControlMessage.SYNC_ENGINE_MODEL_SYNCED,\n                                                                                    data: {\n                                                                                        model: modelConstructor,\n                                                                                        isFullSync: isFullSync,\n                                                                                        isDeltaSync: !isFullSync,\n                                                                                        counts: counts,\n                                                                                    },\n                                                                                });\n                                                                                paginatingModels.delete(modelDefinition);\n                                                                                if (paginatingModels.size === 0) {\n                                                                                    syncDuration = getNow() - start;\n                                                                                    resolve();\n                                                                                    observer.next({\n                                                                                        type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY,\n                                                                                    });\n                                                                                    syncQueriesSubscription.unsubscribe();\n                                                                                }\n                                                                                _b.label = 4;\n                                                                            case 4: return [2 /*return*/];\n                                                                        }\n                                                                    });\n                                                                });\n                                                            },\n                                                            error: function (error) {\n                                                                observer.error(error);\n                                                            },\n                                                        });\n                                                        observer.next({\n                                                            type: ControlMessage.SYNC_ENGINE_SYNC_QUERIES_STARTED,\n                                                            data: {\n                                                                models: Array.from(paginatingModels).map(function (_a) {\n                                                                    var name = _a.name;\n                                                                    return name;\n                                                                }),\n                                                            },\n                                                        });\n                                                    })];\n                                            case 2:\n                                                _a.sent();\n                                                if (!lastFullSyncStartedAt) {\n                                                    msNextFullSync = syncInterval - syncDuration;\n                                                }\n                                                else {\n                                                    msNextFullSync =\n                                                        lastFullSyncStartedAt +\n                                                            syncInterval -\n                                                            (lastStartedAt + syncDuration);\n                                                }\n                                                logger.debug(\"Next fullSync in \" + msNextFullSync / 1000 + \" seconds. (\" + new Date(Date.now() + msNextFullSync) + \")\");\n                                                // TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n                                                // a lot of thought into what that contract looks like to\n                                                //  support possible use-cases:\n                                                //\n                                                //  1. non-cancelable\n                                                //  2. cancelable, unsleep on exit()\n                                                //  3. cancelable, throw Error on exit()\n                                                //  4. cancelable, callback first on exit()?\n                                                //  5. ... etc. ? ...\n                                                //\n                                                // TLDR; this is a lot of complexity here for a sleep(),\n                                                // but, it's not clear to me yet how to support an\n                                                // extensible, centralized cancelable `sleep()` elegantly.\n                                                return [4 /*yield*/, this_1.runningProcesses.add(function (onTerminate) { return __awaiter(_this, void 0, void 0, function () {\n                                                        var sleepTimer, unsleep, sleep;\n                                                        var _this = this;\n                                                        return __generator(this, function (_a) {\n                                                            sleep = new Promise(function (_unsleep) {\n                                                                unsleep = _unsleep;\n                                                                sleepTimer = setTimeout(unsleep, msNextFullSync);\n                                                            });\n                                                            onTerminate.then(function () {\n                                                                terminated = true;\n                                                                _this.syncQueriesObservableStartSleeping();\n                                                                unsleep();\n                                                            });\n                                                            this.unsleepSyncQueriesObservable = unsleep;\n                                                            this.syncQueriesObservableStartSleeping();\n                                                            return [2 /*return*/, sleep];\n                                                        });\n                                                    }); }, 'syncQueriesObservable sleep')];\n                                            case 3:\n                                                // TODO: create `BackgroundProcessManager.sleep()` ... but, need to put\n                                                // a lot of thought into what that contract looks like to\n                                                //  support possible use-cases:\n                                                //\n                                                //  1. non-cancelable\n                                                //  2. cancelable, unsleep on exit()\n                                                //  3. cancelable, throw Error on exit()\n                                                //  4. cancelable, callback first on exit()?\n                                                //  5. ... etc. ? ...\n                                                //\n                                                // TLDR; this is a lot of complexity here for a sleep(),\n                                                // but, it's not clear to me yet how to support an\n                                                // extensible, centralized cancelable `sleep()` elegantly.\n                                                _a.sent();\n                                                this_1.unsleepSyncQueriesObservable = null;\n                                                this_1.waitForSleepState = new Promise(function (resolve) {\n                                                    _this.syncQueriesObservableStartSleeping = resolve;\n                                                });\n                                                return [2 /*return*/];\n                                        }\n                                    });\n                                };\n                                this_1 = this;\n                                _a.label = 1;\n                            case 1:\n                                if (!(!observer.closed && !terminated)) return [3 /*break*/, 3];\n                                return [5 /*yield**/, _loop_1()];\n                            case 2:\n                                _a.sent();\n                                return [3 /*break*/, 1];\n                            case 3: return [2 /*return*/];\n                        }\n                    });\n                }); }, 'syncQueriesObservable main');\n        });\n    };\n    SyncEngine.prototype.disconnectionHandler = function () {\n        var _this = this;\n        return function (msg) {\n            // This implementation is tied to AWSAppSyncRealTimeProvider 'Connection closed', 'Timeout disconnect' msg\n            if (PUBSUB_CONTROL_MSG.CONNECTION_CLOSED === msg ||\n                PUBSUB_CONTROL_MSG.TIMEOUT_DISCONNECT === msg) {\n                _this.datastoreConnectivity.socketDisconnected();\n            }\n        };\n    };\n    SyncEngine.prototype.unsubscribeConnectivity = function () {\n        this.datastoreConnectivity.unsubscribe();\n    };\n    /**\n     * Stops all subscription activities and resolves when all activies report\n     * that they're disconnected, done retrying, etc..\n     */\n    SyncEngine.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('stopping sync engine');\n                        /**\n                         * Gracefully disconnecting subscribers first just prevents *more* work\n                         * from entering the pipelines.\n                         */\n                        this.unsubscribeConnectivity();\n                        /**\n                         * Stop listening for websocket connection disruption\n                         */\n                        this.stopDisruptionListener && this.stopDisruptionListener();\n                        /**\n                         * aggressively shut down any lingering background processes.\n                         * some of this might be semi-redundant with unsubscribing. however,\n                         * unsubscribing doesn't allow us to wait for settling.\n                         * (Whereas `stop()` does.)\n                         */\n                        return [4 /*yield*/, this.mutationsProcessor.stop()];\n                    case 1:\n                        /**\n                         * aggressively shut down any lingering background processes.\n                         * some of this might be semi-redundant with unsubscribing. however,\n                         * unsubscribing doesn't allow us to wait for settling.\n                         * (Whereas `stop()` does.)\n                         */\n                        _a.sent();\n                        return [4 /*yield*/, this.subscriptionsProcessor.stop()];\n                    case 2:\n                        _a.sent();\n                        return [4 /*yield*/, this.datastoreConnectivity.stop()];\n                    case 3:\n                        _a.sent();\n                        return [4 /*yield*/, this.syncQueriesProcessor.stop()];\n                    case 4:\n                        _a.sent();\n                        return [4 /*yield*/, this.runningProcesses.close()];\n                    case 5:\n                        _a.sent();\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 6:\n                        _a.sent();\n                        logger.debug('sync engine stopped and ready to restart');\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.setupModels = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fullSyncInterval, ModelMetadataConstructor, models, savedModel, promises, result, _a, _b, modelMetadata, modelName, e_2_1;\n            var e_2, _c;\n            var _this = this;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        fullSyncInterval = params.fullSyncInterval;\n                        ModelMetadataConstructor = this.modelClasses\n                            .ModelMetadata;\n                        models = [];\n                        Object.values(this.schema.namespaces).forEach(function (namespace) {\n                            Object.values(namespace.models)\n                                .filter(function (_a) {\n                                var syncable = _a.syncable;\n                                return syncable;\n                            })\n                                .forEach(function (model) {\n                                models.push([namespace.name, model]);\n                                if (namespace.name === USER) {\n                                    var modelConstructor = _this.userModelClasses[model.name];\n                                    _this.modelSyncedStatus.set(modelConstructor, false);\n                                }\n                            });\n                        });\n                        promises = models.map(function (_a) {\n                            var _b = __read(_a, 2), namespace = _b[0], model = _b[1];\n                            return __awaiter(_this, void 0, void 0, function () {\n                                var modelMetadata, syncPredicate, lastSyncPredicate, prevSyncPredicate, syncPredicateUpdated_1;\n                                var _c, _d, _e, _f;\n                                return __generator(this, function (_g) {\n                                    switch (_g.label) {\n                                        case 0: return [4 /*yield*/, this.getModelMetadata(namespace, model.name)];\n                                        case 1:\n                                            modelMetadata = _g.sent();\n                                            syncPredicate = ModelPredicateCreator.getPredicates(this.syncPredicates.get(model), false);\n                                            lastSyncPredicate = syncPredicate\n                                                ? JSON.stringify(syncPredicate)\n                                                : null;\n                                            if (!(modelMetadata === undefined)) return [3 /*break*/, 3];\n                                            return [4 /*yield*/, this.storage.save(this.modelInstanceCreator(ModelMetadataConstructor, {\n                                                    model: model.name,\n                                                    namespace: namespace,\n                                                    lastSync: null,\n                                                    fullSyncInterval: fullSyncInterval,\n                                                    lastFullSync: null,\n                                                    lastSyncPredicate: lastSyncPredicate,\n                                                }), undefined, ownSymbol)];\n                                        case 2:\n                                            _c = __read.apply(void 0, [_g.sent(), 1]), _d = __read(_c[0], 1), savedModel = _d[0];\n                                            return [3 /*break*/, 5];\n                                        case 3:\n                                            prevSyncPredicate = modelMetadata.lastSyncPredicate\n                                                ? modelMetadata.lastSyncPredicate\n                                                : null;\n                                            syncPredicateUpdated_1 = prevSyncPredicate !== lastSyncPredicate;\n                                            return [4 /*yield*/, this.storage.save(ModelMetadataConstructor.copyOf(modelMetadata, function (draft) {\n                                                    draft.fullSyncInterval = fullSyncInterval;\n                                                    // perform a base sync if the syncPredicate changed in between calls to DataStore.start\n                                                    // ensures that the local store contains all the data specified by the syncExpression\n                                                    if (syncPredicateUpdated_1) {\n                                                        draft.lastSync = null;\n                                                        draft.lastFullSync = null;\n                                                        draft.lastSyncPredicate = lastSyncPredicate;\n                                                    }\n                                                }))];\n                                        case 4:\n                                            _e = __read.apply(void 0, [_g.sent(), 1]), _f = __read(_e[0], 1), savedModel = _f[0];\n                                            _g.label = 5;\n                                        case 5: return [2 /*return*/, savedModel];\n                                    }\n                                });\n                            });\n                        });\n                        result = {};\n                        _d.label = 1;\n                    case 1:\n                        _d.trys.push([1, 6, 7, 8]);\n                        return [4 /*yield*/, Promise.all(promises)];\n                    case 2:\n                        _a = __values.apply(void 0, [_d.sent()]), _b = _a.next();\n                        _d.label = 3;\n                    case 3:\n                        if (!!_b.done) return [3 /*break*/, 5];\n                        modelMetadata = _b.value;\n                        modelName = modelMetadata.model;\n                        result[modelName] = modelMetadata;\n                        _d.label = 4;\n                    case 4:\n                        _b = _a.next();\n                        return [3 /*break*/, 3];\n                    case 5: return [3 /*break*/, 8];\n                    case 6:\n                        e_2_1 = _d.sent();\n                        e_2 = { error: e_2_1 };\n                        return [3 /*break*/, 8];\n                    case 7:\n                        try {\n                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n                        }\n                        finally { if (e_2) throw e_2.error; }\n                        return [7 /*endfinally*/];\n                    case 8: return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelsMetadata = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var ModelMetadata, modelsMetadata;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        return [4 /*yield*/, this.storage.query(ModelMetadata)];\n                    case 1:\n                        modelsMetadata = _a.sent();\n                        return [2 /*return*/, modelsMetadata];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelMetadata = function (namespace, model) {\n        return __awaiter(this, void 0, void 0, function () {\n            var ModelMetadata, predicate, _a, modelMetadata;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        ModelMetadata = this.modelClasses\n                            .ModelMetadata;\n                        predicate = ModelPredicateCreator.createFromAST(this.schema.namespaces[SYNC].models[ModelMetadata.name], { and: [{ namespace: { eq: namespace } }, { model: { eq: model } }] });\n                        return [4 /*yield*/, this.storage.query(ModelMetadata, predicate, {\n                                page: 0,\n                                limit: 1,\n                            })];\n                    case 1:\n                        _a = __read.apply(void 0, [_b.sent(), 1]), modelMetadata = _a[0];\n                        return [2 /*return*/, modelMetadata];\n                }\n            });\n        });\n    };\n    SyncEngine.prototype.getModelDefinition = function (modelConstructor) {\n        var namespaceName = this.namespaceResolver(modelConstructor);\n        var modelDefinition = this.schema.namespaces[namespaceName].models[modelConstructor.name];\n        return modelDefinition;\n    };\n    SyncEngine.getNamespace = function () {\n        var namespace = {\n            name: SYNC,\n            relationships: {},\n            enums: {\n                OperationType: {\n                    name: 'OperationType',\n                    values: ['CREATE', 'UPDATE', 'DELETE'],\n                },\n            },\n            nonModels: {},\n            models: {\n                MutationEvent: {\n                    name: 'MutationEvent',\n                    pluralName: 'MutationEvents',\n                    syncable: false,\n                    fields: {\n                        id: {\n                            name: 'id',\n                            type: 'ID',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        model: {\n                            name: 'model',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        data: {\n                            name: 'data',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        modelId: {\n                            name: 'modelId',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        operation: {\n                            name: 'operation',\n                            type: {\n                                enum: 'Operationtype',\n                            },\n                            isArray: false,\n                            isRequired: true,\n                        },\n                        condition: {\n                            name: 'condition',\n                            type: 'String',\n                            isArray: false,\n                            isRequired: true,\n                        },\n                    },\n                },\n                ModelMetadata: {\n                    name: 'ModelMetadata',\n                    pluralName: 'ModelsMetadata',\n                    syncable: false,\n                    fields: {\n                        id: {\n                            name: 'id',\n                            type: 'ID',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        namespace: {\n                            name: 'namespace',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        model: {\n                            name: 'model',\n                            type: 'String',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        lastSync: {\n                            name: 'lastSync',\n                            type: 'Int',\n                            isRequired: false,\n                            isArray: false,\n                        },\n                        lastFullSync: {\n                            name: 'lastFullSync',\n                            type: 'Int',\n                            isRequired: false,\n                            isArray: false,\n                        },\n                        fullSyncInterval: {\n                            name: 'fullSyncInterval',\n                            type: 'Int',\n                            isRequired: true,\n                            isArray: false,\n                        },\n                        lastSyncPredicate: {\n                            name: 'lastSyncPredicate',\n                            type: 'String',\n                            isRequired: false,\n                            isArray: false,\n                        },\n                    },\n                },\n            },\n        };\n        return namespace;\n    };\n    /**\n     * listen for websocket connection disruption\n     *\n     * May indicate there was a period of time where messages\n     * from AppSync were missed. A sync needs to be triggered to\n     * retrieve the missed data.\n     */\n    SyncEngine.prototype.startDisruptionListener = function () {\n        var _this = this;\n        return Hub.listen('api', function (data) {\n            if (data.source === 'PubSub' &&\n                data.payload.event === PUBSUB_CONNECTION_STATE_CHANGE) {\n                var connectionState = data.payload.data\n                    .connectionState;\n                switch (connectionState) {\n                    // Do not need to listen for ConnectionDisruptedPendingNetwork\n                    // Normal network reconnection logic will handle the sync\n                    case ConnectionState.ConnectionDisrupted:\n                        _this.connectionDisrupted = true;\n                        break;\n                    case ConnectionState.Connected:\n                        if (_this.connectionDisrupted) {\n                            _this.scheduleSync();\n                        }\n                        _this.connectionDisrupted = false;\n                        break;\n                }\n            }\n        });\n    };\n    /*\n     * Schedule a sync to start when syncQueriesObservable enters sleep state\n     * Start sync immediately if syncQueriesObservable is already in sleep state\n     */\n    SyncEngine.prototype.scheduleSync = function () {\n        var _this = this;\n        return (this.runningProcesses.isOpen &&\n            this.runningProcesses.add(function () {\n                return _this.waitForSleepState.then(function () {\n                    // unsleepSyncQueriesObservable will be set if waitForSleepState has resolved\n                    _this.unsleepSyncQueriesObservable();\n                });\n            }));\n    };\n    return SyncEngine;\n}());\nexport { SyncEngine };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}