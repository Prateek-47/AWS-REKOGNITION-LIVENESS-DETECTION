{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction transpose_(x, perm) {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n\n  util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` + ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    perm\n  };\n  return ENGINE.runKernel(Transpose, inputs, attrs);\n}\n\nexport const transpose = op({\n  transpose_\n});","map":{"version":3,"names":["ENGINE","Transpose","convertToTensor","util","op","transpose_","x","perm","$x","shape","map","s","i","reverse","assert","rank","length","forEach","axis","clone","inputs","attrs","runKernel","transpose"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-core/dist/ops/transpose.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_(x, perm) {\n    const $x = convertToTensor(x, 'x', 'transpose');\n    if (perm == null) {\n        perm = $x.shape.map((s, i) => i).reverse();\n    }\n    util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` +\n        `must match length of perm ${perm}.`);\n    perm.forEach(axis => {\n        util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n    });\n    if ($x.rank <= 1) {\n        return $x.clone();\n    }\n    const inputs = { x: $x };\n    const attrs = { perm };\n    return ENGINE.runKernel(Transpose, inputs, attrs);\n}\nexport const transpose = op({ transpose_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBC,CAApB,EAAuBC,IAAvB,EAA6B;EACzB,MAAMC,EAAE,GAAGN,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;;EACA,IAAIC,IAAI,IAAI,IAAZ,EAAkB;IACdA,IAAI,GAAGC,EAAE,CAACC,KAAH,CAASC,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAvB,EAA0BC,OAA1B,EAAP;EACH;;EACDV,IAAI,CAACW,MAAL,CAAYN,EAAE,CAACO,IAAH,KAAYR,IAAI,CAACS,MAA7B,EAAqC,MAAO,qCAAoCR,EAAE,CAACO,IAAK,GAA7C,GACtC,6BAA4BR,IAAK,GADtC;EAEAA,IAAI,CAACU,OAAL,CAAaC,IAAI,IAAI;IACjBf,IAAI,CAACW,MAAL,CAAYI,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAGV,EAAE,CAACO,IAAnC,EAAyC,MAAO,+CAA8CP,EAAE,CAACO,IAAH,GAAU,CAAE,EAA3D,GAC1C,YAAWR,IAAK,EADrB;EAEH,CAHD;;EAIA,IAAIC,EAAE,CAACO,IAAH,IAAW,CAAf,EAAkB;IACd,OAAOP,EAAE,CAACW,KAAH,EAAP;EACH;;EACD,MAAMC,MAAM,GAAG;IAAEd,CAAC,EAAEE;EAAL,CAAf;EACA,MAAMa,KAAK,GAAG;IAAEd;EAAF,CAAd;EACA,OAAOP,MAAM,CAACsB,SAAP,CAAiBrB,SAAjB,EAA4BmB,MAA5B,EAAoCC,KAApC,CAAP;AACH;;AACD,OAAO,MAAME,SAAS,GAAGnB,EAAE,CAAC;EAAEC;AAAF,CAAD,CAApB"},"metadata":{},"sourceType":"module"}