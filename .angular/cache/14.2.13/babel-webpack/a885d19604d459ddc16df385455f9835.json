{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'TopKV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const k = getParamValue('k', node, tensorMap, context);\n        const sorted = getParamValue('sorted', node, tensorMap, context);\n        const result = tfOps.topk(x, k, sorted);\n        return [result.values, result.indices];\n      }\n\n    case 'Unique':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const result = tfOps.unique(x);\n        return [result.values, result.indices];\n      }\n\n    case 'UniqueV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const result = tfOps.unique(x, axis);\n        return [result.values, result.indices];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'evaluation';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","x","k","sorted","result","topk","values","indices","unique","axis","TypeError","CATEGORY"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'TopKV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const k = getParamValue('k', node, tensorMap, context);\n            const sorted = getParamValue('sorted', node, tensorMap, context);\n            const result = tfOps.topk(x, k, sorted);\n            return [result.values, result.indices];\n        }\n        case 'Unique': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const result = tfOps.unique(x);\n            return [result.values, result.indices];\n        }\n        case 'UniqueV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const result = tfOps.unique(x, axis);\n            return [result.values, result.indices];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'evaluation';\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAZ,MAAuB,kDAAvB;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,OAAlB,KAA8B;EACnD,QAAQF,IAAI,CAACG,EAAb;IACI,KAAK,QAAL;MAAe;QACX,MAAMC,CAAC,GAAGN,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;QACA,MAAMG,CAAC,GAAGP,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;QACA,MAAMI,MAAM,GAAGR,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CAA5B;QACA,MAAMK,MAAM,GAAGV,KAAK,CAACW,IAAN,CAAWJ,CAAX,EAAcC,CAAd,EAAiBC,MAAjB,CAAf;QACA,OAAO,CAACC,MAAM,CAACE,MAAR,EAAgBF,MAAM,CAACG,OAAvB,CAAP;MACH;;IACD,KAAK,QAAL;MAAe;QACX,MAAMN,CAAC,GAAGN,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;QACA,MAAMK,MAAM,GAAGV,KAAK,CAACc,MAAN,CAAaP,CAAb,CAAf;QACA,OAAO,CAACG,MAAM,CAACE,MAAR,EAAgBF,MAAM,CAACG,OAAvB,CAAP;MACH;;IACD,KAAK,UAAL;MAAiB;QACb,MAAMN,CAAC,GAAGN,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;QACA,MAAMU,IAAI,GAAGd,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;QACA,MAAMK,MAAM,GAAGV,KAAK,CAACc,MAAN,CAAaP,CAAb,EAAgBQ,IAAhB,CAAf;QACA,OAAO,CAACL,MAAM,CAACE,MAAR,EAAgBF,MAAM,CAACG,OAAvB,CAAP;MACH;;IACD;MACI,MAAMG,SAAS,CAAE,aAAYb,IAAI,CAACG,EAAG,qBAAtB,CAAf;EApBR;AAsBH,CAvBM;AAwBP,OAAO,MAAMW,QAAQ,GAAG,YAAjB"},"metadata":{},"sourceType":"module"}