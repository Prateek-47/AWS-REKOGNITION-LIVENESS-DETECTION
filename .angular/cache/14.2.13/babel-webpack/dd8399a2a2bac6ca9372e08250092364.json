{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nimport { transpose } from './Transpose';\nlet wasmCumsum;\n\nfunction setup(backend) {\n  wasmCumsum = backend.wasm.cwrap(Cumsum, null\n  /* void */\n  , ['number', 'number', 'number', 'number', 'number', 'number' // dtype\n  ]);\n}\n\nexport function cumsum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    exclusive,\n    reverse\n  } = attrs;\n  const xRank = x.shape.length;\n  util.assert(x.dtype === 'float32' || x.dtype === 'int32', () => `cumsum does not support ${x.dtype} tensors in the WASM backend`); // permute required axis to inner most axis\n\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n\n  if (permutation !== null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      attrs: {\n        perm: permutation\n      },\n      backend\n    });\n  }\n\n  const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n  backend_util.assertAxesAreInnerMostDims('cumsum', [permutedAxis], xRank);\n  const permutedOut = backend.makeOutput(permutedX.shape, permutedX.dtype);\n  const finalDim = permutedX.shape[permutedAxis];\n  const permutedXId = backend.dataIdMap.get(permutedX.dataId).id;\n  const permutedOutId = backend.dataIdMap.get(permutedOut.dataId).id;\n  wasmCumsum(permutedXId, exclusive ? 1 : 0, reverse ? 1 : 0, finalDim, permutedOutId, CppDType[x.dtype]); // transpose data back if permuted\n\n  let out = permutedOut;\n\n  if (permutation !== null) {\n    const undoPermutation = backend_util.getUndoAxesPermutation(permutation);\n    out = transpose({\n      inputs: {\n        x: permutedOut\n      },\n      attrs: {\n        perm: undoPermutation\n      },\n      backend\n    });\n    backend.disposeData(permutedX.dataId);\n    backend.disposeData(permutedOut.dataId);\n  }\n\n  return out;\n}\nexport const cumsumConfig = {\n  kernelName: Cumsum,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: cumsum\n};","map":{"version":3,"names":["backend_util","Cumsum","util","CppDType","transpose","wasmCumsum","setup","backend","wasm","cwrap","cumsum","args","inputs","attrs","x","axis","exclusive","reverse","xRank","shape","length","assert","dtype","permutation","getAxesPermutation","permutedX","perm","permutedAxis","getInnerMostAxes","assertAxesAreInnerMostDims","permutedOut","makeOutput","finalDim","permutedXId","dataIdMap","get","dataId","id","permutedOutId","out","undoPermutation","getUndoAxesPermutation","disposeData","cumsumConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Cumsum.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nimport { transpose } from './Transpose';\nlet wasmCumsum;\nfunction setup(backend) {\n    wasmCumsum = backend.wasm.cwrap(Cumsum, null /* void */, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number' // dtype\n    ]);\n}\nexport function cumsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    const xRank = x.shape.length;\n    util.assert(x.dtype === 'float32' || x.dtype === 'int32', () => `cumsum does not support ${x.dtype} tensors in the WASM backend`);\n    // permute required axis to inner most axis\n    const permutation = backend_util.getAxesPermutation([axis], xRank);\n    let permutedX = x;\n    if (permutation !== null) {\n        permutedX = transpose({ inputs: { x }, attrs: { perm: permutation }, backend });\n    }\n    const permutedAxis = backend_util.getInnerMostAxes(1, xRank)[0];\n    backend_util.assertAxesAreInnerMostDims('cumsum', [permutedAxis], xRank);\n    const permutedOut = backend.makeOutput(permutedX.shape, permutedX.dtype);\n    const finalDim = permutedX.shape[permutedAxis];\n    const permutedXId = backend.dataIdMap.get(permutedX.dataId).id;\n    const permutedOutId = backend.dataIdMap.get(permutedOut.dataId).id;\n    wasmCumsum(permutedXId, exclusive ? 1 : 0, reverse ? 1 : 0, finalDim, permutedOutId, CppDType[x.dtype]);\n    // transpose data back if permuted\n    let out = permutedOut;\n    if (permutation !== null) {\n        const undoPermutation = backend_util.getUndoAxesPermutation(permutation);\n        out = transpose({ inputs: { x: permutedOut }, attrs: { perm: undoPermutation }, backend });\n        backend.disposeData(permutedX.dataId);\n        backend.disposeData(permutedOut.dataId);\n    }\n    return out;\n}\nexport const cumsumConfig = {\n    kernelName: Cumsum,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: cumsum\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}