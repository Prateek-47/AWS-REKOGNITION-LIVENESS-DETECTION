{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n  return predicatesAllSet.has(predicate);\n}\n/**\n * The valid logical grouping keys for a predicate group.\n */\n\nvar groupKeys = new Set(['and', 'or', 'not']);\n/**\n * Determines whether an object is a GraphQL style predicate \"group\", which must be an\n * object containing a single \"group key\", which then contains the child condition(s).\n *\n * E.g.,\n *\n * ```\n * { and: [ ... ] }\n * { not: { ... } }\n * ```\n *\n * @param o The object to test.\n */\n\nvar isGroup = function (o) {\n  var keys = __spread(Object.keys(o));\n\n  return keys.length === 1 && groupKeys.has(keys[0]);\n};\n/**\n * Determines whether an object specifies no conditions and should match everything,\n * as would be the case with `Predicates.ALL`.\n *\n * @param o The object to test.\n */\n\n\nvar isEmpty = function (o) {\n  return !Array.isArray(o) && Object.keys(o).length === 0;\n};\n/**\n * The valid comparison operators that can be used as keys in a predicate comparison object.\n */\n\n\nexport var comparisonKeys = new Set(['eq', 'ne', 'gt', 'lt', 'ge', 'le', 'contains', 'notContains', 'beginsWith', 'between']);\n/**\n * Determines whether an object is a GraphQL style predicate comparison node, which must\n * be an object containing a single \"comparison operator\" key, which then contains the\n * operand or operands to compare against.\n *\n * @param o The object to test.\n */\n\nvar isComparison = function (o) {\n  var keys = __spread(Object.keys(o));\n\n  return !Array.isArray(o) && keys.length === 1 && comparisonKeys.has(keys[0]);\n};\n/**\n * A light check to determine whether an object is a valid GraphQL Condition AST.\n *\n * @param o The object to test.\n */\n\n\nvar isValid = function (o) {\n  if (Array.isArray(o)) {\n    return o.every(function (v) {\n      return isValid(v);\n    });\n  } else {\n    return Object.keys(o).length <= 1;\n  }\n}; // This symbol is not used at runtime, only its type (unique symbol)\n\n\nexport var PredicateAll = Symbol('A predicate that matches all records');\n\nvar Predicates =\n/** @class */\nfunction () {\n  function Predicates() {}\n\n  Object.defineProperty(Predicates, \"ALL\", {\n    get: function () {\n      var predicate = function (c) {\n        return c;\n      };\n\n      predicatesAllSet.add(predicate);\n      return predicate;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return Predicates;\n}();\n\nexport { Predicates };\n\nvar ModelPredicateCreator =\n/** @class */\nfunction () {\n  function ModelPredicateCreator() {}\n  /**\n   * Determines whether the given storage predicate (lookup key) is a predicate\n   * key that DataStore recognizes.\n   *\n   * @param predicate The storage predicate (lookup key) to test.\n   */\n\n\n  ModelPredicateCreator.isValidPredicate = function (predicate) {\n    return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n  };\n  /**\n   * Looks for the storage predicate AST that corresponds to a given storage\n   * predicate key.\n   *\n   * The key must have been created internally by a DataStore utility\n   * method, such as `ModelPredicate.createFromAST()`.\n   *\n   * @param predicate The predicate reference to look up.\n   * @param throwOnInvalid Whether to throw an exception if the predicate\n   * isn't a valid DataStore predicate.\n   */\n\n\n  ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n    if (throwOnInvalid === void 0) {\n      throwOnInvalid = true;\n    }\n\n    if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n      throw new Error('The predicate is not valid');\n    }\n\n    return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n  };\n  /**\n   * using the PK values from the given `model` (which can be a partial of T\n   * Creates a predicate that matches an instance described by `modelDefinition`\n   * that contains only PK field values.)\n   *\n   * @param modelDefinition The model definition to create a predicate for.\n   * @param model The model instance to extract value equalities from.\n   */\n\n\n  ModelPredicateCreator.createForPk = function (modelDefinition, model) {\n    var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n    var keyValues = extractPrimaryKeyValues(model, keyFields);\n    var predicate = this.createFromAST(modelDefinition, {\n      and: keyFields.map(function (field, idx) {\n        var _a;\n\n        var operand = keyValues[idx];\n        return _a = {}, _a[field] = {\n          eq: operand\n        }, _a;\n      })\n    });\n    return predicate;\n  };\n  /**\n   * Searches a `Model` table for records matching the given equalities object.\n   *\n   * This only matches against fields given in the equalities object. No other\n   * fields are tested by the predicate.\n   *\n   * @param modelDefinition The model we need a predicate for.\n   * @param flatEqualities An object holding field equalities to search for.\n   */\n\n\n  ModelPredicateCreator.createFromFlatEqualities = function (modelDefinition, flatEqualities) {\n    var ast = {\n      and: Object.entries(flatEqualities).map(function (_a) {\n        var _b;\n\n        var _c = __read(_a, 2),\n            k = _c[0],\n            v = _c[1];\n\n        return _b = {}, _b[k] = {\n          eq: v\n        }, _b;\n      })\n    };\n    return this.createFromAST(modelDefinition, ast);\n  };\n  /**\n   * Accepts a GraphQL style filter predicate tree and transforms it into an\n   * AST that can be used for a storage adapter predicate. Example input:\n   *\n   * ```js\n   * {\n   * \tand: [\n   * \t\t{ name: { eq: \"Bob Jones\" } },\n   * \t\t{ age: { between: [32, 64] } },\n   * \t\t{ not: {\n   * \t\t\tor: [\n   * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n   * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n   * \t\t\t]\n   * \t\t}}\n   * \t]\n   * }\n   * ```\n   *\n   * @param gql GraphQL style filter node.\n   */\n\n\n  ModelPredicateCreator.transformGraphQLFilterNodeToPredicateAST = function (gql) {\n    var _this = this;\n\n    if (!isValid(gql)) {\n      throw new Error('Invalid GraphQL Condition or subtree: ' + JSON.stringify(gql));\n    }\n\n    if (isEmpty(gql)) {\n      return {\n        type: 'and',\n        predicates: []\n      };\n    } else if (isGroup(gql)) {\n      var groupkey = Object.keys(gql)[0];\n      var children = this.transformGraphQLFilterNodeToPredicateAST(gql[groupkey]);\n      return {\n        type: groupkey,\n        predicates: Array.isArray(children) ? children : [children]\n      };\n    } else if (isComparison(gql)) {\n      var operatorKey = Object.keys(gql)[0];\n      return {\n        operator: operatorKey,\n        operand: gql[operatorKey]\n      };\n    } else {\n      if (Array.isArray(gql)) {\n        return gql.map(function (o) {\n          return _this.transformGraphQLFilterNodeToPredicateAST(o);\n        });\n      } else {\n        var fieldKey = Object.keys(gql)[0];\n        return __assign({\n          field: fieldKey\n        }, this.transformGraphQLFilterNodeToPredicateAST(gql[fieldKey]));\n      }\n    }\n  };\n  /**\n   * Accepts a GraphQL style filter predicate tree and transforms it into a predicate\n   * that storage adapters understand. Example input:\n   *\n   * ```js\n   * {\n   * \tand: [\n   * \t\t{ name: { eq: \"Bob Jones\" } },\n   * \t\t{ age: { between: [32, 64] } },\n   * \t\t{ not: {\n   * \t\t\tor: [\n   * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n   * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n   * \t\t\t]\n   * \t\t}}\n   * \t]\n   * }\n   * ```\n   *\n   * @param modelDefinition The model that the AST/predicate must be compatible with.\n   * @param ast The graphQL style AST that should specify conditions for `modelDefinition`.\n   */\n\n\n  ModelPredicateCreator.createFromAST = function (modelDefinition, ast) {\n    var key = {};\n    ModelPredicateCreator.predicateGroupsMap.set(key, this.transformGraphQLFilterNodeToPredicateAST(ast));\n    return key;\n  };\n  /**\n   * Map of storage predicates (key objects) to storage predicate AST's.\n   */\n\n\n  ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n  return ModelPredicateCreator;\n}();\n\nexport { ModelPredicateCreator };","map":{"version":3,"names":["__assign","__read","__spread","extractPrimaryKeyFieldNames","extractPrimaryKeyValues","ModelSortPredicateCreator","predicatesAllSet","WeakSet","isPredicatesAll","predicate","has","groupKeys","Set","isGroup","o","keys","Object","length","isEmpty","Array","isArray","comparisonKeys","isComparison","isValid","every","v","PredicateAll","Symbol","Predicates","defineProperty","get","c","add","enumerable","configurable","ModelPredicateCreator","isValidPredicate","predicateGroupsMap","getPredicates","throwOnInvalid","Error","createForPk","modelDefinition","model","keyFields","keyValues","createFromAST","and","map","field","idx","_a","operand","eq","createFromFlatEqualities","flatEqualities","ast","entries","_b","_c","k","transformGraphQLFilterNodeToPredicateAST","gql","_this","JSON","stringify","type","predicates","groupkey","children","operatorKey","operator","fieldKey","key","set","WeakMap"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/predicates/index.js"],"sourcesContent":["import { __assign, __read, __spread } from \"tslib\";\nimport { extractPrimaryKeyFieldNames, extractPrimaryKeyValues } from '../util';\nexport { ModelSortPredicateCreator } from './sort';\nvar predicatesAllSet = new WeakSet();\nexport function isPredicatesAll(predicate) {\n    return predicatesAllSet.has(predicate);\n}\n/**\n * The valid logical grouping keys for a predicate group.\n */\nvar groupKeys = new Set(['and', 'or', 'not']);\n/**\n * Determines whether an object is a GraphQL style predicate \"group\", which must be an\n * object containing a single \"group key\", which then contains the child condition(s).\n *\n * E.g.,\n *\n * ```\n * { and: [ ... ] }\n * { not: { ... } }\n * ```\n *\n * @param o The object to test.\n */\nvar isGroup = function (o) {\n    var keys = __spread(Object.keys(o));\n    return keys.length === 1 && groupKeys.has(keys[0]);\n};\n/**\n * Determines whether an object specifies no conditions and should match everything,\n * as would be the case with `Predicates.ALL`.\n *\n * @param o The object to test.\n */\nvar isEmpty = function (o) {\n    return !Array.isArray(o) && Object.keys(o).length === 0;\n};\n/**\n * The valid comparison operators that can be used as keys in a predicate comparison object.\n */\nexport var comparisonKeys = new Set([\n    'eq',\n    'ne',\n    'gt',\n    'lt',\n    'ge',\n    'le',\n    'contains',\n    'notContains',\n    'beginsWith',\n    'between',\n]);\n/**\n * Determines whether an object is a GraphQL style predicate comparison node, which must\n * be an object containing a single \"comparison operator\" key, which then contains the\n * operand or operands to compare against.\n *\n * @param o The object to test.\n */\nvar isComparison = function (o) {\n    var keys = __spread(Object.keys(o));\n    return !Array.isArray(o) && keys.length === 1 && comparisonKeys.has(keys[0]);\n};\n/**\n * A light check to determine whether an object is a valid GraphQL Condition AST.\n *\n * @param o The object to test.\n */\nvar isValid = function (o) {\n    if (Array.isArray(o)) {\n        return o.every(function (v) { return isValid(v); });\n    }\n    else {\n        return Object.keys(o).length <= 1;\n    }\n};\n// This symbol is not used at runtime, only its type (unique symbol)\nexport var PredicateAll = Symbol('A predicate that matches all records');\nvar Predicates = /** @class */ (function () {\n    function Predicates() {\n    }\n    Object.defineProperty(Predicates, \"ALL\", {\n        get: function () {\n            var predicate = (function (c) { return c; });\n            predicatesAllSet.add(predicate);\n            return predicate;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Predicates;\n}());\nexport { Predicates };\nvar ModelPredicateCreator = /** @class */ (function () {\n    function ModelPredicateCreator() {\n    }\n    /**\n     * Determines whether the given storage predicate (lookup key) is a predicate\n     * key that DataStore recognizes.\n     *\n     * @param predicate The storage predicate (lookup key) to test.\n     */\n    ModelPredicateCreator.isValidPredicate = function (predicate) {\n        return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n    };\n    /**\n     * Looks for the storage predicate AST that corresponds to a given storage\n     * predicate key.\n     *\n     * The key must have been created internally by a DataStore utility\n     * method, such as `ModelPredicate.createFromAST()`.\n     *\n     * @param predicate The predicate reference to look up.\n     * @param throwOnInvalid Whether to throw an exception if the predicate\n     * isn't a valid DataStore predicate.\n     */\n    ModelPredicateCreator.getPredicates = function (predicate, throwOnInvalid) {\n        if (throwOnInvalid === void 0) { throwOnInvalid = true; }\n        if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n            throw new Error('The predicate is not valid');\n        }\n        return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n    };\n    /**\n     * using the PK values from the given `model` (which can be a partial of T\n     * Creates a predicate that matches an instance described by `modelDefinition`\n     * that contains only PK field values.)\n     *\n     * @param modelDefinition The model definition to create a predicate for.\n     * @param model The model instance to extract value equalities from.\n     */\n    ModelPredicateCreator.createForPk = function (modelDefinition, model) {\n        var keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n        var keyValues = extractPrimaryKeyValues(model, keyFields);\n        var predicate = this.createFromAST(modelDefinition, {\n            and: keyFields.map(function (field, idx) {\n                var _a;\n                var operand = keyValues[idx];\n                return _a = {}, _a[field] = { eq: operand }, _a;\n            }),\n        });\n        return predicate;\n    };\n    /**\n     * Searches a `Model` table for records matching the given equalities object.\n     *\n     * This only matches against fields given in the equalities object. No other\n     * fields are tested by the predicate.\n     *\n     * @param modelDefinition The model we need a predicate for.\n     * @param flatEqualities An object holding field equalities to search for.\n     */\n    ModelPredicateCreator.createFromFlatEqualities = function (modelDefinition, flatEqualities) {\n        var ast = {\n            and: Object.entries(flatEqualities).map(function (_a) {\n                var _b;\n                var _c = __read(_a, 2), k = _c[0], v = _c[1];\n                return (_b = {}, _b[k] = { eq: v }, _b);\n            }),\n        };\n        return this.createFromAST(modelDefinition, ast);\n    };\n    /**\n     * Accepts a GraphQL style filter predicate tree and transforms it into an\n     * AST that can be used for a storage adapter predicate. Example input:\n     *\n     * ```js\n     * {\n     * \tand: [\n     * \t\t{ name: { eq: \"Bob Jones\" } },\n     * \t\t{ age: { between: [32, 64] } },\n     * \t\t{ not: {\n     * \t\t\tor: [\n     * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n     * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n     * \t\t\t]\n     * \t\t}}\n     * \t]\n     * }\n     * ```\n     *\n     * @param gql GraphQL style filter node.\n     */\n    ModelPredicateCreator.transformGraphQLFilterNodeToPredicateAST = function (gql) {\n        var _this = this;\n        if (!isValid(gql)) {\n            throw new Error('Invalid GraphQL Condition or subtree: ' + JSON.stringify(gql));\n        }\n        if (isEmpty(gql)) {\n            return {\n                type: 'and',\n                predicates: [],\n            };\n        }\n        else if (isGroup(gql)) {\n            var groupkey = Object.keys(gql)[0];\n            var children = this.transformGraphQLFilterNodeToPredicateAST(gql[groupkey]);\n            return {\n                type: groupkey,\n                predicates: Array.isArray(children) ? children : [children],\n            };\n        }\n        else if (isComparison(gql)) {\n            var operatorKey = Object.keys(gql)[0];\n            return {\n                operator: operatorKey,\n                operand: gql[operatorKey],\n            };\n        }\n        else {\n            if (Array.isArray(gql)) {\n                return gql.map(function (o) { return _this.transformGraphQLFilterNodeToPredicateAST(o); });\n            }\n            else {\n                var fieldKey = Object.keys(gql)[0];\n                return __assign({ field: fieldKey }, this.transformGraphQLFilterNodeToPredicateAST(gql[fieldKey]));\n            }\n        }\n    };\n    /**\n     * Accepts a GraphQL style filter predicate tree and transforms it into a predicate\n     * that storage adapters understand. Example input:\n     *\n     * ```js\n     * {\n     * \tand: [\n     * \t\t{ name: { eq: \"Bob Jones\" } },\n     * \t\t{ age: { between: [32, 64] } },\n     * \t\t{ not: {\n     * \t\t\tor: [\n     * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n     * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n     * \t\t\t]\n     * \t\t}}\n     * \t]\n     * }\n     * ```\n     *\n     * @param modelDefinition The model that the AST/predicate must be compatible with.\n     * @param ast The graphQL style AST that should specify conditions for `modelDefinition`.\n     */\n    ModelPredicateCreator.createFromAST = function (modelDefinition, ast) {\n        var key = {};\n        ModelPredicateCreator.predicateGroupsMap.set(key, this.transformGraphQLFilterNodeToPredicateAST(ast));\n        return key;\n    };\n    /**\n     * Map of storage predicates (key objects) to storage predicate AST's.\n     */\n    ModelPredicateCreator.predicateGroupsMap = new WeakMap();\n    return ModelPredicateCreator;\n}());\nexport { ModelPredicateCreator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}