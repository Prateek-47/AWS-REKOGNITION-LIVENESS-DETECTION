{"ast":null,"code":"import { __read, __spread, __values } from \"tslib\";\n\nvar connectionTimeout = function (error) {\n  return /^Connection failed: Connection Timeout/.test(error.message);\n};\n\nvar serverError = function (error) {\n  return /^Error: Request failed with status code 5\\d\\d/.test(error.message);\n};\n\nexport var mutationErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function (error) {\n    var message = error.message;\n    return /^Cannot return \\w+ for [\\w-_]+ type/.test(message) || /^Variable '.+' has coerced Null value for NonNull type/.test(message); // newly required field, out of date client\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (error) {\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (error) {\n    return error.message === 'Unauthorized' || /^Request failed with status code 401/.test(error.message);\n  }\n};\nexport var subscriptionErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function () {\n    return false;\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (observableError) {\n    var error = unwrapObservableError(observableError);\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (observableError) {\n    var error = unwrapObservableError(observableError);\n    return /Connection failed.+Unauthorized/.test(error.message);\n  }\n};\nexport var syncErrorMap = {\n  BadModel: function () {\n    return false;\n  },\n  BadRecord: function (error) {\n    return /^Cannot return \\w+ for [\\w-_]+ type/.test(error.message);\n  },\n  ConfigError: function () {\n    return false;\n  },\n  Transient: function (error) {\n    return connectionTimeout(error) || serverError(error);\n  },\n  Unauthorized: function (error) {\n    return error.errorType === 'Unauthorized';\n  }\n};\n/**\n * Get the first error reason of an observable.\n * Allows for error maps to be easily applied to observable errors\n *\n * @param observableError an error from ZenObservable subscribe error callback\n */\n\nfunction unwrapObservableError(observableError) {\n  var _a = observableError.error,\n      _b = __read((_a === void 0 ? {\n    errors: []\n  } : _a).errors, 1),\n      error = _b[0];\n\n  return error;\n}\n\nexport function getMutationErrorType(error) {\n  return mapErrorToType(mutationErrorMap, error);\n}\nexport function getSubscriptionErrorType(error) {\n  return mapErrorToType(subscriptionErrorMap, error);\n}\nexport function getSyncErrorType(error) {\n  return mapErrorToType(syncErrorMap, error);\n}\n/**\n * Categorizes an error with a broad error type, intended to make\n * customer error handling code simpler.\n * @param errorMap Error names and a list of patterns that indicate them (each pattern as a regex or function)\n * @param error The underying error to categorize.\n */\n\nexport function mapErrorToType(errorMap, error) {\n  var e_1, _a;\n\n  var errorTypes = __spread(Object.keys(errorMap));\n\n  try {\n    for (var errorTypes_1 = __values(errorTypes), errorTypes_1_1 = errorTypes_1.next(); !errorTypes_1_1.done; errorTypes_1_1 = errorTypes_1.next()) {\n      var errorType = errorTypes_1_1.value;\n      var matcher = errorMap[errorType];\n\n      if (matcher === null || matcher === void 0 ? void 0 : matcher(error)) {\n        return errorType;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (errorTypes_1_1 && !errorTypes_1_1.done && (_a = errorTypes_1.return)) _a.call(errorTypes_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return 'Unknown';\n}","map":{"version":3,"names":["__read","__spread","__values","connectionTimeout","error","test","message","serverError","mutationErrorMap","BadModel","BadRecord","ConfigError","Transient","Unauthorized","subscriptionErrorMap","observableError","unwrapObservableError","syncErrorMap","errorType","_a","_b","errors","getMutationErrorType","mapErrorToType","getSubscriptionErrorType","getSyncErrorType","errorMap","e_1","errorTypes","Object","keys","errorTypes_1","errorTypes_1_1","next","done","value","matcher","e_1_1","return","call"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/sync/processors/errorMaps.js"],"sourcesContent":["import { __read, __spread, __values } from \"tslib\";\nvar connectionTimeout = function (error) {\n    return /^Connection failed: Connection Timeout/.test(error.message);\n};\nvar serverError = function (error) {\n    return /^Error: Request failed with status code 5\\d\\d/.test(error.message);\n};\nexport var mutationErrorMap = {\n    BadModel: function () { return false; },\n    BadRecord: function (error) {\n        var message = error.message;\n        return (/^Cannot return \\w+ for [\\w-_]+ type/.test(message) ||\n            /^Variable '.+' has coerced Null value for NonNull type/.test(message)); // newly required field, out of date client\n    },\n    ConfigError: function () { return false; },\n    Transient: function (error) { return connectionTimeout(error) || serverError(error); },\n    Unauthorized: function (error) {\n        return error.message === 'Unauthorized' ||\n            /^Request failed with status code 401/.test(error.message);\n    },\n};\nexport var subscriptionErrorMap = {\n    BadModel: function () { return false; },\n    BadRecord: function () { return false; },\n    ConfigError: function () { return false; },\n    Transient: function (observableError) {\n        var error = unwrapObservableError(observableError);\n        return connectionTimeout(error) || serverError(error);\n    },\n    Unauthorized: function (observableError) {\n        var error = unwrapObservableError(observableError);\n        return /Connection failed.+Unauthorized/.test(error.message);\n    },\n};\nexport var syncErrorMap = {\n    BadModel: function () { return false; },\n    BadRecord: function (error) { return /^Cannot return \\w+ for [\\w-_]+ type/.test(error.message); },\n    ConfigError: function () { return false; },\n    Transient: function (error) { return connectionTimeout(error) || serverError(error); },\n    Unauthorized: function (error) { return error.errorType === 'Unauthorized'; },\n};\n/**\n * Get the first error reason of an observable.\n * Allows for error maps to be easily applied to observable errors\n *\n * @param observableError an error from ZenObservable subscribe error callback\n */\nfunction unwrapObservableError(observableError) {\n    var _a = observableError.error, _b = __read((_a === void 0 ? {\n        errors: [],\n    } : _a).errors, 1), error = _b[0];\n    return error;\n}\nexport function getMutationErrorType(error) {\n    return mapErrorToType(mutationErrorMap, error);\n}\nexport function getSubscriptionErrorType(error) {\n    return mapErrorToType(subscriptionErrorMap, error);\n}\nexport function getSyncErrorType(error) {\n    return mapErrorToType(syncErrorMap, error);\n}\n/**\n * Categorizes an error with a broad error type, intended to make\n * customer error handling code simpler.\n * @param errorMap Error names and a list of patterns that indicate them (each pattern as a regex or function)\n * @param error The underying error to categorize.\n */\nexport function mapErrorToType(errorMap, error) {\n    var e_1, _a;\n    var errorTypes = __spread(Object.keys(errorMap));\n    try {\n        for (var errorTypes_1 = __values(errorTypes), errorTypes_1_1 = errorTypes_1.next(); !errorTypes_1_1.done; errorTypes_1_1 = errorTypes_1.next()) {\n            var errorType = errorTypes_1_1.value;\n            var matcher = errorMap[errorType];\n            if (matcher === null || matcher === void 0 ? void 0 : matcher(error)) {\n                return errorType;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (errorTypes_1_1 && !errorTypes_1_1.done && (_a = errorTypes_1.return)) _a.call(errorTypes_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return 'Unknown';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}