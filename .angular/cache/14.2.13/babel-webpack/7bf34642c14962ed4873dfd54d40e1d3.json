{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { EMPTY_HASH, UNSIGNED_PAYLOAD } from '../constants';\nimport { getHashedDataAsHex } from './dataHashHelpers';\n/**\n * Returns the hashed payload.\n *\n * @param body `body` (payload) from the request.\n * @returns String created using the payload in the body of the HTTP request as input to a hash function. This string\n * uses lowercase hexadecimal characters. If the payload is empty, return precalculated result of an empty hash.\n *\n * @internal\n */\n\nexport var getHashedPayload = function (body) {\n  // return precalculated empty hash if body is undefined or null\n  if (body == null) {\n    return EMPTY_HASH;\n  }\n\n  if (isSourceData(body)) {\n    var hashedData = getHashedDataAsHex(null, body);\n    return hashedData;\n  } // Defined body is not signable. Return unsigned payload which may or may not be accepted by the service.\n\n\n  return UNSIGNED_PAYLOAD;\n};\n\nvar isSourceData = function (body) {\n  return typeof body === 'string' || ArrayBuffer.isView(body) || isArrayBuffer(body);\n};\n\nvar isArrayBuffer = function (arg) {\n  return typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === '[object ArrayBuffer]';\n};","map":{"version":3,"names":["EMPTY_HASH","UNSIGNED_PAYLOAD","getHashedDataAsHex","getHashedPayload","body","isSourceData","hashedData","ArrayBuffer","isView","isArrayBuffer","arg","Object","prototype","toString","call"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getHashedPayload.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { EMPTY_HASH, UNSIGNED_PAYLOAD } from '../constants';\nimport { getHashedDataAsHex } from './dataHashHelpers';\n/**\n * Returns the hashed payload.\n *\n * @param body `body` (payload) from the request.\n * @returns String created using the payload in the body of the HTTP request as input to a hash function. This string\n * uses lowercase hexadecimal characters. If the payload is empty, return precalculated result of an empty hash.\n *\n * @internal\n */\nexport var getHashedPayload = function (body) {\n    // return precalculated empty hash if body is undefined or null\n    if (body == null) {\n        return EMPTY_HASH;\n    }\n    if (isSourceData(body)) {\n        var hashedData = getHashedDataAsHex(null, body);\n        return hashedData;\n    }\n    // Defined body is not signable. Return unsigned payload which may or may not be accepted by the service.\n    return UNSIGNED_PAYLOAD;\n};\nvar isSourceData = function (body) {\n    return typeof body === 'string' || ArrayBuffer.isView(body) || isArrayBuffer(body);\n};\nvar isArrayBuffer = function (arg) {\n    return (typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer) ||\n        Object.prototype.toString.call(arg) === '[object ArrayBuffer]';\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,UAAT,EAAqBC,gBAArB,QAA6C,cAA7C;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,gBAAgB,GAAG,UAAUC,IAAV,EAAgB;EAC1C;EACA,IAAIA,IAAI,IAAI,IAAZ,EAAkB;IACd,OAAOJ,UAAP;EACH;;EACD,IAAIK,YAAY,CAACD,IAAD,CAAhB,EAAwB;IACpB,IAAIE,UAAU,GAAGJ,kBAAkB,CAAC,IAAD,EAAOE,IAAP,CAAnC;IACA,OAAOE,UAAP;EACH,CARyC,CAS1C;;;EACA,OAAOL,gBAAP;AACH,CAXM;;AAYP,IAAII,YAAY,GAAG,UAAUD,IAAV,EAAgB;EAC/B,OAAO,OAAOA,IAAP,KAAgB,QAAhB,IAA4BG,WAAW,CAACC,MAAZ,CAAmBJ,IAAnB,CAA5B,IAAwDK,aAAa,CAACL,IAAD,CAA5E;AACH,CAFD;;AAGA,IAAIK,aAAa,GAAG,UAAUC,GAAV,EAAe;EAC/B,OAAQ,OAAOH,WAAP,KAAuB,UAAvB,IAAqCG,GAAG,YAAYH,WAArD,IACHI,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,GAA/B,MAAwC,sBAD5C;AAEH,CAHD"},"metadata":{},"sourceType":"module"}