{"ast":null,"code":"import { EndpointError } from \"../types\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({ ...acc,\n  [headerKey]: headerVal.map(headerValEntry => {\n    const processedExpr = evaluateExpression(headerValEntry, \"Header value entry\", options);\n\n    if (typeof processedExpr !== \"string\") {\n      throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);\n    }\n\n    return processedExpr;\n  })\n}), {});","map":{"version":3,"names":["EndpointError","evaluateExpression","getEndpointHeaders","headers","options","Object","entries","reduce","acc","headerKey","headerVal","map","headerValEntry","processedExpr"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/util-endpoints/dist-es/utils/getEndpointHeaders.js"],"sourcesContent":["import { EndpointError } from \"../types\";\nimport { evaluateExpression } from \"./evaluateExpression\";\nexport const getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({\n    ...acc,\n    [headerKey]: headerVal.map((headerValEntry) => {\n        const processedExpr = evaluateExpression(headerValEntry, \"Header value entry\", options);\n        if (typeof processedExpr !== \"string\") {\n            throw new EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);\n        }\n        return processedExpr;\n    }),\n}), {});\n"],"mappings":"AAAA,SAASA,aAAT,QAA8B,UAA9B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsBC,MAAM,CAACC,OAAP,CAAeH,OAAf,EAAwBI,MAAxB,CAA+B,CAACC,GAAD,EAAM,CAACC,SAAD,EAAYC,SAAZ,CAAN,MAAkC,EACrH,GAAGF,GADkH;EAErH,CAACC,SAAD,GAAaC,SAAS,CAACC,GAAV,CAAeC,cAAD,IAAoB;IAC3C,MAAMC,aAAa,GAAGZ,kBAAkB,CAACW,cAAD,EAAiB,oBAAjB,EAAuCR,OAAvC,CAAxC;;IACA,IAAI,OAAOS,aAAP,KAAyB,QAA7B,EAAuC;MACnC,MAAM,IAAIb,aAAJ,CAAmB,WAAUS,SAAU,YAAWI,aAAc,mBAAhE,CAAN;IACH;;IACD,OAAOA,aAAP;EACH,CANY;AAFwG,CAAlC,CAA/B,EASpD,EAToD,CAAjD"},"metadata":{},"sourceType":"module"}