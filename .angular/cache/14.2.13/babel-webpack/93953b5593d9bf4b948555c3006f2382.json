{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Fill':\n      {\n        const shape = getParamValue('shape', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const value = getParamValue('value', node, tensorMap, context);\n        return [tfOps.fill(shape, value, dtype)];\n      }\n\n    case 'LinSpace':\n      {\n        const start = getParamValue('start', node, tensorMap, context);\n        const stop = getParamValue('stop', node, tensorMap, context);\n        const num = getParamValue('num', node, tensorMap, context);\n        return [tfOps.linspace(start, stop, num)];\n      }\n\n    case 'Multinomial':\n      {\n        const logits = getParamValue('logits', node, tensorMap, context);\n        const numSamples = getParamValue('numSamples', node, tensorMap, context);\n        const seed = getParamValue('seed', node, tensorMap, context);\n        return [tfOps.multinomial(logits, numSamples, seed)];\n      }\n\n    case 'OneHot':\n      {\n        const indices = getParamValue('indices', node, tensorMap, context);\n        const depth = getParamValue('depth', node, tensorMap, context);\n        const onValue = getParamValue('onValue', node, tensorMap, context);\n        const offValue = getParamValue('offValue', node, tensorMap, context);\n        return [tfOps.oneHot(indices, depth, onValue, offValue)];\n      }\n\n    case 'Ones':\n      {\n        return [tfOps.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'OnesLike':\n      {\n        return [tfOps.onesLike(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'RandomUniform':\n      {\n        return [tfOps.randomUniform( // tslint:disable-next-line:no-any\n        getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'Range':\n      {\n        const start = getParamValue('start', node, tensorMap, context);\n        const stop = getParamValue('stop', node, tensorMap, context);\n        const step = getParamValue('step', node, tensorMap, context);\n        return [tfOps.range(start, stop, step, getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'TruncatedNormal':\n      {\n        const shape = getParamValue('shape', node, tensorMap, context);\n        const mean = getParamValue('mean', node, tensorMap, context);\n        const stdDev = getParamValue('stdDev', node, tensorMap, context);\n        const seed = getParamValue('seed', node, tensorMap, context);\n        return [tfOps.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];\n      }\n\n    case 'Zeros':\n      {\n        return [tfOps.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'ZerosLike':\n      {\n        return [tfOps.zerosLike(getParamValue('x', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'creation';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","shape","dtype","value","fill","start","stop","num","linspace","logits","numSamples","seed","multinomial","indices","depth","onValue","offValue","oneHot","ones","onesLike","randomUniform","step","range","mean","stdDev","truncatedNormal","zeros","zerosLike","TypeError","CATEGORY"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Fill': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const value = getParamValue('value', node, tensorMap, context);\n            return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const num = getParamValue('num', node, tensorMap, context);\n            return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n            const logits = getParamValue('logits', node, tensorMap, context);\n            const numSamples = getParamValue('numSamples', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const depth = getParamValue('depth', node, tensorMap, context);\n            const onValue = getParamValue('onValue', node, tensorMap, context);\n            const offValue = getParamValue('offValue', node, tensorMap, context);\n            return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n            return [tfOps.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'OnesLike': {\n            return [tfOps.onesLike(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'RandomUniform': {\n            return [tfOps.randomUniform(\n                // tslint:disable-next-line:no-any\n                getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'Range': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const step = getParamValue('step', node, tensorMap, context);\n            return [tfOps.range(start, stop, step, getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'TruncatedNormal': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const mean = getParamValue('mean', node, tensorMap, context);\n            const stdDev = getParamValue('stdDev', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [tfOps.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];\n        }\n        case 'Zeros': {\n            return [tfOps.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'ZerosLike': {\n            return [tfOps.zerosLike(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'creation';\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAZ,MAAuB,kDAAvB;AACA,SAASC,aAAT,QAA8B,SAA9B;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,OAAlB,KAA8B;EACnD,QAAQF,IAAI,CAACG,EAAb;IACI,KAAK,MAAL;MAAa;QACT,MAAMC,KAAK,GAAGN,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA3B;QACA,MAAMG,KAAK,GAAGP,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA3B;QACA,MAAMI,KAAK,GAAGR,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA3B;QACA,OAAO,CAACL,KAAK,CAACU,IAAN,CAAWH,KAAX,EAAkBE,KAAlB,EAAyBD,KAAzB,CAAD,CAAP;MACH;;IACD,KAAK,UAAL;MAAiB;QACb,MAAMG,KAAK,GAAGV,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA3B;QACA,MAAMO,IAAI,GAAGX,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;QACA,MAAMQ,GAAG,GAAGZ,aAAa,CAAC,KAAD,EAAQE,IAAR,EAAcC,SAAd,EAAyBC,OAAzB,CAAzB;QACA,OAAO,CAACL,KAAK,CAACc,QAAN,CAAeH,KAAf,EAAsBC,IAAtB,EAA4BC,GAA5B,CAAD,CAAP;MACH;;IACD,KAAK,aAAL;MAAoB;QAChB,MAAME,MAAM,GAAGd,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CAA5B;QACA,MAAMW,UAAU,GAAGf,aAAa,CAAC,YAAD,EAAeE,IAAf,EAAqBC,SAArB,EAAgCC,OAAhC,CAAhC;QACA,MAAMY,IAAI,GAAGhB,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;QACA,OAAO,CAACL,KAAK,CAACkB,WAAN,CAAkBH,MAAlB,EAA0BC,UAA1B,EAAsCC,IAAtC,CAAD,CAAP;MACH;;IACD,KAAK,QAAL;MAAe;QACX,MAAME,OAAO,GAAGlB,aAAa,CAAC,SAAD,EAAYE,IAAZ,EAAkBC,SAAlB,EAA6BC,OAA7B,CAA7B;QACA,MAAMe,KAAK,GAAGnB,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA3B;QACA,MAAMgB,OAAO,GAAGpB,aAAa,CAAC,SAAD,EAAYE,IAAZ,EAAkBC,SAAlB,EAA6BC,OAA7B,CAA7B;QACA,MAAMiB,QAAQ,GAAGrB,aAAa,CAAC,UAAD,EAAaE,IAAb,EAAmBC,SAAnB,EAA8BC,OAA9B,CAA9B;QACA,OAAO,CAACL,KAAK,CAACuB,MAAN,CAAaJ,OAAb,EAAsBC,KAAtB,EAA6BC,OAA7B,EAAsCC,QAAtC,CAAD,CAAP;MACH;;IACD,KAAK,MAAL;MAAa;QACT,OAAO,CAACtB,KAAK,CAACwB,IAAN,CAAWvB,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAAxB,EAA6DJ,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA1E,CAAD,CAAP;MACH;;IACD,KAAK,UAAL;MAAiB;QACb,OAAO,CAACL,KAAK,CAACyB,QAAN,CAAexB,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAA5B,CAAD,CAAP;MACH;;IACD,KAAK,eAAL;MAAsB;QAClB,OAAO,CAACL,KAAK,CAAC0B,aAAN,EACJ;QACAzB,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAFT,EAE8CJ,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CAF3D,EAEiGJ,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CAF9G,EAEoJJ,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAFjK,CAAD,CAAP;MAGH;;IACD,KAAK,OAAL;MAAc;QACV,MAAMM,KAAK,GAAGV,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA3B;QACA,MAAMO,IAAI,GAAGX,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;QACA,MAAMsB,IAAI,GAAG1B,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;QACA,OAAO,CAACL,KAAK,CAAC4B,KAAN,CAAYjB,KAAZ,EAAmBC,IAAnB,EAAyBe,IAAzB,EAA+B1B,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA5C,CAAD,CAAP;MACH;;IACD,KAAK,iBAAL;MAAwB;QACpB,MAAME,KAAK,GAAGN,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA3B;QACA,MAAMwB,IAAI,GAAG5B,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;QACA,MAAMyB,MAAM,GAAG7B,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CAA5B;QACA,MAAMY,IAAI,GAAGhB,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;QACA,OAAO,CAACL,KAAK,CAAC+B,eAAN,CAAsBxB,KAAtB,EAA6BsB,IAA7B,EAAmCC,MAAnC,EAA2C7B,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAAxD,EAA6FY,IAA7F,CAAD,CAAP;MACH;;IACD,KAAK,OAAL;MAAc;QACV,OAAO,CAACjB,KAAK,CAACgC,KAAN,CAAY/B,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAAzB,EAA8DJ,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CAA3E,CAAD,CAAP;MACH;;IACD,KAAK,WAAL;MAAkB;QACd,OAAO,CAACL,KAAK,CAACiC,SAAN,CAAgBhC,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAA7B,CAAD,CAAP;MACH;;IACD;MACI,MAAM6B,SAAS,CAAE,aAAY/B,IAAI,CAACG,EAAG,qBAAtB,CAAf;EAzDR;AA2DH,CA5DM;AA6DP,OAAO,MAAM6B,QAAQ,GAAG,UAAjB"},"metadata":{},"sourceType":"module"}