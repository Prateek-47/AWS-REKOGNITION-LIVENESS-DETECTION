{"ast":null,"code":"import { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nexport class HeaderMarshaller {\n  constructor(toUtf8, fromUtf8) {\n    this.toUtf8 = toUtf8;\n    this.fromUtf8 = fromUtf8;\n  }\n\n  format(headers) {\n    const chunks = [];\n\n    for (const headerName of Object.keys(headers)) {\n      const bytes = this.fromUtf8(headerName);\n      chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n    }\n\n    const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n    let position = 0;\n\n    for (const chunk of chunks) {\n      out.set(chunk, position);\n      position += chunk.byteLength;\n    }\n\n    return out;\n  }\n\n  formatHeaderValue(header) {\n    switch (header.type) {\n      case \"boolean\":\n        return Uint8Array.from([header.value ? 0 : 1]);\n\n      case \"byte\":\n        return Uint8Array.from([2, header.value]);\n\n      case \"short\":\n        const shortView = new DataView(new ArrayBuffer(3));\n        shortView.setUint8(0, 3);\n        shortView.setInt16(1, header.value, false);\n        return new Uint8Array(shortView.buffer);\n\n      case \"integer\":\n        const intView = new DataView(new ArrayBuffer(5));\n        intView.setUint8(0, 4);\n        intView.setInt32(1, header.value, false);\n        return new Uint8Array(intView.buffer);\n\n      case \"long\":\n        const longBytes = new Uint8Array(9);\n        longBytes[0] = 5;\n        longBytes.set(header.value.bytes, 1);\n        return longBytes;\n\n      case \"binary\":\n        const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n        binView.setUint8(0, 6);\n        binView.setUint16(1, header.value.byteLength, false);\n        const binBytes = new Uint8Array(binView.buffer);\n        binBytes.set(header.value, 3);\n        return binBytes;\n\n      case \"string\":\n        const utf8Bytes = this.fromUtf8(header.value);\n        const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n        strView.setUint8(0, 7);\n        strView.setUint16(1, utf8Bytes.byteLength, false);\n        const strBytes = new Uint8Array(strView.buffer);\n        strBytes.set(utf8Bytes, 3);\n        return strBytes;\n\n      case \"timestamp\":\n        const tsBytes = new Uint8Array(9);\n        tsBytes[0] = 8;\n        tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n        return tsBytes;\n\n      case \"uuid\":\n        if (!UUID_PATTERN.test(header.value)) {\n          throw new Error(`Invalid UUID received: ${header.value}`);\n        }\n\n        const uuidBytes = new Uint8Array(17);\n        uuidBytes[0] = 9;\n        uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n        return uuidBytes;\n    }\n  }\n\n  parse(headers) {\n    const out = {};\n    let position = 0;\n\n    while (position < headers.byteLength) {\n      const nameLength = headers.getUint8(position++);\n      const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n      position += nameLength;\n\n      switch (headers.getUint8(position++)) {\n        case 0:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: true\n          };\n          break;\n\n        case 1:\n          out[name] = {\n            type: BOOLEAN_TAG,\n            value: false\n          };\n          break;\n\n        case 2:\n          out[name] = {\n            type: BYTE_TAG,\n            value: headers.getInt8(position++)\n          };\n          break;\n\n        case 3:\n          out[name] = {\n            type: SHORT_TAG,\n            value: headers.getInt16(position, false)\n          };\n          position += 2;\n          break;\n\n        case 4:\n          out[name] = {\n            type: INT_TAG,\n            value: headers.getInt32(position, false)\n          };\n          position += 4;\n          break;\n\n        case 5:\n          out[name] = {\n            type: LONG_TAG,\n            value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))\n          };\n          position += 8;\n          break;\n\n        case 6:\n          const binaryLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: BINARY_TAG,\n            value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)\n          };\n          position += binaryLength;\n          break;\n\n        case 7:\n          const stringLength = headers.getUint16(position, false);\n          position += 2;\n          out[name] = {\n            type: STRING_TAG,\n            value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))\n          };\n          position += stringLength;\n          break;\n\n        case 8:\n          out[name] = {\n            type: TIMESTAMP_TAG,\n            value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())\n          };\n          position += 8;\n          break;\n\n        case 9:\n          const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n          position += 16;\n          out[name] = {\n            type: UUID_TAG,\n            value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`\n          };\n          break;\n\n        default:\n          throw new Error(`Unrecognized header type tag`);\n      }\n    }\n\n    return out;\n  }\n\n}\nvar HEADER_VALUE_TYPE;\n\n(function (HEADER_VALUE_TYPE) {\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n  HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\n\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;","map":{"version":3,"names":["fromHex","toHex","Int64","HeaderMarshaller","constructor","toUtf8","fromUtf8","format","headers","chunks","headerName","Object","keys","bytes","push","Uint8Array","from","byteLength","formatHeaderValue","out","reduce","carry","position","chunk","set","header","type","value","shortView","DataView","ArrayBuffer","setUint8","setInt16","buffer","intView","setInt32","longBytes","binView","setUint16","binBytes","utf8Bytes","strView","strBytes","tsBytes","fromNumber","valueOf","UUID_PATTERN","test","Error","uuidBytes","replace","parse","nameLength","getUint8","name","byteOffset","BOOLEAN_TAG","BYTE_TAG","getInt8","SHORT_TAG","getInt16","INT_TAG","getInt32","LONG_TAG","binaryLength","getUint16","BINARY_TAG","stringLength","STRING_TAG","TIMESTAMP_TAG","Date","UUID_TAG","subarray","HEADER_VALUE_TYPE"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/eventstream-codec/dist-es/HeaderMarshaller.js"],"sourcesContent":["import { fromHex, toHex } from \"@aws-sdk/util-hex-encoding\";\nimport { Int64 } from \"./Int64\";\nexport class HeaderMarshaller {\n    constructor(toUtf8, fromUtf8) {\n        this.toUtf8 = toUtf8;\n        this.fromUtf8 = fromUtf8;\n    }\n    format(headers) {\n        const chunks = [];\n        for (const headerName of Object.keys(headers)) {\n            const bytes = this.fromUtf8(headerName);\n            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\n        }\n        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\n        let position = 0;\n        for (const chunk of chunks) {\n            out.set(chunk, position);\n            position += chunk.byteLength;\n        }\n        return out;\n    }\n    formatHeaderValue(header) {\n        switch (header.type) {\n            case \"boolean\":\n                return Uint8Array.from([header.value ? 0 : 1]);\n            case \"byte\":\n                return Uint8Array.from([2, header.value]);\n            case \"short\":\n                const shortView = new DataView(new ArrayBuffer(3));\n                shortView.setUint8(0, 3);\n                shortView.setInt16(1, header.value, false);\n                return new Uint8Array(shortView.buffer);\n            case \"integer\":\n                const intView = new DataView(new ArrayBuffer(5));\n                intView.setUint8(0, 4);\n                intView.setInt32(1, header.value, false);\n                return new Uint8Array(intView.buffer);\n            case \"long\":\n                const longBytes = new Uint8Array(9);\n                longBytes[0] = 5;\n                longBytes.set(header.value.bytes, 1);\n                return longBytes;\n            case \"binary\":\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\n                binView.setUint8(0, 6);\n                binView.setUint16(1, header.value.byteLength, false);\n                const binBytes = new Uint8Array(binView.buffer);\n                binBytes.set(header.value, 3);\n                return binBytes;\n            case \"string\":\n                const utf8Bytes = this.fromUtf8(header.value);\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\n                strView.setUint8(0, 7);\n                strView.setUint16(1, utf8Bytes.byteLength, false);\n                const strBytes = new Uint8Array(strView.buffer);\n                strBytes.set(utf8Bytes, 3);\n                return strBytes;\n            case \"timestamp\":\n                const tsBytes = new Uint8Array(9);\n                tsBytes[0] = 8;\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\n                return tsBytes;\n            case \"uuid\":\n                if (!UUID_PATTERN.test(header.value)) {\n                    throw new Error(`Invalid UUID received: ${header.value}`);\n                }\n                const uuidBytes = new Uint8Array(17);\n                uuidBytes[0] = 9;\n                uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\n                return uuidBytes;\n        }\n    }\n    parse(headers) {\n        const out = {};\n        let position = 0;\n        while (position < headers.byteLength) {\n            const nameLength = headers.getUint8(position++);\n            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\n            position += nameLength;\n            switch (headers.getUint8(position++)) {\n                case 0:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: true,\n                    };\n                    break;\n                case 1:\n                    out[name] = {\n                        type: BOOLEAN_TAG,\n                        value: false,\n                    };\n                    break;\n                case 2:\n                    out[name] = {\n                        type: BYTE_TAG,\n                        value: headers.getInt8(position++),\n                    };\n                    break;\n                case 3:\n                    out[name] = {\n                        type: SHORT_TAG,\n                        value: headers.getInt16(position, false),\n                    };\n                    position += 2;\n                    break;\n                case 4:\n                    out[name] = {\n                        type: INT_TAG,\n                        value: headers.getInt32(position, false),\n                    };\n                    position += 4;\n                    break;\n                case 5:\n                    out[name] = {\n                        type: LONG_TAG,\n                        value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\n                    };\n                    position += 8;\n                    break;\n                case 6:\n                    const binaryLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: BINARY_TAG,\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\n                    };\n                    position += binaryLength;\n                    break;\n                case 7:\n                    const stringLength = headers.getUint16(position, false);\n                    position += 2;\n                    out[name] = {\n                        type: STRING_TAG,\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\n                    };\n                    position += stringLength;\n                    break;\n                case 8:\n                    out[name] = {\n                        type: TIMESTAMP_TAG,\n                        value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\n                    };\n                    position += 8;\n                    break;\n                case 9:\n                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\n                    position += 16;\n                    out[name] = {\n                        type: UUID_TAG,\n                        value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`,\n                    };\n                    break;\n                default:\n                    throw new Error(`Unrecognized header type tag`);\n            }\n        }\n        return out;\n    }\n}\nvar HEADER_VALUE_TYPE;\n(function (HEADER_VALUE_TYPE) {\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\nconst BOOLEAN_TAG = \"boolean\";\nconst BYTE_TAG = \"byte\";\nconst SHORT_TAG = \"short\";\nconst INT_TAG = \"integer\";\nconst LONG_TAG = \"long\";\nconst BINARY_TAG = \"binary\";\nconst STRING_TAG = \"string\";\nconst TIMESTAMP_TAG = \"timestamp\";\nconst UUID_TAG = \"uuid\";\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}