{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { KEY_TYPE_IDENTIFIER, SIGNATURE_IDENTIFIER } from '../constants';\nimport { getHashedData } from './dataHashHelpers';\n/**\n * Returns a signing key to be used for signing requests.\n *\n * @param secretAccessKey AWS secret access key from credentials.\n * @param date Current date in the format 'YYYYMMDD'.\n * @param region AWS region in which the service resides.\n * @param service Service to which the signed request is being sent.\n *\n * @returns `Uint8Array` calculated from its composite parts.\n *\n * @internal\n */\n\nexport var getSigningKey = function (secretAccessKey, date, region, service) {\n  var key = \"\".concat(SIGNATURE_IDENTIFIER).concat(secretAccessKey);\n  var dateKey = getHashedData(key, date);\n  var regionKey = getHashedData(dateKey, region);\n  var serviceKey = getHashedData(regionKey, service);\n  var signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);\n  return signingKey;\n};","map":{"version":3,"names":["KEY_TYPE_IDENTIFIER","SIGNATURE_IDENTIFIER","getHashedData","getSigningKey","secretAccessKey","date","region","service","key","concat","dateKey","regionKey","serviceKey","signingKey"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/core/lib-esm/clients/middleware/signing/signer/signatureV4/utils/getSigningKey.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { KEY_TYPE_IDENTIFIER, SIGNATURE_IDENTIFIER } from '../constants';\nimport { getHashedData } from './dataHashHelpers';\n/**\n * Returns a signing key to be used for signing requests.\n *\n * @param secretAccessKey AWS secret access key from credentials.\n * @param date Current date in the format 'YYYYMMDD'.\n * @param region AWS region in which the service resides.\n * @param service Service to which the signed request is being sent.\n *\n * @returns `Uint8Array` calculated from its composite parts.\n *\n * @internal\n */\nexport var getSigningKey = function (secretAccessKey, date, region, service) {\n    var key = \"\".concat(SIGNATURE_IDENTIFIER).concat(secretAccessKey);\n    var dateKey = getHashedData(key, date);\n    var regionKey = getHashedData(dateKey, region);\n    var serviceKey = getHashedData(regionKey, service);\n    var signingKey = getHashedData(serviceKey, KEY_TYPE_IDENTIFIER);\n    return signingKey;\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,mBAAT,EAA8BC,oBAA9B,QAA0D,cAA1D;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,aAAa,GAAG,UAAUC,eAAV,EAA2BC,IAA3B,EAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;EACzE,IAAIC,GAAG,GAAG,GAAGC,MAAH,CAAUR,oBAAV,EAAgCQ,MAAhC,CAAuCL,eAAvC,CAAV;EACA,IAAIM,OAAO,GAAGR,aAAa,CAACM,GAAD,EAAMH,IAAN,CAA3B;EACA,IAAIM,SAAS,GAAGT,aAAa,CAACQ,OAAD,EAAUJ,MAAV,CAA7B;EACA,IAAIM,UAAU,GAAGV,aAAa,CAACS,SAAD,EAAYJ,OAAZ,CAA9B;EACA,IAAIM,UAAU,GAAGX,aAAa,CAACU,UAAD,EAAaZ,mBAAb,CAA9B;EACA,OAAOa,UAAP;AACH,CAPM"},"metadata":{},"sourceType":"module"}