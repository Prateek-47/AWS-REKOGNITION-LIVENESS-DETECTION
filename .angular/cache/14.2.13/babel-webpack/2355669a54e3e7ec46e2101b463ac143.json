{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { defaultPartition, partitionsInfo } from './partitions';\n/**\n * Get the AWS Services endpoint URL's DNS suffix for a given region. A typical AWS regional service endpoint URL will\n * follow this pattern: {endpointPrefix}.{region}.{dnsSuffix}. For example, the endpoint URL for Cognito Identity in\n * us-east-1 will be cognito-identity.us-east-1.amazonaws.com. Here the DnsSuffix is `amazonaws.com`.\n *\n * @param region\n * @returns The DNS suffix\n *\n * @internal\n */\n\nexport var getDnsSuffix = function (region) {\n  var e_1, _a;\n\n  var partitions = partitionsInfo.partitions;\n\n  try {\n    for (var partitions_1 = __values(partitions), partitions_1_1 = partitions_1.next(); !partitions_1_1.done; partitions_1_1 = partitions_1.next()) {\n      var _b = partitions_1_1.value,\n          regions = _b.regions,\n          outputs = _b.outputs,\n          regionRegex = _b.regionRegex;\n      var regex = new RegExp(regionRegex);\n\n      if (regions.includes(region) || regex.test(region)) {\n        return outputs.dnsSuffix;\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (partitions_1_1 && !partitions_1_1.done && (_a = partitions_1.return)) _a.call(partitions_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return defaultPartition.outputs.dnsSuffix;\n};","map":{"version":3,"names":["__values","o","s","Symbol","iterator","m","i","call","length","next","value","done","TypeError","defaultPartition","partitionsInfo","getDnsSuffix","region","e_1","_a","partitions","partitions_1","partitions_1_1","_b","regions","outputs","regionRegex","regex","RegExp","includes","test","dnsSuffix","e_1_1","error","return"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/core/lib-esm/clients/endpoints/getDnsSuffix.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { defaultPartition, partitionsInfo } from './partitions';\n/**\n * Get the AWS Services endpoint URL's DNS suffix for a given region. A typical AWS regional service endpoint URL will\n * follow this pattern: {endpointPrefix}.{region}.{dnsSuffix}. For example, the endpoint URL for Cognito Identity in\n * us-east-1 will be cognito-identity.us-east-1.amazonaws.com. Here the DnsSuffix is `amazonaws.com`.\n *\n * @param region\n * @returns The DNS suffix\n *\n * @internal\n */\nexport var getDnsSuffix = function (region) {\n    var e_1, _a;\n    var partitions = partitionsInfo.partitions;\n    try {\n        for (var partitions_1 = __values(partitions), partitions_1_1 = partitions_1.next(); !partitions_1_1.done; partitions_1_1 = partitions_1.next()) {\n            var _b = partitions_1_1.value, regions = _b.regions, outputs = _b.outputs, regionRegex = _b.regionRegex;\n            var regex = new RegExp(regionRegex);\n            if (regions.includes(region) || regex.test(region)) {\n                return outputs.dnsSuffix;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (partitions_1_1 && !partitions_1_1.done && (_a = partitions_1.return)) _a.call(partitions_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return defaultPartition.outputs.dnsSuffix;\n};\n"],"mappings":"AAAA;AACA;AACA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,UAASC,CAAT,EAAY;EAClD,IAAIC,CAAC,GAAG,OAAOC,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,QAA/C;EAAA,IAAyDC,CAAC,GAAGH,CAAC,IAAID,CAAC,CAACC,CAAD,CAAnE;EAAA,IAAwEI,CAAC,GAAG,CAA5E;EACA,IAAID,CAAJ,EAAO,OAAOA,CAAC,CAACE,IAAF,CAAON,CAAP,CAAP;EACP,IAAIA,CAAC,IAAI,OAAOA,CAAC,CAACO,MAAT,KAAoB,QAA7B,EAAuC,OAAO;IAC1CC,IAAI,EAAE,YAAY;MACd,IAAIR,CAAC,IAAIK,CAAC,IAAIL,CAAC,CAACO,MAAhB,EAAwBP,CAAC,GAAG,KAAK,CAAT;MACxB,OAAO;QAAES,KAAK,EAAET,CAAC,IAAIA,CAAC,CAACK,CAAC,EAAF,CAAf;QAAsBK,IAAI,EAAE,CAACV;MAA7B,CAAP;IACH;EAJyC,CAAP;EAMvC,MAAM,IAAIW,SAAJ,CAAcV,CAAC,GAAG,yBAAH,GAA+B,iCAA9C,CAAN;AACH,CAVD;;AAWA,SAASW,gBAAT,EAA2BC,cAA3B,QAAiD,cAAjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,YAAY,GAAG,UAAUC,MAAV,EAAkB;EACxC,IAAIC,GAAJ,EAASC,EAAT;;EACA,IAAIC,UAAU,GAAGL,cAAc,CAACK,UAAhC;;EACA,IAAI;IACA,KAAK,IAAIC,YAAY,GAAGpB,QAAQ,CAACmB,UAAD,CAA3B,EAAyCE,cAAc,GAAGD,YAAY,CAACX,IAAb,EAA/D,EAAoF,CAACY,cAAc,CAACV,IAApG,EAA0GU,cAAc,GAAGD,YAAY,CAACX,IAAb,EAA3H,EAAgJ;MAC5I,IAAIa,EAAE,GAAGD,cAAc,CAACX,KAAxB;MAAA,IAA+Ba,OAAO,GAAGD,EAAE,CAACC,OAA5C;MAAA,IAAqDC,OAAO,GAAGF,EAAE,CAACE,OAAlE;MAAA,IAA2EC,WAAW,GAAGH,EAAE,CAACG,WAA5F;MACA,IAAIC,KAAK,GAAG,IAAIC,MAAJ,CAAWF,WAAX,CAAZ;;MACA,IAAIF,OAAO,CAACK,QAAR,CAAiBZ,MAAjB,KAA4BU,KAAK,CAACG,IAAN,CAAWb,MAAX,CAAhC,EAAoD;QAChD,OAAOQ,OAAO,CAACM,SAAf;MACH;IACJ;EACJ,CARD,CASA,OAAOC,KAAP,EAAc;IAAEd,GAAG,GAAG;MAAEe,KAAK,EAAED;IAAT,CAAN;EAAyB,CATzC,SAUQ;IACJ,IAAI;MACA,IAAIV,cAAc,IAAI,CAACA,cAAc,CAACV,IAAlC,KAA2CO,EAAE,GAAGE,YAAY,CAACa,MAA7D,CAAJ,EAA0Ef,EAAE,CAACX,IAAH,CAAQa,YAAR;IAC7E,CAFD,SAGQ;MAAE,IAAIH,GAAJ,EAAS,MAAMA,GAAG,CAACe,KAAV;IAAkB;EACxC;;EACD,OAAOnB,gBAAgB,CAACW,OAAjB,CAAyBM,SAAhC;AACH,CApBM"},"metadata":{},"sourceType":"module"}