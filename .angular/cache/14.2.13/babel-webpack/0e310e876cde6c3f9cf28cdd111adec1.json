{"ast":null,"code":"var AWS = require('../core');\n\nvar v4Credentials = require('../signers/v4_credentials');\n\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\n\nvar s3util = require('./s3util');\n\nvar regionUtil = require('../region_config'); // Pull in managed upload extension\n\n\nrequire('../s3/managed_upload');\n/**\n * @api private\n */\n\n\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n/**\n * @api private\n */\n\nvar regionRedirectErrorCodes = ['AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\n'BadRequest', // head operations on virtual-hosted global bucket endpoints\n'PermanentRedirect', // non-head operations on path-style or regional endpoints\n301 // head operations on path-style or regional endpoints\n];\nvar OBJECT_LAMBDA_SERVICE = 's3-object-lambda';\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) If not using presigned urls, default to V4\n        b) If using presigned urls, default to lowest version the region supports\n    */\n\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n\n    return defaultApiVersion;\n  },\n\n  /**\n   * @api private\n   */\n  getSigningName: function getSigningName(req) {\n    if (req && req.operation === 'writeGetObjectResponse') {\n      return OBJECT_LAMBDA_SERVICE;\n    }\n\n    var _super = AWS.Service.prototype.getSigningName;\n    return req && req._parsedArn && req._parsedArn.service ? req._parsedArn.service : _super.call(this);\n  },\n\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = []; // default to us-east-1 when no region is provided\n\n    if (!this.config.region) this.config.region = 'us-east-1';\n\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' + '`s3BucketEndpoint` to true.');\n    }\n\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n\n    if (msg) {\n      throw AWS.util.error(new Error(), {\n        name: 'InvalidEndpoint',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4 && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('validateResponse', this.setExpiresString);\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketName, prependListener);\n    request.addListener('validate', this.optInUsEast1RegionalEndpoint, prependListener);\n    request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('build', this.populateURI);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('extractData', this.extractData);\n    request.addListener('extractData', this.extractErrorFrom200Response);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n\n    if (this.shouldDisableBodySigning(request)) {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    } //deal with ARNs supplied to Bucket\n\n\n    if (request.operation !== 'createBucket' && s3util.isArnInParam(request, 'Bucket')) {\n      // avoid duplicate parsing in the future\n      request._parsedArn = AWS.util.ARN.parse(request.params.Bucket);\n      request.removeListener('validate', this.validateBucketName);\n      request.removeListener('build', this.populateURI);\n\n      if (request._parsedArn.service === 's3') {\n        request.addListener('validate', s3util.validateS3AccessPointArn);\n        request.addListener('validate', this.validateArnResourceType);\n        request.addListener('validate', this.validateArnRegion);\n      } else if (request._parsedArn.service === 's3-outposts') {\n        request.addListener('validate', s3util.validateOutpostsAccessPointArn);\n        request.addListener('validate', s3util.validateOutpostsArn);\n        request.addListener('validate', s3util.validateArnRegion);\n      }\n\n      request.addListener('validate', s3util.validateArnAccount);\n      request.addListener('validate', s3util.validateArnService);\n      request.addListener('build', this.populateUriFromAccessPointArn);\n      request.addListener('build', s3util.validatePopulateUriFromArn);\n      return;\n    } //listeners regarding region inference\n\n\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.onAsync('extractError', this.requestBucketRegion);\n\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateScheme: function (req) {\n    var params = req.params,\n        scheme = req.httpRequest.endpoint.protocol,\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' + 'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function (req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateArnRegion: function validateArnRegion(req) {\n    s3util.validateArnRegion(req, {\n      allowFipsEndpoint: true\n    });\n  },\n\n  /**\n   * Validate resource-type supplied in S3 ARN\n   */\n  validateArnResourceType: function validateArnResourceType(req) {\n    var resource = req._parsedArn.resource;\n\n    if (resource.indexOf('accesspoint:') !== 0 && resource.indexOf('accesspoint/') !== 0) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN resource should begin with \\'accesspoint/\\''\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params); // Need to include trailing slash to match sigv2 behavior\n\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(), {\n          code: 'InvalidBucket',\n          message: msg\n        });\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = ['createBucket', 'deleteBucket', 'listBuckets'];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n\n  /**\n   * When us-east-1 region endpoint configuration is set, in stead of sending request to\n   * global endpoint(e.g. 's3.amazonaws.com'), we will send request to\n   * 's3.us-east-1.amazonaws.com'.\n   * @api private\n   */\n  optInUsEast1RegionalEndpoint: function optInUsEast1RegionalEndpoint(req) {\n    var service = req.service;\n    var config = service.config;\n    config.s3UsEast1RegionalEndpoint = resolveRegionalEndpointsFlag(service._originalConfig, {\n      env: 'AWS_S3_US_EAST_1_REGIONAL_ENDPOINT',\n      sharedConfig: 's3_us_east_1_regional_endpoint',\n      clientConfig: 's3UsEast1RegionalEndpoint'\n    });\n\n    if (!(service._originalConfig || {}).endpoint && req.httpRequest.region === 'us-east-1' && config.s3UsEast1RegionalEndpoint === 'regional' && req.httpRequest.endpoint.hostname.indexOf('s3.amazonaws.com') >= 0) {\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n      var regionalEndpoint = config.endpoint.substring(0, insertPoint) + '.us-east-1' + config.endpoint.substring(insertPoint);\n      req.httpRequest.updateEndpoint(regionalEndpoint);\n    }\n  },\n\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstackEndpoint) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname = b + '.' + endpoint.hostname;\n        }\n\n        var port = endpoint.port;\n\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' + endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  /**\n   * When user supply an access point ARN in the Bucket parameter, we need to\n   * populate the URI according to the ARN.\n   */\n  populateUriFromAccessPointArn: function populateUriFromAccessPointArn(req) {\n    var accessPointArn = req._parsedArn;\n    var isOutpostArn = accessPointArn.service === 's3-outposts';\n    var isObjectLambdaArn = accessPointArn.service === 's3-object-lambda';\n    var outpostsSuffix = isOutpostArn ? '.' + accessPointArn.outpostId : '';\n    var serviceName = isOutpostArn ? 's3-outposts' : 's3-accesspoint';\n    var fipsSuffix = !isOutpostArn && req.service.config.useFipsEndpoint ? '-fips' : '';\n    var dualStackSuffix = !isOutpostArn && req.service.config.useDualstackEndpoint ? '.dualstack' : '';\n    var endpoint = req.httpRequest.endpoint;\n    var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);\n    var useArnRegion = req.service.config.s3UseArnRegion;\n    endpoint.hostname = [accessPointArn.accessPoint + '-' + accessPointArn.accountId + outpostsSuffix, serviceName + fipsSuffix + dualStackSuffix, useArnRegion ? accessPointArn.region : req.service.config.region, dnsSuffix].join('.');\n\n    if (isObjectLambdaArn) {\n      // should be in the format: \"accesspoint/${accesspointName}\"\n      var serviceName = 's3-object-lambda';\n      var accesspointName = accessPointArn.resource.split('/')[1];\n      var fipsSuffix = req.service.config.useFipsEndpoint ? '-fips' : '';\n      endpoint.hostname = [accesspointName + '-' + accessPointArn.accountId, serviceName + fipsSuffix, useArnRegion ? accessPointArn.region : req.service.config.region, dnsSuffix].join('.');\n    }\n\n    endpoint.host = endpoint.hostname;\n    var encodedArn = AWS.util.uriEscape(req.params.Bucket);\n    var path = req.httpRequest.path; //remove the Bucket value from path\n\n    req.httpRequest.path = path.replace(new RegExp('/' + encodedArn), '');\n\n    if (req.httpRequest.path[0] !== '/') {\n      req.httpRequest.path = '/' + req.httpRequest.path;\n    }\n\n    req.httpRequest.region = accessPointArn.region; //region used to sign\n  },\n\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n\n    if (!httpRequest.headers['Content-Type']) {\n      // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n\n    var contentType = httpRequest.headers['Content-Type'];\n\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function (_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n\n        httpRequest.headers['Content-Type'] = contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n\n  /**\n   * Checks whether checksums should be computed for the request if it's not\n   * already set by {AWS.EventListeners.Core.COMPUTE_CHECKSUM}. It depends on\n   * whether {AWS.Config.computeChecksums} is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    var rules = req.service.api.operations[req.operation].input.members;\n    var body = req.httpRequest.body;\n    var needsContentMD5 = req.service.config.computeChecksums && rules.ContentMD5 && !req.params.ContentMD5 && body && (AWS.util.Buffer.isBuffer(req.httpRequest.body) || typeof req.httpRequest.body === 'string'); // Sha256 signing disabled, and not a presigned url\n\n    if (needsContentMD5 && req.service.shouldDisableBodySigning(req) && !req.isPresigned()) {\n      return true;\n    } // SigV2 and presign, for backwards compatibility purpose.\n\n\n    if (needsContentMD5 && this.getSignatureVersion(req) === 's3' && req.isPresigned()) {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * This listener is to support S3-specific features like\n   * s3DisableBodySigning and SigV2 presign. Content MD5 logic for SigV4 is\n   * handled in AWS.EventListeners.Core.COMPUTE_CHECKSUM\n   *\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function (key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n\n    if (s3util.dnsCompatibleBucketName(bucketName)) {\n      return this.config.sslEnabled && bucketName.match(/\\./) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * For COPY operations, some can be error even with status code 200.\n   * SDK treats the response as exception when response body indicates\n   * an exception or body is empty.\n   *\n   * @api private\n   */\n  extractErrorFrom200Response: function extractErrorFrom200Response(resp) {\n    if (!operationsWith200StatusCodeError[resp.request.operation]) return;\n    var httpResponse = resp.httpResponse;\n\n    if (httpResponse.body && httpResponse.body.toString().match('<Error>')) {\n      // Response body with '<Error>...</Error>' indicates an exception.\n      // Get S3 client object. In ManagedUpload, this.service refers to\n      // S3 client object.\n      resp.data = null;\n      var service = this.service ? this.service : this;\n      service.extractError(resp);\n      throw resp.error;\n    } else if (!httpResponse.body || !httpResponse.body.toString().match(/<[\\w_]/)) {\n      // When body is empty or incomplete, S3 might stop the request on detecting client\n      // side aborting the request.\n      resp.data = null;\n      throw AWS.util.error(new Error(), {\n        code: 'InternalError',\n        message: 'S3 aborted request'\n      });\n    }\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] && error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket && request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error && regionRedirectErrorCodes.indexOf(error.code) != -1 && error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n    httpRequest.endpoint = new AWS.S3(newConfig).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n\n    var bucket = req.params.Bucket || null;\n\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n\n      if (region) {\n        if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n          req.service.bucketRegionCache[bucket] = region;\n        }\n      }\n    }\n\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n\n    var cachedRegion;\n\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n\n      if (data.Region && !region) {\n        region = data.Region;\n\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n\n    if (!error || !bucket || error.region || req.operation === 'listObjects' || AWS.util.isNode() && req.operation === 'headBucket' || error.statusCode === 400 && req.operation !== 'headObject' || regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {\n      Bucket: bucket\n    };\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function () {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n\n  /**\n  * For browser only. If NetworkingError received, will attempt to obtain\n  * the bucket region.\n  *\n  * @api private\n  */\n  reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n\n    if (!error || error.code !== 'NetworkingError' || !bucket || request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!s3util.dnsCompatibleBucketName(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({\n        Bucket: bucket,\n        MaxKeys: 0\n      });\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n      getRegionReq.send(function () {\n        var region = service.bucketRegionCache[bucket] || null;\n\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n  },\n\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n  bucketRegionCache: {},\n\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n  clearBucketRegionCache: function (buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n\n    return bucketRegionCache;\n  },\n\n  /**\n   * Corrects request region if bucket's cached region is different\n   *\n   * @api private\n   */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidParameterException',\n        message: 'The expiration must be a number, received ' + typeof expires\n      });\n    }\n\n    delete params.Expires; // we can't validate this\n\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function () {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n\n  /**\n   * @!method  getSignedUrlPromise()\n   *   Returns a 'thenable' promise that will be resolved with a pre-signed URL\n   *   for a given operation name.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @note Not all operation parameters are supported when using pre-signed\n   *      URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *      `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *      request. If you are using pre-signed URLs to upload from a browser and\n   *      need to use these fields, see {createPresignedPost}.\n   *   @param operation [String] the name of the operation to call\n   *   @param params [map] parameters to pass to the operation. See the given\n   *      operation for the expected operation parameters. In addition, you can\n   *      also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *      work for.\n   *   @option params Expires [Integer] (900) the number of seconds to expire\n   *      the pre-signed URL operation in. Defaults to 15 minutes.\n   *   @callback fulfilledCallback function(url)\n   *     Called if the promise is fulfilled.\n   *     @param url [String] the signed url\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\n   *   @example Pre-signing a getObject operation\n   *      var params = {Bucket: 'bucket', Key: 'key'};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Pre-signing a putObject operation with a specific payload\n   *      var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *      var promise = s3.getSignedUrlPromise('putObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Passing in a 1-minute expiry time for a pre-signed URL\n   *      var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   */\n\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n        self = this,\n        config = this.config,\n        endpoint = AWS.util.copy(this.endpoint);\n\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(config.credentials, config.region, bucket, params.Fields, params.Conditions, params.Expires)\n      };\n    }\n\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        } else {\n          try {\n            callback(null, finalizePost());\n          } catch (err) {\n            callback(err);\n          }\n        }\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(credentials, region, bucket, fields, conditions, expiresInSeconds) {\n    var now = this.getSkewCorrectedDate();\n\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,' + ' region, and credentials');\n    }\n\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n\n    fields.Policy = this.preparePostPolicy(new Date(now.valueOf() + expiresInSeconds * 1000), conditions);\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true), fields.Policy, 'hex');\n    return fields;\n  },\n\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers; // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {\n        code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'\n      });\n    }\n  },\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n\n    var hostname = this.endpoint.hostname; // copy params so that appending keys does not unintentioinallly\n    // mutate params object argument passed in by user\n\n    var copiedParams = AWS.util.copy(params);\n\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      copiedParams.CreateBucketConfiguration = {\n        LocationConstraint: this.config.region\n      };\n    }\n\n    return this.makeRequest('createBucket', copiedParams, callback);\n  },\n  writeGetObjectResponse: function writeGetObjectResponse(params, callback) {\n    var request = this.makeRequest('writeGetObjectResponse', AWS.util.copy(params), callback);\n    var hostname = this.endpoint.hostname;\n\n    if (hostname.indexOf(this.config.region) !== -1) {\n      // hostname specifies a region already\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.');\n    } else {\n      // Hostname doesn't have a region.\n      // Object Lambda requires an explicit region.\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.' + this.config.region + '.');\n    }\n\n    request.httpRequest.endpoint = new AWS.Endpoint(hostname, this.config);\n    return request;\n  },\n\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options = AWS.util.merge(options || {}, {\n      service: this,\n      params: params\n    });\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  },\n\n  /**\n   * @api private\n   */\n  setExpiresString: function setExpiresString(response) {\n    // Check if response contains Expires value, and populate ExpiresString.\n    if (response && response.httpResponse && response.httpResponse.headers) {\n      if ('expires' in response.httpResponse.headers) {\n        response.httpResponse.headers.expiresstring = response.httpResponse.headers.expires;\n      }\n    } // Check if value in Expires is not a Date using parseTimestamp.\n\n\n    try {\n      if (response && response.httpResponse && response.httpResponse.headers) {\n        if ('expires' in response.httpResponse.headers) {\n          AWS.util.date.parseTimestamp(response.httpResponse.headers.expires);\n        }\n      }\n    } catch (e) {\n      console.log('AWS SDK', '(warning)', e);\n      delete response.httpResponse.headers.expires;\n    }\n  }\n});\n/**\n * @api private\n */\n\nAWS.S3.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getSignedUrlPromise = AWS.util.promisifyMethod('getSignedUrl', PromiseDependency);\n};\n/**\n * @api private\n */\n\n\nAWS.S3.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getSignedUrlPromise;\n};\n\nAWS.util.addPromises(AWS.S3);","map":{"version":3,"names":["AWS","require","v4Credentials","resolveRegionalEndpointsFlag","s3util","regionUtil","operationsWith200StatusCodeError","regionRedirectErrorCodes","OBJECT_LAMBDA_SERVICE","util","update","S3","prototype","getSignatureVersion","request","defaultApiVersion","api","signatureVersion","userDefinedVersion","_originalConfig","regionDefinedVersion","config","isPresigned","getSigningName","req","operation","_super","Service","_parsedArn","service","call","getSignerClass","Signers","RequestSigner","getVersion","validateService","msg","messages","region","endpoint","s3BucketEndpoint","push","length","join","error","Error","name","message","shouldDisableBodySigning","signerClass","s3DisableBodySigning","V4","httpRequest","protocol","setupRequestListeners","addListener","setExpiresString","prependListener","validateScheme","validateBucketName","optInUsEast1RegionalEndpoint","removeListener","EventListeners","Core","VALIDATE_REGION","addContentType","computeContentMd5","computeSseCustomerKeyMd5","populateURI","addExpect100Continue","extractError","hoistPayloadMember","extractData","extractErrorFrom200Response","prepareSignedUrl","COMPUTE_SHA256","disableBodySigning","isArnInParam","ARN","parse","params","Bucket","validateS3AccessPointArn","validateArnResourceType","validateArnRegion","validateOutpostsAccessPointArn","validateOutpostsArn","validateArnAccount","validateArnService","populateUriFromAccessPointArn","validatePopulateUriFromArn","validateBucketEndpoint","correctBucketRegionFromCache","onAsync","requestBucketRegion","isBrowser","reqRegionForNetworkingError","scheme","sensitive","SSECustomerKey","CopySourceSSECustomerKey","code","allowFipsEndpoint","resource","indexOf","bucket","key","Key","slashIndex","copy","prefix","substr","isValidAccelerateOperation","invalidOperations","s3UsEast1RegionalEndpoint","env","sharedConfig","clientConfig","hostname","insertPoint","regionalEndpoint","substring","updateEndpoint","b","pathStyleBucketName","useAccelerateEndpoint","useDualstackEndpoint","port","host","virtualHostedBucket","removeVirtualHostedBucketFromPath","path","encodedS3Key","uriEscapePath","replace","RegExp","accessPointArn","isOutpostArn","isObjectLambdaArn","outpostsSuffix","outpostId","serviceName","fipsSuffix","useFipsEndpoint","dualStackSuffix","dnsSuffix","getEndpointSuffix","useArnRegion","s3UseArnRegion","accessPoint","accountId","accesspointName","split","encodedArn","uriEscape","len","headers","isNode","Body","stream","Stream","method","contentType","body","match","charset","replaceFn","_","charsetName","toUpperCase","willComputeChecksums","rules","operations","input","members","needsContentMD5","computeChecksums","ContentMD5","Buffer","isBuffer","md5","crypto","keys","each","header","value","bucketName","s3ForcePathStyle","dnsCompatibleBucketName","sslEnabled","resp","httpResponse","toString","data","retryableError","statusCode","_requestRegionForBucket","bucketRegionCache","updateReqBucketRegion","s3Config","newConfig","Host","_asm","currentState","LocationConstraint","clearBucketRegionCache","createBucketConfiguration","CreateBucketConfiguration","extractRequestIds","codes","cachedRegion","XML","Parser","Region","Code","Message","done","reqOperation","reqParams","MaxKeys","regionReq","send","getRegionReq","listObjects","buckets","Object","i","requestRegion","extendedRequestId","cfId","requestId","getSignedUrl","callback","expires","Expires","makeRequest","defer","presign","createPresignedPost","undefined","boundParams","self","pathname","finalizePost","url","urlFormat","fields","preparePostFields","credentials","Fields","Conditions","getCredentials","err","conditions","expiresInSeconds","now","getSkewCorrectedDate","slice","signingDate","date","iso8601","shortDate","scope","createScope","credential","accessKeyId","sessionToken","field","hasOwnProperty","condition","Policy","preparePostPolicy","Date","valueOf","hmac","getSigningKey","expiration","base64","encode","JSON","stringify","noPresignedContentLength","ContentLength","createBucket","copiedParams","globalEndpoint","writeGetObjectResponse","Endpoint","upload","options","merge","uploader","ManagedUpload","response","expiresstring","parseTimestamp","e","console","log","addPromisesToClass","PromiseDependency","getSignedUrlPromise","promisifyMethod","deletePromisesFromClass","addPromises"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/aws-sdk/lib/services/s3.js"],"sourcesContent":["var AWS = require('../core');\nvar v4Credentials = require('../signers/v4_credentials');\nvar resolveRegionalEndpointsFlag = require('../config_regional_endpoint');\nvar s3util = require('./s3util');\nvar regionUtil = require('../region_config');\n\n// Pull in managed upload extension\nrequire('../s3/managed_upload');\n\n/**\n * @api private\n */\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n\n/**\n * @api private\n */\n var regionRedirectErrorCodes = [\n  'AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\n  'BadRequest', // head operations on virtual-hosted global bucket endpoints\n  'PermanentRedirect', // non-head operations on path-style or regional endpoints\n  301 // head operations on path-style or regional endpoints\n ];\n\nvar OBJECT_LAMBDA_SERVICE = 's3-object-lambda';\n\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) If not using presigned urls, default to V4\n        b) If using presigned urls, default to lowest version the region supports\n    */\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n    return defaultApiVersion;\n  },\n\n  /**\n   * @api private\n   */\n  getSigningName: function getSigningName(req) {\n    if (req && req.operation === 'writeGetObjectResponse') {\n      return OBJECT_LAMBDA_SERVICE;\n    }\n\n    var _super = AWS.Service.prototype.getSigningName;\n    return (req && req._parsedArn && req._parsedArn.service)\n      ? req._parsedArn.service\n      : _super.call(this);\n  },\n\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = [];\n\n    // default to us-east-1 when no region is provided\n    if (!this.config.region) this.config.region = 'us-east-1';\n\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' +\n                    '`s3BucketEndpoint` to true.');\n    }\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n    if (msg) {\n      throw AWS.util.error(new Error(),\n        {name: 'InvalidEndpoint', message: msg});\n    }\n  },\n\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4\n        && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    request.addListener('validateResponse', this.setExpiresString);\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketName, prependListener);\n    request.addListener('validate', this.optInUsEast1RegionalEndpoint, prependListener);\n\n    request.removeListener('validate',\n      AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('build', this.populateURI);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.addListener('extractError', this.extractError);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('extractData', this.extractData);\n    request.addListener('extractData', this.extractErrorFrom200Response);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n    if (this.shouldDisableBodySigning(request))  {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    }\n    //deal with ARNs supplied to Bucket\n    if (request.operation !== 'createBucket' && s3util.isArnInParam(request, 'Bucket')) {\n      // avoid duplicate parsing in the future\n      request._parsedArn = AWS.util.ARN.parse(request.params.Bucket);\n\n      request.removeListener('validate', this.validateBucketName);\n      request.removeListener('build', this.populateURI);\n      if (request._parsedArn.service === 's3') {\n        request.addListener('validate', s3util.validateS3AccessPointArn);\n        request.addListener('validate', this.validateArnResourceType);\n        request.addListener('validate', this.validateArnRegion);\n      } else if (request._parsedArn.service === 's3-outposts') {\n        request.addListener('validate', s3util.validateOutpostsAccessPointArn);\n        request.addListener('validate', s3util.validateOutpostsArn);\n        request.addListener('validate', s3util.validateArnRegion);\n      }\n      request.addListener('validate', s3util.validateArnAccount);\n      request.addListener('validate', s3util.validateArnService);\n      request.addListener('build', this.populateUriFromAccessPointArn);\n      request.addListener('build', s3util.validatePopulateUriFromArn);\n      return;\n    }\n    //listeners regarding region inference\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.onAsync('extractError', this.requestBucketRegion);\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateScheme: function(req) {\n    var params = req.params,\n        scheme = req.httpRequest.endpoint.protocol,\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' +\n        'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function(req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n   validateArnRegion: function validateArnRegion(req) {\n    s3util.validateArnRegion(req, { allowFipsEndpoint: true });\n  },\n\n  /**\n   * Validate resource-type supplied in S3 ARN\n   */\n  validateArnResourceType: function validateArnResourceType(req) {\n    var resource = req._parsedArn.resource;\n\n    if (\n      resource.indexOf('accesspoint:') !== 0 &&\n      resource.indexOf('accesspoint/') !== 0\n    ) {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidARN',\n        message: 'ARN resource should begin with \\'accesspoint/\\''\n      });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params);\n        // Need to include trailing slash to match sigv2 behavior\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(),\n          { code: 'InvalidBucket', message: msg });\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = [\n      'createBucket',\n      'deleteBucket',\n      'listBuckets'\n    ];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n\n  /**\n   * When us-east-1 region endpoint configuration is set, in stead of sending request to\n   * global endpoint(e.g. 's3.amazonaws.com'), we will send request to\n   * 's3.us-east-1.amazonaws.com'.\n   * @api private\n   */\n  optInUsEast1RegionalEndpoint: function optInUsEast1RegionalEndpoint(req) {\n    var service = req.service;\n    var config = service.config;\n    config.s3UsEast1RegionalEndpoint = resolveRegionalEndpointsFlag(service._originalConfig, {\n      env: 'AWS_S3_US_EAST_1_REGIONAL_ENDPOINT',\n      sharedConfig: 's3_us_east_1_regional_endpoint',\n      clientConfig: 's3UsEast1RegionalEndpoint'\n    });\n    if (\n      !(service._originalConfig || {}).endpoint &&\n      req.httpRequest.region === 'us-east-1' &&\n      config.s3UsEast1RegionalEndpoint === 'regional' &&\n      req.httpRequest.endpoint.hostname.indexOf('s3.amazonaws.com') >= 0\n    ) {\n      var insertPoint = config.endpoint.indexOf('.amazonaws.com');\n      var regionalEndpoint = config.endpoint.substring(0, insertPoint) +\n        '.us-east-1' + config.endpoint.substring(insertPoint);\n      req.httpRequest.updateEndpoint(regionalEndpoint);\n    }\n  },\n\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstackEndpoint) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname =\n            b + '.' + endpoint.hostname;\n        }\n\n        var port = endpoint.port;\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' +\n            endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  /**\n   * When user supply an access point ARN in the Bucket parameter, we need to\n   * populate the URI according to the ARN.\n   */\n  populateUriFromAccessPointArn: function populateUriFromAccessPointArn(req) {\n    var accessPointArn = req._parsedArn;\n\n    var isOutpostArn = accessPointArn.service === 's3-outposts';\n    var isObjectLambdaArn = accessPointArn.service === 's3-object-lambda';\n\n    var outpostsSuffix = isOutpostArn ? '.' + accessPointArn.outpostId: '';\n    var serviceName = isOutpostArn ? 's3-outposts': 's3-accesspoint';\n    var fipsSuffix = !isOutpostArn && req.service.config.useFipsEndpoint ? '-fips': '';\n    var dualStackSuffix = !isOutpostArn &&\n      req.service.config.useDualstackEndpoint ? '.dualstack' : '';\n\n    var endpoint = req.httpRequest.endpoint;\n    var dnsSuffix = regionUtil.getEndpointSuffix(accessPointArn.region);\n    var useArnRegion = req.service.config.s3UseArnRegion;\n\n    endpoint.hostname = [\n      accessPointArn.accessPoint + '-' + accessPointArn.accountId + outpostsSuffix,\n      serviceName + fipsSuffix + dualStackSuffix,\n      useArnRegion ? accessPointArn.region : req.service.config.region,\n      dnsSuffix\n    ].join('.');\n\n    if (isObjectLambdaArn) {\n      // should be in the format: \"accesspoint/${accesspointName}\"\n      var serviceName = 's3-object-lambda';\n      var accesspointName = accessPointArn.resource.split('/')[1];\n      var fipsSuffix = req.service.config.useFipsEndpoint ? '-fips': '';\n      endpoint.hostname = [\n        accesspointName + '-' + accessPointArn.accountId,\n        serviceName + fipsSuffix,\n        useArnRegion ? accessPointArn.region : req.service.config.region,\n        dnsSuffix\n      ].join('.');\n    }\n    endpoint.host = endpoint.hostname;\n    var encodedArn = AWS.util.uriEscape(req.params.Bucket);\n    var path = req.httpRequest.path;\n    //remove the Bucket value from path\n    req.httpRequest.path = path.replace(new RegExp('/' + encodedArn), '');\n    if (req.httpRequest.path[0] !== '/') {\n      req.httpRequest.path = '/' + req.httpRequest.path;\n    }\n    req.httpRequest.region = accessPointArn.region; //region used to sign\n  },\n\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n\n    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n\n    var contentType = httpRequest.headers['Content-Type'];\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function(_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n\n        httpRequest.headers['Content-Type'] =\n          contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n\n  /**\n   * Checks whether checksums should be computed for the request if it's not\n   * already set by {AWS.EventListeners.Core.COMPUTE_CHECKSUM}. It depends on\n   * whether {AWS.Config.computeChecksums} is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    var rules = req.service.api.operations[req.operation].input.members;\n    var body = req.httpRequest.body;\n    var needsContentMD5 = req.service.config.computeChecksums &&\n      rules.ContentMD5 &&\n      !req.params.ContentMD5 &&\n      body &&\n      (AWS.util.Buffer.isBuffer(req.httpRequest.body) || typeof req.httpRequest.body === 'string');\n\n    // Sha256 signing disabled, and not a presigned url\n    if (needsContentMD5 && req.service.shouldDisableBodySigning(req) && !req.isPresigned()) {\n      return true;\n    }\n\n    // SigV2 and presign, for backwards compatibility purpose.\n    if (needsContentMD5 && this.getSignatureVersion(req) === 's3' && req.isPresigned()) {\n      return true;\n    }\n\n    return false;\n  },\n\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * This listener is to support S3-specific features like\n   * s3DisableBodySigning and SigV2 presign. Content MD5 logic for SigV4 is\n   * handled in AWS.EventListeners.Core.COMPUTE_CHECKSUM\n   *\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function(key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n\n    if (s3util.dnsCompatibleBucketName(bucketName)) {\n      return (this.config.sslEnabled && bucketName.match(/\\./)) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * For COPY operations, some can be error even with status code 200.\n   * SDK treats the response as exception when response body indicates\n   * an exception or body is empty.\n   *\n   * @api private\n   */\n  extractErrorFrom200Response: function extractErrorFrom200Response(resp) {\n    if (!operationsWith200StatusCodeError[resp.request.operation]) return;\n    var httpResponse = resp.httpResponse;\n    if (httpResponse.body && httpResponse.body.toString().match('<Error>')) {\n      // Response body with '<Error>...</Error>' indicates an exception.\n      // Get S3 client object. In ManagedUpload, this.service refers to\n      // S3 client object.\n      resp.data = null;\n      var service = this.service ? this.service : this;\n      service.extractError(resp);\n      throw resp.error;\n    } else if (!httpResponse.body || !httpResponse.body.toString().match(/<[\\w_]/)) {\n      // When body is empty or incomplete, S3 might stop the request on detecting client\n      // side aborting the request.\n      resp.data = null;\n      throw AWS.util.error(new Error(), {\n        code: 'InternalError',\n        message: 'S3 aborted request'\n      });\n    }\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] &&\n        error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket &&\n        request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error &&\n        regionRedirectErrorCodes.indexOf(error.code) != -1 &&\n        error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n\n    httpRequest.endpoint = (new AWS.S3(newConfig)).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n    var bucket = req.params.Bucket || null;\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n      if (region) {\n          if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n            req.service.bucketRegionCache[bucket] = region;\n          }\n      }\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n\n    var cachedRegion;\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n\n      if (data.Region && !region) {\n        region = data.Region;\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n\n    if (!error || !bucket || error.region || req.operation === 'listObjects' ||\n        (AWS.util.isNode() && req.operation === 'headBucket') ||\n        (error.statusCode === 400 && req.operation !== 'headObject') ||\n        regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {Bucket: bucket};\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function() {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n\n   /**\n   * For browser only. If NetworkingError received, will attempt to obtain\n   * the bucket region.\n   *\n   * @api private\n   */\n   reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n    if (!error || error.code !== 'NetworkingError' || !bucket ||\n        request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!s3util.dnsCompatibleBucketName(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({Bucket: bucket, MaxKeys: 0});\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n\n      getRegionReq.send(function() {\n        var region = service.bucketRegionCache[bucket] || null;\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n   },\n\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n   bucketRegionCache: {},\n\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n   clearBucketRegionCache: function(buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n    return bucketRegionCache;\n   },\n\n   /**\n    * Corrects request region if bucket's cached region is different\n    *\n    * @api private\n    */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(),\n        { code: 'InvalidParameterException', message: 'The expiration must be a number, received ' + typeof expires });\n    }\n\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function() {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n\n  /**\n   * @!method  getSignedUrlPromise()\n   *   Returns a 'thenable' promise that will be resolved with a pre-signed URL\n   *   for a given operation name.\n   *\n   *   Two callbacks can be provided to the `then` method on the returned promise.\n   *   The first callback will be called if the promise is fulfilled, and the second\n   *   callback will be called if the promise is rejected.\n   *   @note Not all operation parameters are supported when using pre-signed\n   *      URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *      `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *      request. If you are using pre-signed URLs to upload from a browser and\n   *      need to use these fields, see {createPresignedPost}.\n   *   @param operation [String] the name of the operation to call\n   *   @param params [map] parameters to pass to the operation. See the given\n   *      operation for the expected operation parameters. In addition, you can\n   *      also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *      work for.\n   *   @option params Expires [Integer] (900) the number of seconds to expire\n   *      the pre-signed URL operation in. Defaults to 15 minutes.\n   *   @callback fulfilledCallback function(url)\n   *     Called if the promise is fulfilled.\n   *     @param url [String] the signed url\n   *   @callback rejectedCallback function(err)\n   *     Called if the promise is rejected.\n   *     @param err [Error] if an error occurred, this value will be filled\n   *   @return [Promise] A promise that represents the state of the `refresh` call.\n   *   @example Pre-signing a getObject operation\n   *      var params = {Bucket: 'bucket', Key: 'key'};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Pre-signing a putObject operation with a specific payload\n   *      var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *      var promise = s3.getSignedUrlPromise('putObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   *   @example Passing in a 1-minute expiry time for a pre-signed URL\n   *      var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *      var promise = s3.getSignedUrlPromise('getObject', params);\n   *      promise.then(function(url) {\n   *        console.log('The URL is', url);\n   *      }, function(err) { ... });\n   */\n\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n      self = this,\n      config = this.config,\n      endpoint = AWS.util.copy(this.endpoint);\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(\n          config.credentials,\n          config.region,\n          bucket,\n          params.Fields,\n          params.Conditions,\n          params.Expires\n        )\n      };\n    }\n\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        } else {\n          try {\n            callback(null, finalizePost());\n          } catch (err) {\n            callback(err);\n          }\n        }\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(\n    credentials,\n    region,\n    bucket,\n    fields,\n    conditions,\n    expiresInSeconds\n  ) {\n    var now = this.getSkewCorrectedDate();\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,'\n        + ' region, and credentials');\n    }\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n\n    fields.Policy = this.preparePostPolicy(\n      new Date(now.valueOf() + expiresInSeconds * 1000),\n      conditions\n    );\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(\n      v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true),\n      fields.Policy,\n      'hex'\n    );\n\n    return fields;\n  },\n\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers;\n    // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'});\n    }\n  },\n\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n    var hostname = this.endpoint.hostname;\n    // copy params so that appending keys does not unintentioinallly\n    // mutate params object argument passed in by user\n    var copiedParams = AWS.util.copy(params);\n\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      copiedParams.CreateBucketConfiguration = { LocationConstraint: this.config.region };\n    }\n    return this.makeRequest('createBucket', copiedParams, callback);\n  },\n\n  writeGetObjectResponse: function writeGetObjectResponse(params, callback) {\n\n    var request = this.makeRequest('writeGetObjectResponse', AWS.util.copy(params), callback);\n    var hostname = this.endpoint.hostname;\n    if (hostname.indexOf(this.config.region) !== -1) {\n      // hostname specifies a region already\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.');\n    } else {\n      // Hostname doesn't have a region.\n      // Object Lambda requires an explicit region.\n      hostname = hostname.replace('s3.', OBJECT_LAMBDA_SERVICE + '.' + this.config.region + '.');\n    }\n\n    request.httpRequest.endpoint = new AWS.Endpoint(hostname, this.config);\n    return request;\n  },\n\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options = AWS.util.merge(options || {}, {service: this, params: params});\n\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  },\n\n  /**\n   * @api private\n   */\n  setExpiresString: function setExpiresString(response) {\n    // Check if response contains Expires value, and populate ExpiresString.\n    if (response && response.httpResponse && response.httpResponse.headers) {\n      if ('expires' in response.httpResponse.headers) {\n        response.httpResponse.headers.expiresstring = response.httpResponse.headers.expires;\n      }\n    }\n\n    // Check if value in Expires is not a Date using parseTimestamp.\n    try {\n      if (response && response.httpResponse && response.httpResponse.headers) {\n        if ('expires' in response.httpResponse.headers) {\n          AWS.util.date.parseTimestamp(response.httpResponse.headers.expires);\n        }\n      }\n    } catch (e) {\n      console.log('AWS SDK', '(warning)', e);\n      delete response.httpResponse.headers.expires;\n    }\n  }\n});\n\n/**\n * @api private\n */\nAWS.S3.addPromisesToClass = function addPromisesToClass(PromiseDependency) {\n  this.prototype.getSignedUrlPromise = AWS.util.promisifyMethod('getSignedUrl', PromiseDependency);\n};\n\n/**\n * @api private\n */\nAWS.S3.deletePromisesFromClass = function deletePromisesFromClass() {\n  delete this.prototype.getSignedUrlPromise;\n};\n\nAWS.util.addPromises(AWS.S3);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}