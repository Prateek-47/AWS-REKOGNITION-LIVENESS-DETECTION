{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeV2Client, RecognizeTextCommand, RecognizeUtteranceCommand } from '@aws-sdk/client-lex-runtime-v2';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\nvar logger = new Logger('AWSLexV2Provider');\n\nvar AWSLexV2Provider =\n/** @class */\nfunction (_super) {\n  __extends(AWSLexV2Provider, _super);\n  /**\n   * Initialize Interactions with AWS configurations\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n\n\n  function AWSLexV2Provider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, options) || this;\n\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  /**\n   * get provider name of the plugin\n   * @returns {string} name of the provider\n   */\n\n\n  AWSLexV2Provider.prototype.getProviderName = function () {\n    return 'AWSLexV2Provider';\n  };\n  /**\n   * Configure Interactions part with aws configuration\n   * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n   * @return {AWSLexV2ProviderOptions} - Current configuration\n   */\n\n\n  AWSLexV2Provider.prototype.configure = function (config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var propertiesToTest = ['name', 'botId', 'aliasId', 'localeId', 'providerName', 'region'];\n    Object.keys(config).forEach(function (botKey) {\n      var botConfig = config[botKey]; // is bot config correct\n\n      if (!propertiesToTest.every(function (x) {\n        return x in botConfig;\n      })) {\n        throw new Error('invalid bot configuration');\n      }\n    });\n    return _super.prototype.configure.call(this, config);\n  };\n  /**\n   * Send a message to a bot\n   * @async\n   * @param {string} botname - Bot name to send the message\n   * @param {string | InteractionsMessage} message - message to send to the bot\n   * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n   */\n\n\n  AWSLexV2Provider.prototype.sendMessage = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, error_1, response, reqBaseParams;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // check if bot exists\n            if (!this._config[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 2:\n            credentials = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            error_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n\n          case 4:\n            this._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n              region: this._config[botname].region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject()\n            });\n            reqBaseParams = {\n              botAliasId: this._config[botname].aliasId,\n              botId: this._config[botname].botId,\n              localeId: this._config[botname].localeId,\n              sessionId: credentials.identityId\n            };\n            if (!(typeof message === 'string')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._handleRecognizeTextCommand(botname, message, reqBaseParams)];\n\n          case 5:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            return [4\n            /*yield*/\n            , this._handleRecognizeUtteranceCommand(botname, message, reqBaseParams)];\n\n          case 7:\n            response = _a.sent();\n            _a.label = 8;\n\n          case 8:\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\n   * Attach a onComplete callback function to a bot.\n   * The callback is called once the bot's intent is fulfilled\n   * @param {string} botname - Bot name to attach the onComplete callback\n   * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n   */\n\n\n  AWSLexV2Provider.prototype.onComplete = function (botname, callback) {\n    // does bot exist\n    if (!this._config[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    this._botsCompleteCallback[botname] = callback;\n  };\n  /**\n   * @private\n   * call onComplete callback for a bot if configured\n   */\n\n\n  AWSLexV2Provider.prototype._reportBotStatus = function (data, botname) {\n    var _this = this;\n\n    var _a, _b, _c, _d, _e, _f;\n\n    var sessionState = data === null || data === void 0 ? void 0 : data.sessionState; // Check if state is fulfilled to resolve onFullfilment promise\n\n    logger.debug('postContent state', (_a = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _a === void 0 ? void 0 : _a.state);\n    var isConfigOnCompleteAttached = typeof ((_b = this._config) === null || _b === void 0 ? void 0 : _b[botname].onComplete) === 'function';\n    var isApiOnCompleteAttached = typeof ((_c = this._botsCompleteCallback) === null || _c === void 0 ? void 0 : _c[botname]) === 'function'; // no onComplete callbacks added\n\n    if (!isConfigOnCompleteAttached && !isApiOnCompleteAttached) return;\n\n    if (((_d = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _d === void 0 ? void 0 : _d.state) === 'ReadyForFulfillment' || ((_e = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _e === void 0 ? void 0 : _e.state) === 'Fulfilled') {\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          var _a;\n\n          return (_a = _this._botsCompleteCallback) === null || _a === void 0 ? void 0 : _a[botname](null, data);\n        }, 0);\n      }\n\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(null, data);\n        }, 0);\n      }\n    }\n\n    if (((_f = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _f === void 0 ? void 0 : _f.state) === 'Failed') {\n      var error_2 = new Error('Bot conversation failed');\n\n      if (isApiOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._botsCompleteCallback[botname](error_2);\n        }, 0);\n      }\n\n      if (isConfigOnCompleteAttached) {\n        setTimeout(function () {\n          return _this._config[botname].onComplete(error_2);\n        }, 0);\n      }\n    }\n  };\n  /**\n   * Format UtteranceCommandOutput's response\n   * decompress attributes\n   * update audioStream format\n   */\n\n\n  AWSLexV2Provider.prototype._formatUtteranceCommandOutput = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, _a, _b, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = [__assign({}, data)];\n            _b = {};\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.messages)];\n\n          case 1:\n            _b.messages = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.sessionState)];\n\n          case 2:\n            _b.sessionState = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.interpretations)];\n\n          case 3:\n            _b.interpretations = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.requestAttributes)];\n\n          case 4:\n            _b.requestAttributes = _d.sent();\n            return [4\n            /*yield*/\n            , unGzipBase64AsJson(data.inputTranscript)];\n\n          case 5:\n            _b.inputTranscript = _d.sent();\n            if (!data.audioStream) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , convert(data.audioStream)];\n\n          case 6:\n            _c = _d.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            _c = undefined;\n            _d.label = 8;\n\n          case 8:\n            response = __assign.apply(void 0, _a.concat([(_b.audioStream = _c, _b)]));\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeTextCommand`\n   * used for sending simple text message\n   */\n\n\n  AWSLexV2Provider.prototype._handleRecognizeTextCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, recognizeTextCommand, data_1, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('postText to lex2', data);\n            params = __assign(__assign({}, baseParams), {\n              text: data\n            });\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            recognizeTextCommand = new RecognizeTextCommand(params);\n            return [4\n            /*yield*/\n            , this._lexRuntimeServiceV2Client.send(recognizeTextCommand)];\n\n          case 2:\n            data_1 = _a.sent();\n\n            this._reportBotStatus(data_1, botname);\n\n            return [2\n            /*return*/\n            , data_1];\n\n          case 3:\n            err_1 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * handle client's `RecognizeUtteranceCommand`\n   * used for obj text or obj voice message\n   */\n\n\n  AWSLexV2Provider.prototype._handleRecognizeUtteranceCommand = function (botname, data, baseParams) {\n    return __awaiter(this, void 0, void 0, function () {\n      var content, messageType, params, inputStream, _a, recognizeUtteranceCommand, data_2, response, err_2;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            content = data.content, messageType = data.options.messageType;\n            logger.debug('postContent to lex2', data);\n            if (!(messageType === 'voice')) return [3\n            /*break*/\n            , 4];\n\n            if (typeof content !== 'object') {\n              return [2\n              /*return*/\n              , Promise.reject('invalid content type')];\n            }\n\n            if (!(content instanceof Uint8Array)) return [3\n            /*break*/\n            , 1];\n            _a = content;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , convert(content)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            inputStream = _a;\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1',\n              inputStream: inputStream\n            });\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            // text input\n            if (typeof content !== 'string') return [2\n            /*return*/\n            , Promise.reject('invalid content type')];\n            params = __assign(__assign({}, baseParams), {\n              requestContentType: 'text/plain; charset=utf-8',\n              inputStream: content\n            });\n            _b.label = 5;\n\n          case 5:\n            _b.trys.push([5, 8,, 9]);\n\n            recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n            return [4\n            /*yield*/\n            , this._lexRuntimeServiceV2Client.send(recognizeUtteranceCommand)];\n\n          case 6:\n            data_2 = _b.sent();\n            return [4\n            /*yield*/\n            , this._formatUtteranceCommandOutput(data_2)];\n\n          case 7:\n            response = _b.sent();\n\n            this._reportBotStatus(response, botname);\n\n            return [2\n            /*return*/\n            , response];\n\n          case 8:\n            err_2 = _b.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return AWSLexV2Provider;\n}(AbstractInteractionsProvider);\n\nexport { AWSLexV2Provider };","map":{"version":3,"names":["__assign","__awaiter","__extends","__generator","AbstractInteractionsProvider","LexRuntimeV2Client","RecognizeTextCommand","RecognizeUtteranceCommand","ConsoleLogger","Logger","Credentials","getAmplifyUserAgentObject","convert","unGzipBase64AsJson","logger","AWSLexV2Provider","_super","options","_this","call","_botsCompleteCallback","prototype","getProviderName","configure","config","propertiesToTest","Object","keys","forEach","botKey","botConfig","every","x","Error","sendMessage","botname","message","credentials","error_1","response","reqBaseParams","_a","label","_config","Promise","reject","trys","push","get","sent","_lexRuntimeServiceV2Client","region","customUserAgent","botAliasId","aliasId","botId","localeId","sessionId","identityId","_handleRecognizeTextCommand","_handleRecognizeUtteranceCommand","onComplete","callback","_reportBotStatus","data","_b","_c","_d","_e","_f","sessionState","debug","intent","state","isConfigOnCompleteAttached","isApiOnCompleteAttached","setTimeout","error_2","_formatUtteranceCommandOutput","messages","interpretations","requestAttributes","inputTranscript","audioStream","undefined","apply","concat","baseParams","params","recognizeTextCommand","data_1","err_1","text","send","content","messageType","inputStream","recognizeUtteranceCommand","data_2","err_2","Uint8Array","requestContentType"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/interactions/lib-esm/Providers/AWSLexV2Provider.js"],"sourcesContent":["import { __assign, __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeV2Client, RecognizeTextCommand, RecognizeUtteranceCommand, } from '@aws-sdk/client-lex-runtime-v2';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgentObject, } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/utils';\nimport { unGzipBase64AsJson } from './AWSLexProviderHelper/commonUtils';\nvar logger = new Logger('AWSLexV2Provider');\nvar AWSLexV2Provider = /** @class */ (function (_super) {\n    __extends(AWSLexV2Provider, _super);\n    /**\n     * Initialize Interactions with AWS configurations\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     */\n    function AWSLexV2Provider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    /**\n     * get provider name of the plugin\n     * @returns {string} name of the provider\n     */\n    AWSLexV2Provider.prototype.getProviderName = function () {\n        return 'AWSLexV2Provider';\n    };\n    /**\n     * Configure Interactions part with aws configuration\n     * @param {AWSLexV2ProviderOptions} config - Configuration of the Interactions\n     * @return {AWSLexV2ProviderOptions} - Current configuration\n     */\n    AWSLexV2Provider.prototype.configure = function (config) {\n        if (config === void 0) { config = {}; }\n        var propertiesToTest = [\n            'name',\n            'botId',\n            'aliasId',\n            'localeId',\n            'providerName',\n            'region',\n        ];\n        Object.keys(config).forEach(function (botKey) {\n            var botConfig = config[botKey];\n            // is bot config correct\n            if (!propertiesToTest.every(function (x) { return x in botConfig; })) {\n                throw new Error('invalid bot configuration');\n            }\n        });\n        return _super.prototype.configure.call(this, config);\n    };\n    /**\n     * Send a message to a bot\n     * @async\n     * @param {string} botname - Bot name to send the message\n     * @param {string | InteractionsMessage} message - message to send to the bot\n     * @return {Promise<InteractionsResponse>} A promise resolves to the response from the bot\n     */\n    AWSLexV2Provider.prototype.sendMessage = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, error_1, response, reqBaseParams;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        // check if bot exists\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 2:\n                        credentials = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_1 = _a.sent();\n                        return [2 /*return*/, Promise.reject('No credentials')];\n                    case 4:\n                        this._lexRuntimeServiceV2Client = new LexRuntimeV2Client({\n                            region: this._config[botname].region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgentObject(),\n                        });\n                        reqBaseParams = {\n                            botAliasId: this._config[botname].aliasId,\n                            botId: this._config[botname].botId,\n                            localeId: this._config[botname].localeId,\n                            sessionId: credentials.identityId,\n                        };\n                        if (!(typeof message === 'string')) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._handleRecognizeTextCommand(botname, message, reqBaseParams)];\n                    case 5:\n                        response = _a.sent();\n                        return [3 /*break*/, 8];\n                    case 6: return [4 /*yield*/, this._handleRecognizeUtteranceCommand(botname, message, reqBaseParams)];\n                    case 7:\n                        response = _a.sent();\n                        _a.label = 8;\n                    case 8: return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    /**\n     * Attach a onComplete callback function to a bot.\n     * The callback is called once the bot's intent is fulfilled\n     * @param {string} botname - Bot name to attach the onComplete callback\n     * @param {(err: Error | null, confirmation: InteractionsResponse) => void} callback - called when Intent Fulfilled\n     */\n    AWSLexV2Provider.prototype.onComplete = function (botname, callback) {\n        // does bot exist\n        if (!this._config[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    /**\n     * @private\n     * call onComplete callback for a bot if configured\n     */\n    AWSLexV2Provider.prototype._reportBotStatus = function (data, botname) {\n        var _this = this;\n        var _a, _b, _c, _d, _e, _f;\n        var sessionState = data === null || data === void 0 ? void 0 : data.sessionState;\n        // Check if state is fulfilled to resolve onFullfilment promise\n        logger.debug('postContent state', (_a = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _a === void 0 ? void 0 : _a.state);\n        var isConfigOnCompleteAttached = typeof ((_b = this._config) === null || _b === void 0 ? void 0 : _b[botname].onComplete) === 'function';\n        var isApiOnCompleteAttached = typeof ((_c = this._botsCompleteCallback) === null || _c === void 0 ? void 0 : _c[botname]) === 'function';\n        // no onComplete callbacks added\n        if (!isConfigOnCompleteAttached && !isApiOnCompleteAttached)\n            return;\n        if (((_d = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _d === void 0 ? void 0 : _d.state) === 'ReadyForFulfillment' ||\n            ((_e = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _e === void 0 ? void 0 : _e.state) === 'Fulfilled') {\n            if (isApiOnCompleteAttached) {\n                setTimeout(function () { var _a; return (_a = _this._botsCompleteCallback) === null || _a === void 0 ? void 0 : _a[botname](null, data); }, 0);\n            }\n            if (isConfigOnCompleteAttached) {\n                setTimeout(function () { return _this._config[botname].onComplete(null, data); }, 0);\n            }\n        }\n        if (((_f = sessionState === null || sessionState === void 0 ? void 0 : sessionState.intent) === null || _f === void 0 ? void 0 : _f.state) === 'Failed') {\n            var error_2 = new Error('Bot conversation failed');\n            if (isApiOnCompleteAttached) {\n                setTimeout(function () { return _this._botsCompleteCallback[botname](error_2); }, 0);\n            }\n            if (isConfigOnCompleteAttached) {\n                setTimeout(function () { return _this._config[botname].onComplete(error_2); }, 0);\n            }\n        }\n    };\n    /**\n     * Format UtteranceCommandOutput's response\n     * decompress attributes\n     * update audioStream format\n     */\n    AWSLexV2Provider.prototype._formatUtteranceCommandOutput = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var response, _a, _b, _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = [__assign({}, data)];\n                        _b = {};\n                        return [4 /*yield*/, unGzipBase64AsJson(data.messages)];\n                    case 1:\n                        _b.messages = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.sessionState)];\n                    case 2:\n                        _b.sessionState = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.interpretations)];\n                    case 3:\n                        _b.interpretations = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.requestAttributes)];\n                    case 4:\n                        _b.requestAttributes = _d.sent();\n                        return [4 /*yield*/, unGzipBase64AsJson(data.inputTranscript)];\n                    case 5:\n                        _b.inputTranscript = _d.sent();\n                        if (!data.audioStream) return [3 /*break*/, 7];\n                        return [4 /*yield*/, convert(data.audioStream)];\n                    case 6:\n                        _c = _d.sent();\n                        return [3 /*break*/, 8];\n                    case 7:\n                        _c = undefined;\n                        _d.label = 8;\n                    case 8:\n                        response = __assign.apply(void 0, _a.concat([(_b.audioStream = _c, _b)]));\n                        return [2 /*return*/, response];\n                }\n            });\n        });\n    };\n    /**\n     * handle client's `RecognizeTextCommand`\n     * used for sending simple text message\n     */\n    AWSLexV2Provider.prototype._handleRecognizeTextCommand = function (botname, data, baseParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, recognizeTextCommand, data_1, err_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('postText to lex2', data);\n                        params = __assign(__assign({}, baseParams), { text: data });\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        recognizeTextCommand = new RecognizeTextCommand(params);\n                        return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeTextCommand)];\n                    case 2:\n                        data_1 = _a.sent();\n                        this._reportBotStatus(data_1, botname);\n                        return [2 /*return*/, data_1];\n                    case 3:\n                        err_1 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * handle client's `RecognizeUtteranceCommand`\n     * used for obj text or obj voice message\n     */\n    AWSLexV2Provider.prototype._handleRecognizeUtteranceCommand = function (botname, data, baseParams) {\n        return __awaiter(this, void 0, void 0, function () {\n            var content, messageType, params, inputStream, _a, recognizeUtteranceCommand, data_2, response, err_2;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        content = data.content, messageType = data.options.messageType;\n                        logger.debug('postContent to lex2', data);\n                        if (!(messageType === 'voice')) return [3 /*break*/, 4];\n                        if (typeof content !== 'object') {\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        }\n                        if (!(content instanceof Uint8Array)) return [3 /*break*/, 1];\n                        _a = content;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, convert(content)];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        inputStream = _a;\n                        params = __assign(__assign({}, baseParams), { requestContentType: 'audio/x-l16; sample-rate=16000; channel-count=1', inputStream: inputStream });\n                        return [3 /*break*/, 5];\n                    case 4:\n                        // text input\n                        if (typeof content !== 'string')\n                            return [2 /*return*/, Promise.reject('invalid content type')];\n                        params = __assign(__assign({}, baseParams), { requestContentType: 'text/plain; charset=utf-8', inputStream: content });\n                        _b.label = 5;\n                    case 5:\n                        _b.trys.push([5, 8, , 9]);\n                        recognizeUtteranceCommand = new RecognizeUtteranceCommand(params);\n                        return [4 /*yield*/, this._lexRuntimeServiceV2Client.send(recognizeUtteranceCommand)];\n                    case 6:\n                        data_2 = _b.sent();\n                        return [4 /*yield*/, this._formatUtteranceCommandOutput(data_2)];\n                    case 7:\n                        response = _b.sent();\n                        this._reportBotStatus(response, botname);\n                        return [2 /*return*/, response];\n                    case 8:\n                        err_2 = _b.sent();\n                        return [2 /*return*/, Promise.reject(err_2)];\n                    case 9: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return AWSLexV2Provider;\n}(AbstractInteractionsProvider));\nexport { AWSLexV2Provider };\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,SAA9B,EAAyCC,WAAzC,QAA4D,OAA5D,C,CACA;AACA;;AACA,SAASC,4BAAT,QAA6C,wBAA7C;AACA,SAASC,kBAAT,EAA6BC,oBAA7B,EAAmDC,yBAAnD,QAAqF,gCAArF;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,WAAlC,EAA+CC,yBAA/C,QAAiF,mBAAjF;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,SAASC,kBAAT,QAAmC,oCAAnC;AACA,IAAIC,MAAM,GAAG,IAAIL,MAAJ,CAAW,kBAAX,CAAb;;AACA,IAAIM,gBAAgB;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACpDd,SAAS,CAACa,gBAAD,EAAmBC,MAAnB,CAAT;EACA;AACJ;AACA;AACA;;;EACI,SAASD,gBAAT,CAA0BE,OAA1B,EAAmC;IAC/B,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;MAAEA,OAAO,GAAG,EAAV;IAAe;;IACzC,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkBF,OAAlB,KAA8B,IAA1C;;IACAC,KAAK,CAACE,qBAAN,GAA8B,EAA9B;IACA,OAAOF,KAAP;EACH;EACD;AACJ;AACA;AACA;;;EACIH,gBAAgB,CAACM,SAAjB,CAA2BC,eAA3B,GAA6C,YAAY;IACrD,OAAO,kBAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;;;EACIP,gBAAgB,CAACM,SAAjB,CAA2BE,SAA3B,GAAuC,UAAUC,MAAV,EAAkB;IACrD,IAAIA,MAAM,KAAK,KAAK,CAApB,EAAuB;MAAEA,MAAM,GAAG,EAAT;IAAc;;IACvC,IAAIC,gBAAgB,GAAG,CACnB,MADmB,EAEnB,OAFmB,EAGnB,SAHmB,EAInB,UAJmB,EAKnB,cALmB,EAMnB,QANmB,CAAvB;IAQAC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,OAApB,CAA4B,UAAUC,MAAV,EAAkB;MAC1C,IAAIC,SAAS,GAAGN,MAAM,CAACK,MAAD,CAAtB,CAD0C,CAE1C;;MACA,IAAI,CAACJ,gBAAgB,CAACM,KAAjB,CAAuB,UAAUC,CAAV,EAAa;QAAE,OAAOA,CAAC,IAAIF,SAAZ;MAAwB,CAA9D,CAAL,EAAsE;QAClE,MAAM,IAAIG,KAAJ,CAAU,2BAAV,CAAN;MACH;IACJ,CAND;IAOA,OAAOjB,MAAM,CAACK,SAAP,CAAiBE,SAAjB,CAA2BJ,IAA3B,CAAgC,IAAhC,EAAsCK,MAAtC,CAAP;EACH,CAlBD;EAmBA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIT,gBAAgB,CAACM,SAAjB,CAA2Ba,WAA3B,GAAyC,UAAUC,OAAV,EAAmBC,OAAnB,EAA4B;IACjE,OAAOnC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIoC,WAAJ,EAAiBC,OAAjB,EAA0BC,QAA1B,EAAoCC,aAApC;MACA,OAAOrC,WAAW,CAAC,IAAD,EAAO,UAAUsC,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACC,KAAX;UACI,KAAK,CAAL;YACI;YACA,IAAI,CAAC,KAAKC,OAAL,CAAaR,OAAb,CAAL,EAA4B;cACxB,OAAO,CAAC;cAAE;cAAH,EAAeS,OAAO,CAACC,MAAR,CAAe,SAASV,OAAT,GAAmB,iBAAlC,CAAf,CAAP;YACH;;YACDM,EAAE,CAACC,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACID,EAAE,CAACK,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAcrC,WAAW,CAACsC,GAAZ,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIX,WAAW,GAAGI,EAAE,CAACQ,IAAH,EAAd;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIX,OAAO,GAAGG,EAAE,CAACQ,IAAH,EAAV;YACA,OAAO,CAAC;YAAE;YAAH,EAAeL,OAAO,CAACC,MAAR,CAAe,gBAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YACI,KAAKK,0BAAL,GAAkC,IAAI7C,kBAAJ,CAAuB;cACrD8C,MAAM,EAAE,KAAKR,OAAL,CAAaR,OAAb,EAAsBgB,MADuB;cAErDd,WAAW,EAAEA,WAFwC;cAGrDe,eAAe,EAAEzC,yBAAyB;YAHW,CAAvB,CAAlC;YAKA6B,aAAa,GAAG;cACZa,UAAU,EAAE,KAAKV,OAAL,CAAaR,OAAb,EAAsBmB,OADtB;cAEZC,KAAK,EAAE,KAAKZ,OAAL,CAAaR,OAAb,EAAsBoB,KAFjB;cAGZC,QAAQ,EAAE,KAAKb,OAAL,CAAaR,OAAb,EAAsBqB,QAHpB;cAIZC,SAAS,EAAEpB,WAAW,CAACqB;YAJX,CAAhB;YAMA,IAAI,EAAE,OAAOtB,OAAP,KAAmB,QAArB,CAAJ,EAAoC,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;YACpC,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKuB,2BAAL,CAAiCxB,OAAjC,EAA0CC,OAA1C,EAAmDI,aAAnD,CAAd,CAAP;;UACJ,KAAK,CAAL;YACID,QAAQ,GAAGE,EAAE,CAACQ,IAAH,EAAX;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKW,gCAAL,CAAsCzB,OAAtC,EAA+CC,OAA/C,EAAwDI,aAAxD,CAAd,CAAP;;UACR,KAAK,CAAL;YACID,QAAQ,GAAGE,EAAE,CAACQ,IAAH,EAAX;YACAR,EAAE,CAACC,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAeH,QAAf,CAAP;QArCZ;MAuCH,CAxCiB,CAAlB;IAyCH,CA3Ce,CAAhB;EA4CH,CA7CD;EA8CA;AACJ;AACA;AACA;AACA;AACA;;;EACIxB,gBAAgB,CAACM,SAAjB,CAA2BwC,UAA3B,GAAwC,UAAU1B,OAAV,EAAmB2B,QAAnB,EAA6B;IACjE;IACA,IAAI,CAAC,KAAKnB,OAAL,CAAaR,OAAb,CAAL,EAA4B;MACxB,MAAM,IAAIF,KAAJ,CAAU,SAASE,OAAT,GAAmB,iBAA7B,CAAN;IACH;;IACD,KAAKf,qBAAL,CAA2Be,OAA3B,IAAsC2B,QAAtC;EACH,CAND;EAOA;AACJ;AACA;AACA;;;EACI/C,gBAAgB,CAACM,SAAjB,CAA2B0C,gBAA3B,GAA8C,UAAUC,IAAV,EAAgB7B,OAAhB,EAAyB;IACnE,IAAIjB,KAAK,GAAG,IAAZ;;IACA,IAAIuB,EAAJ,EAAQwB,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB;;IACA,IAAIC,YAAY,GAAGN,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACM,YAApE,CAHmE,CAInE;;IACAxD,MAAM,CAACyD,KAAP,CAAa,mBAAb,EAAkC,CAAC9B,EAAE,GAAG6B,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACE,MAA/E,MAA2F,IAA3F,IAAmG/B,EAAE,KAAK,KAAK,CAA/G,GAAmH,KAAK,CAAxH,GAA4HA,EAAE,CAACgC,KAAjK;IACA,IAAIC,0BAA0B,GAAG,QAAQ,CAACT,EAAE,GAAG,KAAKtB,OAAX,MAAwB,IAAxB,IAAgCsB,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAAC9B,OAAD,CAAF,CAAY0B,UAA7E,MAA6F,UAA9H;IACA,IAAIc,uBAAuB,GAAG,QAAQ,CAACT,EAAE,GAAG,KAAK9C,qBAAX,MAAsC,IAAtC,IAA8C8C,EAAE,KAAK,KAAK,CAA1D,GAA8D,KAAK,CAAnE,GAAuEA,EAAE,CAAC/B,OAAD,CAAjF,MAAgG,UAA9H,CAPmE,CAQnE;;IACA,IAAI,CAACuC,0BAAD,IAA+B,CAACC,uBAApC,EACI;;IACJ,IAAI,CAAC,CAACR,EAAE,GAAGG,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACE,MAA/E,MAA2F,IAA3F,IAAmGL,EAAE,KAAK,KAAK,CAA/G,GAAmH,KAAK,CAAxH,GAA4HA,EAAE,CAACM,KAAhI,MAA2I,qBAA3I,IACA,CAAC,CAACL,EAAE,GAAGE,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACE,MAA/E,MAA2F,IAA3F,IAAmGJ,EAAE,KAAK,KAAK,CAA/G,GAAmH,KAAK,CAAxH,GAA4HA,EAAE,CAACK,KAAhI,MAA2I,WAD/I,EAC4J;MACxJ,IAAIE,uBAAJ,EAA6B;QACzBC,UAAU,CAAC,YAAY;UAAE,IAAInC,EAAJ;;UAAQ,OAAO,CAACA,EAAE,GAAGvB,KAAK,CAACE,qBAAZ,MAAuC,IAAvC,IAA+CqB,EAAE,KAAK,KAAK,CAA3D,GAA+D,KAAK,CAApE,GAAwEA,EAAE,CAACN,OAAD,CAAF,CAAY,IAAZ,EAAkB6B,IAAlB,CAA/E;QAAyG,CAAhI,EAAkI,CAAlI,CAAV;MACH;;MACD,IAAIU,0BAAJ,EAAgC;QAC5BE,UAAU,CAAC,YAAY;UAAE,OAAO1D,KAAK,CAACyB,OAAN,CAAcR,OAAd,EAAuB0B,UAAvB,CAAkC,IAAlC,EAAwCG,IAAxC,CAAP;QAAuD,CAAtE,EAAwE,CAAxE,CAAV;MACH;IACJ;;IACD,IAAI,CAAC,CAACK,EAAE,GAAGC,YAAY,KAAK,IAAjB,IAAyBA,YAAY,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,YAAY,CAACE,MAA/E,MAA2F,IAA3F,IAAmGH,EAAE,KAAK,KAAK,CAA/G,GAAmH,KAAK,CAAxH,GAA4HA,EAAE,CAACI,KAAhI,MAA2I,QAA/I,EAAyJ;MACrJ,IAAII,OAAO,GAAG,IAAI5C,KAAJ,CAAU,yBAAV,CAAd;;MACA,IAAI0C,uBAAJ,EAA6B;QACzBC,UAAU,CAAC,YAAY;UAAE,OAAO1D,KAAK,CAACE,qBAAN,CAA4Be,OAA5B,EAAqC0C,OAArC,CAAP;QAAuD,CAAtE,EAAwE,CAAxE,CAAV;MACH;;MACD,IAAIH,0BAAJ,EAAgC;QAC5BE,UAAU,CAAC,YAAY;UAAE,OAAO1D,KAAK,CAACyB,OAAN,CAAcR,OAAd,EAAuB0B,UAAvB,CAAkCgB,OAAlC,CAAP;QAAoD,CAAnE,EAAqE,CAArE,CAAV;MACH;IACJ;EACJ,CA7BD;EA8BA;AACJ;AACA;AACA;AACA;;;EACI9D,gBAAgB,CAACM,SAAjB,CAA2ByD,6BAA3B,GAA2D,UAAUd,IAAV,EAAgB;IACvE,OAAO/D,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIsC,QAAJ,EAAcE,EAAd,EAAkBwB,EAAlB,EAAsBC,EAAtB;;MACA,OAAO/D,WAAW,CAAC,IAAD,EAAO,UAAUgE,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACzB,KAAX;UACI,KAAK,CAAL;YACID,EAAE,GAAG,CAACzC,QAAQ,CAAC,EAAD,EAAKgE,IAAL,CAAT,CAAL;YACAC,EAAE,GAAG,EAAL;YACA,OAAO,CAAC;YAAE;YAAH,EAAcpD,kBAAkB,CAACmD,IAAI,CAACe,QAAN,CAAhC,CAAP;;UACJ,KAAK,CAAL;YACId,EAAE,CAACc,QAAH,GAAcZ,EAAE,CAAClB,IAAH,EAAd;YACA,OAAO,CAAC;YAAE;YAAH,EAAcpC,kBAAkB,CAACmD,IAAI,CAACM,YAAN,CAAhC,CAAP;;UACJ,KAAK,CAAL;YACIL,EAAE,CAACK,YAAH,GAAkBH,EAAE,CAAClB,IAAH,EAAlB;YACA,OAAO,CAAC;YAAE;YAAH,EAAcpC,kBAAkB,CAACmD,IAAI,CAACgB,eAAN,CAAhC,CAAP;;UACJ,KAAK,CAAL;YACIf,EAAE,CAACe,eAAH,GAAqBb,EAAE,CAAClB,IAAH,EAArB;YACA,OAAO,CAAC;YAAE;YAAH,EAAcpC,kBAAkB,CAACmD,IAAI,CAACiB,iBAAN,CAAhC,CAAP;;UACJ,KAAK,CAAL;YACIhB,EAAE,CAACgB,iBAAH,GAAuBd,EAAE,CAAClB,IAAH,EAAvB;YACA,OAAO,CAAC;YAAE;YAAH,EAAcpC,kBAAkB,CAACmD,IAAI,CAACkB,eAAN,CAAhC,CAAP;;UACJ,KAAK,CAAL;YACIjB,EAAE,CAACiB,eAAH,GAAqBf,EAAE,CAAClB,IAAH,EAArB;YACA,IAAI,CAACe,IAAI,CAACmB,WAAV,EAAuB,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;YACvB,OAAO,CAAC;YAAE;YAAH,EAAcvE,OAAO,CAACoD,IAAI,CAACmB,WAAN,CAArB,CAAP;;UACJ,KAAK,CAAL;YACIjB,EAAE,GAAGC,EAAE,CAAClB,IAAH,EAAL;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIiB,EAAE,GAAGkB,SAAL;YACAjB,EAAE,CAACzB,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACIH,QAAQ,GAAGvC,QAAQ,CAACqF,KAAT,CAAe,KAAK,CAApB,EAAuB5C,EAAE,CAAC6C,MAAH,CAAU,EAAErB,EAAE,CAACkB,WAAH,GAAiBjB,EAAjB,EAAqBD,EAAvB,EAAV,CAAvB,CAAX;YACA,OAAO,CAAC;YAAE;YAAH,EAAe1B,QAAf,CAAP;QA7BR;MA+BH,CAhCiB,CAAlB;IAiCH,CAnCe,CAAhB;EAoCH,CArCD;EAsCA;AACJ;AACA;AACA;;;EACIxB,gBAAgB,CAACM,SAAjB,CAA2BsC,2BAA3B,GAAyD,UAAUxB,OAAV,EAAmB6B,IAAnB,EAAyBuB,UAAzB,EAAqC;IAC1F,OAAOtF,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIuF,MAAJ,EAAYC,oBAAZ,EAAkCC,MAAlC,EAA0CC,KAA1C;MACA,OAAOxF,WAAW,CAAC,IAAD,EAAO,UAAUsC,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACC,KAAX;UACI,KAAK,CAAL;YACI5B,MAAM,CAACyD,KAAP,CAAa,kBAAb,EAAiCP,IAAjC;YACAwB,MAAM,GAAGxF,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKuF,UAAL,CAAT,EAA2B;cAAEK,IAAI,EAAE5B;YAAR,CAA3B,CAAjB;YACAvB,EAAE,CAACC,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACID,EAAE,CAACK,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA0C,oBAAoB,GAAG,IAAInF,oBAAJ,CAAyBkF,MAAzB,CAAvB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKtC,0BAAL,CAAgC2C,IAAhC,CAAqCJ,oBAArC,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,MAAM,GAAGjD,EAAE,CAACQ,IAAH,EAAT;;YACA,KAAKc,gBAAL,CAAsB2B,MAAtB,EAA8BvD,OAA9B;;YACA,OAAO,CAAC;YAAE;YAAH,EAAeuD,MAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,KAAK,GAAGlD,EAAE,CAACQ,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAeL,OAAO,CAACC,MAAR,CAAe8C,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAhBZ;MAkBH,CAnBiB,CAAlB;IAoBH,CAtBe,CAAhB;EAuBH,CAxBD;EAyBA;AACJ;AACA;AACA;;;EACI5E,gBAAgB,CAACM,SAAjB,CAA2BuC,gCAA3B,GAA8D,UAAUzB,OAAV,EAAmB6B,IAAnB,EAAyBuB,UAAzB,EAAqC;IAC/F,OAAOtF,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI6F,OAAJ,EAAaC,WAAb,EAA0BP,MAA1B,EAAkCQ,WAAlC,EAA+CvD,EAA/C,EAAmDwD,yBAAnD,EAA8EC,MAA9E,EAAsF3D,QAAtF,EAAgG4D,KAAhG;;MACA,OAAOhG,WAAW,CAAC,IAAD,EAAO,UAAU8D,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACvB,KAAX;UACI,KAAK,CAAL;YACIoD,OAAO,GAAG9B,IAAI,CAAC8B,OAAf,EAAwBC,WAAW,GAAG/B,IAAI,CAAC/C,OAAL,CAAa8E,WAAnD;YACAjF,MAAM,CAACyD,KAAP,CAAa,qBAAb,EAAoCP,IAApC;YACA,IAAI,EAAE+B,WAAW,KAAK,OAAlB,CAAJ,EAAgC,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;YAChC,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;cAC7B,OAAO,CAAC;cAAE;cAAH,EAAelD,OAAO,CAACC,MAAR,CAAe,sBAAf,CAAf,CAAP;YACH;;YACD,IAAI,EAAEiD,OAAO,YAAYM,UAArB,CAAJ,EAAsC,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;YACtC3D,EAAE,GAAGqD,OAAL;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAclF,OAAO,CAACkF,OAAD,CAArB,CAAP;;UACR,KAAK,CAAL;YACIrD,EAAE,GAAGwB,EAAE,CAAChB,IAAH,EAAL;YACAgB,EAAE,CAACvB,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACIsD,WAAW,GAAGvD,EAAd;YACA+C,MAAM,GAAGxF,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKuF,UAAL,CAAT,EAA2B;cAAEc,kBAAkB,EAAE,iDAAtB;cAAyEL,WAAW,EAAEA;YAAtF,CAA3B,CAAjB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACI;YACA,IAAI,OAAOF,OAAP,KAAmB,QAAvB,EACI,OAAO,CAAC;YAAE;YAAH,EAAelD,OAAO,CAACC,MAAR,CAAe,sBAAf,CAAf,CAAP;YACJ2C,MAAM,GAAGxF,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKuF,UAAL,CAAT,EAA2B;cAAEc,kBAAkB,EAAE,2BAAtB;cAAmDL,WAAW,EAAEF;YAAhE,CAA3B,CAAjB;YACA7B,EAAE,CAACvB,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACIuB,EAAE,CAACnB,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACAkD,yBAAyB,GAAG,IAAI1F,yBAAJ,CAA8BiF,MAA9B,CAA5B;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKtC,0BAAL,CAAgC2C,IAAhC,CAAqCI,yBAArC,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,MAAM,GAAGjC,EAAE,CAAChB,IAAH,EAAT;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK6B,6BAAL,CAAmCoB,MAAnC,CAAd,CAAP;;UACJ,KAAK,CAAL;YACI3D,QAAQ,GAAG0B,EAAE,CAAChB,IAAH,EAAX;;YACA,KAAKc,gBAAL,CAAsBxB,QAAtB,EAAgCJ,OAAhC;;YACA,OAAO,CAAC;YAAE;YAAH,EAAeI,QAAf,CAAP;;UACJ,KAAK,CAAL;YACI4D,KAAK,GAAGlC,EAAE,CAAChB,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAeL,OAAO,CAACC,MAAR,CAAesD,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAvCZ;MAyCH,CA1CiB,CAAlB;IA2CH,CA7Ce,CAAhB;EA8CH,CA/CD;;EAgDA,OAAOpF,gBAAP;AACH,CA5QqC,CA4QpCX,4BA5QoC,CAAtC;;AA6QA,SAASW,gBAAT"},"metadata":{},"sourceType":"module"}