{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { DateUtils } from './Util';\nimport { presignUrl, signRequest, TOKEN_QUERY_PARAM } from './clients/middleware/signing/signer/signatureV4';\nvar IOT_SERVICE_NAME = 'iotdevicegateway'; // Best practice regex to parse the service and region from an AWS endpoint\n\nvar AWS_ENDPOINT_REGEX = /([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(.cn)?$/;\n\nvar Signer =\n/** @class */\nfunction () {\n  function Signer() {}\n  /**\n  * Sign a HTTP request, add 'Authorization' header to request param\n  * @method sign\n  * @memberof Signer\n  * @static\n  *\n  * @param {object} request - HTTP request object\n  <pre>\n  request: {\n      method: GET | POST | PUT ...\n      url: ...,\n      headers: {\n          header1: ...\n      },\n      data: data\n  }\n  </pre>\n  * @param {object} access_info - AWS access credential info\n  <pre>\n  access_info: {\n      access_key: ...,\n      secret_key: ...,\n      session_token: ...\n  }\n  </pre>\n  * @param {object} [service_info] - AWS service type and region, optional,\n  *                                  if not provided then parse out from url\n  <pre>\n  service_info: {\n      service: ...,\n      region: ...\n  }\n  </pre>\n  *\n  * @returns {object} Signed HTTP request\n  */\n\n\n  Signer.sign = function (request, accessInfo, serviceInfo) {\n    request.headers = request.headers || {};\n\n    if (request.body && !request.data) {\n      throw new Error('The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.');\n    }\n\n    var requestToSign = __assign(__assign({}, request), {\n      body: request.data,\n      url: new URL(request.url)\n    });\n\n    var options = getOptions(requestToSign, accessInfo, serviceInfo);\n    var signedRequest = signRequest(requestToSign, options); // Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property\n    // back to a string so as not to disrupt consumers of Signer.\n\n    signedRequest.url = signedRequest.url.toString(); // HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and\n    // limit the impact of this implementation swap, replace lowercased headers with title cased ones.\n\n    signedRequest.headers.Authorization = signedRequest.headers.authorization;\n    signedRequest.headers['X-Amz-Security-Token'] = signedRequest.headers['x-amz-security-token'];\n    delete signedRequest.headers.authorization;\n    delete signedRequest.headers['x-amz-security-token'];\n    return signedRequest;\n  };\n\n  Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n    var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n    var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n    var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n    var presignable = {\n      body: body,\n      method: method,\n      url: new URL(urlToSign)\n    };\n    var options = getOptions(presignable, accessInfo, serviceInfo, expiration);\n    var signedUrl = presignUrl(presignable, options);\n\n    if (accessInfo.session_token && !sessionTokenRequiredInSigning(options.signingService)) {\n      signedUrl.searchParams.append(TOKEN_QUERY_PARAM, accessInfo.session_token);\n    }\n\n    return signedUrl.toString();\n  };\n\n  return Signer;\n}();\n\nexport { Signer };\n\nvar getOptions = function (request, accessInfo, serviceInfo, expiration) {\n  var _a = accessInfo !== null && accessInfo !== void 0 ? accessInfo : {},\n      access_key = _a.access_key,\n      secret_key = _a.secret_key,\n      session_token = _a.session_token;\n\n  var _b = parseServiceInfo(request.url),\n      urlRegion = _b.region,\n      urlService = _b.service;\n\n  var _c = serviceInfo !== null && serviceInfo !== void 0 ? serviceInfo : {},\n      _d = _c.region,\n      region = _d === void 0 ? urlRegion : _d,\n      _e = _c.service,\n      service = _e === void 0 ? urlService : _e;\n\n  var credentials = __assign({\n    accessKeyId: access_key,\n    secretAccessKey: secret_key\n  }, sessionTokenRequiredInSigning(service) ? {\n    sessionToken: session_token\n  } : {});\n\n  return __assign({\n    credentials: credentials,\n    signingDate: DateUtils.getDateWithClockOffset(),\n    signingRegion: region,\n    signingService: service\n  }, expiration && {\n    expiration: expiration\n  });\n}; // TODO: V6 investigate whether add to custom clients' general signer implementation.\n\n\nvar parseServiceInfo = function (url) {\n  var _a;\n\n  var host = url.host;\n  var matched = (_a = host.match(AWS_ENDPOINT_REGEX)) !== null && _a !== void 0 ? _a : [];\n  var parsed = matched.slice(1, 3);\n\n  if (parsed[1] === 'es') {\n    // Elastic Search\n    parsed = parsed.reverse();\n  }\n\n  return {\n    service: parsed[0],\n    region: parsed[1]\n  };\n}; // IoT service does not allow the session token in the canonical request\n// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\n\n\nvar sessionTokenRequiredInSigning = function (service) {\n  return service !== IOT_SERVICE_NAME;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","DateUtils","presignUrl","signRequest","TOKEN_QUERY_PARAM","IOT_SERVICE_NAME","AWS_ENDPOINT_REGEX","Signer","sign","request","accessInfo","serviceInfo","headers","body","data","Error","requestToSign","url","URL","options","getOptions","signedRequest","toString","Authorization","authorization","signUrl","urlOrRequest","expiration","urlToSign","method","undefined","presignable","signedUrl","session_token","sessionTokenRequiredInSigning","signingService","searchParams","append","_a","access_key","secret_key","_b","parseServiceInfo","urlRegion","region","urlService","service","_c","_d","_e","credentials","accessKeyId","secretAccessKey","sessionToken","signingDate","getDateWithClockOffset","signingRegion","host","matched","match","parsed","slice","reverse"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/core/lib-esm/Signer.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { DateUtils } from './Util';\nimport { presignUrl, signRequest, TOKEN_QUERY_PARAM, } from './clients/middleware/signing/signer/signatureV4';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\n// Best practice regex to parse the service and region from an AWS endpoint\nvar AWS_ENDPOINT_REGEX = /([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com(.cn)?$/;\nvar Signer = /** @class */ (function () {\n    function Signer() {\n    }\n    /**\n    * Sign a HTTP request, add 'Authorization' header to request param\n    * @method sign\n    * @memberof Signer\n    * @static\n    *\n    * @param {object} request - HTTP request object\n    <pre>\n    request: {\n        method: GET | POST | PUT ...\n        url: ...,\n        headers: {\n            header1: ...\n        },\n        data: data\n    }\n    </pre>\n    * @param {object} access_info - AWS access credential info\n    <pre>\n    access_info: {\n        access_key: ...,\n        secret_key: ...,\n        session_token: ...\n    }\n    </pre>\n    * @param {object} [service_info] - AWS service type and region, optional,\n    *                                  if not provided then parse out from url\n    <pre>\n    service_info: {\n        service: ...,\n        region: ...\n    }\n    </pre>\n    *\n    * @returns {object} Signed HTTP request\n    */\n    Signer.sign = function (request, accessInfo, serviceInfo) {\n        request.headers = request.headers || {};\n        if (request.body && !request.data) {\n            throw new Error('The attribute \"body\" was found on the request object. Please use the attribute \"data\" instead.');\n        }\n        var requestToSign = __assign(__assign({}, request), { body: request.data, url: new URL(request.url) });\n        var options = getOptions(requestToSign, accessInfo, serviceInfo);\n        var signedRequest = signRequest(requestToSign, options);\n        // Prior to using `signRequest`, Signer accepted urls as strings and outputted urls as string. Coerce the property\n        // back to a string so as not to disrupt consumers of Signer.\n        signedRequest.url = signedRequest.url.toString();\n        // HTTP headers should be case insensitive but, to maintain parity with the previous Signer implementation and\n        // limit the impact of this implementation swap, replace lowercased headers with title cased ones.\n        signedRequest.headers.Authorization = signedRequest.headers.authorization;\n        signedRequest.headers['X-Amz-Security-Token'] =\n            signedRequest.headers['x-amz-security-token'];\n        delete signedRequest.headers.authorization;\n        delete signedRequest.headers['x-amz-security-token'];\n        return signedRequest;\n    };\n    Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n        var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n        var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n        var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n        var presignable = {\n            body: body,\n            method: method,\n            url: new URL(urlToSign),\n        };\n        var options = getOptions(presignable, accessInfo, serviceInfo, expiration);\n        var signedUrl = presignUrl(presignable, options);\n        if (accessInfo.session_token &&\n            !sessionTokenRequiredInSigning(options.signingService)) {\n            signedUrl.searchParams.append(TOKEN_QUERY_PARAM, accessInfo.session_token);\n        }\n        return signedUrl.toString();\n    };\n    return Signer;\n}());\nexport { Signer };\nvar getOptions = function (request, accessInfo, serviceInfo, expiration) {\n    var _a = accessInfo !== null && accessInfo !== void 0 ? accessInfo : {}, access_key = _a.access_key, secret_key = _a.secret_key, session_token = _a.session_token;\n    var _b = parseServiceInfo(request.url), urlRegion = _b.region, urlService = _b.service;\n    var _c = serviceInfo !== null && serviceInfo !== void 0 ? serviceInfo : {}, _d = _c.region, region = _d === void 0 ? urlRegion : _d, _e = _c.service, service = _e === void 0 ? urlService : _e;\n    var credentials = __assign({ accessKeyId: access_key, secretAccessKey: secret_key }, (sessionTokenRequiredInSigning(service)\n        ? { sessionToken: session_token }\n        : {}));\n    return __assign({ credentials: credentials, signingDate: DateUtils.getDateWithClockOffset(), signingRegion: region, signingService: service }, (expiration && { expiration: expiration }));\n};\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nvar parseServiceInfo = function (url) {\n    var _a;\n    var host = url.host;\n    var matched = (_a = host.match(AWS_ENDPOINT_REGEX)) !== null && _a !== void 0 ? _a : [];\n    var parsed = matched.slice(1, 3);\n    if (parsed[1] === 'es') {\n        // Elastic Search\n        parsed = parsed.reverse();\n    }\n    return {\n        service: parsed[0],\n        region: parsed[1],\n    };\n};\n// IoT service does not allow the session token in the canonical request\n// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n// TODO: V6 investigate whether add to custom clients' general signer implementation.\nvar sessionTokenRequiredInSigning = function (service) {\n    return service !== IOT_SERVICE_NAME;\n};\n"],"mappings":"AAAA;AACA;AACA,IAAIA,QAAQ,GAAI,QAAQ,KAAKA,QAAd,IAA2B,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAP,IAAiB,UAASC,CAAT,EAAY;IACpC,KAAK,IAAIC,CAAJ,EAAOC,CAAC,GAAG,CAAX,EAAcC,CAAC,GAAGC,SAAS,CAACC,MAAjC,EAAyCH,CAAC,GAAGC,CAA7C,EAAgDD,CAAC,EAAjD,EAAqD;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAD,CAAb;;MACA,KAAK,IAAII,CAAT,IAAcL,CAAd,EAAiB,IAAIH,MAAM,CAACS,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCR,CAArC,EAAwCK,CAAxC,CAAJ,EACbN,CAAC,CAACM,CAAD,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR;IACP;;IACD,OAAON,CAAP;EACH,CAPD;;EAQA,OAAOH,QAAQ,CAACa,KAAT,CAAe,IAAf,EAAqBN,SAArB,CAAP;AACH,CAVD;;AAWA,SAASO,SAAT,QAA0B,QAA1B;AACA,SAASC,UAAT,EAAqBC,WAArB,EAAkCC,iBAAlC,QAA4D,iDAA5D;AACA,IAAIC,gBAAgB,GAAG,kBAAvB,C,CACA;;AACA,IAAIC,kBAAkB,GAAG,gDAAzB;;AACA,IAAIC,MAAM;AAAG;AAAe,YAAY;EACpC,SAASA,MAAT,GAAkB,CACjB;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIA,MAAM,CAACC,IAAP,GAAc,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,WAA/B,EAA4C;IACtDF,OAAO,CAACG,OAAR,GAAkBH,OAAO,CAACG,OAAR,IAAmB,EAArC;;IACA,IAAIH,OAAO,CAACI,IAAR,IAAgB,CAACJ,OAAO,CAACK,IAA7B,EAAmC;MAC/B,MAAM,IAAIC,KAAJ,CAAU,gGAAV,CAAN;IACH;;IACD,IAAIC,aAAa,GAAG7B,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKsB,OAAL,CAAT,EAAwB;MAAEI,IAAI,EAAEJ,OAAO,CAACK,IAAhB;MAAsBG,GAAG,EAAE,IAAIC,GAAJ,CAAQT,OAAO,CAACQ,GAAhB;IAA3B,CAAxB,CAA5B;;IACA,IAAIE,OAAO,GAAGC,UAAU,CAACJ,aAAD,EAAgBN,UAAhB,EAA4BC,WAA5B,CAAxB;IACA,IAAIU,aAAa,GAAGlB,WAAW,CAACa,aAAD,EAAgBG,OAAhB,CAA/B,CAPsD,CAQtD;IACA;;IACAE,aAAa,CAACJ,GAAd,GAAoBI,aAAa,CAACJ,GAAd,CAAkBK,QAAlB,EAApB,CAVsD,CAWtD;IACA;;IACAD,aAAa,CAACT,OAAd,CAAsBW,aAAtB,GAAsCF,aAAa,CAACT,OAAd,CAAsBY,aAA5D;IACAH,aAAa,CAACT,OAAd,CAAsB,sBAAtB,IACIS,aAAa,CAACT,OAAd,CAAsB,sBAAtB,CADJ;IAEA,OAAOS,aAAa,CAACT,OAAd,CAAsBY,aAA7B;IACA,OAAOH,aAAa,CAACT,OAAd,CAAsB,sBAAtB,CAAP;IACA,OAAOS,aAAP;EACH,CAnBD;;EAoBAd,MAAM,CAACkB,OAAP,GAAiB,UAAUC,YAAV,EAAwBhB,UAAxB,EAAoCC,WAApC,EAAiDgB,UAAjD,EAA6D;IAC1E,IAAIC,SAAS,GAAG,OAAOF,YAAP,KAAwB,QAAxB,GAAmCA,YAAY,CAACT,GAAhD,GAAsDS,YAAtE;IACA,IAAIG,MAAM,GAAG,OAAOH,YAAP,KAAwB,QAAxB,GAAmCA,YAAY,CAACG,MAAhD,GAAyD,KAAtE;IACA,IAAIhB,IAAI,GAAG,OAAOa,YAAP,KAAwB,QAAxB,GAAmCA,YAAY,CAACb,IAAhD,GAAuDiB,SAAlE;IACA,IAAIC,WAAW,GAAG;MACdlB,IAAI,EAAEA,IADQ;MAEdgB,MAAM,EAAEA,MAFM;MAGdZ,GAAG,EAAE,IAAIC,GAAJ,CAAQU,SAAR;IAHS,CAAlB;IAKA,IAAIT,OAAO,GAAGC,UAAU,CAACW,WAAD,EAAcrB,UAAd,EAA0BC,WAA1B,EAAuCgB,UAAvC,CAAxB;IACA,IAAIK,SAAS,GAAG9B,UAAU,CAAC6B,WAAD,EAAcZ,OAAd,CAA1B;;IACA,IAAIT,UAAU,CAACuB,aAAX,IACA,CAACC,6BAA6B,CAACf,OAAO,CAACgB,cAAT,CADlC,EAC4D;MACxDH,SAAS,CAACI,YAAV,CAAuBC,MAAvB,CAA8BjC,iBAA9B,EAAiDM,UAAU,CAACuB,aAA5D;IACH;;IACD,OAAOD,SAAS,CAACV,QAAV,EAAP;EACH,CAhBD;;EAiBA,OAAOf,MAAP;AACH,CA7E2B,EAA5B;;AA8EA,SAASA,MAAT;;AACA,IAAIa,UAAU,GAAG,UAAUX,OAAV,EAAmBC,UAAnB,EAA+BC,WAA/B,EAA4CgB,UAA5C,EAAwD;EACrE,IAAIW,EAAE,GAAG5B,UAAU,KAAK,IAAf,IAAuBA,UAAU,KAAK,KAAK,CAA3C,GAA+CA,UAA/C,GAA4D,EAArE;EAAA,IAAyE6B,UAAU,GAAGD,EAAE,CAACC,UAAzF;EAAA,IAAqGC,UAAU,GAAGF,EAAE,CAACE,UAArH;EAAA,IAAiIP,aAAa,GAAGK,EAAE,CAACL,aAApJ;;EACA,IAAIQ,EAAE,GAAGC,gBAAgB,CAACjC,OAAO,CAACQ,GAAT,CAAzB;EAAA,IAAwC0B,SAAS,GAAGF,EAAE,CAACG,MAAvD;EAAA,IAA+DC,UAAU,GAAGJ,EAAE,CAACK,OAA/E;;EACA,IAAIC,EAAE,GAAGpC,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiDA,WAAjD,GAA+D,EAAxE;EAAA,IAA4EqC,EAAE,GAAGD,EAAE,CAACH,MAApF;EAAA,IAA4FA,MAAM,GAAGI,EAAE,KAAK,KAAK,CAAZ,GAAgBL,SAAhB,GAA4BK,EAAjI;EAAA,IAAqIC,EAAE,GAAGF,EAAE,CAACD,OAA7I;EAAA,IAAsJA,OAAO,GAAGG,EAAE,KAAK,KAAK,CAAZ,GAAgBJ,UAAhB,GAA6BI,EAA7L;;EACA,IAAIC,WAAW,GAAG/D,QAAQ,CAAC;IAAEgE,WAAW,EAAEZ,UAAf;IAA2Ba,eAAe,EAAEZ;EAA5C,CAAD,EAA4DN,6BAA6B,CAACY,OAAD,CAA7B,GAChF;IAAEO,YAAY,EAAEpB;EAAhB,CADgF,GAEhF,EAFoB,CAA1B;;EAGA,OAAO9C,QAAQ,CAAC;IAAE+D,WAAW,EAAEA,WAAf;IAA4BI,WAAW,EAAErD,SAAS,CAACsD,sBAAV,EAAzC;IAA6EC,aAAa,EAAEZ,MAA5F;IAAoGT,cAAc,EAAEW;EAApH,CAAD,EAAiInB,UAAU,IAAI;IAAEA,UAAU,EAAEA;EAAd,CAA/I,CAAf;AACH,CARD,C,CASA;;;AACA,IAAIe,gBAAgB,GAAG,UAAUzB,GAAV,EAAe;EAClC,IAAIqB,EAAJ;;EACA,IAAImB,IAAI,GAAGxC,GAAG,CAACwC,IAAf;EACA,IAAIC,OAAO,GAAG,CAACpB,EAAE,GAAGmB,IAAI,CAACE,KAAL,CAAWrD,kBAAX,CAAN,MAA0C,IAA1C,IAAkDgC,EAAE,KAAK,KAAK,CAA9D,GAAkEA,EAAlE,GAAuE,EAArF;EACA,IAAIsB,MAAM,GAAGF,OAAO,CAACG,KAAR,CAAc,CAAd,EAAiB,CAAjB,CAAb;;EACA,IAAID,MAAM,CAAC,CAAD,CAAN,KAAc,IAAlB,EAAwB;IACpB;IACAA,MAAM,GAAGA,MAAM,CAACE,OAAP,EAAT;EACH;;EACD,OAAO;IACHhB,OAAO,EAAEc,MAAM,CAAC,CAAD,CADZ;IAEHhB,MAAM,EAAEgB,MAAM,CAAC,CAAD;EAFX,CAAP;AAIH,CAbD,C,CAcA;AACA;AACA;;;AACA,IAAI1B,6BAA6B,GAAG,UAAUY,OAAV,EAAmB;EACnD,OAAOA,OAAO,KAAKzC,gBAAnB;AACH,CAFD"},"metadata":{},"sourceType":"module"}