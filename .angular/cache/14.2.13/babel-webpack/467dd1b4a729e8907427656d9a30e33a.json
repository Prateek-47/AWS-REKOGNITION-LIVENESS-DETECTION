{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { Cache } from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, ClientDevice, Credentials, Signer, Hub, transferKeyToLowerCase, transferKeyToUpperCase, AnalyticsAction } from '@aws-amplify/core';\nimport { putEvents, updateEndpoint } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { v1 as uuid } from 'uuid';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\nimport EventBuffer from './EventBuffer';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\n\nvar dispatchAnalyticsEvent = function (event, data) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar FORBIDDEN_CODE = 403;\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nvar UPDATE_ENDPOINT = '_update_endpoint';\nvar SESSION_START = '_session.start';\nvar SESSION_STOP = '_session.stop';\nvar BEACON_SUPPORTED = typeof navigator !== 'undefined' && navigator && typeof navigator.sendBeacon === 'function'; // events buffer\n\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar RESEND_LIMIT = 5; // params: { event: {name: , .... }, timeStamp, config, resendLimits }\n\nvar AWSPinpointProvider =\n/** @class */\nfunction () {\n  function AWSPinpointProvider(config) {\n    this._endpointGenerating = true;\n    this._endpointUpdateInProgress = false;\n    this._buffer = null;\n    this._endpointBuffer = [];\n    this._config = config ? config : {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._clientInfo = ClientDevice.clientInfo();\n  }\n  /**\n   * get the category of the plugin\n   */\n\n\n  AWSPinpointProvider.prototype.getCategory = function () {\n    return AWSPinpointProvider.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AWSPinpointProvider.prototype.getProviderName = function () {\n    return AWSPinpointProvider.providerName;\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AWSPinpointProvider.prototype.configure = function (config) {\n    var _this = this;\n\n    logger.debug('configure Analytics', config);\n    var conf = config || {};\n    this._config = Object.assign({}, this._config, conf); // If autoSessionRecord is enabled, we need to wait for the endpoint to be\n    // updated before sending any events. See `sendEvents` in `Analytics.ts`\n\n    this._endpointGenerating = !!config['autoSessionRecord'];\n\n    if (this._config.appId && !this._config.disabled) {\n      if (!this._config.endpointId) {\n        var cacheKey = this.getProviderName() + '_' + this._config.appId;\n\n        this._getEndpointId(cacheKey).then(function (endpointId) {\n          logger.debug('setting endpoint id from the cache', endpointId);\n          _this._config.endpointId = endpointId;\n          dispatchAnalyticsEvent('pinpointProvider_configured', null);\n        }).catch(function (err) {\n          logger.debug('Failed to generate endpointId', err);\n        });\n      } else {\n        dispatchAnalyticsEvent('pinpointProvider_configured', null);\n      }\n    } else {\n      this._flushBuffer();\n    }\n\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AWSPinpointProvider.prototype.record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, timestamp;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            logger.debug('_public record', params);\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _a.sent();\n\n            if (!credentials || !this._config.appId || !this._config.region) {\n              logger.debug('cannot send events without credentials, applicationId or region');\n              return [2\n              /*return*/\n              , handlers.reject(new Error('No credentials, applicationId or region'))];\n            }\n\n            this._init(credentials);\n\n            timestamp = new Date().getTime(); // attach the session and eventId\n\n            this._generateSession(params);\n\n            params.event.eventId = uuid();\n            Object.assign(params, {\n              timestamp: timestamp,\n              config: this._config\n            });\n\n            if (params.event.immediate) {\n              return [2\n              /*return*/\n              , this._send(params, handlers)];\n            } else {\n              this._putToBuffer(params, handlers);\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._sendEndpointUpdate = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var next;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this._endpointUpdateInProgress) {\n              this._endpointBuffer.push(endpointObject);\n\n              return [2\n              /*return*/\n              ];\n            }\n\n            this._endpointUpdateInProgress = true;\n            return [4\n            /*yield*/\n            , this._updateEndpoint(endpointObject)];\n\n          case 1:\n            _a.sent();\n\n            next = this._endpointBuffer.shift();\n            this._endpointUpdateInProgress = false;\n            next && this._sendEndpointUpdate(next);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   * @param params - params for event recording\n   * Put events into buffer\n   */\n\n\n  AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n    var _a;\n\n    if (params.event.name === UPDATE_ENDPOINT) {\n      this._sendEndpointUpdate({\n        params: params,\n        handlers: handlers\n      });\n\n      return;\n    }\n\n    (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.push({\n      params: params,\n      handlers: handlers\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateSession = function (params) {\n    this._sessionId = this._sessionId || uuid();\n    var event = params.event;\n\n    switch (event.name) {\n      case SESSION_START:\n        // refresh the session id and session start time\n        this._sessionStartTimestamp = new Date().getTime();\n        this._sessionId = uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n\n      case SESSION_STOP:\n        var stopTimestamp = new Date().getTime();\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          Duration: stopTimestamp - this._sessionStartTimestamp,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n          StopTimestamp: new Date(stopTimestamp).toISOString()\n        };\n        this._sessionId = undefined;\n        this._sessionStartTimestamp = undefined;\n        break;\n\n      default:\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n    }\n  };\n\n  AWSPinpointProvider.prototype._send = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event;\n      return __generator(this, function (_a) {\n        event = params.event;\n\n        switch (event.name) {\n          case UPDATE_ENDPOINT:\n            return [2\n            /*return*/\n            , this._updateEndpoint({\n              params: params,\n              handlers: handlers\n            })];\n\n          case SESSION_STOP:\n            return [2\n            /*return*/\n            , this._pinpointSendStopSession(params, handlers)];\n\n          default:\n            return [2\n            /*return*/\n            , this._pinpointPutEvents(params, handlers)];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n    var _a, _b;\n\n    var event = params.event,\n        timestamp = params.timestamp,\n        config = params.config;\n    var name = event.name,\n        attributes = event.attributes,\n        metrics = event.metrics,\n        eventId = event.eventId,\n        session = event.session;\n    var appId = config.appId,\n        endpointId = config.endpointId;\n    var endpointContext = {};\n    return {\n      ApplicationId: appId,\n      EventsRequest: {\n        BatchItem: (_a = {}, _a[endpointId] = {\n          Endpoint: endpointContext,\n          Events: (_b = {}, _b[eventId] = {\n            EventType: name,\n            Timestamp: new Date(timestamp).toISOString(),\n            Attributes: attributes,\n            Metrics: metrics,\n            Session: session\n          }, _b)\n        }, _a)\n      }\n    };\n  };\n\n  AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n    var _a, _b, _c, _d, _e;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var eventId, endpointId, eventParams, _f, credentials, region, data, _g, StatusCode, Message, err_1;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            eventId = params.event.eventId, endpointId = params.config.endpointId;\n            eventParams = this._generateBatchItemContext(params);\n            _h.label = 1;\n\n          case 1:\n            _h.trys.push([1, 3,, 4]);\n\n            _f = this._config, credentials = _f.credentials, region = _f.region;\n            return [4\n            /*yield*/\n            , putEvents({\n              credentials: credentials,\n              region: region,\n              userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record)\n            }, eventParams)];\n\n          case 2:\n            data = _h.sent();\n            _g = (_e = (_d = (_c = (_b = (_a = data.EventsResponse) === null || _a === void 0 ? void 0 : _a.Results) === null || _b === void 0 ? void 0 : _b[endpointId]) === null || _c === void 0 ? void 0 : _c.EventsItemResponse) === null || _d === void 0 ? void 0 : _d[eventId]) !== null && _e !== void 0 ? _e : {}, StatusCode = _g.StatusCode, Message = _g.Message;\n\n            if (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n              logger.debug('record event success. ', data);\n              return [2\n              /*return*/\n              , handlers.resolve(data)];\n            } else if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n              // TODO: v6 integrate retry to the service handler retryDecider\n              this._retry(params, handlers);\n            } else {\n              logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n              return [2\n              /*return*/\n              , handlers.reject(data)];\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _h.sent();\n\n            this._eventError(err_1);\n\n            return [2\n            /*return*/\n            , handlers.reject(err_1)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n    if (!BEACON_SUPPORTED) {\n      this._pinpointPutEvents(params, handlers);\n\n      return;\n    }\n\n    var eventParams = this._generateBatchItemContext(params);\n\n    var region = this._config.region;\n    var ApplicationId = eventParams.ApplicationId,\n        EventsRequest = eventParams.EventsRequest;\n    var accessInfo = {\n      secret_key: this._config.credentials.secretAccessKey,\n      access_key: this._config.credentials.accessKeyId,\n      session_token: this._config.credentials.sessionToken\n    };\n    var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events/legacy\";\n    var body = JSON.stringify(EventsRequest);\n    var method = 'POST';\n    var request = {\n      url: url,\n      body: body,\n      method: method\n    };\n    var serviceInfo = {\n      region: region,\n      service: MOBILE_SERVICE_NAME\n    };\n    var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo);\n    var success = navigator.sendBeacon(requestUrl, body);\n\n    if (success) {\n      return handlers.resolve('sendBeacon success');\n    }\n\n    return handlers.reject('sendBeacon failure');\n  };\n\n  AWSPinpointProvider.prototype._retry = function (params, handlers) {\n    var resendLimit = params.config.resendLimit; // For backward compatibility\n\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n\n      this._pinpointPutEvents(params, handlers);\n    } else {\n      logger.debug(\"retry times used up for event \" + params.eventName);\n    }\n  };\n\n  AWSPinpointProvider.prototype._updateEndpoint = function (endpointObject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params, handlers, config, event, appId, endpointId, request, update_params, _a, credentials, region, data, err_2, failureData;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            params = endpointObject.params, handlers = endpointObject.handlers;\n            config = params.config, event = params.event;\n            appId = config.appId, endpointId = config.endpointId;\n            request = this._endpointRequest(config, transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n            update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointId,\n              EndpointRequest: request\n            };\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            _a = this._config, credentials = _a.credentials, region = _a.region;\n            return [4\n            /*yield*/\n            , updateEndpoint({\n              credentials: credentials,\n              region: region,\n              userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.UpdateEndpoint)\n            }, update_params)];\n\n          case 2:\n            data = _b.sent();\n            logger.debug('updateEndpoint success', data);\n            this._endpointGenerating = false;\n\n            this._resumeBuffer();\n\n            handlers.resolve(data);\n            return [2\n            /*return*/\n            ];\n\n          case 3:\n            err_2 = _b.sent();\n            failureData = {\n              err: err_2,\n              update_params: update_params,\n              endpointObject: endpointObject\n            };\n            return [2\n            /*return*/\n            , this._handleEndpointUpdateFailure(failureData)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateFailure = function (failureData) {\n    return __awaiter(this, void 0, void 0, function () {\n      var err, endpointObject, statusCode, exponential;\n      return __generator(this, function (_a) {\n        err = failureData.err, endpointObject = failureData.endpointObject;\n        statusCode = err.$metadata && err.$metadata.httpStatusCode;\n        logger.debug('updateEndpoint error', err);\n\n        switch (statusCode) {\n          case FORBIDDEN_CODE:\n            return [2\n            /*return*/\n            , this._handleEndpointUpdateForbidden(failureData)];\n\n          default:\n            if (RETRYABLE_CODES.includes(statusCode)) {\n              exponential = true;\n              return [2\n              /*return*/\n              , this._retryEndpointUpdate(endpointObject, exponential)];\n            }\n\n            logger.error('updateEndpoint failed', err);\n            endpointObject.handlers.reject(err);\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._handleEndpointUpdateForbidden = function (failureData) {\n    var err = failureData.err,\n        endpointObject = failureData.endpointObject;\n    var code = err.code,\n        retryable = err.retryable;\n\n    if (code !== EXPIRED_TOKEN_CODE && !retryable) {\n      return endpointObject.handlers.reject(err);\n    }\n\n    this._retryEndpointUpdate(endpointObject);\n  };\n\n  AWSPinpointProvider.prototype._retryEndpointUpdate = function (endpointObject, exponential) {\n    if (exponential === void 0) {\n      exponential = false;\n    }\n\n    logger.debug('_retryEndpointUpdate', endpointObject);\n    var params = endpointObject.params; // TODO: implement retry with exp back off once exp function is available\n\n    var resendLimit = params.config.resendLimit;\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending endpoint update \" + params.event.eventId + \" with \" + params.resendLimit + \" retry attempts remaining\"); // insert at the front of endpointBuffer\n\n      this._endpointBuffer.length ? this._endpointBuffer.unshift(endpointObject) : this._updateEndpoint(endpointObject);\n      return;\n    }\n\n    logger.warn(\"resending endpoint update \" + params.event.eventId + \" failed after \" + params.config.resendLimit + \" attempts\");\n\n    if (this._endpointGenerating) {\n      logger.error('Initial endpoint update failed. ');\n    }\n  };\n  /**\n   * @private\n   * @param config\n   * Configure credentials and init buffer\n   */\n\n\n  AWSPinpointProvider.prototype._init = function (credentials) {\n    return __awaiter(this, void 0, void 0, function () {\n      var identityId;\n      return __generator(this, function (_a) {\n        logger.debug('init provider');\n\n        if (this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n          logger.debug('no change for aws credentials, directly return from init');\n          return [2\n          /*return*/\n          ];\n        }\n\n        identityId = this._config.credentials ? this._config.credentials.identityId : null;\n        this._config.credentials = credentials;\n\n        if (!this._bufferExists() || identityId !== credentials.identityId) {\n          // if the identity has changed, flush the buffer and instantiate a new one\n          // this will cause the old buffer to send any remaining events\n          // with the old credentials and then stop looping and shortly thereafter get picked up by GC\n          this._initBuffer();\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._bufferExists = function () {\n    return this._buffer && this._buffer instanceof EventBuffer;\n  };\n\n  AWSPinpointProvider.prototype._initBuffer = function () {\n    if (this._bufferExists()) {\n      this._flushBuffer();\n    }\n\n    this._buffer = new EventBuffer(this._config); // if the first endpoint update hasn't yet resolved pause the buffer to\n    // prevent race conditions. It will be resumed as soon as that request succeeds\n\n    if (this._endpointGenerating) {\n      this._buffer.pause();\n    }\n  };\n\n  AWSPinpointProvider.prototype._flushBuffer = function () {\n    var _a;\n\n    if (this._bufferExists()) {\n      (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.flush();\n      this._buffer = null;\n    }\n  };\n\n  AWSPinpointProvider.prototype._resumeBuffer = function () {\n    var _a;\n\n    if (this._bufferExists()) {\n      (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.resume();\n    }\n  };\n\n  AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointId, ttl, expiration;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Cache.getItem(cacheKey)];\n\n          case 1:\n            endpointId = _a.sent();\n            logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n\n            if (!endpointId) {\n              endpointId = uuid();\n              ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n              expiration = new Date().getTime() + ttl;\n              Cache.setItem(cacheKey, endpointId, {\n                expires: expiration,\n                priority: 1\n              });\n            }\n\n            return [2\n            /*return*/\n            , endpointId];\n        }\n      });\n    });\n  };\n  /**\n   * EndPoint request\n   * @return {Object} - The request of updating endpoint\n   */\n\n\n  AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n    var credentials = config.credentials;\n    var clientInfo = this._clientInfo || {};\n    var clientContext = config.clientContext || {}; // for now we have three different ways for default endpoint configurations\n    // clientInfo\n    // clientContext (deprecated)\n    // config.endpoint\n\n    var defaultEndpointConfig = config.endpoint || {};\n    var demographicByClientInfo = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform\n    }; // for backward compatibility\n\n    var clientId = clientContext.clientId,\n        appTitle = clientContext.appTitle,\n        appVersionName = clientContext.appVersionName,\n        appVersionCode = clientContext.appVersionCode,\n        appPackageName = clientContext.appPackageName,\n        demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n\n    var channelType = event.address ? clientInfo.platform === 'android' ? 'GCM' : 'APNS' : undefined;\n\n    var tmp = __assign(__assign(__assign({\n      channelType: channelType,\n      requestId: uuid(),\n      effectiveDate: new Date().toISOString()\n    }, defaultEndpointConfig), event), {\n      attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes),\n      demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic),\n      location: __assign(__assign({}, defaultEndpointConfig.location), event.location),\n      metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics),\n      user: {\n        userId: event.userId || defaultEndpointConfig.userId || credentials.identityId,\n        userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes)\n      }\n    }); // eliminate unnecessary params\n\n\n    var userId = tmp.userId,\n        userAttributes = tmp.userAttributes,\n        name = tmp.name,\n        session = tmp.session,\n        eventId = tmp.eventId,\n        immediate = tmp.immediate,\n        ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n\n    return transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n  };\n\n  AWSPinpointProvider.prototype._eventError = function (err) {\n    logger.error('record event failed.', err);\n    logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:PutEvents\\\" \" + \"in order to record events\");\n  };\n\n  AWSPinpointProvider.prototype._getCredentials = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, err_3;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _a.sent();\n            if (!credentials) return [2\n            /*return*/\n            , null];\n            logger.debug('set credentials for analytics', credentials);\n            return [2\n            /*return*/\n            , Credentials.shear(credentials)];\n\n          case 2:\n            err_3 = _a.sent();\n            logger.debug('ensure credentials error', err_3);\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.category = 'Analytics';\n  AWSPinpointProvider.providerName = 'AWSPinpoint';\n  return AWSPinpointProvider;\n}();\n\nexport { AWSPinpointProvider };","map":{"version":3,"names":["__assign","__awaiter","__generator","__rest","Cache","ConsoleLogger","Logger","ClientDevice","Credentials","Signer","Hub","transferKeyToLowerCase","transferKeyToUpperCase","AnalyticsAction","putEvents","updateEndpoint","v1","uuid","getAnalyticsUserAgentString","EventBuffer","AMPLIFY_SYMBOL","Symbol","for","dispatchAnalyticsEvent","event","data","dispatch","logger","RETRYABLE_CODES","ACCEPTED_CODES","FORBIDDEN_CODE","MOBILE_SERVICE_NAME","EXPIRED_TOKEN_CODE","UPDATE_ENDPOINT","SESSION_START","SESSION_STOP","BEACON_SUPPORTED","navigator","sendBeacon","BUFFER_SIZE","FLUSH_SIZE","FLUSH_INTERVAL","RESEND_LIMIT","AWSPinpointProvider","config","_endpointGenerating","_endpointUpdateInProgress","_buffer","_endpointBuffer","_config","bufferSize","flushSize","flushInterval","resendLimit","_clientInfo","clientInfo","prototype","getCategory","category","getProviderName","providerName","configure","_this","debug","conf","Object","assign","appId","disabled","endpointId","cacheKey","_getEndpointId","then","catch","err","_flushBuffer","record","params","handlers","credentials","timestamp","_a","label","_getCredentials","sent","region","reject","Error","_init","Date","getTime","_generateSession","eventId","immediate","_send","_putToBuffer","_sendEndpointUpdate","endpointObject","next","push","_updateEndpoint","shift","name","_sessionId","_sessionStartTimestamp","session","Id","StartTimestamp","toISOString","stopTimestamp","Duration","StopTimestamp","undefined","_pinpointSendStopSession","_pinpointPutEvents","_generateBatchItemContext","_b","attributes","metrics","endpointContext","ApplicationId","EventsRequest","BatchItem","Endpoint","Events","EventType","Timestamp","Attributes","Metrics","Session","_c","_d","_e","eventParams","_f","_g","StatusCode","Message","err_1","_h","trys","userAgentValue","Record","EventsResponse","Results","EventsItemResponse","includes","resolve","_retry","error","_eventError","accessInfo","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","url","body","JSON","stringify","method","request","serviceInfo","service","requestUrl","signUrl","success","eventName","update_params","err_2","failureData","_endpointRequest","EndpointId","EndpointRequest","UpdateEndpoint","_resumeBuffer","_handleEndpointUpdateFailure","statusCode","exponential","$metadata","httpStatusCode","_handleEndpointUpdateForbidden","_retryEndpointUpdate","code","retryable","length","unshift","warn","identityId","_bufferExists","_initBuffer","pause","flush","resume","ttl","expiration","getItem","setItem","expires","priority","clientContext","defaultEndpointConfig","endpoint","demographicByClientInfo","appVersion","make","model","modelVersion","version","platform","clientId","appTitle","appVersionName","appVersionCode","appPackageName","demographicByClientContext","channelType","address","tmp","requestId","effectiveDate","demographic","location","user","userId","userAttributes","ret","err_3","get","shear"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/analytics/lib-esm/Providers/AWSPinpointProvider.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { Cache } from '@aws-amplify/cache';\nimport { ConsoleLogger as Logger, ClientDevice, Credentials, Signer, Hub, transferKeyToLowerCase, transferKeyToUpperCase, AnalyticsAction, } from '@aws-amplify/core';\nimport { putEvents, updateEndpoint, } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { v1 as uuid } from 'uuid';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\nimport EventBuffer from './EventBuffer';\nvar AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function'\n    ? Symbol.for('amplify_default')\n    : '@@amplify_default');\nvar dispatchAnalyticsEvent = function (event, data) {\n    Hub.dispatch('analytics', { event: event, data: data }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar FORBIDDEN_CODE = 403;\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar EXPIRED_TOKEN_CODE = 'ExpiredTokenException';\nvar UPDATE_ENDPOINT = '_update_endpoint';\nvar SESSION_START = '_session.start';\nvar SESSION_STOP = '_session.stop';\nvar BEACON_SUPPORTED = typeof navigator !== 'undefined' &&\n    navigator &&\n    typeof navigator.sendBeacon === 'function';\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\n// params: { event: {name: , .... }, timeStamp, config, resendLimits }\nvar AWSPinpointProvider = /** @class */ (function () {\n    function AWSPinpointProvider(config) {\n        this._endpointGenerating = true;\n        this._endpointUpdateInProgress = false;\n        this._buffer = null;\n        this._endpointBuffer = [];\n        this._config = config ? config : {};\n        this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n        this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n        this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n        this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n        this._clientInfo = ClientDevice.clientInfo();\n    }\n    /**\n     * get the category of the plugin\n     */\n    AWSPinpointProvider.prototype.getCategory = function () {\n        return AWSPinpointProvider.category;\n    };\n    /**\n     * get provider name of the plugin\n     */\n    AWSPinpointProvider.prototype.getProviderName = function () {\n        return AWSPinpointProvider.providerName;\n    };\n    /**\n     * configure the plugin\n     * @param {Object} config - configuration\n     */\n    AWSPinpointProvider.prototype.configure = function (config) {\n        var _this = this;\n        logger.debug('configure Analytics', config);\n        var conf = config || {};\n        this._config = Object.assign({}, this._config, conf);\n        // If autoSessionRecord is enabled, we need to wait for the endpoint to be\n        // updated before sending any events. See `sendEvents` in `Analytics.ts`\n        this._endpointGenerating = !!config['autoSessionRecord'];\n        if (this._config.appId && !this._config.disabled) {\n            if (!this._config.endpointId) {\n                var cacheKey = this.getProviderName() + '_' + this._config.appId;\n                this._getEndpointId(cacheKey)\n                    .then(function (endpointId) {\n                    logger.debug('setting endpoint id from the cache', endpointId);\n                    _this._config.endpointId = endpointId;\n                    dispatchAnalyticsEvent('pinpointProvider_configured', null);\n                })\n                    .catch(function (err) {\n                    logger.debug('Failed to generate endpointId', err);\n                });\n            }\n            else {\n                dispatchAnalyticsEvent('pinpointProvider_configured', null);\n            }\n        }\n        else {\n            this._flushBuffer();\n        }\n        return this._config;\n    };\n    /**\n     * record an event\n     * @param {Object} params - the params of an event\n     */\n    AWSPinpointProvider.prototype.record = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, timestamp;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        logger.debug('_public record', params);\n                        return [4 /*yield*/, this._getCredentials()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials || !this._config.appId || !this._config.region) {\n                            logger.debug('cannot send events without credentials, applicationId or region');\n                            return [2 /*return*/, handlers.reject(new Error('No credentials, applicationId or region'))];\n                        }\n                        this._init(credentials);\n                        timestamp = new Date().getTime();\n                        // attach the session and eventId\n                        this._generateSession(params);\n                        params.event.eventId = uuid();\n                        Object.assign(params, { timestamp: timestamp, config: this._config });\n                        if (params.event.immediate) {\n                            return [2 /*return*/, this._send(params, handlers)];\n                        }\n                        else {\n                            this._putToBuffer(params, handlers);\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._sendEndpointUpdate = function (endpointObject) {\n        return __awaiter(this, void 0, void 0, function () {\n            var next;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._endpointUpdateInProgress) {\n                            this._endpointBuffer.push(endpointObject);\n                            return [2 /*return*/];\n                        }\n                        this._endpointUpdateInProgress = true;\n                        return [4 /*yield*/, this._updateEndpoint(endpointObject)];\n                    case 1:\n                        _a.sent();\n                        next = this._endpointBuffer.shift();\n                        this._endpointUpdateInProgress = false;\n                        next && this._sendEndpointUpdate(next);\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @private\n     * @param params - params for event recording\n     * Put events into buffer\n     */\n    AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n        var _a;\n        if (params.event.name === UPDATE_ENDPOINT) {\n            this._sendEndpointUpdate({ params: params, handlers: handlers });\n            return;\n        }\n        (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.push({ params: params, handlers: handlers });\n    };\n    AWSPinpointProvider.prototype._generateSession = function (params) {\n        this._sessionId = this._sessionId || uuid();\n        var event = params.event;\n        switch (event.name) {\n            case SESSION_START:\n                // refresh the session id and session start time\n                this._sessionStartTimestamp = new Date().getTime();\n                this._sessionId = uuid();\n                event.session = {\n                    Id: this._sessionId,\n                    StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n                };\n                break;\n            case SESSION_STOP:\n                var stopTimestamp = new Date().getTime();\n                this._sessionStartTimestamp =\n                    this._sessionStartTimestamp || new Date().getTime();\n                this._sessionId = this._sessionId || uuid();\n                event.session = {\n                    Id: this._sessionId,\n                    Duration: stopTimestamp - this._sessionStartTimestamp,\n                    StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n                    StopTimestamp: new Date(stopTimestamp).toISOString(),\n                };\n                this._sessionId = undefined;\n                this._sessionStartTimestamp = undefined;\n                break;\n            default:\n                this._sessionStartTimestamp =\n                    this._sessionStartTimestamp || new Date().getTime();\n                this._sessionId = this._sessionId || uuid();\n                event.session = {\n                    Id: this._sessionId,\n                    StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n                };\n        }\n    };\n    AWSPinpointProvider.prototype._send = function (params, handlers) {\n        return __awaiter(this, void 0, void 0, function () {\n            var event;\n            return __generator(this, function (_a) {\n                event = params.event;\n                switch (event.name) {\n                    case UPDATE_ENDPOINT:\n                        return [2 /*return*/, this._updateEndpoint({ params: params, handlers: handlers })];\n                    case SESSION_STOP:\n                        return [2 /*return*/, this._pinpointSendStopSession(params, handlers)];\n                    default:\n                        return [2 /*return*/, this._pinpointPutEvents(params, handlers)];\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n        var _a, _b;\n        var event = params.event, timestamp = params.timestamp, config = params.config;\n        var name = event.name, attributes = event.attributes, metrics = event.metrics, eventId = event.eventId, session = event.session;\n        var appId = config.appId, endpointId = config.endpointId;\n        var endpointContext = {};\n        return {\n            ApplicationId: appId,\n            EventsRequest: {\n                BatchItem: (_a = {},\n                    _a[endpointId] = {\n                        Endpoint: endpointContext,\n                        Events: (_b = {},\n                            _b[eventId] = {\n                                EventType: name,\n                                Timestamp: new Date(timestamp).toISOString(),\n                                Attributes: attributes,\n                                Metrics: metrics,\n                                Session: session,\n                            },\n                            _b),\n                    },\n                    _a),\n            },\n        };\n    };\n    AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n        var _a, _b, _c, _d, _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var eventId, endpointId, eventParams, _f, credentials, region, data, _g, StatusCode, Message, err_1;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        eventId = params.event.eventId, endpointId = params.config.endpointId;\n                        eventParams = this._generateBatchItemContext(params);\n                        _h.label = 1;\n                    case 1:\n                        _h.trys.push([1, 3, , 4]);\n                        _f = this._config, credentials = _f.credentials, region = _f.region;\n                        return [4 /*yield*/, putEvents({\n                                credentials: credentials,\n                                region: region,\n                                userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record),\n                            }, eventParams)];\n                    case 2:\n                        data = _h.sent();\n                        _g = (_e = (_d = (_c = (_b = (_a = data.EventsResponse) === null || _a === void 0 ? void 0 : _a.Results) === null || _b === void 0 ? void 0 : _b[endpointId]) === null || _c === void 0 ? void 0 : _c.EventsItemResponse) === null || _d === void 0 ? void 0 : _d[eventId]) !== null && _e !== void 0 ? _e : {}, StatusCode = _g.StatusCode, Message = _g.Message;\n                        if (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n                            logger.debug('record event success. ', data);\n                            return [2 /*return*/, handlers.resolve(data)];\n                        }\n                        else if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n                            // TODO: v6 integrate retry to the service handler retryDecider\n                            this._retry(params, handlers);\n                        }\n                        else {\n                            logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n                            return [2 /*return*/, handlers.reject(data)];\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _h.sent();\n                        this._eventError(err_1);\n                        return [2 /*return*/, handlers.reject(err_1)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n        if (!BEACON_SUPPORTED) {\n            this._pinpointPutEvents(params, handlers);\n            return;\n        }\n        var eventParams = this._generateBatchItemContext(params);\n        var region = this._config.region;\n        var ApplicationId = eventParams.ApplicationId, EventsRequest = eventParams.EventsRequest;\n        var accessInfo = {\n            secret_key: this._config.credentials.secretAccessKey,\n            access_key: this._config.credentials.accessKeyId,\n            session_token: this._config.credentials.sessionToken,\n        };\n        var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events/legacy\";\n        var body = JSON.stringify(EventsRequest);\n        var method = 'POST';\n        var request = {\n            url: url,\n            body: body,\n            method: method,\n        };\n        var serviceInfo = { region: region, service: MOBILE_SERVICE_NAME };\n        var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo);\n        var success = navigator.sendBeacon(requestUrl, body);\n        if (success) {\n            return handlers.resolve('sendBeacon success');\n        }\n        return handlers.reject('sendBeacon failure');\n    };\n    AWSPinpointProvider.prototype._retry = function (params, handlers) {\n        var resendLimit = params.config.resendLimit;\n        // For backward compatibility\n        params.resendLimit =\n            typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n        if (params.resendLimit-- > 0) {\n            logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n            this._pinpointPutEvents(params, handlers);\n        }\n        else {\n            logger.debug(\"retry times used up for event \" + params.eventName);\n        }\n    };\n    AWSPinpointProvider.prototype._updateEndpoint = function (endpointObject) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, handlers, config, event, appId, endpointId, request, update_params, _a, credentials, region, data, err_2, failureData;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        params = endpointObject.params, handlers = endpointObject.handlers;\n                        config = params.config, event = params.event;\n                        appId = config.appId, endpointId = config.endpointId;\n                        request = this._endpointRequest(config, transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n                        update_params = {\n                            ApplicationId: appId,\n                            EndpointId: endpointId,\n                            EndpointRequest: request,\n                        };\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        _a = this._config, credentials = _a.credentials, region = _a.region;\n                        return [4 /*yield*/, updateEndpoint({\n                                credentials: credentials,\n                                region: region,\n                                userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.UpdateEndpoint),\n                            }, update_params)];\n                    case 2:\n                        data = _b.sent();\n                        logger.debug('updateEndpoint success', data);\n                        this._endpointGenerating = false;\n                        this._resumeBuffer();\n                        handlers.resolve(data);\n                        return [2 /*return*/];\n                    case 3:\n                        err_2 = _b.sent();\n                        failureData = {\n                            err: err_2,\n                            update_params: update_params,\n                            endpointObject: endpointObject,\n                        };\n                        return [2 /*return*/, this._handleEndpointUpdateFailure(failureData)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._handleEndpointUpdateFailure = function (failureData) {\n        return __awaiter(this, void 0, void 0, function () {\n            var err, endpointObject, statusCode, exponential;\n            return __generator(this, function (_a) {\n                err = failureData.err, endpointObject = failureData.endpointObject;\n                statusCode = err.$metadata && err.$metadata.httpStatusCode;\n                logger.debug('updateEndpoint error', err);\n                switch (statusCode) {\n                    case FORBIDDEN_CODE:\n                        return [2 /*return*/, this._handleEndpointUpdateForbidden(failureData)];\n                    default:\n                        if (RETRYABLE_CODES.includes(statusCode)) {\n                            exponential = true;\n                            return [2 /*return*/, this._retryEndpointUpdate(endpointObject, exponential)];\n                        }\n                        logger.error('updateEndpoint failed', err);\n                        endpointObject.handlers.reject(err);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._handleEndpointUpdateForbidden = function (failureData) {\n        var err = failureData.err, endpointObject = failureData.endpointObject;\n        var code = err.code, retryable = err.retryable;\n        if (code !== EXPIRED_TOKEN_CODE && !retryable) {\n            return endpointObject.handlers.reject(err);\n        }\n        this._retryEndpointUpdate(endpointObject);\n    };\n    AWSPinpointProvider.prototype._retryEndpointUpdate = function (endpointObject, exponential) {\n        if (exponential === void 0) { exponential = false; }\n        logger.debug('_retryEndpointUpdate', endpointObject);\n        var params = endpointObject.params;\n        // TODO: implement retry with exp back off once exp function is available\n        var resendLimit = params.config.resendLimit;\n        params.resendLimit =\n            typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n        if (params.resendLimit-- > 0) {\n            logger.debug(\"resending endpoint update \" + params.event.eventId + \" with \" + params.resendLimit + \" retry attempts remaining\");\n            // insert at the front of endpointBuffer\n            this._endpointBuffer.length\n                ? this._endpointBuffer.unshift(endpointObject)\n                : this._updateEndpoint(endpointObject);\n            return;\n        }\n        logger.warn(\"resending endpoint update \" + params.event.eventId + \" failed after \" + params.config.resendLimit + \" attempts\");\n        if (this._endpointGenerating) {\n            logger.error('Initial endpoint update failed. ');\n        }\n    };\n    /**\n     * @private\n     * @param config\n     * Configure credentials and init buffer\n     */\n    AWSPinpointProvider.prototype._init = function (credentials) {\n        return __awaiter(this, void 0, void 0, function () {\n            var identityId;\n            return __generator(this, function (_a) {\n                logger.debug('init provider');\n                if (this._config.credentials &&\n                    this._config.credentials.sessionToken === credentials.sessionToken &&\n                    this._config.credentials.identityId === credentials.identityId) {\n                    logger.debug('no change for aws credentials, directly return from init');\n                    return [2 /*return*/];\n                }\n                identityId = this._config.credentials\n                    ? this._config.credentials.identityId\n                    : null;\n                this._config.credentials = credentials;\n                if (!this._bufferExists() || identityId !== credentials.identityId) {\n                    // if the identity has changed, flush the buffer and instantiate a new one\n                    // this will cause the old buffer to send any remaining events\n                    // with the old credentials and then stop looping and shortly thereafter get picked up by GC\n                    this._initBuffer();\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    AWSPinpointProvider.prototype._bufferExists = function () {\n        return this._buffer && this._buffer instanceof EventBuffer;\n    };\n    AWSPinpointProvider.prototype._initBuffer = function () {\n        if (this._bufferExists()) {\n            this._flushBuffer();\n        }\n        this._buffer = new EventBuffer(this._config);\n        // if the first endpoint update hasn't yet resolved pause the buffer to\n        // prevent race conditions. It will be resumed as soon as that request succeeds\n        if (this._endpointGenerating) {\n            this._buffer.pause();\n        }\n    };\n    AWSPinpointProvider.prototype._flushBuffer = function () {\n        var _a;\n        if (this._bufferExists()) {\n            (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.flush();\n            this._buffer = null;\n        }\n    };\n    AWSPinpointProvider.prototype._resumeBuffer = function () {\n        var _a;\n        if (this._bufferExists()) {\n            (_a = this._buffer) === null || _a === void 0 ? void 0 : _a.resume();\n        }\n    };\n    AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n        return __awaiter(this, void 0, void 0, function () {\n            var endpointId, ttl, expiration;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Cache.getItem(cacheKey)];\n                    case 1:\n                        endpointId = _a.sent();\n                        logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n                        if (!endpointId) {\n                            endpointId = uuid();\n                            ttl = 1000 * 60 * 60 * 24 * 365 * 100;\n                            expiration = new Date().getTime() + ttl;\n                            Cache.setItem(cacheKey, endpointId, {\n                                expires: expiration,\n                                priority: 1,\n                            });\n                        }\n                        return [2 /*return*/, endpointId];\n                }\n            });\n        });\n    };\n    /**\n     * EndPoint request\n     * @return {Object} - The request of updating endpoint\n     */\n    AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n        var credentials = config.credentials;\n        var clientInfo = this._clientInfo || {};\n        var clientContext = config.clientContext || {};\n        // for now we have three different ways for default endpoint configurations\n        // clientInfo\n        // clientContext (deprecated)\n        // config.endpoint\n        var defaultEndpointConfig = config.endpoint || {};\n        var demographicByClientInfo = {\n            appVersion: clientInfo.appVersion,\n            make: clientInfo.make,\n            model: clientInfo.model,\n            modelVersion: clientInfo.version,\n            platform: clientInfo.platform,\n        };\n        // for backward compatibility\n        var clientId = clientContext.clientId, appTitle = clientContext.appTitle, appVersionName = clientContext.appVersionName, appVersionCode = clientContext.appVersionCode, appPackageName = clientContext.appPackageName, demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n        var channelType = event.address\n            ? clientInfo.platform === 'android'\n                ? 'GCM'\n                : 'APNS'\n            : undefined;\n        var tmp = __assign(__assign(__assign({ channelType: channelType, requestId: uuid(), effectiveDate: new Date().toISOString() }, defaultEndpointConfig), event), { attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes), demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic), location: __assign(__assign({}, defaultEndpointConfig.location), event.location), metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics), user: {\n                userId: event.userId ||\n                    defaultEndpointConfig.userId ||\n                    credentials.identityId,\n                userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes),\n            } });\n        // eliminate unnecessary params\n        var userId = tmp.userId, userAttributes = tmp.userAttributes, name = tmp.name, session = tmp.session, eventId = tmp.eventId, immediate = tmp.immediate, ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n        return transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n    };\n    AWSPinpointProvider.prototype._eventError = function (err) {\n        logger.error('record event failed.', err);\n        logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" +\n            \"with the Action: \\\"mobiletargeting:PutEvents\\\" \" +\n            \"in order to record events\");\n    };\n    AWSPinpointProvider.prototype._getCredentials = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, err_3;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials)\n                            return [2 /*return*/, null];\n                        logger.debug('set credentials for analytics', credentials);\n                        return [2 /*return*/, Credentials.shear(credentials)];\n                    case 2:\n                        err_3 = _a.sent();\n                        logger.debug('ensure credentials error', err_3);\n                        return [2 /*return*/, null];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSPinpointProvider.category = 'Analytics';\n    AWSPinpointProvider.providerName = 'AWSPinpoint';\n    return AWSPinpointProvider;\n}());\nexport { AWSPinpointProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}