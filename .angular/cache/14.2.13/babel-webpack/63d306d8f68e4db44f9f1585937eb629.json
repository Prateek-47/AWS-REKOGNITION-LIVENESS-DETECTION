{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { CppDType } from './types';\nlet wasmGather;\n\nfunction setup(backend) {\n  wasmGather = backend.wasm.cwrap('Gather', null\n  /*void*/\n  , ['number', 'number', 'array', 'number', 'number', 'number', 'array', 'number' // outId\n  ]);\n}\n\nfunction gatherV2(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    x,\n    indices\n  } = inputs;\n  const {\n    axis,\n    batchDims\n  } = attrs; // Throw error when any index is out of bound.\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.readSync(indices.dataId);\n  const axisDim = x.shape[parsedAxis];\n\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  const flattenX = reshape({\n    inputs: {\n      x\n    },\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    },\n    backend\n  });\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    },\n    backend\n  });\n  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n  const out = backend.makeOutput(flattenOutputShape, x.dtype);\n\n  if (util.sizeFromShape(x.shape) === 0) {\n    return out;\n  }\n\n  const stridesSize = flattenX.shape.length - 1;\n  const xData = backend.dataIdMap.get(flattenX.dataId);\n  const xId = xData.id;\n  const indicesData = backend.dataIdMap.get(flattenIndex.dataId);\n  const indicesId = indicesData.id;\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const xStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(flattenX.shape)).buffer);\n  const outStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(flattenOutputShape)).buffer);\n  wasmGather(xId, CppDType[x.dtype], xStridesBytes, stridesSize, indicesId, shapeInfo.batchSize, outStridesBytes, outId);\n  backend.disposeData(flattenX.dataId);\n  backend.disposeData(flattenIndex.dataId); // reshape\n\n  out.shape = shapeInfo.outputShape;\n  return out;\n}\n\nexport const gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: gatherV2\n};","map":{"version":3,"names":["backend_util","GatherV2","util","reshape","CppDType","wasmGather","setup","backend","wasm","cwrap","gatherV2","args","inputs","attrs","x","indices","axis","batchDims","parsedAxis","parseAxisParam","shape","indicesVals","readSync","dataId","axisDim","i","length","index","assert","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","batchSize","outerSize","dimSize","sliceSize","indicesSize","sizeFromShape","flattenIndex","flattenOutputShape","out","makeOutput","dtype","stridesSize","xData","dataIdMap","get","xId","id","indicesData","indicesId","outId","xStridesBytes","Uint8Array","Int32Array","computeStrides","buffer","outStridesBytes","disposeData","outputShape","gatherV2Config","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/GatherV2.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { CppDType } from './types';\nlet wasmGather;\nfunction setup(backend) {\n    wasmGather = backend.wasm.cwrap('Gather', null /*void*/, [\n        'number',\n        'number',\n        'array',\n        'number',\n        'number',\n        'number',\n        'array',\n        'number' // outId\n    ]);\n}\nfunction gatherV2(args) {\n    const { backend, inputs, attrs } = args;\n    const { x, indices } = inputs;\n    const { axis, batchDims } = attrs;\n    // Throw error when any index is out of bound.\n    const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n    const indicesVals = backend.readSync(indices.dataId);\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n        const index = indicesVals[i];\n        util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n    const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n    const flattenX = reshape({\n        inputs: { x },\n        attrs: {\n            shape: [\n                shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n                shapeInfo.sliceSize\n            ]\n        },\n        backend\n    });\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const flattenIndex = reshape({\n        inputs: { x: indices },\n        attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] },\n        backend\n    });\n    const flattenOutputShape = [\n        shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n        shapeInfo.sliceSize\n    ];\n    const out = backend.makeOutput(flattenOutputShape, x.dtype);\n    if (util.sizeFromShape(x.shape) === 0) {\n        return out;\n    }\n    const stridesSize = flattenX.shape.length - 1;\n    const xData = backend.dataIdMap.get(flattenX.dataId);\n    const xId = xData.id;\n    const indicesData = backend.dataIdMap.get(flattenIndex.dataId);\n    const indicesId = indicesData.id;\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const xStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(flattenX.shape)).buffer);\n    const outStridesBytes = new Uint8Array(new Int32Array(util.computeStrides(flattenOutputShape)).buffer);\n    wasmGather(xId, CppDType[x.dtype], xStridesBytes, stridesSize, indicesId, shapeInfo.batchSize, outStridesBytes, outId);\n    backend.disposeData(flattenX.dataId);\n    backend.disposeData(flattenIndex.dataId);\n    // reshape\n    out.shape = shapeInfo.outputShape;\n    return out;\n}\nexport const gatherV2Config = {\n    kernelName: GatherV2,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: gatherV2\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}