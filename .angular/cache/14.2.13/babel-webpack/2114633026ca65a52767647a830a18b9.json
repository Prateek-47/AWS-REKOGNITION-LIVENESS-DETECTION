{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Equal':\n      {\n        return [tfOps.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'NotEqual':\n      {\n        return [tfOps.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Greater':\n      {\n        return [tfOps.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'GreaterEqual':\n      {\n        return [tfOps.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Less':\n      {\n        return [tfOps.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'LessEqual':\n      {\n        return [tfOps.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'LogicalAnd':\n      {\n        return [tfOps.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'LogicalNot':\n      {\n        return [tfOps.logicalNot(getParamValue('a', node, tensorMap, context))];\n      }\n\n    case 'LogicalOr':\n      {\n        return [tfOps.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Select':\n    case 'SelectV2':\n      {\n        return [tfOps.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'logical';","map":{"version":3,"names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","equal","notEqual","greater","greaterEqual","less","lessEqual","logicalAnd","logicalNot","logicalOr","where","TypeError","CATEGORY"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Equal': {\n            return [tfOps.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'NotEqual': {\n            return [tfOps.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Greater': {\n            return [tfOps.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'GreaterEqual': {\n            return [tfOps.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Less': {\n            return [tfOps.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LessEqual': {\n            return [tfOps.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LogicalAnd': {\n            return [tfOps.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LogicalNot': {\n            return [tfOps.logicalNot(getParamValue('a', node, tensorMap, context))];\n        }\n        case 'LogicalOr': {\n            return [tfOps.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Select':\n        case 'SelectV2': {\n            return [tfOps.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'logical';\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}