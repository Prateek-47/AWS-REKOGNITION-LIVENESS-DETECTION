{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmPrelu;\n\nfunction setup(backend) {\n  wasmPrelu = backend.wasm.cwrap(Prelu, null\n  /* void */\n  , ['number', 'number', 'number' // out_id\n  ]);\n}\n\nfunction prelu(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x,\n    alpha\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const weightsId = backend.dataIdMap.get(alpha.dataId).id;\n  let inputId = xId;\n  const input = x;\n  let castedInput = input;\n\n  if (input.dtype !== 'float32') {\n    castedInput = cast({\n      backend,\n      inputs: {\n        x\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    inputId = backend.dataIdMap.get(castedInput.dataId).id;\n  }\n\n  const out = backend.makeOutput(x.shape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmPrelu(inputId, weightsId, outId);\n\n  if (input.dtype !== 'float32') {\n    backend.disposeData(castedInput.dataId);\n  }\n\n  return out;\n}\n\nexport const preluConfig = {\n  kernelName: Prelu,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: prelu\n};","map":{"version":3,"names":["Prelu","cast","wasmPrelu","setup","backend","wasm","cwrap","prelu","args","inputs","x","alpha","xId","dataIdMap","get","dataId","id","weightsId","inputId","input","castedInput","dtype","attrs","out","makeOutput","shape","outId","disposeData","preluConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Prelu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmPrelu;\nfunction setup(backend) {\n    wasmPrelu = backend.wasm.cwrap(Prelu, null /* void */, [\n        'number',\n        'number',\n        'number' // out_id\n    ]);\n}\nfunction prelu(args) {\n    const { inputs, backend } = args;\n    const { x, alpha } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const weightsId = backend.dataIdMap.get(alpha.dataId).id;\n    let inputId = xId;\n    const input = x;\n    let castedInput = input;\n    if (input.dtype !== 'float32') {\n        castedInput = cast({ backend, inputs: { x }, attrs: { dtype: 'float32' } });\n        inputId = backend.dataIdMap.get(castedInput.dataId).id;\n    }\n    const out = backend.makeOutput(x.shape, 'float32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmPrelu(inputId, weightsId, outId);\n    if (input.dtype !== 'float32') {\n        backend.disposeData(castedInput.dataId);\n    }\n    return out;\n}\nexport const preluConfig = {\n    kernelName: Prelu,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: prelu\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAT,QAAsB,uBAAtB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,IAAIC,SAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,SAAS,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBN,KAAnB,EAA0B;EAAK;EAA/B,EAA2C,CACnD,QADmD,EAEnD,QAFmD,EAGnD,QAHmD,CAG1C;EAH0C,CAA3C,CAAZ;AAKH;;AACD,SAASO,KAAT,CAAeC,IAAf,EAAqB;EACjB,MAAM;IAAEC,MAAF;IAAUL;EAAV,IAAsBI,IAA5B;EACA,MAAM;IAAEE,CAAF;IAAKC;EAAL,IAAeF,MAArB;EACA,MAAMG,GAAG,GAAGR,OAAO,CAACS,SAAR,CAAkBC,GAAlB,CAAsBJ,CAAC,CAACK,MAAxB,EAAgCC,EAA5C;EACA,MAAMC,SAAS,GAAGb,OAAO,CAACS,SAAR,CAAkBC,GAAlB,CAAsBH,KAAK,CAACI,MAA5B,EAAoCC,EAAtD;EACA,IAAIE,OAAO,GAAGN,GAAd;EACA,MAAMO,KAAK,GAAGT,CAAd;EACA,IAAIU,WAAW,GAAGD,KAAlB;;EACA,IAAIA,KAAK,CAACE,KAAN,KAAgB,SAApB,EAA+B;IAC3BD,WAAW,GAAGnB,IAAI,CAAC;MAAEG,OAAF;MAAWK,MAAM,EAAE;QAAEC;MAAF,CAAnB;MAA0BY,KAAK,EAAE;QAAED,KAAK,EAAE;MAAT;IAAjC,CAAD,CAAlB;IACAH,OAAO,GAAGd,OAAO,CAACS,SAAR,CAAkBC,GAAlB,CAAsBM,WAAW,CAACL,MAAlC,EAA0CC,EAApD;EACH;;EACD,MAAMO,GAAG,GAAGnB,OAAO,CAACoB,UAAR,CAAmBd,CAAC,CAACe,KAArB,EAA4B,SAA5B,CAAZ;EACA,MAAMC,KAAK,GAAGtB,OAAO,CAACS,SAAR,CAAkBC,GAAlB,CAAsBS,GAAG,CAACR,MAA1B,EAAkCC,EAAhD;EACAd,SAAS,CAACgB,OAAD,EAAUD,SAAV,EAAqBS,KAArB,CAAT;;EACA,IAAIP,KAAK,CAACE,KAAN,KAAgB,SAApB,EAA+B;IAC3BjB,OAAO,CAACuB,WAAR,CAAoBP,WAAW,CAACL,MAAhC;EACH;;EACD,OAAOQ,GAAP;AACH;;AACD,OAAO,MAAMK,WAAW,GAAG;EACvBC,UAAU,EAAE7B,KADW;EAEvB8B,WAAW,EAAE,MAFU;EAGvBC,SAAS,EAAE5B,KAHY;EAIvB6B,UAAU,EAAEzB;AAJW,CAApB"},"metadata":{},"sourceType":"module"}