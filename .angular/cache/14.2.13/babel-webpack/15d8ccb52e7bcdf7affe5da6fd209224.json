{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __rest, __values } from \"tslib\";\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Category, ConsoleLogger as Logger, DataStoreAction, jitteredBackoff, NonRetryableError, retry, BackgroundProcessManager } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, ProcessName } from '../../types';\nimport { extractTargetNamesFromSrc, USER, ID } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType, getTokenForCustomAuth } from '../utils';\nimport { getMutationErrorType } from './errorMaps';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\n\nvar MutationProcessor =\n/** @class */\nfunction () {\n  function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    this.schema = schema;\n    this.storage = storage;\n    this.userClasses = userClasses;\n    this.outbox = outbox;\n    this.modelInstanceCreator = modelInstanceCreator;\n    this.MutationEvent = MutationEvent;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.conflictHandler = conflictHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.processing = false;\n    this.runningProcesses = new BackgroundProcessManager();\n    this.amplifyContext.InternalAPI = this.amplifyContext.InternalAPI || InternalAPI;\n    this.generateQueries();\n  }\n\n  MutationProcessor.prototype.generateQueries = function () {\n    var _this = this;\n\n    Object.values(this.schema.namespaces).forEach(function (namespace) {\n      Object.values(namespace.models).filter(function (_a) {\n        var syncable = _a.syncable;\n        return syncable;\n      }).forEach(function (model) {\n        var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1),\n            createMutation = _a[0];\n\n        var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1),\n            updateMutation = _b[0];\n\n        var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1),\n            deleteMutation = _c[0];\n\n        _this.typeQuery.set(model, [createMutation, updateMutation, deleteMutation]);\n      });\n    });\n  };\n\n  MutationProcessor.prototype.isReady = function () {\n    return this.observer !== undefined;\n  };\n\n  MutationProcessor.prototype.start = function () {\n    var _this = this;\n\n    this.runningProcesses = new BackgroundProcessManager();\n    var observable = new Observable(function (observer) {\n      _this.observer = observer;\n\n      try {\n        _this.resume();\n      } catch (error) {\n        logger.error('mutations processor start error', error);\n        throw error;\n      }\n\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            // The observer has unsubscribed and/or `stop()` has been called.\n            this.removeObserver();\n            this.pause();\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      });\n    });\n    return observable;\n  };\n\n  MutationProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.removeObserver();\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.removeObserver = function () {\n    var _a, _b;\n\n    (_b = (_a = this.observer) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n    this.observer = undefined;\n  };\n\n  MutationProcessor.prototype.resume = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.runningProcesses.isOpen && this.runningProcesses.add(function (onTerminate) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var head, namespaceName, _loop_1, this_1, _a;\n\n                var _this = this;\n\n                var _b, _c;\n\n                return __generator(this, function (_d) {\n                  switch (_d.label) {\n                    case 0:\n                      if (this.processing || !this.isReady() || !this.runningProcesses.isOpen) {\n                        return [2\n                        /*return*/\n                        ];\n                      }\n\n                      this.processing = true;\n                      namespaceName = USER;\n\n                      _loop_1 = function () {\n                        var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, authModeRetry_1, error_1, record, hasMore;\n\n                        var _a;\n\n                        return __generator(this, function (_b) {\n                          switch (_b.label) {\n                            case 0:\n                              model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                              modelConstructor = this_1.userClasses[model];\n                              result = undefined;\n                              opName = undefined;\n                              modelDefinition = undefined;\n                              _b.label = 1;\n\n                            case 1:\n                              _b.trys.push([1, 4,, 5]);\n\n                              return [4\n                              /*yield*/\n                              , getModelAuthModes({\n                                authModeStrategy: this_1.authModeStrategy,\n                                defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: model,\n                                schema: this_1.schema\n                              })];\n\n                            case 2:\n                              modelAuthModes = _b.sent();\n                              operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                              authModeAttempts_1 = 0;\n\n                              authModeRetry_1 = function () {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var response, error_2, e_1;\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        _a.trys.push([0, 2,, 9]);\n\n                                        logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4\n                                        /*yield*/\n                                        , this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1], onTerminate)];\n\n                                      case 1:\n                                        response = _a.sent();\n                                        logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [2\n                                        /*return*/\n                                        , response];\n\n                                      case 2:\n                                        error_2 = _a.sent();\n                                        authModeAttempts_1++;\n                                        if (!(authModeAttempts_1 >= operationAuthModes_1.length)) return [3\n                                        /*break*/\n                                        , 7];\n                                        logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                        _a.label = 3;\n\n                                      case 3:\n                                        _a.trys.push([3, 5,, 6]);\n\n                                        return [4\n                                        /*yield*/\n                                        , this.errorHandler({\n                                          recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                          localModel: null,\n                                          message: error_2.message,\n                                          model: modelConstructor.name,\n                                          operation: opName,\n                                          errorType: getMutationErrorType(error_2),\n                                          process: ProcessName.sync,\n                                          remoteModel: null,\n                                          cause: error_2\n                                        })];\n\n                                      case 4:\n                                        _a.sent();\n\n                                        return [3\n                                        /*break*/\n                                        , 6];\n\n                                      case 5:\n                                        e_1 = _a.sent();\n                                        logger.error('Mutation error handler failed with:', e_1);\n                                        return [3\n                                        /*break*/\n                                        , 6];\n\n                                      case 6:\n                                        throw error_2;\n\n                                      case 7:\n                                        logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                        return [4\n                                        /*yield*/\n                                        , authModeRetry_1()];\n\n                                      case 8:\n                                        return [2\n                                        /*return*/\n                                        , _a.sent()];\n\n                                      case 9:\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              };\n\n                              return [4\n                              /*yield*/\n                              , authModeRetry_1()];\n\n                            case 3:\n                              _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                              return [3\n                              /*break*/\n                              , 5];\n\n                            case 4:\n                              error_1 = _b.sent();\n\n                              if (error_1.message === 'Offline' || error_1.message === 'RetryMutation') {\n                                return [2\n                                /*return*/\n                                , \"continue\"];\n                              }\n\n                              return [3\n                              /*break*/\n                              , 5];\n\n                            case 5:\n                              if (!(result === undefined)) return [3\n                              /*break*/\n                              , 7];\n                              logger.debug('done retrying');\n                              return [4\n                              /*yield*/\n                              , this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        return [4\n                                        /*yield*/\n                                        , this.outbox.dequeue(storage)];\n\n                                      case 1:\n                                        _a.sent();\n\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              })];\n\n                            case 6:\n                              _b.sent();\n\n                              return [2\n                              /*return*/\n                              , \"continue\"];\n\n                            case 7:\n                              record = result.data[opName];\n                              hasMore = false;\n                              return [4\n                              /*yield*/\n                              , this_1.storage.runExclusive(function (storage) {\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                      case 0:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        return [4\n                                        /*yield*/\n                                        , this.outbox.dequeue(storage, record, operation)];\n\n                                      case 1:\n                                        // using runExclusive to prevent possible race condition\n                                        // when another record gets enqueued between dequeue and peek\n                                        _a.sent();\n\n                                        return [4\n                                        /*yield*/\n                                        , this.outbox.peek(storage)];\n\n                                      case 2:\n                                        hasMore = _a.sent() !== undefined;\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              })];\n\n                            case 8:\n                              _b.sent();\n\n                              (_c = (_b = this_1.observer) === null || _b === void 0 ? void 0 : _b.next) === null || _c === void 0 ? void 0 : _c.call(_b, {\n                                operation: operation,\n                                modelDefinition: modelDefinition,\n                                model: record,\n                                hasMore: hasMore\n                              });\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      };\n\n                      this_1 = this;\n                      _d.label = 1;\n\n                    case 1:\n                      _a = this.processing && this.runningProcesses.isOpen;\n                      if (!_a) return [3\n                      /*break*/\n                      , 3];\n                      return [4\n                      /*yield*/\n                      , this.outbox.peek(this.storage)];\n\n                    case 2:\n                      _a = (head = _d.sent()) !== undefined;\n                      _d.label = 3;\n\n                    case 3:\n                      if (!_a) return [3\n                      /*break*/\n                      , 5];\n                      return [5\n                      /*yield**/\n                      , _loop_1()];\n\n                    case 4:\n                      _d.sent();\n\n                      return [3\n                      /*break*/\n                      , 1];\n\n                    case 5:\n                      // pauses itself\n                      this.pause();\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, 'mutation resume loop')];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode, onTerminate) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , retry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, customUserAgentDetails, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation;\n\n                var _g;\n\n                return __generator(this, function (_h) {\n                  switch (_h.label) {\n                    case 0:\n                      _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 1:\n                      authToken = _h.sent();\n                      tryWith = {\n                        query: query,\n                        variables: variables,\n                        authMode: authMode,\n                        authToken: authToken\n                      };\n                      attempt = 0;\n                      opType = this.opTypeFromTransformerOperation(operation);\n                      customUserAgentDetails = {\n                        category: Category.DataStore,\n                        action: DataStoreAction.GraphQl\n                      };\n                      _h.label = 2;\n\n                    case 2:\n                      _h.trys.push([2, 4,, 17]);\n\n                      return [4\n                      /*yield*/\n                      , this.amplifyContext.InternalAPI.graphql(tryWith, undefined, customUserAgentDetails)];\n\n                    case 3:\n                      result = _h.sent(); // Use `as any` because TypeScript doesn't seem to like passing tuples\n                      // through generic params.\n\n                      return [2\n                      /*return*/\n                      , [result, opName, modelDefinition]];\n\n                    case 4:\n                      err_1 = _h.sent();\n                      if (!(err_1.errors && err_1.errors.length > 0)) return [3\n                      /*break*/\n                      , 15];\n                      _b = __read(err_1.errors, 1), error = _b[0];\n                      _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n\n                      if (error.errorType === 'Unauthorized') {\n                        throw new NonRetryableError('Unauthorized');\n                      }\n\n                      if (error.message === 'Network Error' || code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                      ) {\n                        if (!this.processing) {\n                          throw new NonRetryableError('Offline');\n                        } // TODO: Check errors on different env (react-native or other browsers)\n\n\n                        throw new Error('Network Error');\n                      }\n\n                      if (!(error.errorType === 'ConflictUnhandled')) return [3\n                      /*break*/\n                      , 13]; // TODO: add on ConflictConditionalCheck error query last from server\n\n                      attempt++;\n                      retryWith = void 0;\n                      if (!(attempt > MAX_ATTEMPTS)) return [3\n                      /*break*/\n                      , 5];\n                      retryWith = DISCARD;\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 5:\n                      _h.trys.push([5, 7,, 8]);\n\n                      return [4\n                      /*yield*/\n                      , this.conflictHandler({\n                        modelConstructor: modelConstructor,\n                        localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                        remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                        operation: opType,\n                        attempts: attempt\n                      })];\n\n                    case 6:\n                      retryWith = _h.sent();\n                      return [3\n                      /*break*/\n                      , 8];\n\n                    case 7:\n                      err_2 = _h.sent();\n                      logger.warn('conflict trycatch', err_2);\n                      return [3\n                      /*break*/\n                      , 17];\n\n                    case 8:\n                      if (!(retryWith === DISCARD)) return [3\n                      /*break*/\n                      , 11];\n                      _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                      return [4\n                      /*yield*/\n                      , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                    case 9:\n                      authToken_1 = _h.sent();\n                      return [4\n                      /*yield*/\n                      , this.amplifyContext.InternalAPI.graphql({\n                        query: query_1,\n                        variables: {\n                          id: variables.input.id\n                        },\n                        authMode: authMode,\n                        authToken: authToken_1\n                      }, undefined, customUserAgentDetails)];\n\n                    case 10:\n                      serverData = _h.sent(); // onTerminate cancel graphql()\n\n                      return [2\n                      /*return*/\n                      , [serverData, opName_1, modelDefinition]];\n\n                    case 11:\n                      namespace = this.schema.namespaces[namespaceName];\n                      updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                      return [4\n                      /*yield*/\n                      , this.storage.save(updatedMutation)];\n\n                    case 12:\n                      _h.sent();\n\n                      throw new NonRetryableError('RetryMutation');\n\n                    case 13:\n                      try {\n                        this.errorHandler({\n                          recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                          localModel: variables.input,\n                          message: error.message,\n                          operation: operation,\n                          errorType: getMutationErrorType(error),\n                          errorInfo: error.errorInfo,\n                          process: ProcessName.mutate,\n                          cause: error,\n                          remoteModel: error.data ? this.modelInstanceCreator(modelConstructor, error.data) : null\n                        });\n                      } catch (err) {\n                        logger.warn('Mutation error handler failed with:', err);\n                      } finally {\n                        // Return empty tuple, dequeues the mutation\n                        return [2\n                        /*return*/\n                        , error.data ? [{\n                          data: (_g = {}, _g[opName] = error.data, _g)\n                        }, opName, modelDefinition] : []];\n                      }\n\n                      _h.label = 14;\n\n                    case 14:\n                      return [3\n                      /*break*/\n                      , 16];\n\n                    case 15:\n                      // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                      // These errors should not be retried.\n                      throw new NonRetryableError(err_1);\n\n                    case 16:\n                      return [3\n                      /*break*/\n                      , 17];\n\n                    case 17:\n                      if (tryWith) return [3\n                      /*break*/\n                      , 2];\n                      _h.label = 18;\n\n                    case 18:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }, [model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent], safeJitteredBackoff, onTerminate)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n    var e_2, _a, e_3, _b, e_4, _c;\n\n    var _d, _e;\n\n    var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n    var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;\n    var auth = (_d = modelDefinition.attributes) === null || _d === void 0 ? void 0 : _d.find(function (a) {\n      return a.type === 'auth';\n    });\n    var ownerFields = ((_e = auth === null || auth === void 0 ? void 0 : auth.properties) === null || _e === void 0 ? void 0 : _e.rules.map(function (rule) {\n      return rule.ownerField;\n    }).filter(function (f) {\n      return f;\n    })) || ['owner'];\n    var queriesTuples = this.typeQuery.get(modelDefinition);\n\n    var _f = __read(queriesTuples.find(function (_a) {\n      var _b = __read(_a, 1),\n          transformerMutationType = _b[0];\n\n      return transformerMutationType === operation;\n    }), 3),\n        opName = _f[1],\n        query = _f[2];\n\n    var _g = JSON.parse(data),\n        _version = _g._version,\n        parsedData = __rest(_g, [\"_version\"]); // include all the fields that comprise a custom PK if one is specified\n\n\n    var deleteInput = {};\n\n    if (primaryKey === null || primaryKey === void 0 ? void 0 : primaryKey.length) {\n      try {\n        for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n          var pkField = primaryKey_1_1.value;\n          deleteInput[pkField] = parsedData[pkField];\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    } else {\n      deleteInput[ID] = parsedData.id;\n    }\n\n    var mutationInput;\n\n    if (operation === TransformerMutationType.DELETE) {\n      // For DELETE mutations, only the key(s) are included in the input\n      mutationInput = deleteInput;\n    } else {\n      // Otherwise, we construct the mutation input with the following logic\n      mutationInput = {};\n      var modelFields = Object.values(modelDefinition.fields);\n\n      try {\n        for (var modelFields_1 = __values(modelFields), modelFields_1_1 = modelFields_1.next(); !modelFields_1_1.done; modelFields_1_1 = modelFields_1.next()) {\n          var _h = modelFields_1_1.value,\n              name_1 = _h.name,\n              type = _h.type,\n              association = _h.association,\n              isReadOnly = _h.isReadOnly; // omit readonly fields. cloud storage doesn't need them and won't take them!\n\n          if (isReadOnly) {\n            continue;\n          } // omit owner fields if it's `null`. cloud storage doesn't allow it.\n\n\n          if (ownerFields.includes(name_1) && parsedData[name_1] === null) {\n            continue;\n          } // model fields should be stripped out from the input\n\n\n          if (isModelFieldType(type)) {\n            // except for belongs to relations - we need to replace them with the correct foreign key(s)\n            if (isTargetNameAssociation(association) && association.connectionType === 'BELONGS_TO') {\n              var targetNames = extractTargetNamesFromSrc(association);\n\n              if (targetNames) {\n                try {\n                  // instead of including the connected model itself, we add its key(s) to the mutation input\n                  for (var targetNames_1 = (e_4 = void 0, __values(targetNames)), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n                    var targetName = targetNames_1_1.value;\n                    mutationInput[targetName] = parsedData[targetName];\n                  }\n                } catch (e_4_1) {\n                  e_4 = {\n                    error: e_4_1\n                  };\n                } finally {\n                  try {\n                    if (targetNames_1_1 && !targetNames_1_1.done && (_c = targetNames_1.return)) _c.call(targetNames_1);\n                  } finally {\n                    if (e_4) throw e_4.error;\n                  }\n                }\n              }\n            }\n\n            continue;\n          } // scalar fields / non-model types\n\n\n          if (operation === TransformerMutationType.UPDATE) {\n            if (!parsedData.hasOwnProperty(name_1)) {\n              // for update mutations - strip out a field if it's unchanged\n              continue;\n            }\n          } // all other fields are added to the input object\n\n\n          mutationInput[name_1] = parsedData[name_1];\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (modelFields_1_1 && !modelFields_1_1.done && (_b = modelFields_1.return)) _b.call(modelFields_1);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n    } // Build mutation variables input object\n\n\n    var input = __assign(__assign({}, mutationInput), {\n      _version: _version\n    });\n\n    var graphQLCondition = JSON.parse(condition);\n\n    var variables = __assign({\n      input: input\n    }, operation === TransformerMutationType.CREATE ? {} : {\n      condition: Object.keys(graphQLCondition).length > 0 ? graphQLCondition : null\n    });\n\n    return [query, variables, graphQLCondition, opName, modelDefinition];\n  };\n\n  MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n    switch (operation) {\n      case TransformerMutationType.CREATE:\n        return OpType.INSERT;\n\n      case TransformerMutationType.DELETE:\n        return OpType.DELETE;\n\n      case TransformerMutationType.UPDATE:\n        return OpType.UPDATE;\n\n      case TransformerMutationType.GET:\n        // Intentionally blank\n        break;\n\n      default:\n        throw new Error(\"Invalid operation \" + operation);\n    } // because it makes TS happy ...\n\n\n    return undefined;\n  };\n\n  MutationProcessor.prototype.pause = function () {\n    this.processing = false;\n  };\n\n  return MutationProcessor;\n}();\n\nvar MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nvar originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\n\nexport var safeJitteredBackoff = function (attempt, _args, error) {\n  var attemptResult = originalJitteredBackoff(attempt); // If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n\n  if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === 'Network Error') {\n    return MAX_RETRY_DELAY_MS;\n  }\n\n  return attemptResult;\n};\nexport { MutationProcessor };","map":{"version":3,"names":["__assign","__awaiter","__generator","__read","__rest","__values","InternalAPI","Category","ConsoleLogger","Logger","DataStoreAction","jitteredBackoff","NonRetryableError","retry","BackgroundProcessManager","Observable","DISCARD","isModelFieldType","isTargetNameAssociation","OpType","ProcessName","extractTargetNamesFromSrc","USER","ID","buildGraphQLOperation","createMutationInstanceFromModelOperation","getModelAuthModes","TransformerMutationType","getTokenForCustomAuth","getMutationErrorType","MAX_ATTEMPTS","logger","MutationProcessor","schema","storage","userClasses","outbox","modelInstanceCreator","MutationEvent","amplifyConfig","authModeStrategy","errorHandler","conflictHandler","amplifyContext","typeQuery","WeakMap","processing","runningProcesses","generateQueries","prototype","_this","Object","values","namespaces","forEach","namespace","models","filter","_a","syncable","model","createMutation","_b","updateMutation","_c","deleteMutation","set","isReady","observer","undefined","start","observable","resume","error","addCleaner","removeObserver","pause","stop","label","close","sent","open","complete","call","isOpen","add","onTerminate","head","namespaceName","_loop_1","this_1","_d","operation","data","condition","modelConstructor","result","opName","modelDefinition","modelAuthModes","operationAuthModes_1","authModeAttempts_1","authModeRetry_1","error_1","record","hasMore","trys","push","defaultAuthMode","aws_appsync_authenticationType","modelName","toUpperCase","response","error_2","e_1","debug","jitteredRetry","length","recoverySuggestion","localModel","message","name","errorType","process","sync","remoteModel","cause","apply","runExclusive","dequeue","peek","next","mutationEvent","authMode","query","variables","graphQLCondition","authToken","tryWith","attempt","opType","customUserAgentDetails","err_1","code","retryWith","err_2","_e","_f","opName_1","query_1","authToken_1","serverData","updatedMutation","_g","_h","createQueryVariables","opTypeFromTransformerOperation","category","DataStore","action","GraphQl","graphql","errors","originalError","Error","input","attempts","warn","id","relationships","save","errorInfo","mutate","err","safeJitteredBackoff","e_2","e_3","e_4","primaryKey","keys","auth","attributes","find","a","type","ownerFields","properties","rules","map","rule","ownerField","f","queriesTuples","get","transformerMutationType","JSON","parse","_version","parsedData","deleteInput","primaryKey_1","primaryKey_1_1","done","pkField","value","e_2_1","return","mutationInput","DELETE","modelFields","fields","modelFields_1","modelFields_1_1","name_1","association","isReadOnly","includes","connectionType","targetNames","targetNames_1","targetNames_1_1","targetName","e_4_1","UPDATE","hasOwnProperty","e_3_1","CREATE","INSERT","GET","MAX_RETRY_DELAY_MS","originalJitteredBackoff","_args","attemptResult"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/sync/processors/mutation.js"],"sourcesContent":["import { __assign, __awaiter, __generator, __read, __rest, __values } from \"tslib\";\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Category, ConsoleLogger as Logger, DataStoreAction, jitteredBackoff, NonRetryableError, retry, BackgroundProcessManager, } from '@aws-amplify/core';\nimport Observable from 'zen-observable-ts';\nimport { DISCARD, isModelFieldType, isTargetNameAssociation, OpType, ProcessName, } from '../../types';\nimport { extractTargetNamesFromSrc, USER, ID } from '../../util';\nimport { buildGraphQLOperation, createMutationInstanceFromModelOperation, getModelAuthModes, TransformerMutationType, getTokenForCustomAuth, } from '../utils';\nimport { getMutationErrorType } from './errorMaps';\nvar MAX_ATTEMPTS = 10;\nvar logger = new Logger('DataStore');\nvar MutationProcessor = /** @class */ (function () {\n    function MutationProcessor(schema, storage, userClasses, outbox, modelInstanceCreator, MutationEvent, amplifyConfig, authModeStrategy, errorHandler, conflictHandler, amplifyContext) {\n        if (amplifyConfig === void 0) { amplifyConfig = {}; }\n        this.schema = schema;\n        this.storage = storage;\n        this.userClasses = userClasses;\n        this.outbox = outbox;\n        this.modelInstanceCreator = modelInstanceCreator;\n        this.MutationEvent = MutationEvent;\n        this.amplifyConfig = amplifyConfig;\n        this.authModeStrategy = authModeStrategy;\n        this.errorHandler = errorHandler;\n        this.conflictHandler = conflictHandler;\n        this.amplifyContext = amplifyContext;\n        this.typeQuery = new WeakMap();\n        this.processing = false;\n        this.runningProcesses = new BackgroundProcessManager();\n        this.amplifyContext.InternalAPI =\n            this.amplifyContext.InternalAPI || InternalAPI;\n        this.generateQueries();\n    }\n    MutationProcessor.prototype.generateQueries = function () {\n        var _this = this;\n        Object.values(this.schema.namespaces).forEach(function (namespace) {\n            Object.values(namespace.models)\n                .filter(function (_a) {\n                var syncable = _a.syncable;\n                return syncable;\n            })\n                .forEach(function (model) {\n                var _a = __read(buildGraphQLOperation(namespace, model, 'CREATE'), 1), createMutation = _a[0];\n                var _b = __read(buildGraphQLOperation(namespace, model, 'UPDATE'), 1), updateMutation = _b[0];\n                var _c = __read(buildGraphQLOperation(namespace, model, 'DELETE'), 1), deleteMutation = _c[0];\n                _this.typeQuery.set(model, [\n                    createMutation,\n                    updateMutation,\n                    deleteMutation,\n                ]);\n            });\n        });\n    };\n    MutationProcessor.prototype.isReady = function () {\n        return this.observer !== undefined;\n    };\n    MutationProcessor.prototype.start = function () {\n        var _this = this;\n        this.runningProcesses = new BackgroundProcessManager();\n        var observable = new Observable(function (observer) {\n            _this.observer = observer;\n            try {\n                _this.resume();\n            }\n            catch (error) {\n                logger.error('mutations processor start error', error);\n                throw error;\n            }\n            return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    // The observer has unsubscribed and/or `stop()` has been called.\n                    this.removeObserver();\n                    this.pause();\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n        return observable;\n    };\n    MutationProcessor.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.removeObserver();\n                        return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.removeObserver = function () {\n        var _a, _b;\n        (_b = (_a = this.observer) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.observer = undefined;\n    };\n    MutationProcessor.prototype.resume = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, (this.runningProcesses.isOpen &&\n                            this.runningProcesses.add(function (onTerminate) { return __awaiter(_this, void 0, void 0, function () {\n                                var head, namespaceName, _loop_1, this_1, _a;\n                                var _this = this;\n                                var _b, _c;\n                                return __generator(this, function (_d) {\n                                    switch (_d.label) {\n                                        case 0:\n                                            if (this.processing ||\n                                                !this.isReady() ||\n                                                !this.runningProcesses.isOpen) {\n                                                return [2 /*return*/];\n                                            }\n                                            this.processing = true;\n                                            namespaceName = USER;\n                                            _loop_1 = function () {\n                                                var model, operation, data, condition, modelConstructor, result, opName, modelDefinition, modelAuthModes, operationAuthModes_1, authModeAttempts_1, authModeRetry_1, error_1, record, hasMore;\n                                                var _a;\n                                                return __generator(this, function (_b) {\n                                                    switch (_b.label) {\n                                                        case 0:\n                                                            model = head.model, operation = head.operation, data = head.data, condition = head.condition;\n                                                            modelConstructor = this_1.userClasses[model];\n                                                            result = undefined;\n                                                            opName = undefined;\n                                                            modelDefinition = undefined;\n                                                            _b.label = 1;\n                                                        case 1:\n                                                            _b.trys.push([1, 4, , 5]);\n                                                            return [4 /*yield*/, getModelAuthModes({\n                                                                    authModeStrategy: this_1.authModeStrategy,\n                                                                    defaultAuthMode: this_1.amplifyConfig.aws_appsync_authenticationType,\n                                                                    modelName: model,\n                                                                    schema: this_1.schema,\n                                                                })];\n                                                        case 2:\n                                                            modelAuthModes = _b.sent();\n                                                            operationAuthModes_1 = modelAuthModes[operation.toUpperCase()];\n                                                            authModeAttempts_1 = 0;\n                                                            authModeRetry_1 = function () { return __awaiter(_this, void 0, void 0, function () {\n                                                                var response, error_2, e_1;\n                                                                return __generator(this, function (_a) {\n                                                                    switch (_a.label) {\n                                                                        case 0:\n                                                                            _a.trys.push([0, 2, , 9]);\n                                                                            logger.debug(\"Attempting mutation with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                                                            return [4 /*yield*/, this.jitteredRetry(namespaceName, model, operation, data, condition, modelConstructor, this.MutationEvent, head, operationAuthModes_1[authModeAttempts_1], onTerminate)];\n                                                                        case 1:\n                                                                            response = _a.sent();\n                                                                            logger.debug(\"Mutation sent successfully with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                                                            return [2 /*return*/, response];\n                                                                        case 2:\n                                                                            error_2 = _a.sent();\n                                                                            authModeAttempts_1++;\n                                                                            if (!(authModeAttempts_1 >= operationAuthModes_1.length)) return [3 /*break*/, 7];\n                                                                            logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1]);\n                                                                            _a.label = 3;\n                                                                        case 3:\n                                                                            _a.trys.push([3, 5, , 6]);\n                                                                            return [4 /*yield*/, this.errorHandler({\n                                                                                    recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                                                    localModel: null,\n                                                                                    message: error_2.message,\n                                                                                    model: modelConstructor.name,\n                                                                                    operation: opName,\n                                                                                    errorType: getMutationErrorType(error_2),\n                                                                                    process: ProcessName.sync,\n                                                                                    remoteModel: null,\n                                                                                    cause: error_2,\n                                                                                })];\n                                                                        case 4:\n                                                                            _a.sent();\n                                                                            return [3 /*break*/, 6];\n                                                                        case 5:\n                                                                            e_1 = _a.sent();\n                                                                            logger.error('Mutation error handler failed with:', e_1);\n                                                                            return [3 /*break*/, 6];\n                                                                        case 6: throw error_2;\n                                                                        case 7:\n                                                                            logger.debug(\"Mutation failed with authMode: \" + operationAuthModes_1[authModeAttempts_1 - 1] + \". Retrying with authMode: \" + operationAuthModes_1[authModeAttempts_1]);\n                                                                            return [4 /*yield*/, authModeRetry_1()];\n                                                                        case 8: return [2 /*return*/, _a.sent()];\n                                                                        case 9: return [2 /*return*/];\n                                                                    }\n                                                                });\n                                                            }); };\n                                                            return [4 /*yield*/, authModeRetry_1()];\n                                                        case 3:\n                                                            _a = __read.apply(void 0, [_b.sent(), 3]), result = _a[0], opName = _a[1], modelDefinition = _a[2];\n                                                            return [3 /*break*/, 5];\n                                                        case 4:\n                                                            error_1 = _b.sent();\n                                                            if (error_1.message === 'Offline' ||\n                                                                error_1.message === 'RetryMutation') {\n                                                                return [2 /*return*/, \"continue\"];\n                                                            }\n                                                            return [3 /*break*/, 5];\n                                                        case 5:\n                                                            if (!(result === undefined)) return [3 /*break*/, 7];\n                                                            logger.debug('done retrying');\n                                                            return [4 /*yield*/, this_1.storage.runExclusive(function (storage) { return __awaiter(_this, void 0, void 0, function () {\n                                                                    return __generator(this, function (_a) {\n                                                                        switch (_a.label) {\n                                                                            case 0: return [4 /*yield*/, this.outbox.dequeue(storage)];\n                                                                            case 1:\n                                                                                _a.sent();\n                                                                                return [2 /*return*/];\n                                                                        }\n                                                                    });\n                                                                }); })];\n                                                        case 6:\n                                                            _b.sent();\n                                                            return [2 /*return*/, \"continue\"];\n                                                        case 7:\n                                                            record = result.data[opName];\n                                                            hasMore = false;\n                                                            return [4 /*yield*/, this_1.storage.runExclusive(function (storage) { return __awaiter(_this, void 0, void 0, function () {\n                                                                    return __generator(this, function (_a) {\n                                                                        switch (_a.label) {\n                                                                            case 0: \n                                                                            // using runExclusive to prevent possible race condition\n                                                                            // when another record gets enqueued between dequeue and peek\n                                                                            return [4 /*yield*/, this.outbox.dequeue(storage, record, operation)];\n                                                                            case 1:\n                                                                                // using runExclusive to prevent possible race condition\n                                                                                // when another record gets enqueued between dequeue and peek\n                                                                                _a.sent();\n                                                                                return [4 /*yield*/, this.outbox.peek(storage)];\n                                                                            case 2:\n                                                                                hasMore = (_a.sent()) !== undefined;\n                                                                                return [2 /*return*/];\n                                                                        }\n                                                                    });\n                                                                }); })];\n                                                        case 8:\n                                                            _b.sent();\n                                                            (_c = (_b = this_1.observer) === null || _b === void 0 ? void 0 : _b.next) === null || _c === void 0 ? void 0 : _c.call(_b, {\n                                                                operation: operation,\n                                                                modelDefinition: modelDefinition,\n                                                                model: record,\n                                                                hasMore: hasMore,\n                                                            });\n                                                            return [2 /*return*/];\n                                                    }\n                                                });\n                                            };\n                                            this_1 = this;\n                                            _d.label = 1;\n                                        case 1:\n                                            _a = this.processing &&\n                                                this.runningProcesses.isOpen;\n                                            if (!_a) return [3 /*break*/, 3];\n                                            return [4 /*yield*/, this.outbox.peek(this.storage)];\n                                        case 2:\n                                            _a = (head = _d.sent()) !== undefined;\n                                            _d.label = 3;\n                                        case 3:\n                                            if (!_a) return [3 /*break*/, 5];\n                                            return [5 /*yield**/, _loop_1()];\n                                        case 4:\n                                            _d.sent();\n                                            return [3 /*break*/, 1];\n                                        case 5:\n                                            // pauses itself\n                                            this.pause();\n                                            return [2 /*return*/];\n                                    }\n                                });\n                            }); }, 'mutation resume loop'))];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.jitteredRetry = function (namespaceName, model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent, authMode, onTerminate) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, retry(function (model, operation, data, condition, modelConstructor, MutationEvent, mutationEvent) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, query, variables, graphQLCondition, opName, modelDefinition, authToken, tryWith, attempt, opType, customUserAgentDetails, result, err_1, _b, error, _c, _d, code, retryWith, err_2, _e, _f, opName_1, query_1, authToken_1, serverData, namespace, updatedMutation;\n                            var _g;\n                            return __generator(this, function (_h) {\n                                switch (_h.label) {\n                                    case 0:\n                                        _a = __read(this.createQueryVariables(namespaceName, model, operation, data, condition), 5), query = _a[0], variables = _a[1], graphQLCondition = _a[2], opName = _a[3], modelDefinition = _a[4];\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                    case 1:\n                                        authToken = _h.sent();\n                                        tryWith = {\n                                            query: query,\n                                            variables: variables,\n                                            authMode: authMode,\n                                            authToken: authToken,\n                                        };\n                                        attempt = 0;\n                                        opType = this.opTypeFromTransformerOperation(operation);\n                                        customUserAgentDetails = {\n                                            category: Category.DataStore,\n                                            action: DataStoreAction.GraphQl,\n                                        };\n                                        _h.label = 2;\n                                    case 2:\n                                        _h.trys.push([2, 4, , 17]);\n                                        return [4 /*yield*/, this.amplifyContext.InternalAPI.graphql(tryWith, undefined, customUserAgentDetails)];\n                                    case 3:\n                                        result = (_h.sent());\n                                        // Use `as any` because TypeScript doesn't seem to like passing tuples\n                                        // through generic params.\n                                        return [2 /*return*/, [result, opName, modelDefinition]];\n                                    case 4:\n                                        err_1 = _h.sent();\n                                        if (!(err_1.errors && err_1.errors.length > 0)) return [3 /*break*/, 15];\n                                        _b = __read(err_1.errors, 1), error = _b[0];\n                                        _c = error.originalError, _d = (_c === void 0 ? {} : _c).code, code = _d === void 0 ? null : _d;\n                                        if (error.errorType === 'Unauthorized') {\n                                            throw new NonRetryableError('Unauthorized');\n                                        }\n                                        if (error.message === 'Network Error' ||\n                                            code === 'ECONNABORTED' // refers to axios timeout error caused by device's bad network condition\n                                        ) {\n                                            if (!this.processing) {\n                                                throw new NonRetryableError('Offline');\n                                            }\n                                            // TODO: Check errors on different env (react-native or other browsers)\n                                            throw new Error('Network Error');\n                                        }\n                                        if (!(error.errorType === 'ConflictUnhandled')) return [3 /*break*/, 13];\n                                        // TODO: add on ConflictConditionalCheck error query last from server\n                                        attempt++;\n                                        retryWith = void 0;\n                                        if (!(attempt > MAX_ATTEMPTS)) return [3 /*break*/, 5];\n                                        retryWith = DISCARD;\n                                        return [3 /*break*/, 8];\n                                    case 5:\n                                        _h.trys.push([5, 7, , 8]);\n                                        return [4 /*yield*/, this.conflictHandler({\n                                                modelConstructor: modelConstructor,\n                                                localModel: this.modelInstanceCreator(modelConstructor, variables.input),\n                                                remoteModel: this.modelInstanceCreator(modelConstructor, error.data),\n                                                operation: opType,\n                                                attempts: attempt,\n                                            })];\n                                    case 6:\n                                        retryWith = _h.sent();\n                                        return [3 /*break*/, 8];\n                                    case 7:\n                                        err_2 = _h.sent();\n                                        logger.warn('conflict trycatch', err_2);\n                                        return [3 /*break*/, 17];\n                                    case 8:\n                                        if (!(retryWith === DISCARD)) return [3 /*break*/, 11];\n                                        _e = __read(buildGraphQLOperation(this.schema.namespaces[namespaceName], modelDefinition, 'GET'), 1), _f = __read(_e[0], 3), opName_1 = _f[1], query_1 = _f[2];\n                                        return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                    case 9:\n                                        authToken_1 = _h.sent();\n                                        return [4 /*yield*/, this.amplifyContext.InternalAPI.graphql({\n                                                query: query_1,\n                                                variables: { id: variables.input.id },\n                                                authMode: authMode,\n                                                authToken: authToken_1,\n                                            }, undefined, customUserAgentDetails)];\n                                    case 10:\n                                        serverData = _h.sent();\n                                        // onTerminate cancel graphql()\n                                        return [2 /*return*/, [serverData, opName_1, modelDefinition]];\n                                    case 11:\n                                        namespace = this.schema.namespaces[namespaceName];\n                                        updatedMutation = createMutationInstanceFromModelOperation(namespace.relationships, modelDefinition, opType, modelConstructor, retryWith, graphQLCondition, MutationEvent, this.modelInstanceCreator, mutationEvent.id);\n                                        return [4 /*yield*/, this.storage.save(updatedMutation)];\n                                    case 12:\n                                        _h.sent();\n                                        throw new NonRetryableError('RetryMutation');\n                                    case 13:\n                                        try {\n                                            this.errorHandler({\n                                                recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                localModel: variables.input,\n                                                message: error.message,\n                                                operation: operation,\n                                                errorType: getMutationErrorType(error),\n                                                errorInfo: error.errorInfo,\n                                                process: ProcessName.mutate,\n                                                cause: error,\n                                                remoteModel: error.data\n                                                    ? this.modelInstanceCreator(modelConstructor, error.data)\n                                                    : null,\n                                            });\n                                        }\n                                        catch (err) {\n                                            logger.warn('Mutation error handler failed with:', err);\n                                        }\n                                        finally {\n                                            // Return empty tuple, dequeues the mutation\n                                            return [2 /*return*/, error.data\n                                                    ? [\n                                                        { data: (_g = {}, _g[opName] = error.data, _g) },\n                                                        opName,\n                                                        modelDefinition,\n                                                    ]\n                                                    : []];\n                                        }\n                                        _h.label = 14;\n                                    case 14: return [3 /*break*/, 16];\n                                    case 15: \n                                    // Catch-all for client-side errors that don't come back in the `GraphQLError` format.\n                                    // These errors should not be retried.\n                                    throw new NonRetryableError(err_1);\n                                    case 16: return [3 /*break*/, 17];\n                                    case 17:\n                                        if (tryWith) return [3 /*break*/, 2];\n                                        _h.label = 18;\n                                    case 18: return [2 /*return*/];\n                                }\n                            });\n                        }); }, [\n                            model,\n                            operation,\n                            data,\n                            condition,\n                            modelConstructor,\n                            MutationEvent,\n                            mutationEvent,\n                        ], safeJitteredBackoff, onTerminate)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    MutationProcessor.prototype.createQueryVariables = function (namespaceName, model, operation, data, condition) {\n        var e_2, _a, e_3, _b, e_4, _c;\n        var _d, _e;\n        var modelDefinition = this.schema.namespaces[namespaceName].models[model];\n        var primaryKey = this.schema.namespaces[namespaceName].keys[model].primaryKey;\n        var auth = (_d = modelDefinition.attributes) === null || _d === void 0 ? void 0 : _d.find(function (a) { return a.type === 'auth'; });\n        var ownerFields = ((_e = auth === null || auth === void 0 ? void 0 : auth.properties) === null || _e === void 0 ? void 0 : _e.rules.map(function (rule) { return rule.ownerField; }).filter(function (f) { return f; })) || ['owner'];\n        var queriesTuples = this.typeQuery.get(modelDefinition);\n        var _f = __read(queriesTuples.find(function (_a) {\n            var _b = __read(_a, 1), transformerMutationType = _b[0];\n            return transformerMutationType === operation;\n        }), 3), opName = _f[1], query = _f[2];\n        var _g = JSON.parse(data), _version = _g._version, parsedData = __rest(_g, [\"_version\"]);\n        // include all the fields that comprise a custom PK if one is specified\n        var deleteInput = {};\n        if (primaryKey === null || primaryKey === void 0 ? void 0 : primaryKey.length) {\n            try {\n                for (var primaryKey_1 = __values(primaryKey), primaryKey_1_1 = primaryKey_1.next(); !primaryKey_1_1.done; primaryKey_1_1 = primaryKey_1.next()) {\n                    var pkField = primaryKey_1_1.value;\n                    deleteInput[pkField] = parsedData[pkField];\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (primaryKey_1_1 && !primaryKey_1_1.done && (_a = primaryKey_1.return)) _a.call(primaryKey_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n        }\n        else {\n            deleteInput[ID] = parsedData.id;\n        }\n        var mutationInput;\n        if (operation === TransformerMutationType.DELETE) {\n            // For DELETE mutations, only the key(s) are included in the input\n            mutationInput = deleteInput;\n        }\n        else {\n            // Otherwise, we construct the mutation input with the following logic\n            mutationInput = {};\n            var modelFields = Object.values(modelDefinition.fields);\n            try {\n                for (var modelFields_1 = __values(modelFields), modelFields_1_1 = modelFields_1.next(); !modelFields_1_1.done; modelFields_1_1 = modelFields_1.next()) {\n                    var _h = modelFields_1_1.value, name_1 = _h.name, type = _h.type, association = _h.association, isReadOnly = _h.isReadOnly;\n                    // omit readonly fields. cloud storage doesn't need them and won't take them!\n                    if (isReadOnly) {\n                        continue;\n                    }\n                    // omit owner fields if it's `null`. cloud storage doesn't allow it.\n                    if (ownerFields.includes(name_1) && parsedData[name_1] === null) {\n                        continue;\n                    }\n                    // model fields should be stripped out from the input\n                    if (isModelFieldType(type)) {\n                        // except for belongs to relations - we need to replace them with the correct foreign key(s)\n                        if (isTargetNameAssociation(association) &&\n                            association.connectionType === 'BELONGS_TO') {\n                            var targetNames = extractTargetNamesFromSrc(association);\n                            if (targetNames) {\n                                try {\n                                    // instead of including the connected model itself, we add its key(s) to the mutation input\n                                    for (var targetNames_1 = (e_4 = void 0, __values(targetNames)), targetNames_1_1 = targetNames_1.next(); !targetNames_1_1.done; targetNames_1_1 = targetNames_1.next()) {\n                                        var targetName = targetNames_1_1.value;\n                                        mutationInput[targetName] = parsedData[targetName];\n                                    }\n                                }\n                                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                                finally {\n                                    try {\n                                        if (targetNames_1_1 && !targetNames_1_1.done && (_c = targetNames_1.return)) _c.call(targetNames_1);\n                                    }\n                                    finally { if (e_4) throw e_4.error; }\n                                }\n                            }\n                        }\n                        continue;\n                    }\n                    // scalar fields / non-model types\n                    if (operation === TransformerMutationType.UPDATE) {\n                        if (!parsedData.hasOwnProperty(name_1)) {\n                            // for update mutations - strip out a field if it's unchanged\n                            continue;\n                        }\n                    }\n                    // all other fields are added to the input object\n                    mutationInput[name_1] = parsedData[name_1];\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (modelFields_1_1 && !modelFields_1_1.done && (_b = modelFields_1.return)) _b.call(modelFields_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        }\n        // Build mutation variables input object\n        var input = __assign(__assign({}, mutationInput), { _version: _version });\n        var graphQLCondition = JSON.parse(condition);\n        var variables = __assign({ input: input }, (operation === TransformerMutationType.CREATE\n            ? {}\n            : {\n                condition: Object.keys(graphQLCondition).length > 0\n                    ? graphQLCondition\n                    : null,\n            }));\n        return [query, variables, graphQLCondition, opName, modelDefinition];\n    };\n    MutationProcessor.prototype.opTypeFromTransformerOperation = function (operation) {\n        switch (operation) {\n            case TransformerMutationType.CREATE:\n                return OpType.INSERT;\n            case TransformerMutationType.DELETE:\n                return OpType.DELETE;\n            case TransformerMutationType.UPDATE:\n                return OpType.UPDATE;\n            case TransformerMutationType.GET: // Intentionally blank\n                break;\n            default:\n                throw new Error(\"Invalid operation \" + operation);\n        }\n        // because it makes TS happy ...\n        return undefined;\n    };\n    MutationProcessor.prototype.pause = function () {\n        this.processing = false;\n    };\n    return MutationProcessor;\n}());\nvar MAX_RETRY_DELAY_MS = 5 * 60 * 1000;\nvar originalJitteredBackoff = jitteredBackoff(MAX_RETRY_DELAY_MS);\n/**\n * @private\n * Internal use of Amplify only.\n *\n * Wraps the jittered backoff calculation to retry Network Errors indefinitely.\n * Backs off according to original jittered retry logic until the original retry\n * logic hits its max. After this occurs, if the error is a Network Error, we\n * ignore the attempt count and return MAX_RETRY_DELAY_MS to retry forever (until\n * the request succeeds).\n *\n * @param attempt ignored\n * @param _args ignored\n * @param error tested to see if `.message` is 'Network Error'\n * @returns number | false :\n */\nexport var safeJitteredBackoff = function (attempt, _args, error) {\n    var attemptResult = originalJitteredBackoff(attempt);\n    // If this is the last attempt and it is a network error, we retry indefinitively every 5 minutes\n    if (attemptResult === false && (error === null || error === void 0 ? void 0 : error.message) === 'Network Error') {\n        return MAX_RETRY_DELAY_MS;\n    }\n    return attemptResult;\n};\nexport { MutationProcessor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}