{"ast":null,"code":"import { __awaiter } from '../../node_modules/tslib/tslib.es6.mjs';\nimport React__default, { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { Auth } from 'aws-amplify';\nimport { createAuthenticatorMachine, listenToAuthHub, defaultAuthHubHandler } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.mjs';\n\nconst createHubHandler = options => (data, service) => __awaiter(void 0, void 0, void 0, function* () {\n  yield defaultAuthHubHandler(data, service, options);\n});\n\nfunction AuthenticatorProvider({\n  children\n}) {\n  // `authStatus` is exposed by `useAuthenticator` but should not be derived directly from the\n  // state machine as the machine only updates on `Authenticator` initiated events, which\n  // leads to scenarios where the state machine `authStatus` gets \"stuck\". For exmample,\n  // if a user was to sign in using `Auth.signIn` directly rather than using `Authenticator`\n  const [authStatus, setAuthStatus] = React__default.useState('configuring'); // only run on first render\n\n  React__default.useEffect(() => {\n    Auth.currentAuthenticatedUser().then(() => {\n      setAuthStatus('authenticated');\n    }).catch(() => {\n      setAuthStatus('unauthenticated');\n    });\n  }, []);\n  /**\n   * Based on use cases, developer might already have added another Provider\n   * outside Authenticator. In that case, we sync the two providers by just\n   * passing the parent value.\n   *\n   * TODO(BREAKING): enforce only one provider in App tree\n   */\n\n  const parentProviderVal = useContext(AuthenticatorContext);\n  const service = useInterpret(createAuthenticatorMachine);\n  const value = useMemo(() => !parentProviderVal ? {\n    authStatus,\n    service\n  } : parentProviderVal, [authStatus, parentProviderVal, service]);\n  const {\n    service: activeService\n  } = value;\n  useEffect(() => {\n    const onSignIn = () => {\n      setAuthStatus('authenticated');\n    };\n\n    const onSignOut = () => {\n      setAuthStatus('unauthenticated');\n    };\n\n    const unsubscribe = listenToAuthHub(activeService, createHubHandler({\n      onSignIn,\n      onSignOut\n    }));\n    return unsubscribe;\n  }, [activeService]);\n  return React__default.createElement(AuthenticatorContext.Provider, {\n    value: value\n  }, children);\n}\n\nexport { AuthenticatorProvider as default };","map":{"version":3,"names":["__awaiter","React__default","useContext","useMemo","useEffect","useInterpret","Auth","createAuthenticatorMachine","listenToAuthHub","defaultAuthHubHandler","AuthenticatorContext","createHubHandler","options","data","service","AuthenticatorProvider","children","authStatus","setAuthStatus","useState","currentAuthenticatedUser","then","catch","parentProviderVal","value","activeService","onSignIn","onSignOut","unsubscribe","createElement","Provider","default"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/context/AuthenticatorProvider.mjs"],"sourcesContent":["import { __awaiter } from '../../node_modules/tslib/tslib.es6.mjs';\nimport React__default, { useContext, useMemo, useEffect } from 'react';\nimport { useInterpret } from '@xstate/react';\nimport { Auth } from 'aws-amplify';\nimport { createAuthenticatorMachine, listenToAuthHub, defaultAuthHubHandler } from '@aws-amplify/ui';\nimport { AuthenticatorContext } from './AuthenticatorContext.mjs';\n\nconst createHubHandler = (options) => (data, service) => __awaiter(void 0, void 0, void 0, function* () {\n    yield defaultAuthHubHandler(data, service, options);\n});\nfunction AuthenticatorProvider({ children, }) {\n    // `authStatus` is exposed by `useAuthenticator` but should not be derived directly from the\n    // state machine as the machine only updates on `Authenticator` initiated events, which\n    // leads to scenarios where the state machine `authStatus` gets \"stuck\". For exmample,\n    // if a user was to sign in using `Auth.signIn` directly rather than using `Authenticator`\n    const [authStatus, setAuthStatus] = React__default.useState('configuring');\n    // only run on first render\n    React__default.useEffect(() => {\n        Auth.currentAuthenticatedUser()\n            .then(() => {\n            setAuthStatus('authenticated');\n        })\n            .catch(() => {\n            setAuthStatus('unauthenticated');\n        });\n    }, []);\n    /**\n     * Based on use cases, developer might already have added another Provider\n     * outside Authenticator. In that case, we sync the two providers by just\n     * passing the parent value.\n     *\n     * TODO(BREAKING): enforce only one provider in App tree\n     */\n    const parentProviderVal = useContext(AuthenticatorContext);\n    const service = useInterpret(createAuthenticatorMachine);\n    const value = useMemo(() => (!parentProviderVal ? { authStatus, service } : parentProviderVal), [authStatus, parentProviderVal, service]);\n    const { service: activeService } = value;\n    useEffect(() => {\n        const onSignIn = () => {\n            setAuthStatus('authenticated');\n        };\n        const onSignOut = () => {\n            setAuthStatus('unauthenticated');\n        };\n        const unsubscribe = listenToAuthHub(activeService, createHubHandler({ onSignIn, onSignOut }));\n        return unsubscribe;\n    }, [activeService]);\n    return (React__default.createElement(AuthenticatorContext.Provider, { value: value }, children));\n}\n\nexport { AuthenticatorProvider as default };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wCAA1B;AACA,OAAOC,cAAP,IAAyBC,UAAzB,EAAqCC,OAArC,EAA8CC,SAA9C,QAA+D,OAA/D;AACA,SAASC,YAAT,QAA6B,eAA7B;AACA,SAASC,IAAT,QAAqB,aAArB;AACA,SAASC,0BAAT,EAAqCC,eAArC,EAAsDC,qBAAtD,QAAmF,iBAAnF;AACA,SAASC,oBAAT,QAAqC,4BAArC;;AAEA,MAAMC,gBAAgB,GAAIC,OAAD,IAAa,CAACC,IAAD,EAAOC,OAAP,KAAmBd,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;EACpG,MAAMS,qBAAqB,CAACI,IAAD,EAAOC,OAAP,EAAgBF,OAAhB,CAA3B;AACH,CAFiE,CAAlE;;AAGA,SAASG,qBAAT,CAA+B;EAAEC;AAAF,CAA/B,EAA8C;EAC1C;EACA;EACA;EACA;EACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BjB,cAAc,CAACkB,QAAf,CAAwB,aAAxB,CAApC,CAL0C,CAM1C;;EACAlB,cAAc,CAACG,SAAf,CAAyB,MAAM;IAC3BE,IAAI,CAACc,wBAAL,GACKC,IADL,CACU,MAAM;MACZH,aAAa,CAAC,eAAD,CAAb;IACH,CAHD,EAIKI,KAJL,CAIW,MAAM;MACbJ,aAAa,CAAC,iBAAD,CAAb;IACH,CAND;EAOH,CARD,EAQG,EARH;EASA;AACJ;AACA;AACA;AACA;AACA;AACA;;EACI,MAAMK,iBAAiB,GAAGrB,UAAU,CAACQ,oBAAD,CAApC;EACA,MAAMI,OAAO,GAAGT,YAAY,CAACE,0BAAD,CAA5B;EACA,MAAMiB,KAAK,GAAGrB,OAAO,CAAC,MAAO,CAACoB,iBAAD,GAAqB;IAAEN,UAAF;IAAcH;EAAd,CAArB,GAA+CS,iBAAvD,EAA2E,CAACN,UAAD,EAAaM,iBAAb,EAAgCT,OAAhC,CAA3E,CAArB;EACA,MAAM;IAAEA,OAAO,EAAEW;EAAX,IAA6BD,KAAnC;EACApB,SAAS,CAAC,MAAM;IACZ,MAAMsB,QAAQ,GAAG,MAAM;MACnBR,aAAa,CAAC,eAAD,CAAb;IACH,CAFD;;IAGA,MAAMS,SAAS,GAAG,MAAM;MACpBT,aAAa,CAAC,iBAAD,CAAb;IACH,CAFD;;IAGA,MAAMU,WAAW,GAAGpB,eAAe,CAACiB,aAAD,EAAgBd,gBAAgB,CAAC;MAAEe,QAAF;MAAYC;IAAZ,CAAD,CAAhC,CAAnC;IACA,OAAOC,WAAP;EACH,CATQ,EASN,CAACH,aAAD,CATM,CAAT;EAUA,OAAQxB,cAAc,CAAC4B,aAAf,CAA6BnB,oBAAoB,CAACoB,QAAlD,EAA4D;IAAEN,KAAK,EAAEA;EAAT,CAA5D,EAA8ER,QAA9E,CAAR;AACH;;AAED,SAASD,qBAAqB,IAAIgB,OAAlC"},"metadata":{},"sourceType":"module"}