{"ast":null,"code":"import { RECONNECT_DELAY, RECONNECT_INTERVAL } from '../Providers/constants';\nexport var ReconnectEvent;\n\n(function (ReconnectEvent) {\n  ReconnectEvent[\"START_RECONNECT\"] = \"START_RECONNECT\";\n  ReconnectEvent[\"HALT_RECONNECT\"] = \"HALT_RECONNECT\";\n})(ReconnectEvent || (ReconnectEvent = {}));\n/**\n * Captures the reconnect event logic used to determine when to reconnect to PubSub providers.\n *   Reconnnect attempts are delayed by 5 seconds to let the interface settle.\n *   Attempting to reconnect only once creates unrecoverable states when the network state isn't\n *   supported by the browser, so this keeps retrying every minute until halted.\n */\n\n\nvar ReconnectionMonitor =\n/** @class */\nfunction () {\n  function ReconnectionMonitor() {\n    this.reconnectObservers = [];\n  }\n  /**\n   * Add reconnect observer to the list of observers to alert on reconnect\n   */\n\n\n  ReconnectionMonitor.prototype.addObserver = function (reconnectObserver) {\n    this.reconnectObservers.push(reconnectObserver);\n  };\n  /**\n   * Given a reconnect event, start the appropriate behavior\n   */\n\n\n  ReconnectionMonitor.prototype.record = function (event) {\n    var _this = this;\n\n    if (event === ReconnectEvent.START_RECONNECT) {\n      // If the reconnection hasn't been started\n      if (this.reconnectSetTimeoutId === undefined && this.reconnectIntervalId === undefined) {\n        this.reconnectSetTimeoutId = setTimeout(function () {\n          // Reconnect now\n          _this._triggerReconnect(); // Retry reconnect every periodically until it works\n\n\n          _this.reconnectIntervalId = setInterval(function () {\n            _this._triggerReconnect();\n          }, RECONNECT_INTERVAL);\n        }, RECONNECT_DELAY);\n      }\n    }\n\n    if (event === ReconnectEvent.HALT_RECONNECT) {\n      if (this.reconnectIntervalId) {\n        clearInterval(this.reconnectIntervalId);\n        this.reconnectIntervalId = undefined;\n      }\n\n      if (this.reconnectSetTimeoutId) {\n        clearTimeout(this.reconnectSetTimeoutId);\n        this.reconnectSetTimeoutId = undefined;\n      }\n    }\n  };\n  /**\n   * Complete all reconnect observers\n   */\n\n\n  ReconnectionMonitor.prototype.close = function () {\n    this.reconnectObservers.forEach(function (reconnectObserver) {\n      var _a;\n\n      (_a = reconnectObserver.complete) === null || _a === void 0 ? void 0 : _a.call(reconnectObserver);\n    });\n  };\n\n  ReconnectionMonitor.prototype._triggerReconnect = function () {\n    this.reconnectObservers.forEach(function (reconnectObserver) {\n      var _a;\n\n      (_a = reconnectObserver.next) === null || _a === void 0 ? void 0 : _a.call(reconnectObserver);\n    });\n  };\n\n  return ReconnectionMonitor;\n}();\n\nexport { ReconnectionMonitor };","map":{"version":3,"names":["RECONNECT_DELAY","RECONNECT_INTERVAL","ReconnectEvent","ReconnectionMonitor","reconnectObservers","prototype","addObserver","reconnectObserver","push","record","event","_this","START_RECONNECT","reconnectSetTimeoutId","undefined","reconnectIntervalId","setTimeout","_triggerReconnect","setInterval","HALT_RECONNECT","clearInterval","clearTimeout","close","forEach","_a","complete","call","next"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/pubsub/lib-esm/utils/ReconnectionMonitor.js"],"sourcesContent":["import { RECONNECT_DELAY, RECONNECT_INTERVAL } from '../Providers/constants';\nexport var ReconnectEvent;\n(function (ReconnectEvent) {\n    ReconnectEvent[\"START_RECONNECT\"] = \"START_RECONNECT\";\n    ReconnectEvent[\"HALT_RECONNECT\"] = \"HALT_RECONNECT\";\n})(ReconnectEvent || (ReconnectEvent = {}));\n/**\n * Captures the reconnect event logic used to determine when to reconnect to PubSub providers.\n *   Reconnnect attempts are delayed by 5 seconds to let the interface settle.\n *   Attempting to reconnect only once creates unrecoverable states when the network state isn't\n *   supported by the browser, so this keeps retrying every minute until halted.\n */\nvar ReconnectionMonitor = /** @class */ (function () {\n    function ReconnectionMonitor() {\n        this.reconnectObservers = [];\n    }\n    /**\n     * Add reconnect observer to the list of observers to alert on reconnect\n     */\n    ReconnectionMonitor.prototype.addObserver = function (reconnectObserver) {\n        this.reconnectObservers.push(reconnectObserver);\n    };\n    /**\n     * Given a reconnect event, start the appropriate behavior\n     */\n    ReconnectionMonitor.prototype.record = function (event) {\n        var _this = this;\n        if (event === ReconnectEvent.START_RECONNECT) {\n            // If the reconnection hasn't been started\n            if (this.reconnectSetTimeoutId === undefined &&\n                this.reconnectIntervalId === undefined) {\n                this.reconnectSetTimeoutId = setTimeout(function () {\n                    // Reconnect now\n                    _this._triggerReconnect();\n                    // Retry reconnect every periodically until it works\n                    _this.reconnectIntervalId = setInterval(function () {\n                        _this._triggerReconnect();\n                    }, RECONNECT_INTERVAL);\n                }, RECONNECT_DELAY);\n            }\n        }\n        if (event === ReconnectEvent.HALT_RECONNECT) {\n            if (this.reconnectIntervalId) {\n                clearInterval(this.reconnectIntervalId);\n                this.reconnectIntervalId = undefined;\n            }\n            if (this.reconnectSetTimeoutId) {\n                clearTimeout(this.reconnectSetTimeoutId);\n                this.reconnectSetTimeoutId = undefined;\n            }\n        }\n    };\n    /**\n     * Complete all reconnect observers\n     */\n    ReconnectionMonitor.prototype.close = function () {\n        this.reconnectObservers.forEach(function (reconnectObserver) {\n            var _a;\n            (_a = reconnectObserver.complete) === null || _a === void 0 ? void 0 : _a.call(reconnectObserver);\n        });\n    };\n    ReconnectionMonitor.prototype._triggerReconnect = function () {\n        this.reconnectObservers.forEach(function (reconnectObserver) {\n            var _a;\n            (_a = reconnectObserver.next) === null || _a === void 0 ? void 0 : _a.call(reconnectObserver);\n        });\n    };\n    return ReconnectionMonitor;\n}());\nexport { ReconnectionMonitor };\n"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,kBAA1B,QAAoD,wBAApD;AACA,OAAO,IAAIC,cAAJ;;AACP,CAAC,UAAUA,cAAV,EAA0B;EACvBA,cAAc,CAAC,iBAAD,CAAd,GAAoC,iBAApC;EACAA,cAAc,CAAC,gBAAD,CAAd,GAAmC,gBAAnC;AACH,CAHD,EAGGA,cAAc,KAAKA,cAAc,GAAG,EAAtB,CAHjB;AAIA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,mBAAmB;AAAG;AAAe,YAAY;EACjD,SAASA,mBAAT,GAA+B;IAC3B,KAAKC,kBAAL,GAA0B,EAA1B;EACH;EACD;AACJ;AACA;;;EACID,mBAAmB,CAACE,SAApB,CAA8BC,WAA9B,GAA4C,UAAUC,iBAAV,EAA6B;IACrE,KAAKH,kBAAL,CAAwBI,IAAxB,CAA6BD,iBAA7B;EACH,CAFD;EAGA;AACJ;AACA;;;EACIJ,mBAAmB,CAACE,SAApB,CAA8BI,MAA9B,GAAuC,UAAUC,KAAV,EAAiB;IACpD,IAAIC,KAAK,GAAG,IAAZ;;IACA,IAAID,KAAK,KAAKR,cAAc,CAACU,eAA7B,EAA8C;MAC1C;MACA,IAAI,KAAKC,qBAAL,KAA+BC,SAA/B,IACA,KAAKC,mBAAL,KAA6BD,SADjC,EAC4C;QACxC,KAAKD,qBAAL,GAA6BG,UAAU,CAAC,YAAY;UAChD;UACAL,KAAK,CAACM,iBAAN,GAFgD,CAGhD;;;UACAN,KAAK,CAACI,mBAAN,GAA4BG,WAAW,CAAC,YAAY;YAChDP,KAAK,CAACM,iBAAN;UACH,CAFsC,EAEpChB,kBAFoC,CAAvC;QAGH,CAPsC,EAOpCD,eAPoC,CAAvC;MAQH;IACJ;;IACD,IAAIU,KAAK,KAAKR,cAAc,CAACiB,cAA7B,EAA6C;MACzC,IAAI,KAAKJ,mBAAT,EAA8B;QAC1BK,aAAa,CAAC,KAAKL,mBAAN,CAAb;QACA,KAAKA,mBAAL,GAA2BD,SAA3B;MACH;;MACD,IAAI,KAAKD,qBAAT,EAAgC;QAC5BQ,YAAY,CAAC,KAAKR,qBAAN,CAAZ;QACA,KAAKA,qBAAL,GAA6BC,SAA7B;MACH;IACJ;EACJ,CA1BD;EA2BA;AACJ;AACA;;;EACIX,mBAAmB,CAACE,SAApB,CAA8BiB,KAA9B,GAAsC,YAAY;IAC9C,KAAKlB,kBAAL,CAAwBmB,OAAxB,CAAgC,UAAUhB,iBAAV,EAA6B;MACzD,IAAIiB,EAAJ;;MACA,CAACA,EAAE,GAAGjB,iBAAiB,CAACkB,QAAxB,MAAsC,IAAtC,IAA8CD,EAAE,KAAK,KAAK,CAA1D,GAA8D,KAAK,CAAnE,GAAuEA,EAAE,CAACE,IAAH,CAAQnB,iBAAR,CAAvE;IACH,CAHD;EAIH,CALD;;EAMAJ,mBAAmB,CAACE,SAApB,CAA8BY,iBAA9B,GAAkD,YAAY;IAC1D,KAAKb,kBAAL,CAAwBmB,OAAxB,CAAgC,UAAUhB,iBAAV,EAA6B;MACzD,IAAIiB,EAAJ;;MACA,CAACA,EAAE,GAAGjB,iBAAiB,CAACoB,IAAxB,MAAkC,IAAlC,IAA0CH,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACE,IAAH,CAAQnB,iBAAR,CAAnE;IACH,CAHD;EAIH,CALD;;EAMA,OAAOJ,mBAAP;AACH,CAxDwC,EAAzC;;AAyDA,SAASA,mBAAT"},"metadata":{},"sourceType":"module"}