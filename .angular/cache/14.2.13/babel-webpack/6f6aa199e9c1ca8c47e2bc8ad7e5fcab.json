{"ast":null,"code":"import { useMemo } from 'react';\nimport useAuthenticator from '../useAuthenticator/useAuthenticator.mjs';\nimport { getRouteMachineSelector, resolveDefault, resolveVerifyUserRoute, resolveSignUpRoute, resolveSignInRoute, resolveSetupTOTPRoute, resolveResetPasswordRoute, resolveForceNewPasswordRoute, resolveConfirmVerifyUserRoute, resolveConfirmSignUpRoute, resolveConfirmSignInRoute, resolveConfirmResetPasswordRoute, routeSelector } from './utils.mjs';\n\nfunction useAuthenticatorRoute({\n  components\n}) {\n  const {\n    route\n  } = useAuthenticator(routeSelector);\n  const routeMachineSelector = useMemo(() => getRouteMachineSelector(route), [route]); // `useAuthenticator` exposes both state machine (example: `toSignIn`) and non-state machine\n  // props (example: `getTotpSecretCode`). `routeSelector` specifies which state machine props\n  // should be returned for a specific route.\n  // Only state machine props specified by the current `routeSelector` will have their current value\n  // returned by `useAuthenticator`, non-machine props returned will always be the current value\n\n  const routeSelectorProps = useAuthenticator(routeMachineSelector);\n  const {\n    ConfirmResetPassword,\n    ConfirmSignIn,\n    ConfirmSignUp,\n    ConfirmVerifyUser,\n    ForceNewPassword,\n    ResetPassword,\n    SetupTOTP,\n    SignIn,\n    SignUp,\n    VerifyUser\n  } = components;\n\n  switch (route) {\n    case 'confirmResetPassword':\n      {\n        return resolveConfirmResetPasswordRoute(ConfirmResetPassword, routeSelectorProps);\n      }\n\n    case 'confirmSignIn':\n      {\n        return resolveConfirmSignInRoute(ConfirmSignIn, routeSelectorProps);\n      }\n\n    case 'confirmSignUp':\n      {\n        return resolveConfirmSignUpRoute(ConfirmSignUp, routeSelectorProps);\n      }\n\n    case 'confirmVerifyUser':\n      {\n        return resolveConfirmVerifyUserRoute(ConfirmVerifyUser, routeSelectorProps);\n      }\n\n    case 'forceNewPassword':\n      {\n        return resolveForceNewPasswordRoute(ForceNewPassword, routeSelectorProps);\n      }\n\n    case 'resetPassword':\n      {\n        return resolveResetPasswordRoute(ResetPassword, routeSelectorProps);\n      }\n\n    case 'setupTOTP':\n      {\n        return resolveSetupTOTPRoute(SetupTOTP, routeSelectorProps);\n      }\n\n    case 'signIn':\n      {\n        return resolveSignInRoute(SignIn, routeSelectorProps);\n      }\n\n    case 'signUp':\n      {\n        return resolveSignUpRoute(SignUp, routeSelectorProps);\n      }\n\n    case 'verifyUser':\n      {\n        return resolveVerifyUserRoute(VerifyUser, routeSelectorProps);\n      }\n\n    default:\n      {\n        return resolveDefault();\n      }\n  }\n}\n\nexport { useAuthenticatorRoute as default };","map":{"version":3,"names":["useMemo","useAuthenticator","getRouteMachineSelector","resolveDefault","resolveVerifyUserRoute","resolveSignUpRoute","resolveSignInRoute","resolveSetupTOTPRoute","resolveResetPasswordRoute","resolveForceNewPasswordRoute","resolveConfirmVerifyUserRoute","resolveConfirmSignUpRoute","resolveConfirmSignInRoute","resolveConfirmResetPasswordRoute","routeSelector","useAuthenticatorRoute","components","route","routeMachineSelector","routeSelectorProps","ConfirmResetPassword","ConfirmSignIn","ConfirmSignUp","ConfirmVerifyUser","ForceNewPassword","ResetPassword","SetupTOTP","SignIn","SignUp","VerifyUser","default"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/ui-react-core/dist/esm/Authenticator/hooks/useAuthenticatorRoute/useAuthenticatorRoute.mjs"],"sourcesContent":["import { useMemo } from 'react';\nimport useAuthenticator from '../useAuthenticator/useAuthenticator.mjs';\nimport { getRouteMachineSelector, resolveDefault, resolveVerifyUserRoute, resolveSignUpRoute, resolveSignInRoute, resolveSetupTOTPRoute, resolveResetPasswordRoute, resolveForceNewPasswordRoute, resolveConfirmVerifyUserRoute, resolveConfirmSignUpRoute, resolveConfirmSignInRoute, resolveConfirmResetPasswordRoute, routeSelector } from './utils.mjs';\n\nfunction useAuthenticatorRoute({ components, }) {\n    const { route } = useAuthenticator(routeSelector);\n    const routeMachineSelector = useMemo(() => getRouteMachineSelector(route), [route]);\n    // `useAuthenticator` exposes both state machine (example: `toSignIn`) and non-state machine\n    // props (example: `getTotpSecretCode`). `routeSelector` specifies which state machine props\n    // should be returned for a specific route.\n    // Only state machine props specified by the current `routeSelector` will have their current value\n    // returned by `useAuthenticator`, non-machine props returned will always be the current value\n    const routeSelectorProps = useAuthenticator(routeMachineSelector);\n    const { ConfirmResetPassword, ConfirmSignIn, ConfirmSignUp, ConfirmVerifyUser, ForceNewPassword, ResetPassword, SetupTOTP, SignIn, SignUp, VerifyUser, } = components;\n    switch (route) {\n        case 'confirmResetPassword': {\n            return resolveConfirmResetPasswordRoute(ConfirmResetPassword, routeSelectorProps);\n        }\n        case 'confirmSignIn': {\n            return resolveConfirmSignInRoute(ConfirmSignIn, routeSelectorProps);\n        }\n        case 'confirmSignUp': {\n            return resolveConfirmSignUpRoute(ConfirmSignUp, routeSelectorProps);\n        }\n        case 'confirmVerifyUser': {\n            return resolveConfirmVerifyUserRoute(ConfirmVerifyUser, routeSelectorProps);\n        }\n        case 'forceNewPassword': {\n            return resolveForceNewPasswordRoute(ForceNewPassword, routeSelectorProps);\n        }\n        case 'resetPassword': {\n            return resolveResetPasswordRoute(ResetPassword, routeSelectorProps);\n        }\n        case 'setupTOTP': {\n            return resolveSetupTOTPRoute(SetupTOTP, routeSelectorProps);\n        }\n        case 'signIn': {\n            return resolveSignInRoute(SignIn, routeSelectorProps);\n        }\n        case 'signUp': {\n            return resolveSignUpRoute(SignUp, routeSelectorProps);\n        }\n        case 'verifyUser': {\n            return resolveVerifyUserRoute(VerifyUser, routeSelectorProps);\n        }\n        default: {\n            return resolveDefault();\n        }\n    }\n}\n\nexport { useAuthenticatorRoute as default };\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,gBAAP,MAA6B,0CAA7B;AACA,SAASC,uBAAT,EAAkCC,cAAlC,EAAkDC,sBAAlD,EAA0EC,kBAA1E,EAA8FC,kBAA9F,EAAkHC,qBAAlH,EAAyIC,yBAAzI,EAAoKC,4BAApK,EAAkMC,6BAAlM,EAAiOC,yBAAjO,EAA4PC,yBAA5P,EAAuRC,gCAAvR,EAAyTC,aAAzT,QAA8U,aAA9U;;AAEA,SAASC,qBAAT,CAA+B;EAAEC;AAAF,CAA/B,EAAgD;EAC5C,MAAM;IAAEC;EAAF,IAAYhB,gBAAgB,CAACa,aAAD,CAAlC;EACA,MAAMI,oBAAoB,GAAGlB,OAAO,CAAC,MAAME,uBAAuB,CAACe,KAAD,CAA9B,EAAuC,CAACA,KAAD,CAAvC,CAApC,CAF4C,CAG5C;EACA;EACA;EACA;EACA;;EACA,MAAME,kBAAkB,GAAGlB,gBAAgB,CAACiB,oBAAD,CAA3C;EACA,MAAM;IAAEE,oBAAF;IAAwBC,aAAxB;IAAuCC,aAAvC;IAAsDC,iBAAtD;IAAyEC,gBAAzE;IAA2FC,aAA3F;IAA0GC,SAA1G;IAAqHC,MAArH;IAA6HC,MAA7H;IAAqIC;EAArI,IAAqJb,UAA3J;;EACA,QAAQC,KAAR;IACI,KAAK,sBAAL;MAA6B;QACzB,OAAOJ,gCAAgC,CAACO,oBAAD,EAAuBD,kBAAvB,CAAvC;MACH;;IACD,KAAK,eAAL;MAAsB;QAClB,OAAOP,yBAAyB,CAACS,aAAD,EAAgBF,kBAAhB,CAAhC;MACH;;IACD,KAAK,eAAL;MAAsB;QAClB,OAAOR,yBAAyB,CAACW,aAAD,EAAgBH,kBAAhB,CAAhC;MACH;;IACD,KAAK,mBAAL;MAA0B;QACtB,OAAOT,6BAA6B,CAACa,iBAAD,EAAoBJ,kBAApB,CAApC;MACH;;IACD,KAAK,kBAAL;MAAyB;QACrB,OAAOV,4BAA4B,CAACe,gBAAD,EAAmBL,kBAAnB,CAAnC;MACH;;IACD,KAAK,eAAL;MAAsB;QAClB,OAAOX,yBAAyB,CAACiB,aAAD,EAAgBN,kBAAhB,CAAhC;MACH;;IACD,KAAK,WAAL;MAAkB;QACd,OAAOZ,qBAAqB,CAACmB,SAAD,EAAYP,kBAAZ,CAA5B;MACH;;IACD,KAAK,QAAL;MAAe;QACX,OAAOb,kBAAkB,CAACqB,MAAD,EAASR,kBAAT,CAAzB;MACH;;IACD,KAAK,QAAL;MAAe;QACX,OAAOd,kBAAkB,CAACuB,MAAD,EAAST,kBAAT,CAAzB;MACH;;IACD,KAAK,YAAL;MAAmB;QACf,OAAOf,sBAAsB,CAACyB,UAAD,EAAaV,kBAAb,CAA7B;MACH;;IACD;MAAS;QACL,OAAOhB,cAAc,EAArB;MACH;EAjCL;AAmCH;;AAED,SAASY,qBAAqB,IAAIe,OAAlC"},"metadata":{},"sourceType":"module"}