{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nexport const getEndpointFromRegion = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (input) {\n    const {\n      tls = true\n    } = input;\n    const region = yield input.region();\n    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n\n    if (!dnsHostRegex.test(region)) {\n      throw new Error(\"Invalid region in client config\");\n    }\n\n    const useDualstackEndpoint = yield input.useDualstackEndpoint();\n    const useFipsEndpoint = yield input.useFipsEndpoint();\n    const {\n      hostname\n    } = (yield input.regionInfoProvider(region, {\n      useDualstackEndpoint,\n      useFipsEndpoint\n    })) ?? {};\n\n    if (!hostname) {\n      throw new Error(\"Cannot resolve hostname from client config\");\n    }\n\n    return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n  });\n\n  return function getEndpointFromRegion(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["getEndpointFromRegion","input","tls","region","dnsHostRegex","RegExp","test","Error","useDualstackEndpoint","useFipsEndpoint","hostname","regionInfoProvider","urlParser"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/config-resolver/dist-es/endpointsConfig/utils/getEndpointFromRegion.js"],"sourcesContent":["export const getEndpointFromRegion = async (input) => {\n    const { tls = true } = input;\n    const region = await input.region();\n    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);\n    if (!dnsHostRegex.test(region)) {\n        throw new Error(\"Invalid region in client config\");\n    }\n    const useDualstackEndpoint = await input.useDualstackEndpoint();\n    const useFipsEndpoint = await input.useFipsEndpoint();\n    const { hostname } = (await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) ?? {};\n    if (!hostname) {\n        throw new Error(\"Cannot resolve hostname from client config\");\n    }\n    return input.urlParser(`${tls ? \"https:\" : \"http:\"}//${hostname}`);\n};\n"],"mappings":";AAAA,OAAO,MAAMA,qBAAqB;EAAA,6BAAG,WAAOC,KAAP,EAAiB;IAClD,MAAM;MAAEC,GAAG,GAAG;IAAR,IAAiBD,KAAvB;IACA,MAAME,MAAM,SAASF,KAAK,CAACE,MAAN,EAArB;IACA,MAAMC,YAAY,GAAG,IAAIC,MAAJ,CAAW,0DAAX,CAArB;;IACA,IAAI,CAACD,YAAY,CAACE,IAAb,CAAkBH,MAAlB,CAAL,EAAgC;MAC5B,MAAM,IAAII,KAAJ,CAAU,iCAAV,CAAN;IACH;;IACD,MAAMC,oBAAoB,SAASP,KAAK,CAACO,oBAAN,EAAnC;IACA,MAAMC,eAAe,SAASR,KAAK,CAACQ,eAAN,EAA9B;IACA,MAAM;MAAEC;IAAF,IAAe,OAAOT,KAAK,CAACU,kBAAN,CAAyBR,MAAzB,EAAiC;MAAEK,oBAAF;MAAwBC;IAAxB,CAAjC,CAAP,KAAuF,EAA5G;;IACA,IAAI,CAACC,QAAL,EAAe;MACX,MAAM,IAAIH,KAAJ,CAAU,4CAAV,CAAN;IACH;;IACD,OAAON,KAAK,CAACW,SAAN,CAAiB,GAAEV,GAAG,GAAG,QAAH,GAAc,OAAQ,KAAIQ,QAAS,EAAzD,CAAP;EACH,CAdiC;;EAAA,gBAArBV,qBAAqB;IAAA;EAAA;AAAA,GAA3B"},"metadata":{},"sourceType":"module"}