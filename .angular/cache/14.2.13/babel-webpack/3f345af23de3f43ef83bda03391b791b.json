{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getEndpointFromInstructions } from \"./adaptors/getEndpointFromInstructions\";\nexport const endpointMiddleware = ({\n  config,\n  instructions\n}) => {\n  return (next, context) => /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (args) {\n      const endpoint = yield getEndpointFromInstructions(args.input, {\n        getEndpointParameterInstructions() {\n          return instructions;\n        }\n\n      }, { ...config\n      }, context);\n      context.endpointV2 = endpoint;\n      context.authSchemes = endpoint.properties?.authSchemes;\n      const authScheme = context.authSchemes?.[0];\n\n      if (authScheme) {\n        context[\"signing_region\"] = authScheme.signingRegion;\n        context[\"signing_service\"] = authScheme.signingName;\n      }\n\n      return next({ ...args\n      });\n    });\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"names":["getEndpointFromInstructions","endpointMiddleware","config","instructions","next","context","args","endpoint","input","getEndpointParameterInstructions","endpointV2","authSchemes","properties","authScheme","signingRegion","signingName"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/middleware-endpoint/dist-es/endpointMiddleware.js"],"sourcesContent":["import { getEndpointFromInstructions } from \"./adaptors/getEndpointFromInstructions\";\nexport const endpointMiddleware = ({ config, instructions, }) => {\n    return (next, context) => async (args) => {\n        const endpoint = await getEndpointFromInstructions(args.input, {\n            getEndpointParameterInstructions() {\n                return instructions;\n            },\n        }, { ...config }, context);\n        context.endpointV2 = endpoint;\n        context.authSchemes = endpoint.properties?.authSchemes;\n        const authScheme = context.authSchemes?.[0];\n        if (authScheme) {\n            context[\"signing_region\"] = authScheme.signingRegion;\n            context[\"signing_service\"] = authScheme.signingName;\n        }\n        return next({\n            ...args,\n        });\n    };\n};\n"],"mappings":";AAAA,SAASA,2BAAT,QAA4C,wCAA5C;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAAC;EAAEC,MAAF;EAAUC;AAAV,CAAD,KAA+B;EAC7D,OAAO,CAACC,IAAD,EAAOC,OAAP;IAAA,6BAAmB,WAAOC,IAAP,EAAgB;MACtC,MAAMC,QAAQ,SAASP,2BAA2B,CAACM,IAAI,CAACE,KAAN,EAAa;QAC3DC,gCAAgC,GAAG;UAC/B,OAAON,YAAP;QACH;;MAH0D,CAAb,EAI/C,EAAE,GAAGD;MAAL,CAJ+C,EAIhCG,OAJgC,CAAlD;MAKAA,OAAO,CAACK,UAAR,GAAqBH,QAArB;MACAF,OAAO,CAACM,WAAR,GAAsBJ,QAAQ,CAACK,UAAT,EAAqBD,WAA3C;MACA,MAAME,UAAU,GAAGR,OAAO,CAACM,WAAR,GAAsB,CAAtB,CAAnB;;MACA,IAAIE,UAAJ,EAAgB;QACZR,OAAO,CAAC,gBAAD,CAAP,GAA4BQ,UAAU,CAACC,aAAvC;QACAT,OAAO,CAAC,iBAAD,CAAP,GAA6BQ,UAAU,CAACE,WAAxC;MACH;;MACD,OAAOX,IAAI,CAAC,EACR,GAAGE;MADK,CAAD,CAAX;IAGH,CAhBM;;IAAA;MAAA;IAAA;EAAA,GAAP;AAiBH,CAlBM"},"metadata":{},"sourceType":"module"}