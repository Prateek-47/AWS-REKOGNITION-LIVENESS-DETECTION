{"ast":null,"code":"import { __awaiter, __generator, __read, __spread } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AnalyticsAction, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { putEvents } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\n\nvar EventsBuffer =\n/** @class */\nfunction () {\n  function EventsBuffer(config) {\n    this._pause = false;\n    this._flush = false;\n    logger.debug('Instantiating buffer with config:', config);\n    this._buffer = [];\n    this._config = config;\n    this._sendBatch = this._sendBatch.bind(this);\n\n    this._startLoop();\n  }\n\n  EventsBuffer.prototype.push = function (event) {\n    var _a; // if the buffer is currently at the configured limit, pushing would exceed it\n\n\n    if (this._buffer.length >= this._config.bufferSize) {\n      logger.debug('Exceeded analytics events buffer size');\n      return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n    }\n\n    var eventId = event.params.event.eventId;\n    var bufferElement = (_a = {}, _a[eventId] = event, _a);\n\n    this._buffer.push(bufferElement);\n  };\n\n  EventsBuffer.prototype.pause = function () {\n    this._pause = true;\n  };\n\n  EventsBuffer.prototype.resume = function () {\n    this._pause = false;\n  };\n\n  EventsBuffer.prototype.flush = function () {\n    this._flush = true;\n  };\n\n  EventsBuffer.prototype._startLoop = function () {\n    if (this._interval) {\n      clearInterval(this._interval);\n    }\n\n    var flushInterval = this._config.flushInterval;\n    this._interval = setInterval(this._sendBatch, flushInterval);\n  };\n\n  EventsBuffer.prototype._sendBatch = function () {\n    var bufferLength = this._buffer.length;\n\n    if (this._flush && !bufferLength) {\n      clearInterval(this._interval);\n    } // Do not send the batch of events if\n    // the Buffer is paused or is empty or the App is not in the foreground\n    // Apps should be in the foreground since\n    // the OS may restrict access to the network in the background\n\n\n    if (this._pause || !bufferLength || !isAppInForeground()) {\n      return;\n    }\n\n    var flushSize = this._config.flushSize;\n    var batchSize = Math.min(flushSize, bufferLength);\n\n    var bufferSubset = this._buffer.splice(0, batchSize);\n\n    this._putEvents(bufferSubset);\n  };\n\n  EventsBuffer.prototype._putEvents = function (buffer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventMap, batchEventParams, _a, credentials, region, data, err_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            eventMap = this._bufferToMap(buffer);\n            batchEventParams = this._generateBatchEventParams(eventMap);\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            _a = this._config, credentials = _a.credentials, region = _a.region;\n            return [4\n            /*yield*/\n            , putEvents({\n              credentials: credentials,\n              region: region,\n              userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record)\n            }, batchEventParams)];\n\n          case 2:\n            data = _b.sent();\n\n            this._processPutEventsSuccessResponse(data, eventMap);\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            err_1 = _b.sent();\n            return [2\n            /*return*/\n            , this._handlePutEventsFailure(err_1, eventMap)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n    var batchEventParams = {\n      ApplicationId: '',\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    Object.values(eventMap).forEach(function (item) {\n      var params = item.params;\n      var event = params.event,\n          timestamp = params.timestamp,\n          config = params.config;\n      var name = event.name,\n          attributes = event.attributes,\n          metrics = event.metrics,\n          eventId = event.eventId,\n          session = event.session;\n      var appId = config.appId,\n          endpointId = config.endpointId;\n      var batchItem = batchEventParams.EventsRequest.BatchItem;\n      batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n\n      if (!batchItem[endpointId]) {\n        batchItem[endpointId] = {\n          Endpoint: {},\n          Events: {}\n        };\n      }\n\n      batchItem[endpointId].Events[eventId] = {\n        EventType: name,\n        Timestamp: new Date(timestamp).toISOString(),\n        Attributes: attributes,\n        Metrics: metrics,\n        Session: session\n      };\n    });\n    return batchEventParams;\n  };\n\n  EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n    logger.debug('_putEvents Failed: ', err);\n    var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n\n    if (RETRYABLE_CODES.includes(statusCode)) {\n      var retryableEvents = Object.values(eventMap);\n\n      this._retry(retryableEvents);\n\n      return;\n    }\n  };\n\n  EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n    var _a;\n\n    var _b = ((_a = data.EventsResponse) !== null && _a !== void 0 ? _a : {}).Results,\n        Results = _b === void 0 ? {} : _b;\n    var retryableEvents = [];\n    Object.entries(Results).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          endpointId = _b[0],\n          endpointValues = _b[1];\n\n      var _c;\n\n      var responses = (_c = endpointValues.EventsItemResponse) !== null && _c !== void 0 ? _c : {};\n      Object.entries(responses).forEach(function (_a) {\n        var _b, _c;\n\n        var _d = __read(_a, 2),\n            eventId = _d[0],\n            eventValues = _d[1];\n\n        var eventObject = eventMap[eventId];\n\n        if (!eventObject) {\n          return;\n        }\n\n        var _e = eventValues !== null && eventValues !== void 0 ? eventValues : {},\n            StatusCode = _e.StatusCode,\n            Message = _e.Message; // manually crafting handlers response to keep API consistant\n\n\n        var response = {\n          EventsResponse: {\n            Results: (_b = {}, _b[endpointId] = {\n              EventsItemResponse: (_c = {}, _c[eventId] = {\n                StatusCode: StatusCode,\n                Message: Message\n              }, _c)\n            }, _b)\n          }\n        };\n\n        if (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n          eventObject.handlers.resolve(response);\n          return;\n        }\n\n        if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n          retryableEvents.push(eventObject);\n          return;\n        }\n\n        var name = eventObject.params.event.name;\n        logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n        return eventObject.handlers.reject(response);\n      });\n    });\n\n    if (retryableEvents.length) {\n      this._retry(retryableEvents);\n    }\n  };\n\n  EventsBuffer.prototype._retry = function (retryableEvents) {\n    var _a; // retryable events that haven't reached the resendLimit\n\n\n    var eligibleEvents = [];\n    retryableEvents.forEach(function (event) {\n      var _a;\n\n      var params = event.params;\n      var _b = params.event,\n          eventId = _b.eventId,\n          name = _b.name;\n\n      if (params.resendLimit-- > 0) {\n        logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n        eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n        return;\n      }\n\n      logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n    }); // add the events to the front of the buffer\n\n    (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n  }; // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n  // this allows us to easily access the handlers after receiving a batch response\n\n\n  EventsBuffer.prototype._bufferToMap = function (buffer) {\n    return buffer.reduce(function (acc, curVal) {\n      var _a = __read(Object.entries(curVal), 1),\n          _b = __read(_a[0], 2),\n          key = _b[0],\n          value = _b[1];\n\n      acc[key] = value;\n      return acc;\n    }, {});\n  };\n\n  return EventsBuffer;\n}();\n\nexport default EventsBuffer;","map":{"version":3,"names":["__awaiter","__generator","__read","__spread","AnalyticsAction","ConsoleLogger","Logger","putEvents","isAppInForeground","getAnalyticsUserAgentString","logger","RETRYABLE_CODES","ACCEPTED_CODES","EventsBuffer","config","_pause","_flush","debug","_buffer","_config","_sendBatch","bind","_startLoop","prototype","push","event","_a","length","bufferSize","handlers","reject","Error","eventId","params","bufferElement","pause","resume","flush","_interval","clearInterval","flushInterval","setInterval","bufferLength","flushSize","batchSize","Math","min","bufferSubset","splice","_putEvents","buffer","eventMap","batchEventParams","credentials","region","data","err_1","_b","label","_bufferToMap","_generateBatchEventParams","trys","userAgentValue","Record","sent","_processPutEventsSuccessResponse","_handlePutEventsFailure","ApplicationId","EventsRequest","BatchItem","Object","values","forEach","item","timestamp","name","attributes","metrics","session","appId","endpointId","batchItem","Endpoint","Events","EventType","Timestamp","Date","toISOString","Attributes","Metrics","Session","err","statusCode","$metadata","httpStatusCode","includes","retryableEvents","_retry","EventsResponse","Results","entries","endpointValues","_c","responses","EventsItemResponse","_d","eventValues","eventObject","_e","StatusCode","Message","response","resolve","error","eligibleEvents","resendLimit","unshift","apply","reduce","acc","curVal","key","value"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/analytics/lib-esm/Providers/EventBuffer.js"],"sourcesContent":["import { __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AnalyticsAction, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { putEvents, } from '@aws-amplify/core/internals/aws-clients/pinpoint';\nimport { isAppInForeground } from '../utils/AppUtils';\nimport { getAnalyticsUserAgentString } from '../utils/UserAgent';\nvar logger = new Logger('EventsBuffer');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar EventsBuffer = /** @class */ (function () {\n    function EventsBuffer(config) {\n        this._pause = false;\n        this._flush = false;\n        logger.debug('Instantiating buffer with config:', config);\n        this._buffer = [];\n        this._config = config;\n        this._sendBatch = this._sendBatch.bind(this);\n        this._startLoop();\n    }\n    EventsBuffer.prototype.push = function (event) {\n        var _a;\n        // if the buffer is currently at the configured limit, pushing would exceed it\n        if (this._buffer.length >= this._config.bufferSize) {\n            logger.debug('Exceeded analytics events buffer size');\n            return event.handlers.reject(new Error('Exceeded the size of analytics events buffer'));\n        }\n        var eventId = event.params.event.eventId;\n        var bufferElement = (_a = {}, _a[eventId] = event, _a);\n        this._buffer.push(bufferElement);\n    };\n    EventsBuffer.prototype.pause = function () {\n        this._pause = true;\n    };\n    EventsBuffer.prototype.resume = function () {\n        this._pause = false;\n    };\n    EventsBuffer.prototype.flush = function () {\n        this._flush = true;\n    };\n    EventsBuffer.prototype._startLoop = function () {\n        if (this._interval) {\n            clearInterval(this._interval);\n        }\n        var flushInterval = this._config.flushInterval;\n        this._interval = setInterval(this._sendBatch, flushInterval);\n    };\n    EventsBuffer.prototype._sendBatch = function () {\n        var bufferLength = this._buffer.length;\n        if (this._flush && !bufferLength) {\n            clearInterval(this._interval);\n        }\n        // Do not send the batch of events if\n        // the Buffer is paused or is empty or the App is not in the foreground\n        // Apps should be in the foreground since\n        // the OS may restrict access to the network in the background\n        if (this._pause || !bufferLength || !isAppInForeground()) {\n            return;\n        }\n        var flushSize = this._config.flushSize;\n        var batchSize = Math.min(flushSize, bufferLength);\n        var bufferSubset = this._buffer.splice(0, batchSize);\n        this._putEvents(bufferSubset);\n    };\n    EventsBuffer.prototype._putEvents = function (buffer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var eventMap, batchEventParams, _a, credentials, region, data, err_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        eventMap = this._bufferToMap(buffer);\n                        batchEventParams = this._generateBatchEventParams(eventMap);\n                        _b.label = 1;\n                    case 1:\n                        _b.trys.push([1, 3, , 4]);\n                        _a = this._config, credentials = _a.credentials, region = _a.region;\n                        return [4 /*yield*/, putEvents({\n                                credentials: credentials,\n                                region: region,\n                                userAgentValue: getAnalyticsUserAgentString(AnalyticsAction.Record),\n                            }, batchEventParams)];\n                    case 2:\n                        data = _b.sent();\n                        this._processPutEventsSuccessResponse(data, eventMap);\n                        return [3 /*break*/, 4];\n                    case 3:\n                        err_1 = _b.sent();\n                        return [2 /*return*/, this._handlePutEventsFailure(err_1, eventMap)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    EventsBuffer.prototype._generateBatchEventParams = function (eventMap) {\n        var batchEventParams = {\n            ApplicationId: '',\n            EventsRequest: {\n                BatchItem: {},\n            },\n        };\n        Object.values(eventMap).forEach(function (item) {\n            var params = item.params;\n            var event = params.event, timestamp = params.timestamp, config = params.config;\n            var name = event.name, attributes = event.attributes, metrics = event.metrics, eventId = event.eventId, session = event.session;\n            var appId = config.appId, endpointId = config.endpointId;\n            var batchItem = batchEventParams.EventsRequest.BatchItem;\n            batchEventParams.ApplicationId = batchEventParams.ApplicationId || appId;\n            if (!batchItem[endpointId]) {\n                batchItem[endpointId] = {\n                    Endpoint: {},\n                    Events: {},\n                };\n            }\n            batchItem[endpointId].Events[eventId] = {\n                EventType: name,\n                Timestamp: new Date(timestamp).toISOString(),\n                Attributes: attributes,\n                Metrics: metrics,\n                Session: session,\n            };\n        });\n        return batchEventParams;\n    };\n    EventsBuffer.prototype._handlePutEventsFailure = function (err, eventMap) {\n        logger.debug('_putEvents Failed: ', err);\n        var statusCode = err.$metadata && err.$metadata.httpStatusCode;\n        if (RETRYABLE_CODES.includes(statusCode)) {\n            var retryableEvents = Object.values(eventMap);\n            this._retry(retryableEvents);\n            return;\n        }\n    };\n    EventsBuffer.prototype._processPutEventsSuccessResponse = function (data, eventMap) {\n        var _a;\n        var _b = ((_a = data.EventsResponse) !== null && _a !== void 0 ? _a : {}).Results, Results = _b === void 0 ? {} : _b;\n        var retryableEvents = [];\n        Object.entries(Results).forEach(function (_a) {\n            var _b = __read(_a, 2), endpointId = _b[0], endpointValues = _b[1];\n            var _c;\n            var responses = (_c = endpointValues.EventsItemResponse) !== null && _c !== void 0 ? _c : {};\n            Object.entries(responses).forEach(function (_a) {\n                var _b, _c;\n                var _d = __read(_a, 2), eventId = _d[0], eventValues = _d[1];\n                var eventObject = eventMap[eventId];\n                if (!eventObject) {\n                    return;\n                }\n                var _e = eventValues !== null && eventValues !== void 0 ? eventValues : {}, StatusCode = _e.StatusCode, Message = _e.Message;\n                // manually crafting handlers response to keep API consistant\n                var response = {\n                    EventsResponse: {\n                        Results: (_b = {},\n                            _b[endpointId] = {\n                                EventsItemResponse: (_c = {},\n                                    _c[eventId] = { StatusCode: StatusCode, Message: Message },\n                                    _c),\n                            },\n                            _b),\n                    },\n                };\n                if (StatusCode && ACCEPTED_CODES.includes(StatusCode)) {\n                    eventObject.handlers.resolve(response);\n                    return;\n                }\n                if (StatusCode && RETRYABLE_CODES.includes(StatusCode)) {\n                    retryableEvents.push(eventObject);\n                    return;\n                }\n                var name = eventObject.params.event.name;\n                logger.error(\"event \" + eventId + \" : \" + name + \" failed with error: \" + Message);\n                return eventObject.handlers.reject(response);\n            });\n        });\n        if (retryableEvents.length) {\n            this._retry(retryableEvents);\n        }\n    };\n    EventsBuffer.prototype._retry = function (retryableEvents) {\n        var _a;\n        // retryable events that haven't reached the resendLimit\n        var eligibleEvents = [];\n        retryableEvents.forEach(function (event) {\n            var _a;\n            var params = event.params;\n            var _b = params.event, eventId = _b.eventId, name = _b.name;\n            if (params.resendLimit-- > 0) {\n                logger.debug(\"resending event \" + eventId + \" : \" + name + \" with \" + params.resendLimit + \" retry attempts remaining\");\n                eligibleEvents.push((_a = {}, _a[eventId] = event, _a));\n                return;\n            }\n            logger.debug(\"no retry attempts remaining for event \" + eventId + \" : \" + name);\n        });\n        // add the events to the front of the buffer\n        (_a = this._buffer).unshift.apply(_a, __spread(eligibleEvents));\n    };\n    // convert buffer to map, i.e. { eventId1: { params, handler }, eventId2: { params, handlers } }\n    // this allows us to easily access the handlers after receiving a batch response\n    EventsBuffer.prototype._bufferToMap = function (buffer) {\n        return buffer.reduce(function (acc, curVal) {\n            var _a = __read(Object.entries(curVal), 1), _b = __read(_a[0], 2), key = _b[0], value = _b[1];\n            acc[key] = value;\n            return acc;\n        }, {});\n    };\n    return EventsBuffer;\n}());\nexport default EventsBuffer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}