{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport { v4 } from \"uuid\";\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, INVOCATION_ID_HEADER, REQUEST_HEADER, THROTTLING_RETRY_DELAY_BASE } from \"./constants\";\nimport { getDefaultRetryQuota } from \"./defaultRetryQuota\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\n/**\n * The default value for how many HTTP requests an SDK should make for a\n * single SDK operation invocation before giving up\n */\n\nexport var DEFAULT_MAX_ATTEMPTS = 3;\n/**\n * The default retry algorithm to use.\n */\n\nexport var DEFAULT_RETRY_MODE = \"standard\";\n\nvar StandardRetryStrategy =\n/** @class */\nfunction () {\n  function StandardRetryStrategy(maxAttemptsProvider, options) {\n    var _a, _b, _c;\n\n    this.maxAttemptsProvider = maxAttemptsProvider;\n    this.mode = DEFAULT_RETRY_MODE;\n    this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;\n    this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;\n    this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);\n  }\n\n  StandardRetryStrategy.prototype.shouldRetry = function (error, attempts, maxAttempts) {\n    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n  };\n\n  StandardRetryStrategy.prototype.getMaxAttempts = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var maxAttempts, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.maxAttemptsProvider()];\n\n          case 1:\n            maxAttempts = _a.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            error_1 = _a.sent();\n            maxAttempts = DEFAULT_MAX_ATTEMPTS;\n            return [3\n            /*break*/\n            , 3];\n\n          case 3:\n            return [2\n            /*return*/\n            , maxAttempts];\n        }\n      });\n    });\n  };\n\n  StandardRetryStrategy.prototype.retry = function (next, args) {\n    return __awaiter(this, void 0, void 0, function () {\n      var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            attempts = 0;\n            totalDelay = 0;\n            return [4\n            /*yield*/\n            , this.getMaxAttempts()];\n\n          case 1:\n            maxAttempts = _a.sent();\n            request = args.request;\n\n            if (HttpRequest.isInstance(request)) {\n              request.headers[INVOCATION_ID_HEADER] = v4();\n            }\n\n            _loop_1 = function () {\n              var _a, response, output, err_1, delay_1;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    _b.trys.push([0, 2,, 5]);\n\n                    if (HttpRequest.isInstance(request)) {\n                      request.headers[REQUEST_HEADER] = \"attempt=\" + (attempts + 1) + \"; max=\" + maxAttempts;\n                    }\n\n                    return [4\n                    /*yield*/\n                    , next(args)];\n\n                  case 1:\n                    _a = _b.sent(), response = _a.response, output = _a.output;\n                    this_1.retryQuota.releaseRetryTokens(retryTokenAmount);\n                    output.$metadata.attempts = attempts + 1;\n                    output.$metadata.totalRetryDelay = totalDelay;\n                    return [2\n                    /*return*/\n                    , {\n                      value: {\n                        response: response,\n                        output: output\n                      }\n                    }];\n\n                  case 2:\n                    err_1 = _b.sent();\n                    attempts++;\n                    if (!this_1.shouldRetry(err_1, attempts, maxAttempts)) return [3\n                    /*break*/\n                    , 4];\n                    retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);\n                    delay_1 = this_1.delayDecider(isThrottlingError(err_1) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);\n                    totalDelay += delay_1;\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      return setTimeout(resolve, delay_1);\n                    })];\n\n                  case 3:\n                    _b.sent();\n\n                    return [2\n                    /*return*/\n                    , \"continue\"];\n\n                  case 4:\n                    if (!err_1.$metadata) {\n                      err_1.$metadata = {};\n                    }\n\n                    err_1.$metadata.attempts = attempts;\n                    err_1.$metadata.totalRetryDelay = totalDelay;\n                    throw err_1;\n\n                  case 5:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _a.label = 2;\n\n          case 2:\n            if (!true) return [3\n            /*break*/\n            , 4];\n            return [5\n            /*yield**/\n            , _loop_1()];\n\n          case 3:\n            state_1 = _a.sent();\n            if (typeof state_1 === \"object\") return [2\n            /*return*/\n            , state_1.value];\n            return [3\n            /*break*/\n            , 2];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return StandardRetryStrategy;\n}();\n\nexport { StandardRetryStrategy };","map":{"version":3,"names":["__awaiter","__generator","HttpRequest","isThrottlingError","v4","DEFAULT_RETRY_DELAY_BASE","INITIAL_RETRY_TOKENS","INVOCATION_ID_HEADER","REQUEST_HEADER","THROTTLING_RETRY_DELAY_BASE","getDefaultRetryQuota","defaultDelayDecider","defaultRetryDecider","DEFAULT_MAX_ATTEMPTS","DEFAULT_RETRY_MODE","StandardRetryStrategy","maxAttemptsProvider","options","_a","_b","_c","mode","retryDecider","delayDecider","retryQuota","prototype","shouldRetry","error","attempts","maxAttempts","hasRetryTokens","getMaxAttempts","error_1","label","trys","push","sent","retry","next","args","retryTokenAmount","totalDelay","request","_loop_1","this_1","state_1","isInstance","headers","response","output","err_1","delay_1","releaseRetryTokens","$metadata","totalRetryDelay","value","retrieveRetryTokens","Promise","resolve","setTimeout"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/client-cloudwatch-logs/node_modules/@aws-sdk/middleware-retry/dist/es/defaultStrategy.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport { v4 } from \"uuid\";\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, INVOCATION_ID_HEADER, REQUEST_HEADER, THROTTLING_RETRY_DELAY_BASE, } from \"./constants\";\nimport { getDefaultRetryQuota } from \"./defaultRetryQuota\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\n/**\n * The default value for how many HTTP requests an SDK should make for a\n * single SDK operation invocation before giving up\n */\nexport var DEFAULT_MAX_ATTEMPTS = 3;\n/**\n * The default retry algorithm to use.\n */\nexport var DEFAULT_RETRY_MODE = \"standard\";\nvar StandardRetryStrategy = /** @class */ (function () {\n    function StandardRetryStrategy(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.mode = DEFAULT_RETRY_MODE;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : getDefaultRetryQuota(INITIAL_RETRY_TOKENS);\n    }\n    StandardRetryStrategy.prototype.shouldRetry = function (error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n    StandardRetryStrategy.prototype.getMaxAttempts = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var maxAttempts, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.maxAttemptsProvider()];\n                    case 1:\n                        maxAttempts = _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_1 = _a.sent();\n                        maxAttempts = DEFAULT_MAX_ATTEMPTS;\n                        return [3 /*break*/, 3];\n                    case 3: return [2 /*return*/, maxAttempts];\n                }\n            });\n        });\n    };\n    StandardRetryStrategy.prototype.retry = function (next, args) {\n        return __awaiter(this, void 0, void 0, function () {\n            var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        attempts = 0;\n                        totalDelay = 0;\n                        return [4 /*yield*/, this.getMaxAttempts()];\n                    case 1:\n                        maxAttempts = _a.sent();\n                        request = args.request;\n                        if (HttpRequest.isInstance(request)) {\n                            request.headers[INVOCATION_ID_HEADER] = v4();\n                        }\n                        _loop_1 = function () {\n                            var _a, response, output, err_1, delay_1;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        _b.trys.push([0, 2, , 5]);\n                                        if (HttpRequest.isInstance(request)) {\n                                            request.headers[REQUEST_HEADER] = \"attempt=\" + (attempts + 1) + \"; max=\" + maxAttempts;\n                                        }\n                                        return [4 /*yield*/, next(args)];\n                                    case 1:\n                                        _a = _b.sent(), response = _a.response, output = _a.output;\n                                        this_1.retryQuota.releaseRetryTokens(retryTokenAmount);\n                                        output.$metadata.attempts = attempts + 1;\n                                        output.$metadata.totalRetryDelay = totalDelay;\n                                        return [2 /*return*/, { value: { response: response, output: output } }];\n                                    case 2:\n                                        err_1 = _b.sent();\n                                        attempts++;\n                                        if (!this_1.shouldRetry(err_1, attempts, maxAttempts)) return [3 /*break*/, 4];\n                                        retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);\n                                        delay_1 = this_1.delayDecider(isThrottlingError(err_1) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE, attempts);\n                                        totalDelay += delay_1;\n                                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, delay_1); })];\n                                    case 3:\n                                        _b.sent();\n                                        return [2 /*return*/, \"continue\"];\n                                    case 4:\n                                        if (!err_1.$metadata) {\n                                            err_1.$metadata = {};\n                                        }\n                                        err_1.$metadata.attempts = attempts;\n                                        err_1.$metadata.totalRetryDelay = totalDelay;\n                                        throw err_1;\n                                    case 5: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _a.label = 2;\n                    case 2:\n                        if (!true) return [3 /*break*/, 4];\n                        return [5 /*yield**/, _loop_1()];\n                    case 3:\n                        state_1 = _a.sent();\n                        if (typeof state_1 === \"object\")\n                            return [2 /*return*/, state_1.value];\n                        return [3 /*break*/, 2];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return StandardRetryStrategy;\n}());\nexport { StandardRetryStrategy };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}