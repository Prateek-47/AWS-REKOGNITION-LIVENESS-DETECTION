{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { PutGeofenceRequestFilterSensitiveLog, PutGeofenceResponseFilterSensitiveLog } from \"../models/models_0\";\nimport { deserializeAws_restJson1PutGeofenceCommand, serializeAws_restJson1PutGeofenceCommand } from \"../protocols/Aws_restJson1\";\n\nvar PutGeofenceCommand = function (_super) {\n  __extends(PutGeofenceCommand, _super);\n\n  function PutGeofenceCommand(input) {\n    var _this = _super.call(this) || this;\n\n    _this.input = input;\n    return _this;\n  }\n\n  PutGeofenceCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n    this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n    var stack = clientStack.concat(this.middlewareStack);\n    var logger = configuration.logger;\n    var clientName = \"LocationClient\";\n    var commandName = \"PutGeofenceCommand\";\n    var handlerExecutionContext = {\n      logger: logger,\n      clientName: clientName,\n      commandName: commandName,\n      inputFilterSensitiveLog: PutGeofenceRequestFilterSensitiveLog,\n      outputFilterSensitiveLog: PutGeofenceResponseFilterSensitiveLog\n    };\n    var requestHandler = configuration.requestHandler;\n    return stack.resolve(function (request) {\n      return requestHandler.handle(request.request, options || {});\n    }, handlerExecutionContext);\n  };\n\n  PutGeofenceCommand.prototype.serialize = function (input, context) {\n    return serializeAws_restJson1PutGeofenceCommand(input, context);\n  };\n\n  PutGeofenceCommand.prototype.deserialize = function (output, context) {\n    return deserializeAws_restJson1PutGeofenceCommand(output, context);\n  };\n\n  return PutGeofenceCommand;\n}($Command);\n\nexport { PutGeofenceCommand };","map":{"version":3,"names":["__extends","getSerdePlugin","Command","$Command","PutGeofenceRequestFilterSensitiveLog","PutGeofenceResponseFilterSensitiveLog","deserializeAws_restJson1PutGeofenceCommand","serializeAws_restJson1PutGeofenceCommand","PutGeofenceCommand","_super","input","_this","call","prototype","resolveMiddleware","clientStack","configuration","options","middlewareStack","use","serialize","deserialize","stack","concat","logger","clientName","commandName","handlerExecutionContext","inputFilterSensitiveLog","outputFilterSensitiveLog","requestHandler","resolve","request","handle","context","output"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/client-location/dist-es/commands/PutGeofenceCommand.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nimport { PutGeofenceRequestFilterSensitiveLog, PutGeofenceResponseFilterSensitiveLog, } from \"../models/models_0\";\nimport { deserializeAws_restJson1PutGeofenceCommand, serializeAws_restJson1PutGeofenceCommand, } from \"../protocols/Aws_restJson1\";\nvar PutGeofenceCommand = (function (_super) {\n    __extends(PutGeofenceCommand, _super);\n    function PutGeofenceCommand(input) {\n        var _this = _super.call(this) || this;\n        _this.input = input;\n        return _this;\n    }\n    PutGeofenceCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"LocationClient\";\n        var commandName = \"PutGeofenceCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: PutGeofenceRequestFilterSensitiveLog,\n            outputFilterSensitiveLog: PutGeofenceResponseFilterSensitiveLog,\n        };\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    PutGeofenceCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restJson1PutGeofenceCommand(input, context);\n    };\n    PutGeofenceCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restJson1PutGeofenceCommand(output, context);\n    };\n    return PutGeofenceCommand;\n}($Command));\nexport { PutGeofenceCommand };\n"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,wBAApC;AACA,SAASC,oCAAT,EAA+CC,qCAA/C,QAA6F,oBAA7F;AACA,SAASC,0CAAT,EAAqDC,wCAArD,QAAsG,4BAAtG;;AACA,IAAIC,kBAAkB,GAAI,UAAUC,MAAV,EAAkB;EACxCT,SAAS,CAACQ,kBAAD,EAAqBC,MAArB,CAAT;;EACA,SAASD,kBAAT,CAA4BE,KAA5B,EAAmC;IAC/B,IAAIC,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,IAAZ,KAAqB,IAAjC;;IACAD,KAAK,CAACD,KAAN,GAAcA,KAAd;IACA,OAAOC,KAAP;EACH;;EACDH,kBAAkB,CAACK,SAAnB,CAA6BC,iBAA7B,GAAiD,UAAUC,WAAV,EAAuBC,aAAvB,EAAsCC,OAAtC,EAA+C;IAC5F,KAAKC,eAAL,CAAqBC,GAArB,CAAyBlB,cAAc,CAACe,aAAD,EAAgB,KAAKI,SAArB,EAAgC,KAAKC,WAArC,CAAvC;IACA,IAAIC,KAAK,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,KAAKL,eAAxB,CAAZ;IACA,IAAIM,MAAM,GAAGR,aAAa,CAACQ,MAA3B;IACA,IAAIC,UAAU,GAAG,gBAAjB;IACA,IAAIC,WAAW,GAAG,oBAAlB;IACA,IAAIC,uBAAuB,GAAG;MAC1BH,MAAM,EAAEA,MADkB;MAE1BC,UAAU,EAAEA,UAFc;MAG1BC,WAAW,EAAEA,WAHa;MAI1BE,uBAAuB,EAAExB,oCAJC;MAK1ByB,wBAAwB,EAAExB;IALA,CAA9B;IAOA,IAAIyB,cAAc,GAAGd,aAAa,CAACc,cAAnC;IACA,OAAOR,KAAK,CAACS,OAAN,CAAc,UAAUC,OAAV,EAAmB;MACpC,OAAOF,cAAc,CAACG,MAAf,CAAsBD,OAAO,CAACA,OAA9B,EAAuCf,OAAO,IAAI,EAAlD,CAAP;IACH,CAFM,EAEJU,uBAFI,CAAP;EAGH,CAjBD;;EAkBAnB,kBAAkB,CAACK,SAAnB,CAA6BO,SAA7B,GAAyC,UAAUV,KAAV,EAAiBwB,OAAjB,EAA0B;IAC/D,OAAO3B,wCAAwC,CAACG,KAAD,EAAQwB,OAAR,CAA/C;EACH,CAFD;;EAGA1B,kBAAkB,CAACK,SAAnB,CAA6BQ,WAA7B,GAA2C,UAAUc,MAAV,EAAkBD,OAAlB,EAA2B;IAClE,OAAO5B,0CAA0C,CAAC6B,MAAD,EAASD,OAAT,CAAjD;EACH,CAFD;;EAGA,OAAO1B,kBAAP;AACH,CAhCyB,CAgCxBL,QAhCwB,CAA1B;;AAiCA,SAASK,kBAAT"},"metadata":{},"sourceType":"module"}