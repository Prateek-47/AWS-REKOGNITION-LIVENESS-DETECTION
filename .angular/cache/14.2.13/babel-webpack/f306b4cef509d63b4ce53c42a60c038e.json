{"ast":null,"code":"import _asyncToGenerator from \"D:/aws-rekognition-liveness-detection-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { env } from '../environment';\nimport { FromPixels } from '../kernel_names';\nimport { getKernel } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { tensor3d } from './tensor3d';\nlet fromPixels2DContext;\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\n\nfunction fromPixels_(pixels, numChannels = 3) {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n\n  if (pixels.data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (typeof ImageData !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement) {\n    isImage = true; // tslint:disable-next-line: no-any\n  } else if (pixels.getContext != null) {\n    isCanvasLike = true;\n  } else if (typeof ImageBitmap !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' + `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` + `in browser, or OffscreenCanvas, ImageData in webworker` + ` or {data: Uint32Array, width: number, height: number}, ` + `but was ${pixels.constructor.name}`);\n  }\n\n  if (isVideo) {\n    const HAVE_CURRENT_DATA_READY_STATE = 2;\n\n    if (isVideo && pixels.readyState < HAVE_CURRENT_DATA_READY_STATE) {\n      throw new Error('The video element has not loaded data yet. Please wait for ' + '`loadeddata` event on the <video> element.');\n    }\n  } // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n\n\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n\n  if (kernel != null) {\n    const inputs = {\n      pixels\n    };\n    const attrs = {\n      numChannels\n    };\n    return ENGINE.runKernel(FromPixels, inputs, attrs);\n  }\n\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  let vals;\n\n  if (isCanvasLike) {\n    vals = // tslint:disable-next-line:no-any\n    pixels.getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = pixels.data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' && typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error('Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext = document.createElement('canvas').getContext('2d');\n      }\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n\n  let values;\n\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n\n  const outShape = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n} // Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\n\n\nfunction isPixelData(pixels) {\n  return pixels != null && pixels.data instanceof Uint8Array;\n}\n\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' && typeof ImageBitmap !== 'undefined' && window.hasOwnProperty('createImageBitmap');\n}\n\nfunction isNonEmptyPixels(pixels) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\n\nfunction canWrapPixelsToImageBitmap(pixels) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) && isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\n\n\nexport function fromPixelsAsync(_x) {\n  return _fromPixelsAsync.apply(this, arguments);\n}\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\n\nfunction _fromPixelsAsync() {\n  _fromPixelsAsync = _asyncToGenerator(function* (pixels, numChannels = 3) {\n    let inputs = null; // Check whether the backend needs to wrap |pixels| to imageBitmap and\n    // whether |pixels| can be wrapped to imageBitmap.\n\n    if (env().getBool('WRAP_TO_IMAGEBITMAP') && canWrapPixelsToImageBitmap(pixels)) {\n      // Force the imageBitmap creation to not do any premultiply alpha\n      // ops.\n      let imageBitmap;\n\n      try {\n        // wrap in try-catch block, because createImageBitmap may not work\n        // properly in some browsers, e.g.\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n        // tslint:disable-next-line: no-any\n        imageBitmap = yield createImageBitmap(pixels, {\n          premultiplyAlpha: 'none'\n        });\n      } catch (e) {\n        imageBitmap = null;\n      } // createImageBitmap will clip the source size.\n      // In some cases, the input will have larger size than its content.\n      // E.g. new Image(10, 10) but with 1 x 1 content. Using\n      // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n      // is not correct. We should avoid wrapping such resouce to\n      // imageBitmap.\n\n\n      if (imageBitmap != null && imageBitmap.width === pixels.width && imageBitmap.height === pixels.height) {\n        inputs = imageBitmap;\n      } else {\n        inputs = pixels;\n      }\n    } else {\n      inputs = pixels;\n    }\n\n    return fromPixels_(inputs, numChannels);\n  });\n  return _fromPixelsAsync.apply(this, arguments);\n}\n\nexport function toPixels(_x2, _x3) {\n  return _toPixels.apply(this, arguments);\n}\n\nfunction _toPixels() {\n  _toPixels = _asyncToGenerator(function* (img, canvas) {\n    let $img = convertToTensor(img, 'img', 'toPixels');\n\n    if (!(img instanceof Tensor)) {\n      // Assume int32 if user passed a native array.\n      const originalImgTensor = $img;\n      $img = cast(originalImgTensor, 'int32');\n      originalImgTensor.dispose();\n    }\n\n    if ($img.rank !== 2 && $img.rank !== 3) {\n      throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n    }\n\n    const [height, width] = $img.shape.slice(0, 2);\n    const depth = $img.rank === 2 ? 1 : $img.shape[2];\n\n    if (depth > 4 || depth === 2) {\n      throw new Error(`toPixels only supports depth of size ` + `1, 3 or 4 but got ${depth}`);\n    }\n\n    if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\n      throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` + ` Please use float32 or int32 tensors.`);\n    }\n\n    const data = yield $img.data();\n    const multiplier = $img.dtype === 'float32' ? 255 : 1;\n    const bytes = new Uint8ClampedArray(width * height * 4);\n\n    for (let i = 0; i < height * width; ++i) {\n      const rgba = [0, 0, 0, 255];\n\n      for (let d = 0; d < depth; d++) {\n        const value = data[i * depth + d];\n\n        if ($img.dtype === 'float32') {\n          if (value < 0 || value > 1) {\n            throw new Error(`Tensor values for a float32 Tensor must be in the ` + `range [0 - 1] but encountered ${value}.`);\n          }\n        } else if ($img.dtype === 'int32') {\n          if (value < 0 || value > 255) {\n            throw new Error(`Tensor values for a int32 Tensor must be in the ` + `range [0 - 255] but encountered ${value}.`);\n          }\n        }\n\n        if (depth === 1) {\n          rgba[0] = value * multiplier;\n          rgba[1] = value * multiplier;\n          rgba[2] = value * multiplier;\n        } else {\n          rgba[d] = value * multiplier;\n        }\n      }\n\n      const j = i * 4;\n      bytes[j + 0] = Math.round(rgba[0]);\n      bytes[j + 1] = Math.round(rgba[1]);\n      bytes[j + 2] = Math.round(rgba[2]);\n      bytes[j + 3] = Math.round(rgba[3]);\n    }\n\n    if (canvas != null) {\n      canvas.width = width;\n      canvas.height = height;\n      const ctx = canvas.getContext('2d');\n      const imageData = new ImageData(bytes, width, height);\n      ctx.putImageData(imageData, 0, 0);\n    }\n\n    if ($img !== img) {\n      $img.dispose();\n    }\n\n    return bytes;\n  });\n  return _toPixels.apply(this, arguments);\n}\n\nexport const fromPixels = op({\n  fromPixels_\n});","map":{"version":3,"names":["ENGINE","env","FromPixels","getKernel","Tensor","convertToTensor","cast","op","tensor3d","fromPixels2DContext","fromPixels_","pixels","numChannels","Error","isPixelData","isImageData","isVideo","isImage","isCanvasLike","isImageBitmap","data","Uint8Array","ImageData","HTMLVideoElement","HTMLImageElement","getContext","ImageBitmap","constructor","name","HAVE_CURRENT_DATA_READY_STATE","readyState","kernel","backendName","inputs","attrs","runKernel","width","height","videoWidth","videoHeight","vals","getImageData","document","OffscreenCanvas","OffscreenCanvasRenderingContext2D","createElement","canvas","drawImage","values","Int32Array","numPixels","i","channel","outShape","isImageBitmapFullySupported","window","hasOwnProperty","isNonEmptyPixels","canWrapPixelsToImageBitmap","fromPixelsAsync","getBool","imageBitmap","createImageBitmap","premultiplyAlpha","e","toPixels","img","$img","originalImgTensor","dispose","rank","shape","slice","depth","dtype","multiplier","bytes","Uint8ClampedArray","rgba","d","value","j","Math","round","ctx","imageData","putImageData","fromPixels"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-core/dist/ops/browser.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { env } from '../environment';\nimport { FromPixels } from '../kernel_names';\nimport { getKernel } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { tensor3d } from './tensor3d';\nlet fromPixels2DContext;\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(pixels, numChannels = 3) {\n    // Sanity checks.\n    if (numChannels > 4) {\n        throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n    }\n    if (pixels == null) {\n        throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n    }\n    let isPixelData = false;\n    let isImageData = false;\n    let isVideo = false;\n    let isImage = false;\n    let isCanvasLike = false;\n    let isImageBitmap = false;\n    if (pixels.data instanceof Uint8Array) {\n        isPixelData = true;\n    }\n    else if (typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n        isImageData = true;\n    }\n    else if (typeof (HTMLVideoElement) !== 'undefined' &&\n        pixels instanceof HTMLVideoElement) {\n        isVideo = true;\n    }\n    else if (typeof (HTMLImageElement) !== 'undefined' &&\n        pixels instanceof HTMLImageElement) {\n        isImage = true;\n        // tslint:disable-next-line: no-any\n    }\n    else if (pixels.getContext != null) {\n        isCanvasLike = true;\n    }\n    else if (typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap) {\n        isImageBitmap = true;\n    }\n    else {\n        throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' +\n            `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n            `in browser, or OffscreenCanvas, ImageData in webworker` +\n            ` or {data: Uint32Array, width: number, height: number}, ` +\n            `but was ${pixels.constructor.name}`);\n    }\n    if (isVideo) {\n        const HAVE_CURRENT_DATA_READY_STATE = 2;\n        if (isVideo &&\n            pixels.readyState <\n                HAVE_CURRENT_DATA_READY_STATE) {\n            throw new Error('The video element has not loaded data yet. Please wait for ' +\n                '`loadeddata` event on the <video> element.');\n        }\n    }\n    // If the current backend has 'FromPixels' registered, it has a more\n    // efficient way of handling pixel uploads, so we call that.\n    const kernel = getKernel(FromPixels, ENGINE.backendName);\n    if (kernel != null) {\n        const inputs = { pixels };\n        const attrs = { numChannels };\n        return ENGINE.runKernel(FromPixels, inputs, attrs);\n    }\n    const [width, height] = isVideo ?\n        [\n            pixels.videoWidth,\n            pixels.videoHeight\n        ] :\n        [pixels.width, pixels.height];\n    let vals;\n    if (isCanvasLike) {\n        vals =\n            // tslint:disable-next-line:no-any\n            pixels.getContext('2d').getImageData(0, 0, width, height).data;\n    }\n    else if (isImageData || isPixelData) {\n        vals = pixels.data;\n    }\n    else if (isImage || isVideo || isImageBitmap) {\n        if (fromPixels2DContext == null) {\n            if (typeof document === 'undefined') {\n                if (typeof OffscreenCanvas !== 'undefined' && typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n                    // @ts-ignore\n                    fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n                }\n                else {\n                    throw new Error('Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.');\n                }\n            }\n            else {\n                fromPixels2DContext = document.createElement('canvas').getContext('2d');\n            }\n        }\n        fromPixels2DContext.canvas.width = width;\n        fromPixels2DContext.canvas.height = height;\n        fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n        vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n    }\n    let values;\n    if (numChannels === 4) {\n        values = new Int32Array(vals);\n    }\n    else {\n        const numPixels = width * height;\n        values = new Int32Array(numPixels * numChannels);\n        for (let i = 0; i < numPixels; i++) {\n            for (let channel = 0; channel < numChannels; ++channel) {\n                values[i * numChannels + channel] = vals[i * 4 + channel];\n            }\n        }\n    }\n    const outShape = [height, width, numChannels];\n    return tensor3d(values, outShape, 'int32');\n}\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels) {\n    return (pixels != null) && (pixels.data instanceof Uint8Array);\n}\nfunction isImageBitmapFullySupported() {\n    return typeof window !== 'undefined' &&\n        typeof (ImageBitmap) !== 'undefined' &&\n        window.hasOwnProperty('createImageBitmap');\n}\nfunction isNonEmptyPixels(pixels) {\n    return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\nfunction canWrapPixelsToImageBitmap(pixels) {\n    return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) &&\n        isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nexport async function fromPixelsAsync(pixels, numChannels = 3) {\n    let inputs = null;\n    // Check whether the backend needs to wrap |pixels| to imageBitmap and\n    // whether |pixels| can be wrapped to imageBitmap.\n    if (env().getBool('WRAP_TO_IMAGEBITMAP') &&\n        canWrapPixelsToImageBitmap(pixels)) {\n        // Force the imageBitmap creation to not do any premultiply alpha\n        // ops.\n        let imageBitmap;\n        try {\n            // wrap in try-catch block, because createImageBitmap may not work\n            // properly in some browsers, e.g.\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n            // tslint:disable-next-line: no-any\n            imageBitmap = await createImageBitmap(pixels, { premultiplyAlpha: 'none' });\n        }\n        catch (e) {\n            imageBitmap = null;\n        }\n        // createImageBitmap will clip the source size.\n        // In some cases, the input will have larger size than its content.\n        // E.g. new Image(10, 10) but with 1 x 1 content. Using\n        // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n        // is not correct. We should avoid wrapping such resouce to\n        // imageBitmap.\n        if (imageBitmap != null && imageBitmap.width === pixels.width &&\n            imageBitmap.height === pixels.height) {\n            inputs = imageBitmap;\n        }\n        else {\n            inputs = pixels;\n        }\n    }\n    else {\n        inputs = pixels;\n    }\n    return fromPixels_(inputs, numChannels);\n}\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(img, canvas) {\n    let $img = convertToTensor(img, 'img', 'toPixels');\n    if (!(img instanceof Tensor)) {\n        // Assume int32 if user passed a native array.\n        const originalImgTensor = $img;\n        $img = cast(originalImgTensor, 'int32');\n        originalImgTensor.dispose();\n    }\n    if ($img.rank !== 2 && $img.rank !== 3) {\n        throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n    }\n    const [height, width] = $img.shape.slice(0, 2);\n    const depth = $img.rank === 2 ? 1 : $img.shape[2];\n    if (depth > 4 || depth === 2) {\n        throw new Error(`toPixels only supports depth of size ` +\n            `1, 3 or 4 but got ${depth}`);\n    }\n    if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\n        throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` +\n            ` Please use float32 or int32 tensors.`);\n    }\n    const data = await $img.data();\n    const multiplier = $img.dtype === 'float32' ? 255 : 1;\n    const bytes = new Uint8ClampedArray(width * height * 4);\n    for (let i = 0; i < height * width; ++i) {\n        const rgba = [0, 0, 0, 255];\n        for (let d = 0; d < depth; d++) {\n            const value = data[i * depth + d];\n            if ($img.dtype === 'float32') {\n                if (value < 0 || value > 1) {\n                    throw new Error(`Tensor values for a float32 Tensor must be in the ` +\n                        `range [0 - 1] but encountered ${value}.`);\n                }\n            }\n            else if ($img.dtype === 'int32') {\n                if (value < 0 || value > 255) {\n                    throw new Error(`Tensor values for a int32 Tensor must be in the ` +\n                        `range [0 - 255] but encountered ${value}.`);\n                }\n            }\n            if (depth === 1) {\n                rgba[0] = value * multiplier;\n                rgba[1] = value * multiplier;\n                rgba[2] = value * multiplier;\n            }\n            else {\n                rgba[d] = value * multiplier;\n            }\n        }\n        const j = i * 4;\n        bytes[j + 0] = Math.round(rgba[0]);\n        bytes[j + 1] = Math.round(rgba[1]);\n        bytes[j + 2] = Math.round(rgba[2]);\n        bytes[j + 3] = Math.round(rgba[3]);\n    }\n    if (canvas != null) {\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        const imageData = new ImageData(bytes, width, height);\n        ctx.putImageData(imageData, 0, 0);\n    }\n    if ($img !== img) {\n        $img.dispose();\n    }\n    return bytes;\n}\nexport const fromPixels = op({ fromPixels_ });\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,EAAT,QAAmB,aAAnB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,IAAIC,mBAAJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,WAAW,GAAG,CAA3C,EAA8C;EAC1C;EACA,IAAIA,WAAW,GAAG,CAAlB,EAAqB;IACjB,MAAM,IAAIC,KAAJ,CAAU,gEAAV,CAAN;EACH;;EACD,IAAIF,MAAM,IAAI,IAAd,EAAoB;IAChB,MAAM,IAAIE,KAAJ,CAAU,0DAAV,CAAN;EACH;;EACD,IAAIC,WAAW,GAAG,KAAlB;EACA,IAAIC,WAAW,GAAG,KAAlB;EACA,IAAIC,OAAO,GAAG,KAAd;EACA,IAAIC,OAAO,GAAG,KAAd;EACA,IAAIC,YAAY,GAAG,KAAnB;EACA,IAAIC,aAAa,GAAG,KAApB;;EACA,IAAIR,MAAM,CAACS,IAAP,YAAuBC,UAA3B,EAAuC;IACnCP,WAAW,GAAG,IAAd;EACH,CAFD,MAGK,IAAI,OAAQQ,SAAR,KAAuB,WAAvB,IAAsCX,MAAM,YAAYW,SAA5D,EAAuE;IACxEP,WAAW,GAAG,IAAd;EACH,CAFI,MAGA,IAAI,OAAQQ,gBAAR,KAA8B,WAA9B,IACLZ,MAAM,YAAYY,gBADjB,EACmC;IACpCP,OAAO,GAAG,IAAV;EACH,CAHI,MAIA,IAAI,OAAQQ,gBAAR,KAA8B,WAA9B,IACLb,MAAM,YAAYa,gBADjB,EACmC;IACpCP,OAAO,GAAG,IAAV,CADoC,CAEpC;EACH,CAJI,MAKA,IAAIN,MAAM,CAACc,UAAP,IAAqB,IAAzB,EAA+B;IAChCP,YAAY,GAAG,IAAf;EACH,CAFI,MAGA,IAAI,OAAQQ,WAAR,KAAyB,WAAzB,IAAwCf,MAAM,YAAYe,WAA9D,EAA2E;IAC5EP,aAAa,GAAG,IAAhB;EACH,CAFI,MAGA;IACD,MAAM,IAAIN,KAAJ,CAAU,gEACX,mEADW,GAEX,wDAFW,GAGX,0DAHW,GAIX,WAAUF,MAAM,CAACgB,WAAP,CAAmBC,IAAK,EAJjC,CAAN;EAKH;;EACD,IAAIZ,OAAJ,EAAa;IACT,MAAMa,6BAA6B,GAAG,CAAtC;;IACA,IAAIb,OAAO,IACPL,MAAM,CAACmB,UAAP,GACID,6BAFR,EAEuC;MACnC,MAAM,IAAIhB,KAAJ,CAAU,gEACZ,4CADE,CAAN;IAEH;EACJ,CAlDyC,CAmD1C;EACA;;;EACA,MAAMkB,MAAM,GAAG5B,SAAS,CAACD,UAAD,EAAaF,MAAM,CAACgC,WAApB,CAAxB;;EACA,IAAID,MAAM,IAAI,IAAd,EAAoB;IAChB,MAAME,MAAM,GAAG;MAAEtB;IAAF,CAAf;IACA,MAAMuB,KAAK,GAAG;MAAEtB;IAAF,CAAd;IACA,OAAOZ,MAAM,CAACmC,SAAP,CAAiBjC,UAAjB,EAA6B+B,MAA7B,EAAqCC,KAArC,CAAP;EACH;;EACD,MAAM,CAACE,KAAD,EAAQC,MAAR,IAAkBrB,OAAO,GAC3B,CACIL,MAAM,CAAC2B,UADX,EAEI3B,MAAM,CAAC4B,WAFX,CAD2B,GAK3B,CAAC5B,MAAM,CAACyB,KAAR,EAAezB,MAAM,CAAC0B,MAAtB,CALJ;EAMA,IAAIG,IAAJ;;EACA,IAAItB,YAAJ,EAAkB;IACdsB,IAAI,GACA;IACA7B,MAAM,CAACc,UAAP,CAAkB,IAAlB,EAAwBgB,YAAxB,CAAqC,CAArC,EAAwC,CAAxC,EAA2CL,KAA3C,EAAkDC,MAAlD,EAA0DjB,IAF9D;EAGH,CAJD,MAKK,IAAIL,WAAW,IAAID,WAAnB,EAAgC;IACjC0B,IAAI,GAAG7B,MAAM,CAACS,IAAd;EACH,CAFI,MAGA,IAAIH,OAAO,IAAID,OAAX,IAAsBG,aAA1B,EAAyC;IAC1C,IAAIV,mBAAmB,IAAI,IAA3B,EAAiC;MAC7B,IAAI,OAAOiC,QAAP,KAAoB,WAAxB,EAAqC;QACjC,IAAI,OAAOC,eAAP,KAA2B,WAA3B,IAA0C,OAAOC,iCAAP,KAA6C,WAA3F,EAAwG;UACpG;UACAnC,mBAAmB,GAAG,IAAIkC,eAAJ,CAAoB,CAApB,EAAuB,CAAvB,EAA0BlB,UAA1B,CAAqC,IAArC,CAAtB;QACH,CAHD,MAIK;UACD,MAAM,IAAIZ,KAAJ,CAAU,sGAAV,CAAN;QACH;MACJ,CARD,MASK;QACDJ,mBAAmB,GAAGiC,QAAQ,CAACG,aAAT,CAAuB,QAAvB,EAAiCpB,UAAjC,CAA4C,IAA5C,CAAtB;MACH;IACJ;;IACDhB,mBAAmB,CAACqC,MAApB,CAA2BV,KAA3B,GAAmCA,KAAnC;IACA3B,mBAAmB,CAACqC,MAApB,CAA2BT,MAA3B,GAAoCA,MAApC;IACA5B,mBAAmB,CAACsC,SAApB,CAA8BpC,MAA9B,EAAsC,CAAtC,EAAyC,CAAzC,EAA4CyB,KAA5C,EAAmDC,MAAnD;IACAG,IAAI,GAAG/B,mBAAmB,CAACgC,YAApB,CAAiC,CAAjC,EAAoC,CAApC,EAAuCL,KAAvC,EAA8CC,MAA9C,EAAsDjB,IAA7D;EACH;;EACD,IAAI4B,MAAJ;;EACA,IAAIpC,WAAW,KAAK,CAApB,EAAuB;IACnBoC,MAAM,GAAG,IAAIC,UAAJ,CAAeT,IAAf,CAAT;EACH,CAFD,MAGK;IACD,MAAMU,SAAS,GAAGd,KAAK,GAAGC,MAA1B;IACAW,MAAM,GAAG,IAAIC,UAAJ,CAAeC,SAAS,GAAGtC,WAA3B,CAAT;;IACA,KAAK,IAAIuC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,SAApB,EAA+BC,CAAC,EAAhC,EAAoC;MAChC,KAAK,IAAIC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGxC,WAAhC,EAA6C,EAAEwC,OAA/C,EAAwD;QACpDJ,MAAM,CAACG,CAAC,GAAGvC,WAAJ,GAAkBwC,OAAnB,CAAN,GAAoCZ,IAAI,CAACW,CAAC,GAAG,CAAJ,GAAQC,OAAT,CAAxC;MACH;IACJ;EACJ;;EACD,MAAMC,QAAQ,GAAG,CAAChB,MAAD,EAASD,KAAT,EAAgBxB,WAAhB,CAAjB;EACA,OAAOJ,QAAQ,CAACwC,MAAD,EAASK,QAAT,EAAmB,OAAnB,CAAf;AACH,C,CACD;AACA;;;AACA,SAASvC,WAAT,CAAqBH,MAArB,EAA6B;EACzB,OAAQA,MAAM,IAAI,IAAX,IAAqBA,MAAM,CAACS,IAAP,YAAuBC,UAAnD;AACH;;AACD,SAASiC,2BAAT,GAAuC;EACnC,OAAO,OAAOC,MAAP,KAAkB,WAAlB,IACH,OAAQ7B,WAAR,KAAyB,WADtB,IAEH6B,MAAM,CAACC,cAAP,CAAsB,mBAAtB,CAFJ;AAGH;;AACD,SAASC,gBAAT,CAA0B9C,MAA1B,EAAkC;EAC9B,OAAOA,MAAM,IAAI,IAAV,IAAkBA,MAAM,CAACyB,KAAP,KAAiB,CAAnC,IAAwCzB,MAAM,CAAC0B,MAAP,KAAkB,CAAjE;AACH;;AACD,SAASqB,0BAAT,CAAoC/C,MAApC,EAA4C;EACxC,OAAO2C,2BAA2B,MAAM,EAAE3C,MAAM,YAAYe,WAApB,CAAjC,IACH+B,gBAAgB,CAAC9C,MAAD,CADb,IACyB,CAACG,WAAW,CAACH,MAAD,CAD5C;AAEH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAsBgD,eAAtB;EAAA;AAAA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;uCAzDO,WAA+BhD,MAA/B,EAAuCC,WAAW,GAAG,CAArD,EAAwD;IAC3D,IAAIqB,MAAM,GAAG,IAAb,CAD2D,CAE3D;IACA;;IACA,IAAIhC,GAAG,GAAG2D,OAAN,CAAc,qBAAd,KACAF,0BAA0B,CAAC/C,MAAD,CAD9B,EACwC;MACpC;MACA;MACA,IAAIkD,WAAJ;;MACA,IAAI;QACA;QACA;QACA;QACA;QACAA,WAAW,SAASC,iBAAiB,CAACnD,MAAD,EAAS;UAAEoD,gBAAgB,EAAE;QAApB,CAAT,CAArC;MACH,CAND,CAOA,OAAOC,CAAP,EAAU;QACNH,WAAW,GAAG,IAAd;MACH,CAbmC,CAcpC;MACA;MACA;MACA;MACA;MACA;;;MACA,IAAIA,WAAW,IAAI,IAAf,IAAuBA,WAAW,CAACzB,KAAZ,KAAsBzB,MAAM,CAACyB,KAApD,IACAyB,WAAW,CAACxB,MAAZ,KAAuB1B,MAAM,CAAC0B,MADlC,EAC0C;QACtCJ,MAAM,GAAG4B,WAAT;MACH,CAHD,MAIK;QACD5B,MAAM,GAAGtB,MAAT;MACH;IACJ,CA5BD,MA6BK;MACDsB,MAAM,GAAGtB,MAAT;IACH;;IACD,OAAOD,WAAW,CAACuB,MAAD,EAASrB,WAAT,CAAlB;EACH,C;;;;AAqBD,gBAAsBqD,QAAtB;EAAA;AAAA;;;gCAAO,WAAwBC,GAAxB,EAA6BpB,MAA7B,EAAqC;IACxC,IAAIqB,IAAI,GAAG9D,eAAe,CAAC6D,GAAD,EAAM,KAAN,EAAa,UAAb,CAA1B;;IACA,IAAI,EAAEA,GAAG,YAAY9D,MAAjB,CAAJ,EAA8B;MAC1B;MACA,MAAMgE,iBAAiB,GAAGD,IAA1B;MACAA,IAAI,GAAG7D,IAAI,CAAC8D,iBAAD,EAAoB,OAApB,CAAX;MACAA,iBAAiB,CAACC,OAAlB;IACH;;IACD,IAAIF,IAAI,CAACG,IAAL,KAAc,CAAd,IAAmBH,IAAI,CAACG,IAAL,KAAc,CAArC,EAAwC;MACpC,MAAM,IAAIzD,KAAJ,CAAW,wDAAuDsD,IAAI,CAACG,IAAK,GAA5E,CAAN;IACH;;IACD,MAAM,CAACjC,MAAD,EAASD,KAAT,IAAkB+B,IAAI,CAACI,KAAL,CAAWC,KAAX,CAAiB,CAAjB,EAAoB,CAApB,CAAxB;IACA,MAAMC,KAAK,GAAGN,IAAI,CAACG,IAAL,KAAc,CAAd,GAAkB,CAAlB,GAAsBH,IAAI,CAACI,KAAL,CAAW,CAAX,CAApC;;IACA,IAAIE,KAAK,GAAG,CAAR,IAAaA,KAAK,KAAK,CAA3B,EAA8B;MAC1B,MAAM,IAAI5D,KAAJ,CAAW,uCAAD,GACX,qBAAoB4D,KAAM,EADzB,CAAN;IAEH;;IACD,IAAIN,IAAI,CAACO,KAAL,KAAe,SAAf,IAA4BP,IAAI,CAACO,KAAL,KAAe,OAA/C,EAAwD;MACpD,MAAM,IAAI7D,KAAJ,CAAW,kCAAiCsD,IAAI,CAACO,KAAM,GAA7C,GACX,uCADC,CAAN;IAEH;;IACD,MAAMtD,IAAI,SAAS+C,IAAI,CAAC/C,IAAL,EAAnB;IACA,MAAMuD,UAAU,GAAGR,IAAI,CAACO,KAAL,KAAe,SAAf,GAA2B,GAA3B,GAAiC,CAApD;IACA,MAAME,KAAK,GAAG,IAAIC,iBAAJ,CAAsBzC,KAAK,GAAGC,MAAR,GAAiB,CAAvC,CAAd;;IACA,KAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,GAAGD,KAA7B,EAAoC,EAAEe,CAAtC,EAAyC;MACrC,MAAM2B,IAAI,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAb;;MACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAApB,EAA2BM,CAAC,EAA5B,EAAgC;QAC5B,MAAMC,KAAK,GAAG5D,IAAI,CAAC+B,CAAC,GAAGsB,KAAJ,GAAYM,CAAb,CAAlB;;QACA,IAAIZ,IAAI,CAACO,KAAL,KAAe,SAAnB,EAA8B;UAC1B,IAAIM,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,CAAzB,EAA4B;YACxB,MAAM,IAAInE,KAAJ,CAAW,oDAAD,GACX,iCAAgCmE,KAAM,GADrC,CAAN;UAEH;QACJ,CALD,MAMK,IAAIb,IAAI,CAACO,KAAL,KAAe,OAAnB,EAA4B;UAC7B,IAAIM,KAAK,GAAG,CAAR,IAAaA,KAAK,GAAG,GAAzB,EAA8B;YAC1B,MAAM,IAAInE,KAAJ,CAAW,kDAAD,GACX,mCAAkCmE,KAAM,GADvC,CAAN;UAEH;QACJ;;QACD,IAAIP,KAAK,KAAK,CAAd,EAAiB;UACbK,IAAI,CAAC,CAAD,CAAJ,GAAUE,KAAK,GAAGL,UAAlB;UACAG,IAAI,CAAC,CAAD,CAAJ,GAAUE,KAAK,GAAGL,UAAlB;UACAG,IAAI,CAAC,CAAD,CAAJ,GAAUE,KAAK,GAAGL,UAAlB;QACH,CAJD,MAKK;UACDG,IAAI,CAACC,CAAD,CAAJ,GAAUC,KAAK,GAAGL,UAAlB;QACH;MACJ;;MACD,MAAMM,CAAC,GAAG9B,CAAC,GAAG,CAAd;MACAyB,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,GAAeC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAAC,CAAD,CAAf,CAAf;MACAF,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,GAAeC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAAC,CAAD,CAAf,CAAf;MACAF,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,GAAeC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAAC,CAAD,CAAf,CAAf;MACAF,KAAK,CAACK,CAAC,GAAG,CAAL,CAAL,GAAeC,IAAI,CAACC,KAAL,CAAWL,IAAI,CAAC,CAAD,CAAf,CAAf;IACH;;IACD,IAAIhC,MAAM,IAAI,IAAd,EAAoB;MAChBA,MAAM,CAACV,KAAP,GAAeA,KAAf;MACAU,MAAM,CAACT,MAAP,GAAgBA,MAAhB;MACA,MAAM+C,GAAG,GAAGtC,MAAM,CAACrB,UAAP,CAAkB,IAAlB,CAAZ;MACA,MAAM4D,SAAS,GAAG,IAAI/D,SAAJ,CAAcsD,KAAd,EAAqBxC,KAArB,EAA4BC,MAA5B,CAAlB;MACA+C,GAAG,CAACE,YAAJ,CAAiBD,SAAjB,EAA4B,CAA5B,EAA+B,CAA/B;IACH;;IACD,IAAIlB,IAAI,KAAKD,GAAb,EAAkB;MACdC,IAAI,CAACE,OAAL;IACH;;IACD,OAAOO,KAAP;EACH,C;;;;AACD,OAAO,MAAMW,UAAU,GAAGhF,EAAE,CAAC;EAAEG;AAAF,CAAD,CAArB"},"metadata":{},"sourceType":"module"}