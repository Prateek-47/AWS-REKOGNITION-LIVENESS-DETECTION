{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { BrowserIndexedDB, BrowserIndexedDBManager } from '../io/indexed_db';\nimport { BrowserLocalStorage, BrowserLocalStorageManager } from '../io/local_storage';\nimport { ModelStoreManagerRegistry } from '../io/model_management';\nexport class PlatformBrowser {\n  fetch(path, init) {\n    return fetch(path, init);\n  }\n\n  now() {\n    return performance.now();\n  }\n\n  encode(text, encoding) {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);\n    }\n\n    if (this.textEncoder == null) {\n      this.textEncoder = new TextEncoder();\n    }\n\n    return this.textEncoder.encode(text);\n  }\n\n  decode(bytes, encoding) {\n    return new TextDecoder(encoding).decode(bytes);\n  }\n\n}\n\nif (env().get('IS_BROWSER')) {\n  env().setPlatform('browser', new PlatformBrowser()); // Register LocalStorage IOHandler\n\n  try {\n    ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n  } catch (err) {} // Register IndexedDB IOHandler\n\n\n  try {\n    ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n  } catch (err) {}\n}","map":{"version":3,"names":["env","BrowserIndexedDB","BrowserIndexedDBManager","BrowserLocalStorage","BrowserLocalStorageManager","ModelStoreManagerRegistry","PlatformBrowser","fetch","path","init","now","performance","encode","text","encoding","Error","textEncoder","TextEncoder","decode","bytes","TextDecoder","get","setPlatform","registerManager","URL_SCHEME","err"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-core/dist/platforms/platform_browser.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { BrowserIndexedDB, BrowserIndexedDBManager } from '../io/indexed_db';\nimport { BrowserLocalStorage, BrowserLocalStorageManager } from '../io/local_storage';\nimport { ModelStoreManagerRegistry } from '../io/model_management';\nexport class PlatformBrowser {\n    fetch(path, init) {\n        return fetch(path, init);\n    }\n    now() {\n        return performance.now();\n    }\n    encode(text, encoding) {\n        if (encoding !== 'utf-8' && encoding !== 'utf8') {\n            throw new Error(`Browser's encoder only supports utf-8, but got ${encoding}`);\n        }\n        if (this.textEncoder == null) {\n            this.textEncoder = new TextEncoder();\n        }\n        return this.textEncoder.encode(text);\n    }\n    decode(bytes, encoding) {\n        return new TextDecoder(encoding).decode(bytes);\n    }\n}\nif (env().get('IS_BROWSER')) {\n    env().setPlatform('browser', new PlatformBrowser());\n    // Register LocalStorage IOHandler\n    try {\n        ModelStoreManagerRegistry.registerManager(BrowserLocalStorage.URL_SCHEME, new BrowserLocalStorageManager());\n    }\n    catch (err) {\n    }\n    // Register IndexedDB IOHandler\n    try {\n        ModelStoreManagerRegistry.registerManager(BrowserIndexedDB.URL_SCHEME, new BrowserIndexedDBManager());\n    }\n    catch (err) {\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,UAAP;AACA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,gBAAT,EAA2BC,uBAA3B,QAA0D,kBAA1D;AACA,SAASC,mBAAT,EAA8BC,0BAA9B,QAAgE,qBAAhE;AACA,SAASC,yBAAT,QAA0C,wBAA1C;AACA,OAAO,MAAMC,eAAN,CAAsB;EACzBC,KAAK,CAACC,IAAD,EAAOC,IAAP,EAAa;IACd,OAAOF,KAAK,CAACC,IAAD,EAAOC,IAAP,CAAZ;EACH;;EACDC,GAAG,GAAG;IACF,OAAOC,WAAW,CAACD,GAAZ,EAAP;EACH;;EACDE,MAAM,CAACC,IAAD,EAAOC,QAAP,EAAiB;IACnB,IAAIA,QAAQ,KAAK,OAAb,IAAwBA,QAAQ,KAAK,MAAzC,EAAiD;MAC7C,MAAM,IAAIC,KAAJ,CAAW,kDAAiDD,QAAS,EAArE,CAAN;IACH;;IACD,IAAI,KAAKE,WAAL,IAAoB,IAAxB,EAA8B;MAC1B,KAAKA,WAAL,GAAmB,IAAIC,WAAJ,EAAnB;IACH;;IACD,OAAO,KAAKD,WAAL,CAAiBJ,MAAjB,CAAwBC,IAAxB,CAAP;EACH;;EACDK,MAAM,CAACC,KAAD,EAAQL,QAAR,EAAkB;IACpB,OAAO,IAAIM,WAAJ,CAAgBN,QAAhB,EAA0BI,MAA1B,CAAiCC,KAAjC,CAAP;EACH;;AAlBwB;;AAoB7B,IAAInB,GAAG,GAAGqB,GAAN,CAAU,YAAV,CAAJ,EAA6B;EACzBrB,GAAG,GAAGsB,WAAN,CAAkB,SAAlB,EAA6B,IAAIhB,eAAJ,EAA7B,EADyB,CAEzB;;EACA,IAAI;IACAD,yBAAyB,CAACkB,eAA1B,CAA0CpB,mBAAmB,CAACqB,UAA9D,EAA0E,IAAIpB,0BAAJ,EAA1E;EACH,CAFD,CAGA,OAAOqB,GAAP,EAAY,CACX,CAPwB,CAQzB;;;EACA,IAAI;IACApB,yBAAyB,CAACkB,eAA1B,CAA0CtB,gBAAgB,CAACuB,UAA3D,EAAuE,IAAItB,uBAAJ,EAAvE;EACH,CAFD,CAGA,OAAOuB,GAAP,EAAY,CACX;AACJ"},"metadata":{},"sourceType":"module"}