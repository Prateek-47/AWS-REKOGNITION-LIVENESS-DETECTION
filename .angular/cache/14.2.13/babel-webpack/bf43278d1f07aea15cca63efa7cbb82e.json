{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmFunc;\n\nfunction setupFunc(backend) {\n  wasmFunc = backend.wasm.cwrap(LeakyRelu, null\n  /* void */\n  , ['number', 'number', 'number', 'number']);\n}\n\nexport function leakyRelu(args) {\n  const {\n    inputs: {\n      x\n    },\n    attrs: {\n      alpha\n    },\n    backend\n  } = args;\n  const xId = backend.dataIdMap.get(x.dataId).id; // According to TF API, LeakyRelu returns float32 when input is either float32\n  // or int32.\n\n  const out = backend.makeOutput(x.shape, 'float32');\n\n  if (util.sizeFromShape(x.shape) !== 0) {\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmFunc(xId, CppDType[x.dtype], alpha, outId);\n  }\n\n  return out;\n}\nexport const leakyReluConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'wasm',\n  setupFunc,\n  kernelFunc: leakyRelu\n};","map":{"version":3,"names":["LeakyRelu","util","CppDType","wasmFunc","setupFunc","backend","wasm","cwrap","leakyRelu","args","inputs","x","attrs","alpha","xId","dataIdMap","get","dataId","id","out","makeOutput","shape","sizeFromShape","outId","dtype","leakyReluConfig","kernelName","backendName","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/LeakyRelu.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmFunc;\nfunction setupFunc(backend) {\n    wasmFunc = backend.wasm.cwrap(LeakyRelu, null /* void */, [\n        'number',\n        'number',\n        'number',\n        'number',\n    ]);\n}\nexport function leakyRelu(args) {\n    const { inputs: { x }, attrs: { alpha }, backend } = args;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    // According to TF API, LeakyRelu returns float32 when input is either float32\n    // or int32.\n    const out = backend.makeOutput(x.shape, 'float32');\n    if (util.sizeFromShape(x.shape) !== 0) {\n        const outId = backend.dataIdMap.get(out.dataId).id;\n        wasmFunc(xId, CppDType[x.dtype], alpha, outId);\n    }\n    return out;\n}\nexport const leakyReluConfig = {\n    kernelName: LeakyRelu,\n    backendName: 'wasm',\n    setupFunc,\n    kernelFunc: leakyRelu,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,EAAoBC,IAApB,QAAgC,uBAAhC;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,IAAIC,QAAJ;;AACA,SAASC,SAAT,CAAmBC,OAAnB,EAA4B;EACxBF,QAAQ,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBP,SAAnB,EAA8B;EAAK;EAAnC,EAA+C,CACtD,QADsD,EAEtD,QAFsD,EAGtD,QAHsD,EAItD,QAJsD,CAA/C,CAAX;AAMH;;AACD,OAAO,SAASQ,SAAT,CAAmBC,IAAnB,EAAyB;EAC5B,MAAM;IAAEC,MAAM,EAAE;MAAEC;IAAF,CAAV;IAAiBC,KAAK,EAAE;MAAEC;IAAF,CAAxB;IAAmCR;EAAnC,IAA+CI,IAArD;EACA,MAAMK,GAAG,GAAGT,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBL,CAAC,CAACM,MAAxB,EAAgCC,EAA5C,CAF4B,CAG5B;EACA;;EACA,MAAMC,GAAG,GAAGd,OAAO,CAACe,UAAR,CAAmBT,CAAC,CAACU,KAArB,EAA4B,SAA5B,CAAZ;;EACA,IAAIpB,IAAI,CAACqB,aAAL,CAAmBX,CAAC,CAACU,KAArB,MAAgC,CAApC,EAAuC;IACnC,MAAME,KAAK,GAAGlB,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBG,GAAG,CAACF,MAA1B,EAAkCC,EAAhD;IACAf,QAAQ,CAACW,GAAD,EAAMZ,QAAQ,CAACS,CAAC,CAACa,KAAH,CAAd,EAAyBX,KAAzB,EAAgCU,KAAhC,CAAR;EACH;;EACD,OAAOJ,GAAP;AACH;AACD,OAAO,MAAMM,eAAe,GAAG;EAC3BC,UAAU,EAAE1B,SADe;EAE3B2B,WAAW,EAAE,MAFc;EAG3BvB,SAH2B;EAI3BwB,UAAU,EAAEpB;AAJe,CAAxB"},"metadata":{},"sourceType":"module"}