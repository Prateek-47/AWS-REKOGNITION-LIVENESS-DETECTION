{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmResizeBilinear;\n\nfunction setup(backend) {\n  wasmResizeBilinear = backend.wasm.cwrap(ResizeBilinear, null\n  /*void*/\n  , ['number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number', 'number' // outId\n  ]);\n}\n\nfunction resizeBilinear(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const outShape = [batch, newHeight, newWidth, numChannels];\n  let xData = backend.dataIdMap.get(images.dataId);\n  let castedData;\n\n  if (xData.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: images\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    xData = backend.dataIdMap.get(castedData.dataId);\n  }\n\n  const xId = xData.id;\n  const out = backend.makeOutput(outShape, 'float32');\n\n  if (util.sizeFromShape(images.shape) === 0) {\n    return out;\n  }\n\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmResizeBilinear(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: resizeBilinear\n};","map":{"version":3,"names":["ResizeBilinear","util","cast","wasmResizeBilinear","setup","backend","wasm","cwrap","resizeBilinear","args","inputs","attrs","images","alignCorners","halfPixelCenters","size","newHeight","newWidth","batch","oldHeight","oldWidth","numChannels","shape","outShape","xData","dataIdMap","get","dataId","castedData","dtype","x","xId","id","out","makeOutput","sizeFromShape","outId","disposeData","resizeBilinearConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/ResizeBilinear.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nlet wasmResizeBilinear;\nfunction setup(backend) {\n    wasmResizeBilinear = backend.wasm.cwrap(ResizeBilinear, null /*void*/, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number' // outId\n    ]);\n}\nfunction resizeBilinear(args) {\n    const { backend, inputs, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    const [newHeight, newWidth] = size;\n    const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n    const outShape = [batch, newHeight, newWidth, numChannels];\n    let xData = backend.dataIdMap.get(images.dataId);\n    let castedData;\n    if (xData.dtype !== 'float32') {\n        castedData =\n            cast({ backend, inputs: { x: images }, attrs: { dtype: 'float32' } });\n        xData = backend.dataIdMap.get(castedData.dataId);\n    }\n    const xId = xData.id;\n    const out = backend.makeOutput(outShape, 'float32');\n    if (util.sizeFromShape(images.shape) === 0) {\n        return out;\n    }\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmResizeBilinear(xId, batch, oldHeight, oldWidth, numChannels, newHeight, newWidth, alignCorners ? 1 : 0, halfPixelCenters ? 1 : 0, outId);\n    if (castedData != null) {\n        backend.disposeData(castedData.dataId);\n    }\n    return out;\n}\nexport const resizeBilinearConfig = {\n    kernelName: ResizeBilinear,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: resizeBilinear\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,EAAyBC,IAAzB,QAAqC,uBAArC;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,IAAIC,kBAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,kBAAkB,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBP,cAAnB,EAAmC;EAAK;EAAxC,EAAkD,CACnE,QADmE,EAEnE,QAFmE,EAGnE,QAHmE,EAInE,QAJmE,EAKnE,QALmE,EAMnE,QANmE,EAOnE,QAPmE,EAQnE,QARmE,EASnE,QATmE,EAUnE,QAVmE,CAU1D;EAV0D,CAAlD,CAArB;AAYH;;AACD,SAASQ,cAAT,CAAwBC,IAAxB,EAA8B;EAC1B,MAAM;IAAEJ,OAAF;IAAWK,MAAX;IAAmBC;EAAnB,IAA6BF,IAAnC;EACA,MAAM;IAAEG;EAAF,IAAaF,MAAnB;EACA,MAAM;IAAEG,YAAF;IAAgBC,gBAAhB;IAAkCC;EAAlC,IAA2CJ,KAAjD;EACA,MAAM,CAACK,SAAD,EAAYC,QAAZ,IAAwBF,IAA9B;EACA,MAAM,CAACG,KAAD,EAAQC,SAAR,EAAmBC,QAAnB,EAA6BC,WAA7B,IAA4CT,MAAM,CAACU,KAAzD;EACA,MAAMC,QAAQ,GAAG,CAACL,KAAD,EAAQF,SAAR,EAAmBC,QAAnB,EAA6BI,WAA7B,CAAjB;EACA,IAAIG,KAAK,GAAGnB,OAAO,CAACoB,SAAR,CAAkBC,GAAlB,CAAsBd,MAAM,CAACe,MAA7B,CAAZ;EACA,IAAIC,UAAJ;;EACA,IAAIJ,KAAK,CAACK,KAAN,KAAgB,SAApB,EAA+B;IAC3BD,UAAU,GACN1B,IAAI,CAAC;MAAEG,OAAF;MAAWK,MAAM,EAAE;QAAEoB,CAAC,EAAElB;MAAL,CAAnB;MAAkCD,KAAK,EAAE;QAAEkB,KAAK,EAAE;MAAT;IAAzC,CAAD,CADR;IAEAL,KAAK,GAAGnB,OAAO,CAACoB,SAAR,CAAkBC,GAAlB,CAAsBE,UAAU,CAACD,MAAjC,CAAR;EACH;;EACD,MAAMI,GAAG,GAAGP,KAAK,CAACQ,EAAlB;EACA,MAAMC,GAAG,GAAG5B,OAAO,CAAC6B,UAAR,CAAmBX,QAAnB,EAA6B,SAA7B,CAAZ;;EACA,IAAItB,IAAI,CAACkC,aAAL,CAAmBvB,MAAM,CAACU,KAA1B,MAAqC,CAAzC,EAA4C;IACxC,OAAOW,GAAP;EACH;;EACD,MAAMG,KAAK,GAAG/B,OAAO,CAACoB,SAAR,CAAkBC,GAAlB,CAAsBO,GAAG,CAACN,MAA1B,EAAkCK,EAAhD;EACA7B,kBAAkB,CAAC4B,GAAD,EAAMb,KAAN,EAAaC,SAAb,EAAwBC,QAAxB,EAAkCC,WAAlC,EAA+CL,SAA/C,EAA0DC,QAA1D,EAAoEJ,YAAY,GAAG,CAAH,GAAO,CAAvF,EAA0FC,gBAAgB,GAAG,CAAH,GAAO,CAAjH,EAAoHsB,KAApH,CAAlB;;EACA,IAAIR,UAAU,IAAI,IAAlB,EAAwB;IACpBvB,OAAO,CAACgC,WAAR,CAAoBT,UAAU,CAACD,MAA/B;EACH;;EACD,OAAOM,GAAP;AACH;;AACD,OAAO,MAAMK,oBAAoB,GAAG;EAChCC,UAAU,EAAEvC,cADoB;EAEhCwC,WAAW,EAAE,MAFmB;EAGhCC,SAAS,EAAErC,KAHqB;EAIhCsC,UAAU,EAAElC;AAJoB,CAA7B"},"metadata":{},"sourceType":"module"}