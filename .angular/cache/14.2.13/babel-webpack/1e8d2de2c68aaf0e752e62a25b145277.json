{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport { TranslateClient, TranslateTextCommand } from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport { isBytesSource } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer, getAmplifyUserAgentObject, Category, PredictionsAction } from '@aws-amplify/core';\nimport { EventStreamMarshaller } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nimport { Buffer } from 'buffer';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\n\nvar AmazonAIConvertPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n\n    _this.inputSampleRate = 44100;\n    return _this;\n  }\n\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode, translateTextCommand, data, err_1;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            logger.debug('Starting translation');\n            _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n\n            if (!region) {\n              return [2\n              /*return*/\n              , Promise.reject('region not configured for transcription')];\n            }\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _h.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n            targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n\n            if (!sourceLanguageCode || !targetLanguageCode) {\n              return [2\n              /*return*/\n              , Promise.reject('Please provide both source and target language')];\n            }\n\n            this.translateClient = new TranslateClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject({\n                category: Category.Predictions,\n                action: PredictionsAction.Convert\n              })\n            });\n            translateTextCommand = new TranslateTextCommand({\n              SourceLanguageCode: sourceLanguageCode,\n              TargetLanguageCode: targetLanguageCode,\n              Text: input.translateText.source.text\n            });\n            _h.label = 2;\n\n          case 2:\n            _h.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.translateClient.send(translateTextCommand)];\n\n          case 3:\n            data = _h.sent();\n            return [2\n            /*return*/\n            , {\n              text: data.TranslatedText,\n              language: data.TargetLanguageCode\n            }];\n\n          case 4:\n            err_1 = _h.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId, synthesizeSpeechCommand, data, response, arrayBuffer, blob, url, err_2;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n            if (!input.textToSpeech.source) {\n              return [2\n              /*return*/\n              , Promise.reject('Source needs to be provided in the input')];\n            }\n\n            voiceId = input.textToSpeech.voiceId || VoiceId;\n\n            if (!region) {\n              return [2\n              /*return*/\n              , Promise.reject('Region was undefined. Did you enable speech generator using amplify CLI?')];\n            }\n\n            if (!voiceId) {\n              return [2\n              /*return*/\n              , Promise.reject('VoiceId was undefined.')];\n            }\n\n            this.pollyClient = new PollyClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: getAmplifyUserAgentObject({\n                category: Category.Predictions,\n                action: PredictionsAction.Convert\n              })\n            });\n            synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n              OutputFormat: 'mp3',\n              Text: input.textToSpeech.source.text,\n              VoiceId: voiceId,\n              TextType: 'text',\n              SampleRate: '24000'\n            });\n            _f.label = 2;\n\n          case 2:\n            _f.trys.push([2, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.pollyClient.send(synthesizeSpeechCommand)];\n\n          case 3:\n            data = _f.sent();\n            response = new Response(data.AudioStream);\n            return [4\n            /*yield*/\n            , response.arrayBuffer()];\n\n          case 4:\n            arrayBuffer = _f.sent();\n            blob = new Blob([arrayBuffer], {\n              type: data.ContentType\n            });\n            url = URL.createObjectURL(blob);\n            return [2\n            /*return*/\n            , {\n              speech: {\n                url: url\n              },\n              audioStream: arrayBuffer,\n              text: input.textToSpeech.source.text\n            }];\n\n          case 5:\n            err_2 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_2)];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_3, err_4;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _h.trys.push([0, 7,, 8]);\n\n            logger.debug('starting transcription..');\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _h.sent();\n\n            if (!credentials) {\n              return [2\n              /*return*/\n              , Promise.reject('No credentials')];\n            }\n\n            _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n\n            if (!region) {\n              return [2\n              /*return*/\n              , Promise.reject('region not configured for transcription')];\n            }\n\n            if (!languageCode) {\n              return [2\n              /*return*/\n              , Promise.reject('languageCode not configured or provided for transcription')];\n            }\n\n            _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n            if (!isBytesSource(source)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.openConnectionWithTranscribe({\n              credentials: credentials,\n              region: region,\n              languageCode: language\n            })];\n\n          case 2:\n            connection = _h.sent();\n            _h.label = 3;\n\n          case 3:\n            _h.trys.push([3, 5,, 6]);\n\n            return [4\n            /*yield*/\n            , this.sendDataToTranscribe({\n              connection: connection,\n              raw: source.bytes,\n              languageCode: language\n            })];\n\n          case 4:\n            fullText = _h.sent();\n            return [2\n            /*return*/\n            , {\n              transcription: {\n                fullText: fullText\n              }\n            }];\n\n          case 5:\n            err_3 = _h.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_3)];\n\n          case 6:\n            return [2\n            /*return*/\n            , Promise.reject('Source types other than byte source are not supported.')];\n\n          case 7:\n            err_4 = _h.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_4.name + ': ' + err_4.message)];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return decodedMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n\n    var connection = _a.connection,\n        raw = _a.raw,\n        languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n\n      logger.debug({\n        raw: raw\n      });\n\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n\n          _this.sendEncodedDataToTranscribe(connection, data, languageCode);\n        }\n      } else {\n        // If Buffer\n        _this.sendEncodedDataToTranscribe(connection, raw, languageCode);\n      } // sending end frame\n\n\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data, languageCode) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data,\n      outputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? 8000 : 16000\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n\n    return buffer;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer,\n        _b = _a.outputSampleRate,\n        outputSampleRate = _b === void 0 ? 16000 : _b;\n\n    if (outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n\n    var sampleRateRatio = this.inputSampleRate / outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n          count = 0;\n\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n\n    return result;\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n\n    var userCredentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n        region = _a.region,\n        languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=\" + (LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000') + \"&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider);\n\nexport { AmazonAIConvertPredictionsProvider };","map":{"version":3,"names":["__awaiter","__extends","__generator","AbstractConvertPredictionsProvider","TranslateClient","TranslateTextCommand","PollyClient","SynthesizeSpeechCommand","isBytesSource","Credentials","ConsoleLogger","Logger","Signer","getAmplifyUserAgentObject","Category","PredictionsAction","EventStreamMarshaller","fromUtf8","toUtf8","Buffer","logger","eventBuilder","LANGUAGES_CODE_IN_8KHZ","AmazonAIConvertPredictionsProvider","_super","_this","call","inputSampleRate","prototype","getProviderName","translateText","input","_a","_b","_c","_d","_e","sourceLanguage","_f","targetLanguage","_g","region","credentials","sourceLanguageCode","targetLanguageCode","translateTextCommand","data","err_1","_h","label","debug","_config","defaults","Promise","reject","get","sent","source","language","translateClient","customUserAgent","category","Predictions","action","Convert","SourceLanguageCode","TargetLanguageCode","Text","text","trys","push","send","TranslatedText","convertTextToSpeech","VoiceId","voiceId","synthesizeSpeechCommand","response","arrayBuffer","blob","url","err_2","speechGenerator","textToSpeech","pollyClient","OutputFormat","TextType","SampleRate","Response","AudioStream","Blob","type","ContentType","URL","createObjectURL","speech","audioStream","convertSpeechToText","languageCode","connection","fullText","err_3","err_4","transcription","openConnectionWithTranscribe","sendDataToTranscribe","raw","bytes","name","message","serializeDataFromTranscribe","decodedMessage","transcribeMessage","unmarshall","from","transcribeMessageJson","JSON","parse","body","headers","value","stringify","Message","Error","Transcript","Results","length","Alternatives","IsPartial","transcript","res","rej","onmessage","err","onerror","errorEvent","onclose","closeEvent","trim","Array","isArray","i","slice","sendEncodedDataToTranscribe","endFrameEventMessage","getAudioEventMessage","endFrameBinary","marshall","downsampledBuffer","downsampleBuffer","buffer","outputSampleRate","includes","pcmEncodedBuffer","pcmEncode","audioEventMessage","binary","offset","ArrayBuffer","view","DataView","s","Math","max","min","setInt16","sampleRateRatio","newLength","round","result","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","userCredentials","access_key","secret_key","session_token","signedUrl","accessKeyId","secretAccessKey","sessionToken","generateTranscribeUrl","WebSocket","binaryType","onopen","join","signUrl","service"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/predictions/lib-esm/Providers/AmazonAIConvertPredictionsProvider.js"],"sourcesContent":["import { __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport { TranslateClient, TranslateTextCommand, } from '@aws-sdk/client-translate';\nimport { PollyClient, SynthesizeSpeechCommand } from '@aws-sdk/client-polly';\nimport { isBytesSource, } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer, getAmplifyUserAgentObject, Category, PredictionsAction, } from '@aws-amplify/core';\nimport { EventStreamMarshaller, } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nimport { Buffer } from 'buffer';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar LANGUAGES_CODE_IN_8KHZ = ['fr-FR', 'en-AU', 'en-GB', 'fr-CA'];\nvar AmazonAIConvertPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AmazonAIConvertPredictionsProvider, _super);\n    function AmazonAIConvertPredictionsProvider() {\n        var _this = _super.call(this) || this;\n        _this.inputSampleRate = 44100;\n        return _this;\n    }\n    AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n        return 'AmazonAIConvertPredictionsProvider';\n    };\n    AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode, translateTextCommand, data, err_1;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        logger.debug('Starting translation');\n                        _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n                        if (!region) {\n                            return [2 /*return*/, Promise.reject('region not configured for transcription')];\n                        }\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _h.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n                        targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n                        if (!sourceLanguageCode || !targetLanguageCode) {\n                            return [2 /*return*/, Promise.reject('Please provide both source and target language')];\n                        }\n                        this.translateClient = new TranslateClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgentObject({\n                                category: Category.Predictions,\n                                action: PredictionsAction.Convert,\n                            }),\n                        });\n                        translateTextCommand = new TranslateTextCommand({\n                            SourceLanguageCode: sourceLanguageCode,\n                            TargetLanguageCode: targetLanguageCode,\n                            Text: input.translateText.source.text,\n                        });\n                        _h.label = 2;\n                    case 2:\n                        _h.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.translateClient.send(translateTextCommand)];\n                    case 3:\n                        data = _h.sent();\n                        return [2 /*return*/, {\n                                text: data.TranslatedText,\n                                language: data.TargetLanguageCode,\n                            }];\n                    case 4:\n                        err_1 = _h.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId, synthesizeSpeechCommand, data, response, arrayBuffer, blob, url, err_2;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n                        if (!input.textToSpeech.source) {\n                            return [2 /*return*/, Promise.reject('Source needs to be provided in the input')];\n                        }\n                        voiceId = input.textToSpeech.voiceId || VoiceId;\n                        if (!region) {\n                            return [2 /*return*/, Promise.reject('Region was undefined. Did you enable speech generator using amplify CLI?')];\n                        }\n                        if (!voiceId) {\n                            return [2 /*return*/, Promise.reject('VoiceId was undefined.')];\n                        }\n                        this.pollyClient = new PollyClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgentObject({\n                                category: Category.Predictions,\n                                action: PredictionsAction.Convert,\n                            }),\n                        });\n                        synthesizeSpeechCommand = new SynthesizeSpeechCommand({\n                            OutputFormat: 'mp3',\n                            Text: input.textToSpeech.source.text,\n                            VoiceId: voiceId,\n                            TextType: 'text',\n                            SampleRate: '24000',\n                        });\n                        _f.label = 2;\n                    case 2:\n                        _f.trys.push([2, 5, , 6]);\n                        return [4 /*yield*/, this.pollyClient.send(synthesizeSpeechCommand)];\n                    case 3:\n                        data = _f.sent();\n                        response = new Response(data.AudioStream);\n                        return [4 /*yield*/, response.arrayBuffer()];\n                    case 4:\n                        arrayBuffer = _f.sent();\n                        blob = new Blob([arrayBuffer], {\n                            type: data.ContentType,\n                        });\n                        url = URL.createObjectURL(blob);\n                        return [2 /*return*/, {\n                                speech: { url: url },\n                                audioStream: arrayBuffer,\n                                text: input.textToSpeech.source.text,\n                            }];\n                    case 5:\n                        err_2 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_2)];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_3, err_4;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        _h.trys.push([0, 7, , 8]);\n                        logger.debug('starting transcription..');\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _h.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n                        if (!region) {\n                            return [2 /*return*/, Promise.reject('region not configured for transcription')];\n                        }\n                        if (!languageCode) {\n                            return [2 /*return*/, Promise.reject('languageCode not configured or provided for transcription')];\n                        }\n                        _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n                        if (!isBytesSource(source)) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.openConnectionWithTranscribe({\n                                credentials: credentials,\n                                region: region,\n                                languageCode: language,\n                            })];\n                    case 2:\n                        connection = _h.sent();\n                        _h.label = 3;\n                    case 3:\n                        _h.trys.push([3, 5, , 6]);\n                        return [4 /*yield*/, this.sendDataToTranscribe({\n                                connection: connection,\n                                raw: source.bytes,\n                                languageCode: language,\n                            })];\n                    case 4:\n                        fullText = _h.sent();\n                        return [2 /*return*/, {\n                                transcription: {\n                                    fullText: fullText,\n                                },\n                            }];\n                    case 5:\n                        err_3 = _h.sent();\n                        return [2 /*return*/, Promise.reject(err_3)];\n                    case 6: return [2 /*return*/, Promise.reject('Source types other than byte source are not supported.')];\n                    case 7:\n                        err_4 = _h.sent();\n                        return [2 /*return*/, Promise.reject(err_4.name + ': ' + err_4.message)];\n                    case 8: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n        var decodedMessage = '';\n        var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n        var transcribeMessageJson = JSON.parse(toUtf8(transcribeMessage.body));\n        if (transcribeMessage.headers[':message-type'].value === 'exception') {\n            logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n            throw new Error(transcribeMessageJson.Message);\n        }\n        else if (transcribeMessage.headers[':message-type'].value === 'event') {\n            if (transcribeMessageJson.Transcript.Results.length > 0) {\n                if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n                    if (transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n                        .Transcript.length > 0) {\n                        if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n                            decodedMessage =\n                                transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n                                    .Transcript + '\\n';\n                            logger.debug({ decodedMessage: decodedMessage });\n                        }\n                        else {\n                            logger.debug({\n                                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0],\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return decodedMessage;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n        var _this = this;\n        var connection = _a.connection, raw = _a.raw, languageCode = _a.languageCode;\n        return new Promise(function (res, rej) {\n            var fullText = '';\n            connection.onmessage = function (message) {\n                try {\n                    var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n                    if (decodedMessage) {\n                        fullText += decodedMessage + ' ';\n                    }\n                }\n                catch (err) {\n                    logger.debug(err);\n                    rej(err.message);\n                }\n            };\n            connection.onerror = function (errorEvent) {\n                logger.debug({ errorEvent: errorEvent });\n                rej('failed to transcribe, network error');\n            };\n            connection.onclose = function (closeEvent) {\n                logger.debug({ closeEvent: closeEvent });\n                return res(fullText.trim());\n            };\n            logger.debug({ raw: raw });\n            if (Array.isArray(raw)) {\n                for (var i = 0; i < raw.length - 1023; i += 1024) {\n                    var data = raw.slice(i, i + 1024);\n                    _this.sendEncodedDataToTranscribe(connection, data, languageCode);\n                }\n            }\n            else {\n                // If Buffer\n                _this.sendEncodedDataToTranscribe(connection, raw, languageCode);\n            }\n            // sending end frame\n            var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n            var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n            connection.send(endFrameBinary);\n        });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data, languageCode) {\n        var downsampledBuffer = this.downsampleBuffer({\n            buffer: data,\n            outputSampleRate: LANGUAGES_CODE_IN_8KHZ.includes(languageCode)\n                ? 8000\n                : 16000,\n        });\n        var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n        var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n        var binary = eventBuilder.marshall(audioEventMessage);\n        connection.send(binary);\n    };\n    AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n        var audioEventMessage = {\n            body: buffer,\n            headers: {\n                ':message-type': {\n                    type: 'string',\n                    value: 'event',\n                },\n                ':event-type': {\n                    type: 'string',\n                    value: 'AudioEvent',\n                },\n            },\n        };\n        return audioEventMessage;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n        var offset = 0;\n        var buffer = new ArrayBuffer(input.length * 2);\n        var view = new DataView(buffer);\n        for (var i = 0; i < input.length; i++, offset += 2) {\n            var s = Math.max(-1, Math.min(1, input[i]));\n            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n        }\n        return buffer;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n        var buffer = _a.buffer, _b = _a.outputSampleRate, outputSampleRate = _b === void 0 ? 16000 : _b;\n        if (outputSampleRate === this.inputSampleRate) {\n            return buffer;\n        }\n        var sampleRateRatio = this.inputSampleRate / outputSampleRate;\n        var newLength = Math.round(buffer.length / sampleRateRatio);\n        var result = new Float32Array(newLength);\n        var offsetResult = 0;\n        var offsetBuffer = 0;\n        while (offsetResult < result.length) {\n            var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n            var accum = 0, count = 0;\n            for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n                accum += buffer[i];\n                count++;\n            }\n            result[offsetResult] = accum / count;\n            offsetResult++;\n            offsetBuffer = nextOffsetBuffer;\n        }\n        return result;\n    };\n    AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n        var _this = this;\n        var userCredentials = _a.credentials, region = _a.region, languageCode = _a.languageCode;\n        return new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {\n            var access_key, secret_key, session_token, credentials, signedUrl, connection;\n            return __generator(this, function (_a) {\n                access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n                credentials = {\n                    access_key: access_key,\n                    secret_key: secret_key,\n                    session_token: session_token,\n                };\n                signedUrl = this.generateTranscribeUrl({\n                    credentials: credentials,\n                    region: region,\n                    languageCode: languageCode,\n                });\n                logger.debug('connecting...');\n                connection = new WebSocket(signedUrl);\n                connection.binaryType = 'arraybuffer';\n                connection.onopen = function () {\n                    logger.debug('connected');\n                    res(connection);\n                };\n                return [2 /*return*/];\n            });\n        }); });\n    };\n    AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n        var credentials = _a.credentials, region = _a.region, languageCode = _a.languageCode;\n        var url = [\n            \"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\",\n            '/stream-transcription-websocket?',\n            \"media-encoding=pcm&\",\n            \"sample-rate=\" + (LANGUAGES_CODE_IN_8KHZ.includes(languageCode) ? '8000' : '16000') + \"&\",\n            \"language-code=\" + languageCode,\n        ].join('');\n        var signedUrl = Signer.signUrl(url, credentials, { region: region, service: 'transcribe' }, 300);\n        return signedUrl;\n    };\n    return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider));\nexport { AmazonAIConvertPredictionsProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}