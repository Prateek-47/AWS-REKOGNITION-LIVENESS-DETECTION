{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\n\nvar InteractionsClass =\n/** @class */\nfunction () {\n  /**\n   * Initialize PubSub with AWS configurations\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   */\n  function InteractionsClass(options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._options = options;\n    logger.debug('Interactions Options', this._options);\n    this._pluggables = {};\n  }\n\n  InteractionsClass.prototype.getModuleName = function () {\n    return 'Interactions';\n  };\n  /**\n   *\n   * @param {InteractionsOptions} options - Configuration object for Interactions\n   * @return {InteractionsOptions} - The current configuration\n   */\n\n\n  InteractionsClass.prototype.configure = function (options) {\n    var _this = this;\n\n    var opt = options ? options.Interactions || options : {};\n    logger.debug('configure Interactions', {\n      opt: opt\n    });\n    this._options = __assign(__assign({\n      bots: {}\n    }, opt), opt.Interactions);\n    var aws_bots_config = this._options.aws_bots_config;\n    var bots_config = this._options.bots;\n\n    if (!Object.keys(bots_config).length && aws_bots_config) {\n      // Convert aws_bots_config to bots object\n      if (Array.isArray(aws_bots_config)) {\n        aws_bots_config.forEach(function (bot) {\n          _this._options.bots[bot.name] = bot;\n        });\n      }\n    } // configure bots to their specific providers\n\n\n    Object.keys(bots_config).forEach(function (botKey) {\n      var _a;\n\n      var bot = bots_config[botKey];\n      var providerName = bot.providerName || 'AWSLexProvider'; // add default provider if required\n\n      if (!_this._pluggables.AWSLexProvider && providerName === 'AWSLexProvider') {\n        _this._pluggables.AWSLexProvider = new AWSLexProvider();\n      } // configure bot with it's respective provider\n\n\n      if (_this._pluggables[providerName]) {\n        _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n      } else {\n        logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n      }\n    });\n    return this._options;\n  };\n\n  InteractionsClass.prototype.addPluggable = function (pluggable) {\n    var _this = this;\n\n    if (pluggable && pluggable.getCategory() === 'Interactions') {\n      if (!this._pluggables[pluggable.getProviderName()]) {\n        // configure bots for the new plugin\n        Object.keys(this._options.bots).filter(function (botKey) {\n          return _this._options.bots[botKey].providerName === pluggable.getProviderName();\n        }).forEach(function (botKey) {\n          var _a;\n\n          var bot = _this._options.bots[botKey];\n          pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n        });\n        this._pluggables[pluggable.getProviderName()] = pluggable;\n        return;\n      } else {\n        throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n      }\n    }\n  };\n\n  InteractionsClass.prototype.send = function (botname, message) {\n    return __awaiter(this, void 0, void 0, function () {\n      var botProvider;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._options.bots || !this._options.bots[botname]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botname + ' does not exist')];\n            }\n\n            botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n            if (!this._pluggables[botProvider]) {\n              return [2\n              /*return*/\n              , Promise.reject('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?')];\n            }\n\n            return [4\n            /*yield*/\n            , this._pluggables[botProvider].sendMessage(botname, message)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  InteractionsClass.prototype.onComplete = function (botname, callback) {\n    if (!this._options.bots || !this._options.bots[botname]) {\n      throw new Error('Bot ' + botname + ' does not exist');\n    }\n\n    var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n\n    if (!this._pluggables[botProvider]) {\n      throw new Error('Bot ' + botProvider + ' does not have valid pluggin did you try addPluggable first?');\n    }\n\n    this._pluggables[botProvider].onComplete(botname, callback);\n  };\n\n  return InteractionsClass;\n}();\n\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);","map":{"version":3,"names":["__assign","__awaiter","__generator","Amplify","ConsoleLogger","Logger","AWSLexProvider","logger","InteractionsClass","options","_options","debug","_pluggables","prototype","getModuleName","configure","_this","opt","Interactions","bots","aws_bots_config","bots_config","Object","keys","length","Array","isArray","forEach","bot","name","botKey","_a","providerName","addPluggable","pluggable","getCategory","getProviderName","filter","Error","send","botname","message","botProvider","label","Promise","reject","sendMessage","sent","onComplete","callback","register"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/interactions/lib-esm/Interactions.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\nvar InteractionsClass = /** @class */ (function () {\n    /**\n     * Initialize PubSub with AWS configurations\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     */\n    function InteractionsClass(options) {\n        if (options === void 0) { options = {}; }\n        this._options = options;\n        logger.debug('Interactions Options', this._options);\n        this._pluggables = {};\n    }\n    InteractionsClass.prototype.getModuleName = function () {\n        return 'Interactions';\n    };\n    /**\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     * @return {InteractionsOptions} - The current configuration\n     */\n    InteractionsClass.prototype.configure = function (options) {\n        var _this = this;\n        var opt = options ? options.Interactions || options : {};\n        logger.debug('configure Interactions', { opt: opt });\n        this._options = __assign(__assign({ bots: {} }, opt), opt.Interactions);\n        var aws_bots_config = this._options.aws_bots_config;\n        var bots_config = this._options.bots;\n        if (!Object.keys(bots_config).length && aws_bots_config) {\n            // Convert aws_bots_config to bots object\n            if (Array.isArray(aws_bots_config)) {\n                aws_bots_config.forEach(function (bot) {\n                    _this._options.bots[bot.name] = bot;\n                });\n            }\n        }\n        // configure bots to their specific providers\n        Object.keys(bots_config).forEach(function (botKey) {\n            var _a;\n            var bot = bots_config[botKey];\n            var providerName = bot.providerName || 'AWSLexProvider';\n            // add default provider if required\n            if (!_this._pluggables.AWSLexProvider &&\n                providerName === 'AWSLexProvider') {\n                _this._pluggables.AWSLexProvider = new AWSLexProvider();\n            }\n            // configure bot with it's respective provider\n            if (_this._pluggables[providerName]) {\n                _this._pluggables[providerName].configure((_a = {}, _a[bot.name] = bot, _a));\n            }\n            else {\n                logger.debug(\"bot \" + bot.name + \" was not configured as \" + providerName + \" provider was not found\");\n            }\n        });\n        return this._options;\n    };\n    InteractionsClass.prototype.addPluggable = function (pluggable) {\n        var _this = this;\n        if (pluggable && pluggable.getCategory() === 'Interactions') {\n            if (!this._pluggables[pluggable.getProviderName()]) {\n                // configure bots for the new plugin\n                Object.keys(this._options.bots)\n                    .filter(function (botKey) {\n                    return _this._options.bots[botKey].providerName ===\n                        pluggable.getProviderName();\n                })\n                    .forEach(function (botKey) {\n                    var _a;\n                    var bot = _this._options.bots[botKey];\n                    pluggable.configure((_a = {}, _a[bot.name] = bot, _a));\n                });\n                this._pluggables[pluggable.getProviderName()] = pluggable;\n                return;\n            }\n            else {\n                throw new Error('Pluggable ' + pluggable.getProviderName() + ' already plugged');\n            }\n        }\n    };\n    InteractionsClass.prototype.send = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var botProvider;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._options.bots || !this._options.bots[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n                        if (!this._pluggables[botProvider]) {\n                            return [2 /*return*/, Promise.reject('Bot ' +\n                                    botProvider +\n                                    ' does not have valid pluggin did you try addPluggable first?')];\n                        }\n                        return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    InteractionsClass.prototype.onComplete = function (botname, callback) {\n        if (!this._options.bots || !this._options.bots[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n        if (!this._pluggables[botProvider]) {\n            throw new Error('Bot ' +\n                botProvider +\n                ' does not have valid pluggin did you try addPluggable first?');\n        }\n        this._pluggables[botProvider].onComplete(botname, callback);\n    };\n    return InteractionsClass;\n}());\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass();\nAmplify.register(Interactions);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}