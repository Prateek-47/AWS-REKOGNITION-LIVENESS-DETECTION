{"ast":null,"code":"import { __assign, __awaiter, __extends, __generator } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Category, Credentials, PredictionsAction, getAmplifyUserAgentObject } from '@aws-amplify/core';\nimport { Storage } from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport { RekognitionClient, SearchFacesByImageCommand, DetectTextCommand, DetectLabelsCommand, DetectFacesCommand, DetectModerationLabelsCommand, RecognizeCelebritiesCommand } from '@aws-sdk/client-rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection } from '../types';\nimport { TextractClient, DetectDocumentTextCommand, AnalyzeDocumentCommand } from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks } from './IdentifyTextUtils';\n\nvar AmazonAIIdentifyPredictionsProvider =\n/** @class */\nfunction (_super) {\n  __extends(AmazonAIIdentifyPredictionsProvider, _super);\n\n  function AmazonAIIdentifyPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n\n  AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIIdentifyPredictionsProvider';\n  };\n  /**\n   * Verify user input source and converts it into source object readable by Rekognition and Textract.\n   * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n   * @param {IdentifySource} source - User input source that directs to the object user wants\n   * to identify (storage, file, or bytes).\n   * @return {Promise<Image>} - Promise resolving to the converted source object.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n    return new Promise(function (res, rej) {\n      if (isStorageSource(source)) {\n        var storageConfig = {\n          level: source.level,\n          identityId: source.identityId\n        };\n        Storage.get(source.key, storageConfig).then(function (url) {\n          var parser = /https:\\/\\/([a-zA-Z0-9%\\-_.]+)\\.s3\\.[A-Za-z0-9%\\-._~]+\\/([a-zA-Z0-9%\\-._~/]+)\\?/;\n          var parsedURL = url.match(parser);\n          if (parsedURL.length < 3) rej('Invalid S3 key was given.');\n          res({\n            S3Object: {\n              Bucket: parsedURL[1],\n              Name: decodeURIComponent(parsedURL[2])\n            }\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isFileSource(source)) {\n        blobToArrayBuffer(source.file).then(function (buffer) {\n          res({\n            Bytes: new Uint8Array(buffer)\n          });\n        }).catch(function (err) {\n          return rej(err);\n        });\n      } else if (isBytesSource(source)) {\n        var bytes = source.bytes;\n\n        if (bytes instanceof Blob) {\n          blobToArrayBuffer(bytes).then(function (buffer) {\n            res({\n              Bytes: new Uint8Array(buffer)\n            });\n          }).catch(function (err) {\n            return rej(err);\n          });\n        }\n\n        if (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n          res({\n            Bytes: new Uint8Array(bytes)\n          });\n        } // everything else can be directly passed to Rekognition / Textract.\n\n\n        res({\n          Bytes: bytes\n        });\n      } else {\n        rej('Input source is not configured correctly.');\n      }\n    });\n  };\n  /**\n   * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n   * image and converts it into machine-readable text.\n   * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n   * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, err_1, format, featureTypes, textractParam, rekognitionParam, detectTextCommand, rekognitionData, rekognitionResponse, detectDocumentTextCommand, Blocks, err_2, param, analyzeDocumentCommand, Blocks, err_3;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: _getPredictionsIdentifyAmplifyUserAgent()\n            });\n            this.textractClient = new TextractClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: _getPredictionsIdentifyAmplifyUserAgent()\n            });\n            _f.label = 2;\n\n          case 2:\n            _f.trys.push([2, 4,, 5]);\n\n            return [4\n            /*yield*/\n            , this.configureSource(input.text.source)];\n\n          case 3:\n            inputDocument = _f.sent();\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_1 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_1)];\n\n          case 5:\n            format = input.text.format || configFormat;\n            featureTypes = [];\n            if (format === 'FORM' || format === 'ALL') featureTypes.push('FORMS');\n            if (format === 'TABLE' || format === 'ALL') featureTypes.push('TABLES');\n            if (!(featureTypes.length === 0)) return [3\n            /*break*/\n            , 11];\n            textractParam = {\n              Document: inputDocument\n            };\n            rekognitionParam = {\n              Image: inputDocument\n            };\n            _f.label = 6;\n\n          case 6:\n            _f.trys.push([6, 9,, 10]);\n\n            detectTextCommand = new DetectTextCommand(rekognitionParam);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectTextCommand)];\n\n          case 7:\n            rekognitionData = _f.sent();\n            rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n\n            if (rekognitionResponse.text.words.length < 50) {\n              // did not hit the word limit, return the data\n              return [2\n              /*return*/\n              , rekognitionResponse];\n            }\n\n            detectDocumentTextCommand = new DetectDocumentTextCommand(textractParam);\n            return [4\n            /*yield*/\n            , this.textractClient.send(detectDocumentTextCommand)];\n\n          case 8:\n            Blocks = _f.sent().Blocks;\n\n            if (rekognitionData.TextDetections.length > Blocks.length) {\n              return [2\n              /*return*/\n              , rekognitionResponse];\n            }\n\n            return [2\n            /*return*/\n            , categorizeTextractBlocks(Blocks)];\n\n          case 9:\n            err_2 = _f.sent();\n            Promise.reject(err_2);\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            return [3\n            /*break*/\n            , 15];\n\n          case 11:\n            param = {\n              Document: inputDocument,\n              FeatureTypes: featureTypes\n            };\n            _f.label = 12;\n\n          case 12:\n            _f.trys.push([12, 14,, 15]);\n\n            analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n            return [4\n            /*yield*/\n            , this.textractClient.send(analyzeDocumentCommand)];\n\n          case 13:\n            Blocks = _f.sent().Blocks;\n            return [2\n            /*return*/\n            , categorizeTextractBlocks(Blocks)];\n\n          case 14:\n            err_3 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_3)];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Identify instances of real world entities from an image and if it contains unsafe content.\n   * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, _e, type, inputImage_1, param, servicePromises, entityType, err_4;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            _f.trys.push([0, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _f.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: _getPredictionsIdentifyAmplifyUserAgent()\n            });\n            return [4\n            /*yield*/\n            , this.configureSource(input.labels.source).then(function (data) {\n              inputImage_1 = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 2:\n            _f.sent();\n\n            param = {\n              Image: inputImage_1\n            };\n            servicePromises = [];\n            entityType = input.labels.type || type;\n\n            if (entityType === 'LABELS' || entityType === 'ALL') {\n              servicePromises.push(this.detectLabels(param));\n            }\n\n            if (entityType === 'UNSAFE' || entityType === 'ALL') {\n              servicePromises.push(this.detectModerationLabels(param));\n            }\n\n            return [2\n            /*return*/\n            , Promise.all(servicePromises).then(function (data) {\n              var identifyResult = {}; // concatenate resolved promises to a single object\n\n              data.forEach(function (val) {\n                identifyResult = __assign(__assign({}, identifyResult), val);\n              });\n              return identifyResult;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 3:\n            err_4 = _f.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_4)];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectLabels and organizes the returned data.\n   * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectLabelsCommand, data, detectLabelData, err_5;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            detectLabelsCommand = new DetectLabelsCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectLabelsCommand)];\n\n          case 1:\n            data = _a.sent();\n            if (!data.Labels) return [2\n            /*return*/\n            , {\n              labels: null\n            }]; // no image was detected\n\n            detectLabelData = data.Labels.map(function (val) {\n              var boxes = val.Instances ? val.Instances.map(function (val) {\n                return makeCamelCase(val.BoundingBox);\n              }) : undefined;\n              return {\n                name: val.Name,\n                boundingBoxes: boxes,\n                metadata: {\n                  confidence: val.Confidence,\n                  parents: makeCamelCaseArray(val.Parents)\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              labels: detectLabelData\n            }];\n\n          case 2:\n            err_5 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_5)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Calls Rekognition.detectModerationLabels and organizes the returned data.\n   * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n   * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n    return __awaiter(this, void 0, void 0, function () {\n      var detectModerationLabelsCommand, data, err_6;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            detectModerationLabelsCommand = new DetectModerationLabelsCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectModerationLabelsCommand)];\n\n          case 1:\n            data = _a.sent();\n\n            if (data.ModerationLabels.length !== 0) {\n              return [2\n              /*return*/\n              , {\n                unsafe: 'YES'\n              }];\n            } else {\n              return [2\n              /*return*/\n              , {\n                unsafe: 'NO'\n              }];\n            }\n\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            err_6 = _a.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_6)];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Identify faces within an image that is provided as input, and match faces from a collection\n   * or identify celebrities.\n   * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n   * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n   */\n\n\n  AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, recognizeCelebritiesCommand, data, faces, err_7, _j, _k, collectionId, _l, maxFaces, updatedParam, searchFacesByImageCommand, data, faces, err_8, detectFacesCommand, data, faces, err_9;\n\n      var _this = this;\n\n      return __generator(this, function (_m) {\n        switch (_m.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , Credentials.get()];\n\n          case 1:\n            credentials = _m.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.reject('No credentials')];\n            _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h; // default arguments\n\n            this.rekognitionClient = new RekognitionClient({\n              region: region,\n              credentials: credentials,\n              customUserAgent: _getPredictionsIdentifyAmplifyUserAgent()\n            });\n            return [4\n            /*yield*/\n            , this.configureSource(input.entities.source).then(function (data) {\n              return inputImage = data;\n            }).catch(function (err) {\n              return Promise.reject(err);\n            })];\n\n          case 2:\n            _m.sent();\n\n            param = {\n              Attributes: ['ALL'],\n              Image: inputImage\n            };\n            if (!(isIdentifyCelebrities(input.entities) && input.entities.celebrityDetection)) return [3\n            /*break*/\n            , 7];\n\n            if (!celebrityDetectionEnabled) {\n              return [2\n              /*return*/\n              , Promise.reject('Error: You have to enable celebrity detection first')];\n            }\n\n            _m.label = 3;\n\n          case 3:\n            _m.trys.push([3, 5,, 6]);\n\n            recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(recognizeCelebritiesCommand)];\n\n          case 4:\n            data = _m.sent();\n            faces = data.CelebrityFaces.map(function (celebrity) {\n              return {\n                boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), {\n                  pose: makeCamelCase(celebrity.Face.Pose)\n                })\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 5:\n            err_7 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_7)];\n\n          case 6:\n            return [3\n            /*break*/\n            , 15];\n\n          case 7:\n            if (!(isIdentifyFromCollection(input.entities) && input.entities.collection)) return [3\n            /*break*/\n            , 12];\n            _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n            updatedParam = __assign(__assign({}, param), {\n              CollectionId: collectionId,\n              MaxFaces: maxFaces\n            });\n            _m.label = 8;\n\n          case 8:\n            _m.trys.push([8, 10,, 11]);\n\n            searchFacesByImageCommand = new SearchFacesByImageCommand(updatedParam);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(searchFacesByImageCommand)];\n\n          case 9:\n            data = _m.sent();\n            faces = data.FaceMatches.map(function (val) {\n              return {\n                boundingBox: makeCamelCase(val.Face.BoundingBox),\n                metadata: {\n                  externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                  similarity: val.Similarity\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 10:\n            err_8 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_8)];\n\n          case 11:\n            return [3\n            /*break*/\n            , 15];\n\n          case 12:\n            _m.trys.push([12, 14,, 15]);\n\n            detectFacesCommand = new DetectFacesCommand(param);\n            return [4\n            /*yield*/\n            , this.rekognitionClient.send(detectFacesCommand)];\n\n          case 13:\n            data = _m.sent();\n            faces = data.FaceDetails.map(function (detail) {\n              // face attributes keys we want to extract from Rekognition's response\n              var attributeKeys = ['Smile', 'Eyeglasses', 'Sunglasses', 'Gender', 'Beard', 'Mustache', 'EyesOpen', 'MouthOpen'];\n              var faceAttributes = makeCamelCase(detail, attributeKeys);\n\n              if (detail.Emotions) {\n                faceAttributes['emotions'] = detail.Emotions.map(function (emotion) {\n                  return emotion.Type;\n                });\n              }\n\n              return {\n                boundingBox: makeCamelCase(detail.BoundingBox),\n                landmarks: makeCamelCaseArray(detail.Landmarks),\n                ageRange: makeCamelCase(detail.AgeRange),\n                attributes: faceAttributes,\n                metadata: {\n                  confidence: detail.Confidence,\n                  pose: makeCamelCase(detail.Pose)\n                }\n              };\n            });\n            return [2\n            /*return*/\n            , {\n              entities: faces\n            }];\n\n          case 14:\n            err_9 = _m.sent();\n            return [2\n            /*return*/\n            , Promise.reject(err_9)];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n    return ('' + externalImageId).replace(/::/g, '/');\n  };\n\n  return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider);\n\nexport { AmazonAIIdentifyPredictionsProvider };\n\nfunction _getPredictionsIdentifyAmplifyUserAgent() {\n  return getAmplifyUserAgentObject({\n    category: Category.Predictions,\n    action: PredictionsAction.Identify\n  });\n}","map":{"version":3,"names":["__assign","__awaiter","__extends","__generator","Category","Credentials","PredictionsAction","getAmplifyUserAgentObject","Storage","AbstractIdentifyPredictionsProvider","RekognitionClient","SearchFacesByImageCommand","DetectTextCommand","DetectLabelsCommand","DetectFacesCommand","DetectModerationLabelsCommand","RecognizeCelebritiesCommand","isStorageSource","isFileSource","isBytesSource","isIdentifyCelebrities","isIdentifyFromCollection","TextractClient","DetectDocumentTextCommand","AnalyzeDocumentCommand","makeCamelCase","makeCamelCaseArray","blobToArrayBuffer","categorizeRekognitionBlocks","categorizeTextractBlocks","AmazonAIIdentifyPredictionsProvider","_super","call","prototype","getProviderName","configureSource","source","Promise","res","rej","storageConfig","level","identityId","get","key","then","url","parser","parsedURL","match","length","S3Object","Bucket","Name","decodeURIComponent","catch","err","file","buffer","Bytes","Uint8Array","bytes","Blob","ArrayBuffer","Buffer","identifyText","input","credentials","_a","_b","_c","region","_d","_e","configFormat","inputDocument","err_1","format","featureTypes","textractParam","rekognitionParam","detectTextCommand","rekognitionData","rekognitionResponse","detectDocumentTextCommand","Blocks","err_2","param","analyzeDocumentCommand","err_3","_f","label","sent","reject","_config","defaults","rekognitionClient","customUserAgent","_getPredictionsIdentifyAmplifyUserAgent","textractClient","trys","push","text","Document","Image","send","TextDetections","words","FeatureTypes","identifyLabels","type","inputImage_1","servicePromises","entityType","err_4","labels","data","detectLabels","detectModerationLabels","all","identifyResult","forEach","val","detectLabelsCommand","detectLabelData","err_5","Labels","map","boxes","Instances","BoundingBox","undefined","name","boundingBoxes","metadata","confidence","Confidence","parents","Parents","detectModerationLabelsCommand","err_6","ModerationLabels","unsafe","identifyEntities","celebrityDetectionEnabled","_g","collectionIdConfig","_h","maxFacesConfig","inputImage","recognizeCelebritiesCommand","faces","err_7","_j","_k","collectionId","_l","maxFaces","updatedParam","searchFacesByImageCommand","err_8","detectFacesCommand","err_9","_this","_m","maxEntities","entities","Attributes","celebrityDetection","CelebrityFaces","celebrity","boundingBox","Face","landmarks","Landmarks","pose","Pose","collection","CollectionId","MaxFaces","FaceMatches","externalImageId","decodeExternalImageId","ExternalImageId","similarity","Similarity","FaceDetails","detail","attributeKeys","faceAttributes","Emotions","emotion","Type","ageRange","AgeRange","attributes","replace","category","Predictions","action","Identify"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/predictions/lib-esm/Providers/AmazonAIIdentifyPredictionsProvider.js"],"sourcesContent":["import { __assign, __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Category, Credentials, PredictionsAction, getAmplifyUserAgentObject, } from '@aws-amplify/core';\nimport { Storage } from '@aws-amplify/storage';\nimport { AbstractIdentifyPredictionsProvider } from '../types/Providers';\nimport { RekognitionClient, SearchFacesByImageCommand, DetectTextCommand, DetectLabelsCommand, DetectFacesCommand, DetectModerationLabelsCommand, RecognizeCelebritiesCommand, } from '@aws-sdk/client-rekognition';\nimport { isStorageSource, isFileSource, isBytesSource, isIdentifyCelebrities, isIdentifyFromCollection, } from '../types';\nimport { TextractClient, DetectDocumentTextCommand, AnalyzeDocumentCommand, } from '@aws-sdk/client-textract';\nimport { makeCamelCase, makeCamelCaseArray, blobToArrayBuffer } from './Utils';\nimport { categorizeRekognitionBlocks, categorizeTextractBlocks, } from './IdentifyTextUtils';\nvar AmazonAIIdentifyPredictionsProvider = /** @class */ (function (_super) {\n    __extends(AmazonAIIdentifyPredictionsProvider, _super);\n    function AmazonAIIdentifyPredictionsProvider() {\n        return _super.call(this) || this;\n    }\n    AmazonAIIdentifyPredictionsProvider.prototype.getProviderName = function () {\n        return 'AmazonAIIdentifyPredictionsProvider';\n    };\n    /**\n     * Verify user input source and converts it into source object readable by Rekognition and Textract.\n     * Note that Rekognition and Textract use the same source interface, so we need not worry about types.\n     * @param {IdentifySource} source - User input source that directs to the object user wants\n     * to identify (storage, file, or bytes).\n     * @return {Promise<Image>} - Promise resolving to the converted source object.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.configureSource = function (source) {\n        return new Promise(function (res, rej) {\n            if (isStorageSource(source)) {\n                var storageConfig = {\n                    level: source.level,\n                    identityId: source.identityId,\n                };\n                Storage.get(source.key, storageConfig)\n                    .then(function (url) {\n                    var parser = /https:\\/\\/([a-zA-Z0-9%\\-_.]+)\\.s3\\.[A-Za-z0-9%\\-._~]+\\/([a-zA-Z0-9%\\-._~/]+)\\?/;\n                    var parsedURL = url.match(parser);\n                    if (parsedURL.length < 3)\n                        rej('Invalid S3 key was given.');\n                    res({\n                        S3Object: {\n                            Bucket: parsedURL[1],\n                            Name: decodeURIComponent(parsedURL[2]),\n                        },\n                    });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isFileSource(source)) {\n                blobToArrayBuffer(source.file)\n                    .then(function (buffer) {\n                    res({ Bytes: new Uint8Array(buffer) });\n                })\n                    .catch(function (err) { return rej(err); });\n            }\n            else if (isBytesSource(source)) {\n                var bytes = source.bytes;\n                if (bytes instanceof Blob) {\n                    blobToArrayBuffer(bytes)\n                        .then(function (buffer) {\n                        res({ Bytes: new Uint8Array(buffer) });\n                    })\n                        .catch(function (err) { return rej(err); });\n                }\n                if (bytes instanceof ArrayBuffer || bytes instanceof Buffer) {\n                    res({ Bytes: new Uint8Array(bytes) });\n                }\n                // everything else can be directly passed to Rekognition / Textract.\n                res({ Bytes: bytes });\n            }\n            else {\n                rej('Input source is not configured correctly.');\n            }\n        });\n    };\n    /**\n     * Recognize text from real-world images and documents (plain text, forms and tables). Detects text in the input\n     * image and converts it into machine-readable text.\n     * @param {IdentifySource} source - Object containing the source image and feature types to analyze.\n     * @return {Promise<IdentifyTextOutput>} - Promise resolving to object containing identified texts.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyText = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, configFormat, inputDocument, err_1, format, featureTypes, textractParam, rekognitionParam, detectTextCommand, rekognitionData, rekognitionResponse, detectDocumentTextCommand, Blocks, err_2, param, analyzeDocumentCommand, Blocks, err_3;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        _a = this._config.identifyText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).format, configFormat = _e === void 0 ? 'PLAIN' : _e;\n                        this.rekognitionClient = new RekognitionClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: _getPredictionsIdentifyAmplifyUserAgent(),\n                        });\n                        this.textractClient = new TextractClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: _getPredictionsIdentifyAmplifyUserAgent(),\n                        });\n                        _f.label = 2;\n                    case 2:\n                        _f.trys.push([2, 4, , 5]);\n                        return [4 /*yield*/, this.configureSource(input.text.source)];\n                    case 3:\n                        inputDocument = _f.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        err_1 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 5:\n                        format = input.text.format || configFormat;\n                        featureTypes = [];\n                        if (format === 'FORM' || format === 'ALL')\n                            featureTypes.push('FORMS');\n                        if (format === 'TABLE' || format === 'ALL')\n                            featureTypes.push('TABLES');\n                        if (!(featureTypes.length === 0)) return [3 /*break*/, 11];\n                        textractParam = {\n                            Document: inputDocument,\n                        };\n                        rekognitionParam = {\n                            Image: inputDocument,\n                        };\n                        _f.label = 6;\n                    case 6:\n                        _f.trys.push([6, 9, , 10]);\n                        detectTextCommand = new DetectTextCommand(rekognitionParam);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectTextCommand)];\n                    case 7:\n                        rekognitionData = _f.sent();\n                        rekognitionResponse = categorizeRekognitionBlocks(rekognitionData.TextDetections);\n                        if (rekognitionResponse.text.words.length < 50) {\n                            // did not hit the word limit, return the data\n                            return [2 /*return*/, rekognitionResponse];\n                        }\n                        detectDocumentTextCommand = new DetectDocumentTextCommand(textractParam);\n                        return [4 /*yield*/, this.textractClient.send(detectDocumentTextCommand)];\n                    case 8:\n                        Blocks = (_f.sent()).Blocks;\n                        if (rekognitionData.TextDetections.length > Blocks.length) {\n                            return [2 /*return*/, rekognitionResponse];\n                        }\n                        return [2 /*return*/, categorizeTextractBlocks(Blocks)];\n                    case 9:\n                        err_2 = _f.sent();\n                        Promise.reject(err_2);\n                        return [3 /*break*/, 10];\n                    case 10: return [3 /*break*/, 15];\n                    case 11:\n                        param = {\n                            Document: inputDocument,\n                            FeatureTypes: featureTypes,\n                        };\n                        _f.label = 12;\n                    case 12:\n                        _f.trys.push([12, 14, , 15]);\n                        analyzeDocumentCommand = new AnalyzeDocumentCommand(param);\n                        return [4 /*yield*/, this.textractClient.send(analyzeDocumentCommand)];\n                    case 13:\n                        Blocks = (_f.sent()).Blocks;\n                        return [2 /*return*/, categorizeTextractBlocks(Blocks)];\n                    case 14:\n                        err_3 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_3)];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Identify instances of real world entities from an image and if it contains unsafe content.\n     * @param {IdentifyLabelsInput} input - Object containing the source image and entity type to identify.\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to an array of identified entities.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyLabels = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, _e, type, inputImage_1, param, servicePromises, entityType, err_4;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        _f.trys.push([0, 3, , 4]);\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _f.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        _a = this._config.identifyLabels, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, type = _e === void 0 ? 'LABELS' : _e;\n                        this.rekognitionClient = new RekognitionClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: _getPredictionsIdentifyAmplifyUserAgent(),\n                        });\n                        return [4 /*yield*/, this.configureSource(input.labels.source)\n                                .then(function (data) {\n                                inputImage_1 = data;\n                            })\n                                .catch(function (err) {\n                                return Promise.reject(err);\n                            })];\n                    case 2:\n                        _f.sent();\n                        param = { Image: inputImage_1 };\n                        servicePromises = [];\n                        entityType = input.labels.type || type;\n                        if (entityType === 'LABELS' || entityType === 'ALL') {\n                            servicePromises.push(this.detectLabels(param));\n                        }\n                        if (entityType === 'UNSAFE' || entityType === 'ALL') {\n                            servicePromises.push(this.detectModerationLabels(param));\n                        }\n                        return [2 /*return*/, Promise.all(servicePromises)\n                                .then(function (data) {\n                                var identifyResult = {};\n                                // concatenate resolved promises to a single object\n                                data.forEach(function (val) {\n                                    identifyResult = __assign(__assign({}, identifyResult), val);\n                                });\n                                return identifyResult;\n                            })\n                                .catch(function (err) { return Promise.reject(err); })];\n                    case 3:\n                        err_4 = _f.sent();\n                        return [2 /*return*/, Promise.reject(err_4)];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Calls Rekognition.detectLabels and organizes the returned data.\n     * @param {DetectLabelsInput} param - parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectLabels = function (param) {\n        return __awaiter(this, void 0, void 0, function () {\n            var detectLabelsCommand, data, detectLabelData, err_5;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        detectLabelsCommand = new DetectLabelsCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectLabelsCommand)];\n                    case 1:\n                        data = _a.sent();\n                        if (!data.Labels)\n                            return [2 /*return*/, { labels: null }]; // no image was detected\n                        detectLabelData = data.Labels.map(function (val) {\n                            var boxes = val.Instances\n                                ? val.Instances.map(function (val) { return makeCamelCase(val.BoundingBox); })\n                                : undefined;\n                            return {\n                                name: val.Name,\n                                boundingBoxes: boxes,\n                                metadata: {\n                                    confidence: val.Confidence,\n                                    parents: makeCamelCaseArray(val.Parents),\n                                },\n                            };\n                        });\n                        return [2 /*return*/, { labels: detectLabelData }];\n                    case 2:\n                        err_5 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_5)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Calls Rekognition.detectModerationLabels and organizes the returned data.\n     * @param {Rekognition.DetectLabelsRequest} param - Parameter to be passed onto Rekognition\n     * @return {Promise<IdentifyLabelsOutput>} - Promise resolving to organized detectModerationLabels response.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.detectModerationLabels = function (param) {\n        return __awaiter(this, void 0, void 0, function () {\n            var detectModerationLabelsCommand, data, err_6;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        detectModerationLabelsCommand = new DetectModerationLabelsCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectModerationLabelsCommand)];\n                    case 1:\n                        data = _a.sent();\n                        if (data.ModerationLabels.length !== 0) {\n                            return [2 /*return*/, { unsafe: 'YES' }];\n                        }\n                        else {\n                            return [2 /*return*/, { unsafe: 'NO' }];\n                        }\n                        return [3 /*break*/, 3];\n                    case 2:\n                        err_6 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_6)];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Identify faces within an image that is provided as input, and match faces from a collection\n     * or identify celebrities.\n     * @param {IdentifyEntityInput} input - object containing the source image and face match options.\n     * @return {Promise<IdentifyEntityOutput>} Promise resolving to identify results.\n     */\n    AmazonAIIdentifyPredictionsProvider.prototype.identifyEntities = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, _b, _c, region, _d, celebrityDetectionEnabled, _e, _f, _g, collectionIdConfig, _h, maxFacesConfig, inputImage, param, recognizeCelebritiesCommand, data, faces, err_7, _j, _k, collectionId, _l, maxFaces, updatedParam, searchFacesByImageCommand, data, faces, err_8, detectFacesCommand, data, faces, err_9;\n            var _this = this;\n            return __generator(this, function (_m) {\n                switch (_m.label) {\n                    case 0: return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _m.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        _a = this._config.identifyEntities, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.celebrityDetectionEnabled, celebrityDetectionEnabled = _d === void 0 ? false : _d, _e = _b.defaults, _f = _e === void 0 ? {} : _e, _g = _f.collectionId, collectionIdConfig = _g === void 0 ? '' : _g, _h = _f.maxEntities, maxFacesConfig = _h === void 0 ? 50 : _h;\n                        // default arguments\n                        this.rekognitionClient = new RekognitionClient({\n                            region: region,\n                            credentials: credentials,\n                            customUserAgent: _getPredictionsIdentifyAmplifyUserAgent(),\n                        });\n                        return [4 /*yield*/, this.configureSource(input.entities.source)\n                                .then(function (data) { return (inputImage = data); })\n                                .catch(function (err) {\n                                return Promise.reject(err);\n                            })];\n                    case 2:\n                        _m.sent();\n                        param = { Attributes: ['ALL'], Image: inputImage };\n                        if (!(isIdentifyCelebrities(input.entities) &&\n                            input.entities.celebrityDetection)) return [3 /*break*/, 7];\n                        if (!celebrityDetectionEnabled) {\n                            return [2 /*return*/, Promise.reject('Error: You have to enable celebrity detection first')];\n                        }\n                        _m.label = 3;\n                    case 3:\n                        _m.trys.push([3, 5, , 6]);\n                        recognizeCelebritiesCommand = new RecognizeCelebritiesCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(recognizeCelebritiesCommand)];\n                    case 4:\n                        data = _m.sent();\n                        faces = data.CelebrityFaces.map(function (celebrity) {\n                            return {\n                                boundingBox: makeCamelCase(celebrity.Face.BoundingBox),\n                                landmarks: makeCamelCaseArray(celebrity.Face.Landmarks),\n                                metadata: __assign(__assign({}, makeCamelCase(celebrity, ['Id', 'Name', 'Urls'])), { pose: makeCamelCase(celebrity.Face.Pose) }),\n                            };\n                        });\n                        return [2 /*return*/, { entities: faces }];\n                    case 5:\n                        err_7 = _m.sent();\n                        return [2 /*return*/, Promise.reject(err_7)];\n                    case 6: return [3 /*break*/, 15];\n                    case 7:\n                        if (!(isIdentifyFromCollection(input.entities) &&\n                            input.entities.collection)) return [3 /*break*/, 12];\n                        _j = input.entities, _k = _j.collectionId, collectionId = _k === void 0 ? collectionIdConfig : _k, _l = _j.maxEntities, maxFaces = _l === void 0 ? maxFacesConfig : _l;\n                        updatedParam = __assign(__assign({}, param), { CollectionId: collectionId, MaxFaces: maxFaces });\n                        _m.label = 8;\n                    case 8:\n                        _m.trys.push([8, 10, , 11]);\n                        searchFacesByImageCommand = new SearchFacesByImageCommand(updatedParam);\n                        return [4 /*yield*/, this.rekognitionClient.send(searchFacesByImageCommand)];\n                    case 9:\n                        data = _m.sent();\n                        faces = data.FaceMatches.map(function (val) {\n                            return {\n                                boundingBox: makeCamelCase(val.Face.BoundingBox),\n                                metadata: {\n                                    externalImageId: _this.decodeExternalImageId(val.Face.ExternalImageId),\n                                    similarity: val.Similarity,\n                                },\n                            };\n                        });\n                        return [2 /*return*/, { entities: faces }];\n                    case 10:\n                        err_8 = _m.sent();\n                        return [2 /*return*/, Promise.reject(err_8)];\n                    case 11: return [3 /*break*/, 15];\n                    case 12:\n                        _m.trys.push([12, 14, , 15]);\n                        detectFacesCommand = new DetectFacesCommand(param);\n                        return [4 /*yield*/, this.rekognitionClient.send(detectFacesCommand)];\n                    case 13:\n                        data = _m.sent();\n                        faces = data.FaceDetails.map(function (detail) {\n                            // face attributes keys we want to extract from Rekognition's response\n                            var attributeKeys = [\n                                'Smile',\n                                'Eyeglasses',\n                                'Sunglasses',\n                                'Gender',\n                                'Beard',\n                                'Mustache',\n                                'EyesOpen',\n                                'MouthOpen',\n                            ];\n                            var faceAttributes = makeCamelCase(detail, attributeKeys);\n                            if (detail.Emotions) {\n                                faceAttributes['emotions'] = detail.Emotions.map(function (emotion) { return emotion.Type; });\n                            }\n                            return {\n                                boundingBox: makeCamelCase(detail.BoundingBox),\n                                landmarks: makeCamelCaseArray(detail.Landmarks),\n                                ageRange: makeCamelCase(detail.AgeRange),\n                                attributes: faceAttributes,\n                                metadata: {\n                                    confidence: detail.Confidence,\n                                    pose: makeCamelCase(detail.Pose),\n                                },\n                            };\n                        });\n                        return [2 /*return*/, { entities: faces }];\n                    case 14:\n                        err_9 = _m.sent();\n                        return [2 /*return*/, Promise.reject(err_9)];\n                    case 15: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AmazonAIIdentifyPredictionsProvider.prototype.decodeExternalImageId = function (externalImageId) {\n        return ('' + externalImageId).replace(/::/g, '/');\n    };\n    return AmazonAIIdentifyPredictionsProvider;\n}(AbstractIdentifyPredictionsProvider));\nexport { AmazonAIIdentifyPredictionsProvider };\nfunction _getPredictionsIdentifyAmplifyUserAgent() {\n    return getAmplifyUserAgentObject({\n        category: Category.Predictions,\n        action: PredictionsAction.Identify,\n    });\n}\n"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,SAA9B,EAAyCC,WAAzC,QAA4D,OAA5D,C,CACA;AACA;;AACA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,iBAAhC,EAAmDC,yBAAnD,QAAqF,mBAArF;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,mCAAT,QAAoD,oBAApD;AACA,SAASC,iBAAT,EAA4BC,yBAA5B,EAAuDC,iBAAvD,EAA0EC,mBAA1E,EAA+FC,kBAA/F,EAAmHC,6BAAnH,EAAkJC,2BAAlJ,QAAsL,6BAAtL;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,aAAxC,EAAuDC,qBAAvD,EAA8EC,wBAA9E,QAA+G,UAA/G;AACA,SAASC,cAAT,EAAyBC,yBAAzB,EAAoDC,sBAApD,QAAmF,0BAAnF;AACA,SAASC,aAAT,EAAwBC,kBAAxB,EAA4CC,iBAA5C,QAAqE,SAArE;AACA,SAASC,2BAAT,EAAsCC,wBAAtC,QAAuE,qBAAvE;;AACA,IAAIC,mCAAmC;AAAG;AAAe,UAAUC,MAAV,EAAkB;EACvE7B,SAAS,CAAC4B,mCAAD,EAAsCC,MAAtC,CAAT;;EACA,SAASD,mCAAT,GAA+C;IAC3C,OAAOC,MAAM,CAACC,IAAP,CAAY,IAAZ,KAAqB,IAA5B;EACH;;EACDF,mCAAmC,CAACG,SAApC,CAA8CC,eAA9C,GAAgE,YAAY;IACxE,OAAO,qCAAP;EACH,CAFD;EAGA;AACJ;AACA;AACA;AACA;AACA;AACA;;;EACIJ,mCAAmC,CAACG,SAApC,CAA8CE,eAA9C,GAAgE,UAAUC,MAAV,EAAkB;IAC9E,OAAO,IAAIC,OAAJ,CAAY,UAAUC,GAAV,EAAeC,GAAf,EAAoB;MACnC,IAAItB,eAAe,CAACmB,MAAD,CAAnB,EAA6B;QACzB,IAAII,aAAa,GAAG;UAChBC,KAAK,EAAEL,MAAM,CAACK,KADE;UAEhBC,UAAU,EAAEN,MAAM,CAACM;QAFH,CAApB;QAIAlC,OAAO,CAACmC,GAAR,CAAYP,MAAM,CAACQ,GAAnB,EAAwBJ,aAAxB,EACKK,IADL,CACU,UAAUC,GAAV,EAAe;UACrB,IAAIC,MAAM,GAAG,gFAAb;UACA,IAAIC,SAAS,GAAGF,GAAG,CAACG,KAAJ,CAAUF,MAAV,CAAhB;UACA,IAAIC,SAAS,CAACE,MAAV,GAAmB,CAAvB,EACIX,GAAG,CAAC,2BAAD,CAAH;UACJD,GAAG,CAAC;YACAa,QAAQ,EAAE;cACNC,MAAM,EAAEJ,SAAS,CAAC,CAAD,CADX;cAENK,IAAI,EAAEC,kBAAkB,CAACN,SAAS,CAAC,CAAD,CAAV;YAFlB;UADV,CAAD,CAAH;QAMH,CAZD,EAaKO,KAbL,CAaW,UAAUC,GAAV,EAAe;UAAE,OAAOjB,GAAG,CAACiB,GAAD,CAAV;QAAkB,CAb9C;MAcH,CAnBD,MAoBK,IAAItC,YAAY,CAACkB,MAAD,CAAhB,EAA0B;QAC3BT,iBAAiB,CAACS,MAAM,CAACqB,IAAR,CAAjB,CACKZ,IADL,CACU,UAAUa,MAAV,EAAkB;UACxBpB,GAAG,CAAC;YAAEqB,KAAK,EAAE,IAAIC,UAAJ,CAAeF,MAAf;UAAT,CAAD,CAAH;QACH,CAHD,EAIKH,KAJL,CAIW,UAAUC,GAAV,EAAe;UAAE,OAAOjB,GAAG,CAACiB,GAAD,CAAV;QAAkB,CAJ9C;MAKH,CANI,MAOA,IAAIrC,aAAa,CAACiB,MAAD,CAAjB,EAA2B;QAC5B,IAAIyB,KAAK,GAAGzB,MAAM,CAACyB,KAAnB;;QACA,IAAIA,KAAK,YAAYC,IAArB,EAA2B;UACvBnC,iBAAiB,CAACkC,KAAD,CAAjB,CACKhB,IADL,CACU,UAAUa,MAAV,EAAkB;YACxBpB,GAAG,CAAC;cAAEqB,KAAK,EAAE,IAAIC,UAAJ,CAAeF,MAAf;YAAT,CAAD,CAAH;UACH,CAHD,EAIKH,KAJL,CAIW,UAAUC,GAAV,EAAe;YAAE,OAAOjB,GAAG,CAACiB,GAAD,CAAV;UAAkB,CAJ9C;QAKH;;QACD,IAAIK,KAAK,YAAYE,WAAjB,IAAgCF,KAAK,YAAYG,MAArD,EAA6D;UACzD1B,GAAG,CAAC;YAAEqB,KAAK,EAAE,IAAIC,UAAJ,CAAeC,KAAf;UAAT,CAAD,CAAH;QACH,CAX2B,CAY5B;;;QACAvB,GAAG,CAAC;UAAEqB,KAAK,EAAEE;QAAT,CAAD,CAAH;MACH,CAdI,MAeA;QACDtB,GAAG,CAAC,2CAAD,CAAH;MACH;IACJ,CA9CM,CAAP;EA+CH,CAhDD;EAiDA;AACJ;AACA;AACA;AACA;AACA;;;EACIT,mCAAmC,CAACG,SAApC,CAA8CgC,YAA9C,GAA6D,UAAUC,KAAV,EAAiB;IAC1E,OAAOjE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIkE,WAAJ,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,MAA7B,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6CC,YAA7C,EAA2DC,aAA3D,EAA0EC,KAA1E,EAAiFC,MAAjF,EAAyFC,YAAzF,EAAuGC,aAAvG,EAAsHC,gBAAtH,EAAwIC,iBAAxI,EAA2JC,eAA3J,EAA4KC,mBAA5K,EAAiMC,yBAAjM,EAA4NC,MAA5N,EAAoOC,KAApO,EAA2OC,KAA3O,EAAkPC,sBAAlP,EAA0QH,MAA1Q,EAAkRI,KAAlR;;MACA,OAAOtF,WAAW,CAAC,IAAD,EAAO,UAAUuF,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACC,KAAX;UACI,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAActF,WAAW,CAACsC,GAAZ,EAAd,CAAP;;UACR,KAAK,CAAL;YACIwB,WAAW,GAAGuB,EAAE,CAACE,IAAH,EAAd;YACA,IAAI,CAACzB,WAAL,EACI,OAAO,CAAC;YAAE;YAAH,EAAe9B,OAAO,CAACwD,MAAR,CAAe,gBAAf,CAAf,CAAP;YACJzB,EAAE,GAAG,KAAK0B,OAAL,CAAa7B,YAAlB,EAAgCI,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA1D,EAA8DE,EAAE,GAAGD,EAAE,CAACE,MAAtE,EAA8EA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA5G,EAAgHE,EAAE,GAAGH,EAAE,CAAC0B,QAAxH,EAAkItB,EAAE,GAAG,CAACD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAtB,EAA0BK,MAAjK,EAAyKH,YAAY,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,OAAhB,GAA0BA,EAAlN;YACA,KAAKuB,iBAAL,GAAyB,IAAItF,iBAAJ,CAAsB;cAC3C6D,MAAM,EAAEA,MADmC;cAE3CJ,WAAW,EAAEA,WAF8B;cAG3C8B,eAAe,EAAEC,uCAAuC;YAHb,CAAtB,CAAzB;YAKA,KAAKC,cAAL,GAAsB,IAAI7E,cAAJ,CAAmB;cACrCiD,MAAM,EAAEA,MAD6B;cAErCJ,WAAW,EAAEA,WAFwB;cAGrC8B,eAAe,EAAEC,uCAAuC;YAHnB,CAAnB,CAAtB;YAKAR,EAAE,CAACC,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACID,EAAE,CAACU,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKlE,eAAL,CAAqB+B,KAAK,CAACoC,IAAN,CAAWlE,MAAhC,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIuC,aAAa,GAAGe,EAAE,CAACE,IAAH,EAAhB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIhB,KAAK,GAAGc,EAAE,CAACE,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAevD,OAAO,CAACwD,MAAR,CAAejB,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,MAAM,GAAGX,KAAK,CAACoC,IAAN,CAAWzB,MAAX,IAAqBH,YAA9B;YACAI,YAAY,GAAG,EAAf;YACA,IAAID,MAAM,KAAK,MAAX,IAAqBA,MAAM,KAAK,KAApC,EACIC,YAAY,CAACuB,IAAb,CAAkB,OAAlB;YACJ,IAAIxB,MAAM,KAAK,OAAX,IAAsBA,MAAM,KAAK,KAArC,EACIC,YAAY,CAACuB,IAAb,CAAkB,QAAlB;YACJ,IAAI,EAAEvB,YAAY,CAAC5B,MAAb,KAAwB,CAA1B,CAAJ,EAAkC,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;YAClC6B,aAAa,GAAG;cACZwB,QAAQ,EAAE5B;YADE,CAAhB;YAGAK,gBAAgB,GAAG;cACfwB,KAAK,EAAE7B;YADQ,CAAnB;YAGAe,EAAE,CAACC,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACID,EAAE,CAACU,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,EAAT,CAAb;;YACApB,iBAAiB,GAAG,IAAIrE,iBAAJ,CAAsBoE,gBAAtB,CAApB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKgB,iBAAL,CAAuBS,IAAvB,CAA4BxB,iBAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,eAAe,GAAGQ,EAAE,CAACE,IAAH,EAAlB;YACAT,mBAAmB,GAAGvD,2BAA2B,CAACsD,eAAe,CAACwB,cAAjB,CAAjD;;YACA,IAAIvB,mBAAmB,CAACmB,IAApB,CAAyBK,KAAzB,CAA+BzD,MAA/B,GAAwC,EAA5C,EAAgD;cAC5C;cACA,OAAO,CAAC;cAAE;cAAH,EAAeiC,mBAAf,CAAP;YACH;;YACDC,yBAAyB,GAAG,IAAI7D,yBAAJ,CAA8BwD,aAA9B,CAA5B;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKoB,cAAL,CAAoBM,IAApB,CAAyBrB,yBAAzB,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIC,MAAM,GAAIK,EAAE,CAACE,IAAH,EAAD,CAAYP,MAArB;;YACA,IAAIH,eAAe,CAACwB,cAAhB,CAA+BxD,MAA/B,GAAwCmC,MAAM,CAACnC,MAAnD,EAA2D;cACvD,OAAO,CAAC;cAAE;cAAH,EAAeiC,mBAAf,CAAP;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAetD,wBAAwB,CAACwD,MAAD,CAAvC,CAAP;;UACJ,KAAK,CAAL;YACIC,KAAK,GAAGI,EAAE,CAACE,IAAH,EAAR;YACAvD,OAAO,CAACwD,MAAR,CAAeP,KAAf;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACT,KAAK,EAAL;YACIC,KAAK,GAAG;cACJgB,QAAQ,EAAE5B,aADN;cAEJiC,YAAY,EAAE9B;YAFV,CAAR;YAIAY,EAAE,CAACC,KAAH,GAAW,EAAX;;UACJ,KAAK,EAAL;YACID,EAAE,CAACU,IAAH,CAAQC,IAAR,CAAa,CAAC,EAAD,EAAK,EAAL,GAAW,EAAX,CAAb;;YACAb,sBAAsB,GAAG,IAAIhE,sBAAJ,CAA2B+D,KAA3B,CAAzB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKY,cAAL,CAAoBM,IAApB,CAAyBjB,sBAAzB,CAAd,CAAP;;UACJ,KAAK,EAAL;YACIH,MAAM,GAAIK,EAAE,CAACE,IAAH,EAAD,CAAYP,MAArB;YACA,OAAO,CAAC;YAAE;YAAH,EAAexD,wBAAwB,CAACwD,MAAD,CAAvC,CAAP;;UACJ,KAAK,EAAL;YACII,KAAK,GAAGC,EAAE,CAACE,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAevD,OAAO,CAACwD,MAAR,CAAeJ,KAAf,CAAf,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,CAAP;QAlFb;MAoFH,CArFiB,CAAlB;IAsFH,CAxFe,CAAhB;EAyFH,CA1FD;EA2FA;AACJ;AACA;AACA;AACA;;;EACI3D,mCAAmC,CAACG,SAApC,CAA8C4E,cAA9C,GAA+D,UAAU3C,KAAV,EAAiB;IAC5E,OAAOjE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIkE,WAAJ,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,MAA7B,EAAqCC,EAArC,EAAyCC,EAAzC,EAA6CqC,IAA7C,EAAmDC,YAAnD,EAAiExB,KAAjE,EAAwEyB,eAAxE,EAAyFC,UAAzF,EAAqGC,KAArG;;MACA,OAAO/G,WAAW,CAAC,IAAD,EAAO,UAAUuF,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACC,KAAX;UACI,KAAK,CAAL;YACID,EAAE,CAACU,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACA,OAAO,CAAC;YAAE;YAAH,EAAchG,WAAW,CAACsC,GAAZ,EAAd,CAAP;;UACJ,KAAK,CAAL;YACIwB,WAAW,GAAGuB,EAAE,CAACE,IAAH,EAAd;YACA,IAAI,CAACzB,WAAL,EACI,OAAO,CAAC;YAAE;YAAH,EAAe9B,OAAO,CAACwD,MAAR,CAAe,gBAAf,CAAf,CAAP;YACJzB,EAAE,GAAG,KAAK0B,OAAL,CAAae,cAAlB,EAAkCxC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA5D,EAAgEE,EAAE,GAAGD,EAAE,CAACE,MAAxE,EAAgFA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9G,EAAkHE,EAAE,GAAGH,EAAE,CAAC0B,QAA1H,EAAoItB,EAAE,GAAG,CAACD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAtB,EAA0BsC,IAAnK,EAAyKA,IAAI,GAAGrC,EAAE,KAAK,KAAK,CAAZ,GAAgB,QAAhB,GAA2BA,EAA3M;YACA,KAAKuB,iBAAL,GAAyB,IAAItF,iBAAJ,CAAsB;cAC3C6D,MAAM,EAAEA,MADmC;cAE3CJ,WAAW,EAAEA,WAF8B;cAG3C8B,eAAe,EAAEC,uCAAuC;YAHb,CAAtB,CAAzB;YAKA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK/D,eAAL,CAAqB+B,KAAK,CAACiD,MAAN,CAAa/E,MAAlC,EACZS,IADY,CACP,UAAUuE,IAAV,EAAgB;cACtBL,YAAY,GAAGK,IAAf;YACH,CAHgB,EAIZ7D,KAJY,CAIN,UAAUC,GAAV,EAAe;cACtB,OAAOnB,OAAO,CAACwD,MAAR,CAAerC,GAAf,CAAP;YACH,CANgB,CAAd,CAAP;;UAOJ,KAAK,CAAL;YACIkC,EAAE,CAACE,IAAH;;YACAL,KAAK,GAAG;cAAEiB,KAAK,EAAEO;YAAT,CAAR;YACAC,eAAe,GAAG,EAAlB;YACAC,UAAU,GAAG/C,KAAK,CAACiD,MAAN,CAAaL,IAAb,IAAqBA,IAAlC;;YACA,IAAIG,UAAU,KAAK,QAAf,IAA2BA,UAAU,KAAK,KAA9C,EAAqD;cACjDD,eAAe,CAACX,IAAhB,CAAqB,KAAKgB,YAAL,CAAkB9B,KAAlB,CAArB;YACH;;YACD,IAAI0B,UAAU,KAAK,QAAf,IAA2BA,UAAU,KAAK,KAA9C,EAAqD;cACjDD,eAAe,CAACX,IAAhB,CAAqB,KAAKiB,sBAAL,CAA4B/B,KAA5B,CAArB;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAelD,OAAO,CAACkF,GAAR,CAAYP,eAAZ,EACbnE,IADa,CACR,UAAUuE,IAAV,EAAgB;cACtB,IAAII,cAAc,GAAG,EAArB,CADsB,CAEtB;;cACAJ,IAAI,CAACK,OAAL,CAAa,UAAUC,GAAV,EAAe;gBACxBF,cAAc,GAAGxH,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKwH,cAAL,CAAT,EAA+BE,GAA/B,CAAzB;cACH,CAFD;cAGA,OAAOF,cAAP;YACH,CARiB,EASbjE,KATa,CASP,UAAUC,GAAV,EAAe;cAAE,OAAOnB,OAAO,CAACwD,MAAR,CAAerC,GAAf,CAAP;YAA6B,CATvC,CAAf,CAAP;;UAUJ,KAAK,CAAL;YACI0D,KAAK,GAAGxB,EAAE,CAACE,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAevD,OAAO,CAACwD,MAAR,CAAeqB,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QA7CZ;MA+CH,CAhDiB,CAAlB;IAiDH,CAnDe,CAAhB;EAoDH,CArDD;EAsDA;AACJ;AACA;AACA;AACA;;;EACIpF,mCAAmC,CAACG,SAApC,CAA8CoF,YAA9C,GAA6D,UAAU9B,KAAV,EAAiB;IAC1E,OAAOtF,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI0H,mBAAJ,EAAyBP,IAAzB,EAA+BQ,eAA/B,EAAgDC,KAAhD;MACA,OAAO1H,WAAW,CAAC,IAAD,EAAO,UAAUiE,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACuB,KAAX;UACI,KAAK,CAAL;YACIvB,EAAE,CAACgC,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACAsB,mBAAmB,GAAG,IAAI9G,mBAAJ,CAAwB0E,KAAxB,CAAtB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKS,iBAAL,CAAuBS,IAAvB,CAA4BkB,mBAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIP,IAAI,GAAGhD,EAAE,CAACwB,IAAH,EAAP;YACA,IAAI,CAACwB,IAAI,CAACU,MAAV,EACI,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEX,MAAM,EAAE;YAAV,CAAf,CAAP,CAHR,CAGiD;;YAC7CS,eAAe,GAAGR,IAAI,CAACU,MAAL,CAAYC,GAAZ,CAAgB,UAAUL,GAAV,EAAe;cAC7C,IAAIM,KAAK,GAAGN,GAAG,CAACO,SAAJ,GACNP,GAAG,CAACO,SAAJ,CAAcF,GAAd,CAAkB,UAAUL,GAAV,EAAe;gBAAE,OAAOjG,aAAa,CAACiG,GAAG,CAACQ,WAAL,CAApB;cAAwC,CAA3E,CADM,GAENC,SAFN;cAGA,OAAO;gBACHC,IAAI,EAAEV,GAAG,CAACrE,IADP;gBAEHgF,aAAa,EAAEL,KAFZ;gBAGHM,QAAQ,EAAE;kBACNC,UAAU,EAAEb,GAAG,CAACc,UADV;kBAENC,OAAO,EAAE/G,kBAAkB,CAACgG,GAAG,CAACgB,OAAL;gBAFrB;cAHP,CAAP;YAQH,CAZiB,CAAlB;YAaA,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEvB,MAAM,EAAES;YAAV,CAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,KAAK,GAAGzD,EAAE,CAACwB,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAevD,OAAO,CAACwD,MAAR,CAAegC,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QA1BZ;MA4BH,CA7BiB,CAAlB;IA8BH,CAhCe,CAAhB;EAiCH,CAlCD;EAmCA;AACJ;AACA;AACA;AACA;;;EACI/F,mCAAmC,CAACG,SAApC,CAA8CqF,sBAA9C,GAAuE,UAAU/B,KAAV,EAAiB;IACpF,OAAOtF,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAI0I,6BAAJ,EAAmCvB,IAAnC,EAAyCwB,KAAzC;MACA,OAAOzI,WAAW,CAAC,IAAD,EAAO,UAAUiE,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACuB,KAAX;UACI,KAAK,CAAL;YACIvB,EAAE,CAACgC,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACAsC,6BAA6B,GAAG,IAAI5H,6BAAJ,CAAkCwE,KAAlC,CAAhC;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKS,iBAAL,CAAuBS,IAAvB,CAA4BkC,6BAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIvB,IAAI,GAAGhD,EAAE,CAACwB,IAAH,EAAP;;YACA,IAAIwB,IAAI,CAACyB,gBAAL,CAAsB3F,MAAtB,KAAiC,CAArC,EAAwC;cACpC,OAAO,CAAC;cAAE;cAAH,EAAe;gBAAE4F,MAAM,EAAE;cAAV,CAAf,CAAP;YACH,CAFD,MAGK;cACD,OAAO,CAAC;cAAE;cAAH,EAAe;gBAAEA,MAAM,EAAE;cAAV,CAAf,CAAP;YACH;;YACD,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIF,KAAK,GAAGxE,EAAE,CAACwB,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAevD,OAAO,CAACwD,MAAR,CAAe+C,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,CAAP;QAjBZ;MAmBH,CApBiB,CAAlB;IAqBH,CAvBe,CAAhB;EAwBH,CAzBD;EA0BA;AACJ;AACA;AACA;AACA;AACA;;;EACI9G,mCAAmC,CAACG,SAApC,CAA8C8G,gBAA9C,GAAiE,UAAU7E,KAAV,EAAiB;IAC9E,OAAOjE,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,YAAY;MAC/C,IAAIkE,WAAJ,EAAiBC,EAAjB,EAAqBC,EAArB,EAAyBC,EAAzB,EAA6BC,MAA7B,EAAqCC,EAArC,EAAyCwE,yBAAzC,EAAoEvE,EAApE,EAAwEiB,EAAxE,EAA4EuD,EAA5E,EAAgFC,kBAAhF,EAAoGC,EAApG,EAAwGC,cAAxG,EAAwHC,UAAxH,EAAoI9D,KAApI,EAA2I+D,2BAA3I,EAAwKlC,IAAxK,EAA8KmC,KAA9K,EAAqLC,KAArL,EAA4LC,EAA5L,EAAgMC,EAAhM,EAAoMC,YAApM,EAAkNC,EAAlN,EAAsNC,QAAtN,EAAgOC,YAAhO,EAA8OC,yBAA9O,EAAyQ3C,IAAzQ,EAA+QmC,KAA/Q,EAAsRS,KAAtR,EAA6RC,kBAA7R,EAAiT7C,IAAjT,EAAuTmC,KAAvT,EAA8TW,KAA9T;;MACA,IAAIC,KAAK,GAAG,IAAZ;;MACA,OAAOhK,WAAW,CAAC,IAAD,EAAO,UAAUiK,EAAV,EAAc;QACnC,QAAQA,EAAE,CAACzE,KAAX;UACI,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAActF,WAAW,CAACsC,GAAZ,EAAd,CAAP;;UACR,KAAK,CAAL;YACIwB,WAAW,GAAGiG,EAAE,CAACxE,IAAH,EAAd;YACA,IAAI,CAACzB,WAAL,EACI,OAAO,CAAC;YAAE;YAAH,EAAe9B,OAAO,CAACwD,MAAR,CAAe,gBAAf,CAAf,CAAP;YACJzB,EAAE,GAAG,KAAK0B,OAAL,CAAaiD,gBAAlB,EAAoC1E,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9D,EAAkEE,EAAE,GAAGD,EAAE,CAACE,MAA1E,EAAkFA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAAhH,EAAoHE,EAAE,GAAGH,EAAE,CAAC2E,yBAA5H,EAAuJA,yBAAyB,GAAGxE,EAAE,KAAK,KAAK,CAAZ,GAAgB,KAAhB,GAAwBA,EAA3M,EAA+MC,EAAE,GAAGJ,EAAE,CAAC0B,QAAvN,EAAiOL,EAAE,GAAGjB,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA3P,EAA+PwE,EAAE,GAAGvD,EAAE,CAACiE,YAAvQ,EAAqRT,kBAAkB,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA/T,EAAmUE,EAAE,GAAGzD,EAAE,CAAC2E,WAA3U,EAAwVjB,cAAc,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9X,CAJJ,CAKI;;YACA,KAAKnD,iBAAL,GAAyB,IAAItF,iBAAJ,CAAsB;cAC3C6D,MAAM,EAAEA,MADmC;cAE3CJ,WAAW,EAAEA,WAF8B;cAG3C8B,eAAe,EAAEC,uCAAuC;YAHb,CAAtB,CAAzB;YAKA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK/D,eAAL,CAAqB+B,KAAK,CAACoG,QAAN,CAAelI,MAApC,EACZS,IADY,CACP,UAAUuE,IAAV,EAAgB;cAAE,OAAQiC,UAAU,GAAGjC,IAArB;YAA6B,CADxC,EAEZ7D,KAFY,CAEN,UAAUC,GAAV,EAAe;cACtB,OAAOnB,OAAO,CAACwD,MAAR,CAAerC,GAAf,CAAP;YACH,CAJgB,CAAd,CAAP;;UAKJ,KAAK,CAAL;YACI4G,EAAE,CAACxE,IAAH;;YACAL,KAAK,GAAG;cAAEgF,UAAU,EAAE,CAAC,KAAD,CAAd;cAAuB/D,KAAK,EAAE6C;YAA9B,CAAR;YACA,IAAI,EAAEjI,qBAAqB,CAAC8C,KAAK,CAACoG,QAAP,CAArB,IACFpG,KAAK,CAACoG,QAAN,CAAeE,kBADf,CAAJ,EACwC,OAAO,CAAC;YAAE;YAAH,EAAc,CAAd,CAAP;;YACxC,IAAI,CAACxB,yBAAL,EAAgC;cAC5B,OAAO,CAAC;cAAE;cAAH,EAAe3G,OAAO,CAACwD,MAAR,CAAe,qDAAf,CAAf,CAAP;YACH;;YACDuE,EAAE,CAACzE,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACIyE,EAAE,CAAChE,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,CAAJ,GAAS,CAAT,CAAb;;YACAiD,2BAA2B,GAAG,IAAItI,2BAAJ,CAAgCuE,KAAhC,CAA9B;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKS,iBAAL,CAAuBS,IAAvB,CAA4B6C,2BAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACIlC,IAAI,GAAGgD,EAAE,CAACxE,IAAH,EAAP;YACA2D,KAAK,GAAGnC,IAAI,CAACqD,cAAL,CAAoB1C,GAApB,CAAwB,UAAU2C,SAAV,EAAqB;cACjD,OAAO;gBACHC,WAAW,EAAElJ,aAAa,CAACiJ,SAAS,CAACE,IAAV,CAAe1C,WAAhB,CADvB;gBAEH2C,SAAS,EAAEnJ,kBAAkB,CAACgJ,SAAS,CAACE,IAAV,CAAeE,SAAhB,CAF1B;gBAGHxC,QAAQ,EAAEtI,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKyB,aAAa,CAACiJ,SAAD,EAAY,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,CAAZ,CAAlB,CAAT,EAAiE;kBAAEK,IAAI,EAAEtJ,aAAa,CAACiJ,SAAS,CAACE,IAAV,CAAeI,IAAhB;gBAArB,CAAjE;cAHf,CAAP;YAKH,CANO,CAAR;YAOA,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEV,QAAQ,EAAEf;YAAZ,CAAf,CAAP;;UACJ,KAAK,CAAL;YACIC,KAAK,GAAGY,EAAE,CAACxE,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAevD,OAAO,CAACwD,MAAR,CAAe2D,KAAf,CAAf,CAAP;;UACJ,KAAK,CAAL;YAAQ,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACR,KAAK,CAAL;YACI,IAAI,EAAEnI,wBAAwB,CAAC6C,KAAK,CAACoG,QAAP,CAAxB,IACFpG,KAAK,CAACoG,QAAN,CAAeW,UADf,CAAJ,EACgC,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;YAChCxB,EAAE,GAAGvF,KAAK,CAACoG,QAAX,EAAqBZ,EAAE,GAAGD,EAAE,CAACE,YAA7B,EAA2CA,YAAY,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBR,kBAAhB,GAAqCQ,EAA/F,EAAmGE,EAAE,GAAGH,EAAE,CAACY,WAA3G,EAAwHR,QAAQ,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgBR,cAAhB,GAAiCQ,EAApK;YACAE,YAAY,GAAG9J,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAKuF,KAAL,CAAT,EAAsB;cAAE2F,YAAY,EAAEvB,YAAhB;cAA8BwB,QAAQ,EAAEtB;YAAxC,CAAtB,CAAvB;YACAO,EAAE,CAACzE,KAAH,GAAW,CAAX;;UACJ,KAAK,CAAL;YACIyE,EAAE,CAAChE,IAAH,CAAQC,IAAR,CAAa,CAAC,CAAD,EAAI,EAAJ,GAAU,EAAV,CAAb;;YACA0D,yBAAyB,GAAG,IAAIpJ,yBAAJ,CAA8BmJ,YAA9B,CAA5B;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAK9D,iBAAL,CAAuBS,IAAvB,CAA4BsD,yBAA5B,CAAd,CAAP;;UACJ,KAAK,CAAL;YACI3C,IAAI,GAAGgD,EAAE,CAACxE,IAAH,EAAP;YACA2D,KAAK,GAAGnC,IAAI,CAACgE,WAAL,CAAiBrD,GAAjB,CAAqB,UAAUL,GAAV,EAAe;cACxC,OAAO;gBACHiD,WAAW,EAAElJ,aAAa,CAACiG,GAAG,CAACkD,IAAJ,CAAS1C,WAAV,CADvB;gBAEHI,QAAQ,EAAE;kBACN+C,eAAe,EAAElB,KAAK,CAACmB,qBAAN,CAA4B5D,GAAG,CAACkD,IAAJ,CAASW,eAArC,CADX;kBAENC,UAAU,EAAE9D,GAAG,CAAC+D;gBAFV;cAFP,CAAP;YAOH,CARO,CAAR;YASA,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEnB,QAAQ,EAAEf;YAAZ,CAAf,CAAP;;UACJ,KAAK,EAAL;YACIS,KAAK,GAAGI,EAAE,CAACxE,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAevD,OAAO,CAACwD,MAAR,CAAemE,KAAf,CAAf,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,EAAc,EAAd,CAAP;;UACT,KAAK,EAAL;YACII,EAAE,CAAChE,IAAH,CAAQC,IAAR,CAAa,CAAC,EAAD,EAAK,EAAL,GAAW,EAAX,CAAb;;YACA4D,kBAAkB,GAAG,IAAInJ,kBAAJ,CAAuByE,KAAvB,CAArB;YACA,OAAO,CAAC;YAAE;YAAH,EAAc,KAAKS,iBAAL,CAAuBS,IAAvB,CAA4BwD,kBAA5B,CAAd,CAAP;;UACJ,KAAK,EAAL;YACI7C,IAAI,GAAGgD,EAAE,CAACxE,IAAH,EAAP;YACA2D,KAAK,GAAGnC,IAAI,CAACsE,WAAL,CAAiB3D,GAAjB,CAAqB,UAAU4D,MAAV,EAAkB;cAC3C;cACA,IAAIC,aAAa,GAAG,CAChB,OADgB,EAEhB,YAFgB,EAGhB,YAHgB,EAIhB,QAJgB,EAKhB,OALgB,EAMhB,UANgB,EAOhB,UAPgB,EAQhB,WARgB,CAApB;cAUA,IAAIC,cAAc,GAAGpK,aAAa,CAACkK,MAAD,EAASC,aAAT,CAAlC;;cACA,IAAID,MAAM,CAACG,QAAX,EAAqB;gBACjBD,cAAc,CAAC,UAAD,CAAd,GAA6BF,MAAM,CAACG,QAAP,CAAgB/D,GAAhB,CAAoB,UAAUgE,OAAV,EAAmB;kBAAE,OAAOA,OAAO,CAACC,IAAf;gBAAsB,CAA/D,CAA7B;cACH;;cACD,OAAO;gBACHrB,WAAW,EAAElJ,aAAa,CAACkK,MAAM,CAACzD,WAAR,CADvB;gBAEH2C,SAAS,EAAEnJ,kBAAkB,CAACiK,MAAM,CAACb,SAAR,CAF1B;gBAGHmB,QAAQ,EAAExK,aAAa,CAACkK,MAAM,CAACO,QAAR,CAHpB;gBAIHC,UAAU,EAAEN,cAJT;gBAKHvD,QAAQ,EAAE;kBACNC,UAAU,EAAEoD,MAAM,CAACnD,UADb;kBAENuC,IAAI,EAAEtJ,aAAa,CAACkK,MAAM,CAACX,IAAR;gBAFb;cALP,CAAP;YAUH,CA1BO,CAAR;YA2BA,OAAO,CAAC;YAAE;YAAH,EAAe;cAAEV,QAAQ,EAAEf;YAAZ,CAAf,CAAP;;UACJ,KAAK,EAAL;YACIW,KAAK,GAAGE,EAAE,CAACxE,IAAH,EAAR;YACA,OAAO,CAAC;YAAE;YAAH,EAAevD,OAAO,CAACwD,MAAR,CAAeqE,KAAf,CAAf,CAAP;;UACJ,KAAK,EAAL;YAAS,OAAO,CAAC;YAAE;YAAH,CAAP;QA5Gb;MA8GH,CA/GiB,CAAlB;IAgHH,CAnHe,CAAhB;EAoHH,CArHD;;EAsHApI,mCAAmC,CAACG,SAApC,CAA8CqJ,qBAA9C,GAAsE,UAAUD,eAAV,EAA2B;IAC7F,OAAO,CAAC,KAAKA,eAAN,EAAuBe,OAAvB,CAA+B,KAA/B,EAAsC,GAAtC,CAAP;EACH,CAFD;;EAGA,OAAOtK,mCAAP;AACH,CAnawD,CAmavDrB,mCAnauD,CAAzD;;AAoaA,SAASqB,mCAAT;;AACA,SAASoE,uCAAT,GAAmD;EAC/C,OAAO3F,yBAAyB,CAAC;IAC7B8L,QAAQ,EAAEjM,QAAQ,CAACkM,WADU;IAE7BC,MAAM,EAAEjM,iBAAiB,CAACkM;EAFG,CAAD,CAAhC;AAIH"},"metadata":{},"sourceType":"module"}