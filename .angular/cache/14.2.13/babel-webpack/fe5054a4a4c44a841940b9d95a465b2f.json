{"ast":null,"code":"import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { Category, ConsoleLogger as Logger, DataStoreAction, Hub, BackgroundProcessManager } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth, predicateToGraphQLFilter, RTFError, generateRTFRemediation } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n\n(function (CONTROL_MSG) {\n  CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\n\nexport var USER_CREDENTIALS;\n\n(function (USER_CREDENTIALS) {\n  USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n  USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\n\nvar SubscriptionProcessor =\n/** @class */\nfunction () {\n  function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n    if (amplifyConfig === void 0) {\n      amplifyConfig = {};\n    }\n\n    if (amplifyContext === void 0) {\n      amplifyContext = {\n        Auth: Auth,\n        InternalAPI: InternalAPI,\n        Cache: Cache\n      };\n    }\n\n    this.schema = schema;\n    this.syncPredicates = syncPredicates;\n    this.amplifyConfig = amplifyConfig;\n    this.authModeStrategy = authModeStrategy;\n    this.errorHandler = errorHandler;\n    this.amplifyContext = amplifyContext;\n    this.typeQuery = new WeakMap();\n    this.buffer = [];\n    this.runningProcesses = new BackgroundProcessManager();\n  }\n\n  SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode, filterArg) {\n    if (filterArg === void 0) {\n      filterArg = false;\n    }\n\n    var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n\n    var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {},\n        isOwner = _a.isOwner,\n        ownerField = _a.ownerField,\n        ownerValue = _a.ownerValue;\n\n    var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField, filterArg), 3),\n        opType = _b[0],\n        opName = _b[1],\n        query = _b[2];\n\n    return {\n      authMode: authMode,\n      opType: opType,\n      opName: opName,\n      query: query,\n      isOwner: isOwner,\n      ownerField: ownerField,\n      ownerValue: ownerValue\n    };\n  };\n\n  SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n    if (cognitoTokenPayload === void 0) {\n      cognitoTokenPayload = {};\n    }\n\n    if (oidcTokenPayload === void 0) {\n      oidcTokenPayload = {};\n    }\n\n    var rules = getAuthorizationRules(model); // Return null if user doesn't have proper credentials for private API with IAM auth\n\n    var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM && rules.find(function (rule) {\n      return rule.authStrategy === 'private' && rule.provider === 'iam';\n    });\n\n    if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n      return null;\n    } // Group auth should take precedence over owner auth, so we are checking\n    // if rule(s) have group authorization as well as if either the Cognito or\n    // OIDC token has a groupClaim. If so, we are returning auth info before\n    // any further owner-based auth checks.\n\n\n    var groupAuthRules = rules.filter(function (rule) {\n      return rule.authStrategy === 'groups' && ['userPools', 'oidc'].includes(rule.provider);\n    });\n    var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS || authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) && groupAuthRules.find(function (groupAuthRule) {\n      // validate token against groupClaim\n      var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n      var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n      return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n        return groupAuthRule.groups.find(function (group) {\n          return group === userGroup;\n        });\n      });\n    });\n\n    if (validGroup) {\n      return {\n        authMode: authMode,\n        isOwner: false\n      };\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the Cognito token via the\n    // identityClaim from the auth rule.\n\n\n    var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n    }) : [];\n    var ownerAuthInfo;\n    cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var _a;\n\n      var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim]; // AuthZ for \"list of owners\" is handled dynamically in the subscription auth request\n      // resolver. It doesn't rely on a subscription arg.\n      // Only pass a subscription arg for single owner auth\n\n      var singleOwner = ((_a = model.fields[ownerAuthRule.ownerField]) === null || _a === void 0 ? void 0 : _a.isArray) !== true;\n      var isOwnerArgRequired = singleOwner && !ownerAuthRule.areSubscriptionsPublic;\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n          isOwner: isOwnerArgRequired,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Owner auth needs additional values to be returned in order to create the subscription with\n    // the correct parameters so we are getting the owner value from the OIDC token via the\n    // identityClaim from the auth rule.\n\n\n    var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT ? rules.filter(function (rule) {\n      return rule.authStrategy === 'owner' && rule.provider === 'oidc';\n    }) : [];\n    oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n      var _a;\n\n      var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n      var singleOwner = ((_a = model.fields[ownerAuthRule.ownerField]) === null || _a === void 0 ? void 0 : _a.isArray) !== true;\n      var isOwnerArgRequired = singleOwner && !ownerAuthRule.areSubscriptionsPublic;\n\n      if (ownerValue) {\n        ownerAuthInfo = {\n          authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n          isOwner: isOwnerArgRequired,\n          ownerField: ownerAuthRule.ownerField,\n          ownerValue: ownerValue\n        };\n      }\n    });\n\n    if (ownerAuthInfo) {\n      return ownerAuthInfo;\n    } // Fallback: return authMode or default auth type\n\n\n    return {\n      authMode: authMode || defaultAuthType,\n      isOwner: false\n    };\n  };\n\n  SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n    var event = capsule.payload.event;\n\n    if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n      completed();\n    }\n  };\n\n  SubscriptionProcessor.prototype.start = function () {\n    var _this = this;\n\n    this.runningProcesses = this.runningProcesses || new BackgroundProcessManager();\n    var ctlObservable = new Observable(function (observer) {\n      var promises = []; // Creating subs for each model/operation combo so they can be unsubscribed\n      // independently, since the auth retry behavior is asynchronous.\n\n      var subscriptions = {};\n      var cognitoTokenPayload, oidcTokenPayload;\n      var userCredentials = USER_CREDENTIALS.none;\n\n      _this.runningProcesses.add(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n\n          var _this = this;\n\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                _b.trys.push([0, 2,, 3]);\n\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentCredentials()];\n\n              case 1:\n                credentials = _b.sent();\n                userCredentials = credentials.authenticated ? USER_CREDENTIALS.auth : USER_CREDENTIALS.unauth;\n                return [3\n                /*break*/\n                , 3];\n\n              case 2:\n                err_1 = _b.sent();\n                return [3\n                /*break*/\n                , 3];\n\n              case 3:\n                _b.trys.push([3, 5,, 6]);\n\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentSession()];\n\n              case 4:\n                session = _b.sent();\n                cognitoTokenPayload = session.getIdToken().decodePayload();\n                return [3\n                /*break*/\n                , 6];\n\n              case 5:\n                err_2 = _b.sent();\n                return [3\n                /*break*/\n                , 6];\n\n              case 6:\n                _b.trys.push([6, 11,, 12]);\n\n                _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n\n                if (!aws_cognito_region || AuthConfig && !AuthConfig.region) {\n                  throw 'Auth is not configured';\n                }\n\n                token = void 0;\n                return [4\n                /*yield*/\n                , this.amplifyContext.Cache.getItem('federatedInfo')];\n\n              case 7:\n                federatedInfo = _b.sent();\n                if (!federatedInfo) return [3\n                /*break*/\n                , 8];\n                token = federatedInfo.token;\n                return [3\n                /*break*/\n                , 10];\n\n              case 8:\n                return [4\n                /*yield*/\n                , this.amplifyContext.Auth.currentAuthenticatedUser()];\n\n              case 9:\n                currentUser = _b.sent();\n\n                if (currentUser) {\n                  token = currentUser.token;\n                }\n\n                _b.label = 10;\n\n              case 10:\n                if (token) {\n                  payload = token.split('.')[1];\n                  oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                }\n\n                return [3\n                /*break*/\n                , 12];\n\n              case 11:\n                err_3 = _b.sent();\n                logger.debug('error getting OIDC JWT', err_3);\n                return [3\n                /*break*/\n                , 12];\n\n              case 12:\n                Object.values(this.schema.namespaces).forEach(function (namespace) {\n                  Object.values(namespace.models).filter(function (_a) {\n                    var syncable = _a.syncable;\n                    return syncable;\n                  }).forEach(function (modelDefinition) {\n                    return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, predicatesGroup, addFilterArg, subscriptionRetry;\n\n                        var _a, _b, _c;\n\n                        var _this = this;\n\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              return [4\n                              /*yield*/\n                              , getModelAuthModes({\n                                authModeStrategy: this.authModeStrategy,\n                                defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                                modelName: modelDefinition.name,\n                                schema: this.schema\n                              })];\n\n                            case 1:\n                              modelAuthModes = _d.sent();\n                              readAuthModes = modelAuthModes.READ;\n                              subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {}, _b[TransformerMutationType.CREATE] = [], _b[TransformerMutationType.UPDATE] = [], _b[TransformerMutationType.DELETE] = [], _b), _a));\n                              operations = [TransformerMutationType.CREATE, TransformerMutationType.UPDATE, TransformerMutationType.DELETE];\n                              operationAuthModeAttempts = (_c = {}, _c[TransformerMutationType.CREATE] = 0, _c[TransformerMutationType.UPDATE] = 0, _c[TransformerMutationType.DELETE] = 0, _c);\n                              predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(modelDefinition), false);\n                              addFilterArg = predicatesGroup !== undefined;\n\n                              subscriptionRetry = function (operation, addFilter) {\n                                if (addFilter === void 0) {\n                                  addFilter = addFilterArg;\n                                }\n\n                                return __awaiter(_this, void 0, void 0, function () {\n                                  var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, customUserAgentDetails, queryObservable, subscriptionReadyCallback;\n\n                                  var _this = this;\n\n                                  return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                      case 0:\n                                        _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]], addFilter), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                        return [4\n                                        /*yield*/\n                                        , getTokenForCustomAuth(authMode, this.amplifyConfig)];\n\n                                      case 1:\n                                        authToken = _b.sent();\n                                        variables = {};\n                                        customUserAgentDetails = {\n                                          category: Category.DataStore,\n                                          action: DataStoreAction.Subscribe\n                                        };\n\n                                        if (addFilter && predicatesGroup) {\n                                          variables['filter'] = predicateToGraphQLFilter(predicatesGroup);\n                                        }\n\n                                        if (isOwner) {\n                                          if (!ownerValue) {\n                                            observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                            return [2\n                                            /*return*/\n                                            ];\n                                          }\n\n                                          variables[ownerField] = ownerValue;\n                                        }\n\n                                        logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                        queryObservable = this.amplifyContext.InternalAPI.graphql(__assign(__assign({\n                                          query: query,\n                                          variables: variables\n                                        }, {\n                                          authMode: authMode\n                                        }), {\n                                          authToken: authToken\n                                        }), undefined, customUserAgentDetails); // TODO: consider onTerminate.then(() => API.cancel(...))\n\n                                        subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable.map(function (_a) {\n                                          var value = _a.value;\n                                          return value;\n                                        }).subscribe({\n                                          next: function (_a) {\n                                            var data = _a.data,\n                                                errors = _a.errors;\n\n                                            if (Array.isArray(errors) && errors.length > 0) {\n                                              var messages = errors.map(function (_a) {\n                                                var message = _a.message;\n                                                return message;\n                                              });\n                                              logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n\n                                              _this.drainBuffer();\n\n                                              return;\n                                            }\n\n                                            var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false); // @ts-ignore\n\n                                            var _b = data,\n                                                _c = opName,\n                                                record = _b[_c]; // checking incoming subscription against syncPredicate.\n                                            // once AppSync implements filters on subscriptions, we'll be\n                                            // able to set these when establishing the subscription instead.\n                                            // Until then, we'll need to filter inbound\n\n                                            if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                              _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                            }\n\n                                            _this.drainBuffer();\n                                          },\n                                          error: function (subscriptionError) {\n                                            return __awaiter(_this, void 0, void 0, function () {\n                                              var _a, _b, _c, _d, message, isRTFError, e_1;\n\n                                              return __generator(this, function (_e) {\n                                                switch (_e.label) {\n                                                  case 0:\n                                                    _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                      errors: []\n                                                    } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n                                                    isRTFError = // only attempt catch if a filter variable was added to the subscription query\n                                                    addFilter && this.catchRTFError(message, modelDefinition, predicatesGroup); // Catch RTF errors\n\n                                                    if (isRTFError) {\n                                                      // Unsubscribe and clear subscription array for model/operation\n                                                      subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                        return subscription.unsubscribe();\n                                                      });\n                                                      subscriptions[modelDefinition.name][transformerMutationType] = []; // retry subscription connection without filter\n\n                                                      subscriptionRetry(operation, false);\n                                                      return [2\n                                                      /*return*/\n                                                      ];\n                                                    }\n\n                                                    if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) || message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                      // Unsubscribe and clear subscription array for model/operation\n                                                      subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                        return subscription.unsubscribe();\n                                                      });\n                                                      subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                      operationAuthModeAttempts[operation]++;\n\n                                                      if (operationAuthModeAttempts[operation] >= readAuthModes.length) {\n                                                        // last auth mode retry. Continue with error\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                      } else {\n                                                        // retry with different auth mode. Do not trigger\n                                                        // observer error or error handler\n                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                        subscriptionRetry(operation);\n                                                        return [2\n                                                        /*return*/\n                                                        ];\n                                                      }\n                                                    }\n\n                                                    logger.warn('subscriptionError', message);\n                                                    _e.label = 1;\n\n                                                  case 1:\n                                                    _e.trys.push([1, 3,, 4]);\n\n                                                    return [4\n                                                    /*yield*/\n                                                    , this.errorHandler({\n                                                      recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                      localModel: null,\n                                                      message: message,\n                                                      model: modelDefinition.name,\n                                                      operation: operation,\n                                                      errorType: getSubscriptionErrorType(subscriptionError),\n                                                      process: ProcessName.subscribe,\n                                                      remoteModel: null,\n                                                      cause: subscriptionError\n                                                    })];\n\n                                                  case 2:\n                                                    _e.sent();\n\n                                                    return [3\n                                                    /*break*/\n                                                    , 4];\n\n                                                  case 3:\n                                                    e_1 = _e.sent();\n                                                    logger.error('Subscription error handler failed with:', e_1);\n                                                    return [3\n                                                    /*break*/\n                                                    , 4];\n\n                                                  case 4:\n                                                    if (typeof subscriptionReadyCallback === 'function') {\n                                                      subscriptionReadyCallback();\n                                                    }\n\n                                                    if (message.includes('\"errorType\":\"Unauthorized\"') || message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                      return [2\n                                                      /*return*/\n                                                      ];\n                                                    }\n\n                                                    observer.error(message);\n                                                    return [2\n                                                    /*return*/\n                                                    ];\n                                                }\n                                              });\n                                            });\n                                          }\n                                        }));\n                                        promises.push(function () {\n                                          return __awaiter(_this, void 0, void 0, function () {\n                                            var boundFunction;\n\n                                            var _this = this;\n\n                                            return __generator(this, function (_a) {\n                                              switch (_a.label) {\n                                                case 0:\n                                                  return [4\n                                                  /*yield*/\n                                                  , new Promise(function (res) {\n                                                    subscriptionReadyCallback = res;\n                                                    boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                    Hub.listen('api', boundFunction);\n                                                  })];\n\n                                                case 1:\n                                                  _a.sent();\n\n                                                  Hub.remove('api', boundFunction);\n                                                  return [2\n                                                  /*return*/\n                                                  ];\n                                              }\n                                            });\n                                          });\n                                        }());\n                                        return [2\n                                        /*return*/\n                                        ];\n                                    }\n                                  });\n                                });\n                              };\n\n                              operations.forEach(function (op) {\n                                return subscriptionRetry(op);\n                              });\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    });\n                  });\n                });\n                this.runningProcesses.isOpen && this.runningProcesses.add(function () {\n                  return Promise.all(promises).then(function () {\n                    observer.next(CONTROL_MSG.CONNECTED);\n                  });\n                });\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      }, 'subscription processor new subscriber');\n\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            Object.keys(subscriptions).forEach(function (modelName) {\n              subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n              subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) {\n                return subscription.unsubscribe();\n              });\n            });\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      });\n    });\n    var dataObservable = new Observable(function (observer) {\n      _this.dataObserver = observer;\n\n      _this.drainBuffer();\n\n      return _this.runningProcesses.addCleaner(function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            this.dataObserver = null;\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      });\n    });\n    return [ctlObservable, dataObservable];\n  };\n\n  SubscriptionProcessor.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n    if (!predicatesGroup) {\n      return true;\n    }\n\n    var predicates = predicatesGroup.predicates,\n        type = predicatesGroup.type;\n    return validatePredicate(record, type, predicates);\n  };\n\n  SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n    this.buffer.push([transformerMutationType, modelDefinition, data]);\n  };\n\n  SubscriptionProcessor.prototype.drainBuffer = function () {\n    var _this = this;\n\n    if (this.dataObserver) {\n      this.buffer.forEach(function (data) {\n        return _this.dataObserver.next(data);\n      });\n      this.buffer = [];\n    }\n  };\n  /**\n   * @returns true if the service returned an RTF subscription error\n   * @remarks logs a warning with remediation instructions\n   *\n   */\n\n\n  SubscriptionProcessor.prototype.catchRTFError = function (message, modelDefinition, predicatesGroup) {\n    var header = 'Backend subscriptions filtering error.\\n' + 'Subscriptions filtering will be applied clientside.\\n';\n    var messageErrorTypeMap = {\n      'UnknownArgument: Unknown field argument filter': RTFError.UnknownField,\n      'Filters exceed maximum attributes limit': RTFError.MaxAttributes,\n      'Filters combination exceed maximum limit': RTFError.MaxCombinations,\n      'filter uses same fieldName multiple time': RTFError.RepeatedFieldname,\n      \"The variables input contains a field name 'not'\": RTFError.NotGroup,\n      'The variables input contains a field that is not defined for input object type': RTFError.FieldNotInType\n    };\n\n    var _a = __read(Object.entries(messageErrorTypeMap).find(function (_a) {\n      var _b = __read(_a, 1),\n          errorMsg = _b[0];\n\n      return message.includes(errorMsg);\n    }) || [], 2),\n        _errorMsg = _a[0],\n        errorType = _a[1];\n\n    if (errorType !== undefined) {\n      var remediationMessage = generateRTFRemediation(errorType, modelDefinition, predicatesGroup);\n      logger.warn(header + \"\\n\" + message + \"\\n\" + remediationMessage);\n      return true;\n    }\n\n    return false;\n  };\n\n  return SubscriptionProcessor;\n}();\n\nexport { SubscriptionProcessor };","map":{"version":3,"names":["__assign","__awaiter","__generator","__read","__spread","GRAPHQL_AUTH_MODE","InternalAPI","Auth","Cache","Category","ConsoleLogger","Logger","DataStoreAction","Hub","BackgroundProcessManager","CONTROL_MSG","PUBSUB_CONTROL_MSG","Observable","ProcessName","buildSubscriptionGraphQLOperation","getAuthorizationRules","getModelAuthModes","getUserGroupsFromToken","TransformerMutationType","getTokenForCustomAuth","predicateToGraphQLFilter","RTFError","generateRTFRemediation","ModelPredicateCreator","validatePredicate","getSubscriptionErrorType","logger","USER_CREDENTIALS","SubscriptionProcessor","schema","syncPredicates","amplifyConfig","authModeStrategy","errorHandler","amplifyContext","typeQuery","WeakMap","buffer","runningProcesses","prototype","buildSubscription","namespace","model","transformerMutationType","userCredentials","cognitoTokenPayload","oidcTokenPayload","authMode","filterArg","aws_appsync_authenticationType","_a","getAuthorizationInfo","isOwner","ownerField","ownerValue","_b","opType","opName","query","defaultAuthType","rules","iamPrivateAuth","AWS_IAM","find","rule","authStrategy","provider","unauth","groupAuthRules","filter","includes","validGroup","AMAZON_COGNITO_USER_POOLS","OPENID_CONNECT","groupAuthRule","cognitoUserGroups","oidcUserGroups","userGroup","groups","group","cognitoOwnerAuthRules","ownerAuthInfo","forEach","ownerAuthRule","identityClaim","singleOwner","fields","isArray","isOwnerArgRequired","areSubscriptionsPublic","oidcOwnerAuthRules","hubQueryCompletionListener","completed","capsule","event","payload","SUBSCRIPTION_ACK","start","_this","ctlObservable","observer","promises","subscriptions","none","add","credentials","err_1","session","err_2","aws_cognito_region","AuthConfig","token","federatedInfo","currentUser","err_3","label","trys","push","currentCredentials","sent","authenticated","auth","currentSession","getIdToken","decodePayload","region","getItem","currentAuthenticatedUser","split","JSON","parse","Buffer","from","toString","debug","Object","values","namespaces","models","syncable","modelDefinition","isOpen","modelAuthModes","readAuthModes","operations","operationAuthModeAttempts","predicatesGroup","addFilterArg","subscriptionRetry","_c","_d","defaultAuthMode","modelName","name","READ","CREATE","UPDATE","DELETE","getPredicates","get","undefined","operation","addFilter","authToken","variables","customUserAgentDetails","queryObservable","subscriptionReadyCallback","category","DataStore","action","Subscribe","error","graphql","map","value","subscribe","next","data","errors","Array","length","messages","message","warn","join","drainBuffer","record","passesPredicateValidation","pushToBuffer","subscriptionError","isRTFError","e_1","_e","catchRTFError","subscription","unsubscribe","REALTIME_SUBSCRIPTION_INIT_ERROR","CONNECTION_FAILED","recoverySuggestion","localModel","errorType","process","remoteModel","cause","boundFunction","Promise","res","bind","listen","remove","op","all","then","CONNECTED","addCleaner","keys","dataObservable","dataObserver","stop","close","open","predicates","type","header","messageErrorTypeMap","UnknownField","MaxAttributes","MaxCombinations","RepeatedFieldname","NotGroup","FieldNotInType","entries","errorMsg","_errorMsg","remediationMessage"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/sync/processors/subscription.js"],"sourcesContent":["import { __assign, __awaiter, __generator, __read, __spread } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { GRAPHQL_AUTH_MODE } from '@aws-amplify/api';\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { Category, ConsoleLogger as Logger, DataStoreAction, Hub, BackgroundProcessManager, } from '@aws-amplify/core';\nimport { CONTROL_MSG as PUBSUB_CONTROL_MSG } from '@aws-amplify/pubsub';\nimport Observable from 'zen-observable-ts';\nimport { ProcessName, } from '../../types';\nimport { buildSubscriptionGraphQLOperation, getAuthorizationRules, getModelAuthModes, getUserGroupsFromToken, TransformerMutationType, getTokenForCustomAuth, predicateToGraphQLFilter, RTFError, generateRTFRemediation, } from '../utils';\nimport { ModelPredicateCreator } from '../../predicates';\nimport { validatePredicate } from '../../util';\nimport { getSubscriptionErrorType } from './errorMaps';\nvar logger = new Logger('DataStore');\nexport var CONTROL_MSG;\n(function (CONTROL_MSG) {\n    CONTROL_MSG[\"CONNECTED\"] = \"CONNECTED\";\n})(CONTROL_MSG || (CONTROL_MSG = {}));\nexport var USER_CREDENTIALS;\n(function (USER_CREDENTIALS) {\n    USER_CREDENTIALS[USER_CREDENTIALS[\"none\"] = 0] = \"none\";\n    USER_CREDENTIALS[USER_CREDENTIALS[\"unauth\"] = 1] = \"unauth\";\n    USER_CREDENTIALS[USER_CREDENTIALS[\"auth\"] = 2] = \"auth\";\n})(USER_CREDENTIALS || (USER_CREDENTIALS = {}));\nvar SubscriptionProcessor = /** @class */ (function () {\n    function SubscriptionProcessor(schema, syncPredicates, amplifyConfig, authModeStrategy, errorHandler, amplifyContext) {\n        if (amplifyConfig === void 0) { amplifyConfig = {}; }\n        if (amplifyContext === void 0) { amplifyContext = {\n            Auth: Auth,\n            InternalAPI: InternalAPI,\n            Cache: Cache,\n        }; }\n        this.schema = schema;\n        this.syncPredicates = syncPredicates;\n        this.amplifyConfig = amplifyConfig;\n        this.authModeStrategy = authModeStrategy;\n        this.errorHandler = errorHandler;\n        this.amplifyContext = amplifyContext;\n        this.typeQuery = new WeakMap();\n        this.buffer = [];\n        this.runningProcesses = new BackgroundProcessManager();\n    }\n    SubscriptionProcessor.prototype.buildSubscription = function (namespace, model, transformerMutationType, userCredentials, cognitoTokenPayload, oidcTokenPayload, authMode, filterArg) {\n        if (filterArg === void 0) { filterArg = false; }\n        var aws_appsync_authenticationType = this.amplifyConfig.aws_appsync_authenticationType;\n        var _a = this.getAuthorizationInfo(model, userCredentials, aws_appsync_authenticationType, cognitoTokenPayload, oidcTokenPayload, authMode) || {}, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue;\n        var _b = __read(buildSubscriptionGraphQLOperation(namespace, model, transformerMutationType, isOwner, ownerField, filterArg), 3), opType = _b[0], opName = _b[1], query = _b[2];\n        return { authMode: authMode, opType: opType, opName: opName, query: query, isOwner: isOwner, ownerField: ownerField, ownerValue: ownerValue };\n    };\n    SubscriptionProcessor.prototype.getAuthorizationInfo = function (model, userCredentials, defaultAuthType, cognitoTokenPayload, oidcTokenPayload, authMode) {\n        if (cognitoTokenPayload === void 0) { cognitoTokenPayload = {}; }\n        if (oidcTokenPayload === void 0) { oidcTokenPayload = {}; }\n        var rules = getAuthorizationRules(model);\n        // Return null if user doesn't have proper credentials for private API with IAM auth\n        var iamPrivateAuth = authMode === GRAPHQL_AUTH_MODE.AWS_IAM &&\n            rules.find(function (rule) { return rule.authStrategy === 'private' && rule.provider === 'iam'; });\n        if (iamPrivateAuth && userCredentials === USER_CREDENTIALS.unauth) {\n            return null;\n        }\n        // Group auth should take precedence over owner auth, so we are checking\n        // if rule(s) have group authorization as well as if either the Cognito or\n        // OIDC token has a groupClaim. If so, we are returning auth info before\n        // any further owner-based auth checks.\n        var groupAuthRules = rules.filter(function (rule) {\n            return rule.authStrategy === 'groups' &&\n                ['userPools', 'oidc'].includes(rule.provider);\n        });\n        var validGroup = (authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS ||\n            authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT) &&\n            groupAuthRules.find(function (groupAuthRule) {\n                // validate token against groupClaim\n                var cognitoUserGroups = getUserGroupsFromToken(cognitoTokenPayload, groupAuthRule);\n                var oidcUserGroups = getUserGroupsFromToken(oidcTokenPayload, groupAuthRule);\n                return __spread(cognitoUserGroups, oidcUserGroups).find(function (userGroup) {\n                    return groupAuthRule.groups.find(function (group) { return group === userGroup; });\n                });\n            });\n        if (validGroup) {\n            return {\n                authMode: authMode,\n                isOwner: false,\n            };\n        }\n        // Owner auth needs additional values to be returned in order to create the subscription with\n        // the correct parameters so we are getting the owner value from the Cognito token via the\n        // identityClaim from the auth rule.\n        var cognitoOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS\n            ? rules.filter(function (rule) {\n                return rule.authStrategy === 'owner' && rule.provider === 'userPools';\n            })\n            : [];\n        var ownerAuthInfo;\n        cognitoOwnerAuthRules.forEach(function (ownerAuthRule) {\n            var _a;\n            var ownerValue = cognitoTokenPayload[ownerAuthRule.identityClaim];\n            // AuthZ for \"list of owners\" is handled dynamically in the subscription auth request\n            // resolver. It doesn't rely on a subscription arg.\n            // Only pass a subscription arg for single owner auth\n            var singleOwner = ((_a = model.fields[ownerAuthRule.ownerField]) === null || _a === void 0 ? void 0 : _a.isArray) !== true;\n            var isOwnerArgRequired = singleOwner && !ownerAuthRule.areSubscriptionsPublic;\n            if (ownerValue) {\n                ownerAuthInfo = {\n                    authMode: GRAPHQL_AUTH_MODE.AMAZON_COGNITO_USER_POOLS,\n                    isOwner: isOwnerArgRequired,\n                    ownerField: ownerAuthRule.ownerField,\n                    ownerValue: ownerValue,\n                };\n            }\n        });\n        if (ownerAuthInfo) {\n            return ownerAuthInfo;\n        }\n        // Owner auth needs additional values to be returned in order to create the subscription with\n        // the correct parameters so we are getting the owner value from the OIDC token via the\n        // identityClaim from the auth rule.\n        var oidcOwnerAuthRules = authMode === GRAPHQL_AUTH_MODE.OPENID_CONNECT\n            ? rules.filter(function (rule) { return rule.authStrategy === 'owner' && rule.provider === 'oidc'; })\n            : [];\n        oidcOwnerAuthRules.forEach(function (ownerAuthRule) {\n            var _a;\n            var ownerValue = oidcTokenPayload[ownerAuthRule.identityClaim];\n            var singleOwner = ((_a = model.fields[ownerAuthRule.ownerField]) === null || _a === void 0 ? void 0 : _a.isArray) !== true;\n            var isOwnerArgRequired = singleOwner && !ownerAuthRule.areSubscriptionsPublic;\n            if (ownerValue) {\n                ownerAuthInfo = {\n                    authMode: GRAPHQL_AUTH_MODE.OPENID_CONNECT,\n                    isOwner: isOwnerArgRequired,\n                    ownerField: ownerAuthRule.ownerField,\n                    ownerValue: ownerValue,\n                };\n            }\n        });\n        if (ownerAuthInfo) {\n            return ownerAuthInfo;\n        }\n        // Fallback: return authMode or default auth type\n        return {\n            authMode: authMode || defaultAuthType,\n            isOwner: false,\n        };\n    };\n    SubscriptionProcessor.prototype.hubQueryCompletionListener = function (completed, capsule) {\n        var event = capsule.payload.event;\n        if (event === PUBSUB_CONTROL_MSG.SUBSCRIPTION_ACK) {\n            completed();\n        }\n    };\n    SubscriptionProcessor.prototype.start = function () {\n        var _this = this;\n        this.runningProcesses =\n            this.runningProcesses || new BackgroundProcessManager();\n        var ctlObservable = new Observable(function (observer) {\n            var promises = [];\n            // Creating subs for each model/operation combo so they can be unsubscribed\n            // independently, since the auth retry behavior is asynchronous.\n            var subscriptions = {};\n            var cognitoTokenPayload, oidcTokenPayload;\n            var userCredentials = USER_CREDENTIALS.none;\n            _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                var credentials, err_1, session, err_2, _a, aws_cognito_region, AuthConfig, token, federatedInfo, currentUser, payload, err_3;\n                var _this = this;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            _b.trys.push([0, 2, , 3]);\n                            return [4 /*yield*/, this.amplifyContext.Auth.currentCredentials()];\n                        case 1:\n                            credentials = _b.sent();\n                            userCredentials = credentials.authenticated\n                                ? USER_CREDENTIALS.auth\n                                : USER_CREDENTIALS.unauth;\n                            return [3 /*break*/, 3];\n                        case 2:\n                            err_1 = _b.sent();\n                            return [3 /*break*/, 3];\n                        case 3:\n                            _b.trys.push([3, 5, , 6]);\n                            return [4 /*yield*/, this.amplifyContext.Auth.currentSession()];\n                        case 4:\n                            session = _b.sent();\n                            cognitoTokenPayload = session.getIdToken().decodePayload();\n                            return [3 /*break*/, 6];\n                        case 5:\n                            err_2 = _b.sent();\n                            return [3 /*break*/, 6];\n                        case 6:\n                            _b.trys.push([6, 11, , 12]);\n                            _a = this.amplifyConfig, aws_cognito_region = _a.aws_cognito_region, AuthConfig = _a.Auth;\n                            if (!aws_cognito_region || (AuthConfig && !AuthConfig.region)) {\n                                throw 'Auth is not configured';\n                            }\n                            token = void 0;\n                            return [4 /*yield*/, this.amplifyContext.Cache.getItem('federatedInfo')];\n                        case 7:\n                            federatedInfo = _b.sent();\n                            if (!federatedInfo) return [3 /*break*/, 8];\n                            token = federatedInfo.token;\n                            return [3 /*break*/, 10];\n                        case 8: return [4 /*yield*/, this.amplifyContext.Auth.currentAuthenticatedUser()];\n                        case 9:\n                            currentUser = _b.sent();\n                            if (currentUser) {\n                                token = currentUser.token;\n                            }\n                            _b.label = 10;\n                        case 10:\n                            if (token) {\n                                payload = token.split('.')[1];\n                                oidcTokenPayload = JSON.parse(Buffer.from(payload, 'base64').toString('utf8'));\n                            }\n                            return [3 /*break*/, 12];\n                        case 11:\n                            err_3 = _b.sent();\n                            logger.debug('error getting OIDC JWT', err_3);\n                            return [3 /*break*/, 12];\n                        case 12:\n                            Object.values(this.schema.namespaces).forEach(function (namespace) {\n                                Object.values(namespace.models)\n                                    .filter(function (_a) {\n                                    var syncable = _a.syncable;\n                                    return syncable;\n                                })\n                                    .forEach(function (modelDefinition) {\n                                    return _this.runningProcesses.isOpen &&\n                                        _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                                            var modelAuthModes, readAuthModes, operations, operationAuthModeAttempts, predicatesGroup, addFilterArg, subscriptionRetry;\n                                            var _a, _b, _c;\n                                            var _this = this;\n                                            return __generator(this, function (_d) {\n                                                switch (_d.label) {\n                                                    case 0: return [4 /*yield*/, getModelAuthModes({\n                                                            authModeStrategy: this.authModeStrategy,\n                                                            defaultAuthMode: this.amplifyConfig.aws_appsync_authenticationType,\n                                                            modelName: modelDefinition.name,\n                                                            schema: this.schema,\n                                                        })];\n                                                    case 1:\n                                                        modelAuthModes = _d.sent();\n                                                        readAuthModes = modelAuthModes.READ;\n                                                        subscriptions = __assign(__assign({}, subscriptions), (_a = {}, _a[modelDefinition.name] = (_b = {},\n                                                            _b[TransformerMutationType.CREATE] = [],\n                                                            _b[TransformerMutationType.UPDATE] = [],\n                                                            _b[TransformerMutationType.DELETE] = [],\n                                                            _b), _a));\n                                                        operations = [\n                                                            TransformerMutationType.CREATE,\n                                                            TransformerMutationType.UPDATE,\n                                                            TransformerMutationType.DELETE,\n                                                        ];\n                                                        operationAuthModeAttempts = (_c = {},\n                                                            _c[TransformerMutationType.CREATE] = 0,\n                                                            _c[TransformerMutationType.UPDATE] = 0,\n                                                            _c[TransformerMutationType.DELETE] = 0,\n                                                            _c);\n                                                        predicatesGroup = ModelPredicateCreator.getPredicates(this.syncPredicates.get(modelDefinition), false);\n                                                        addFilterArg = predicatesGroup !== undefined;\n                                                        subscriptionRetry = function (operation, addFilter) {\n                                                            if (addFilter === void 0) { addFilter = addFilterArg; }\n                                                            return __awaiter(_this, void 0, void 0, function () {\n                                                                var _a, transformerMutationType, opName, query, isOwner, ownerField, ownerValue, authMode, authToken, variables, customUserAgentDetails, queryObservable, subscriptionReadyCallback;\n                                                                var _this = this;\n                                                                return __generator(this, function (_b) {\n                                                                    switch (_b.label) {\n                                                                        case 0:\n                                                                            _a = this.buildSubscription(namespace, modelDefinition, operation, userCredentials, cognitoTokenPayload, oidcTokenPayload, readAuthModes[operationAuthModeAttempts[operation]], addFilter), transformerMutationType = _a.opType, opName = _a.opName, query = _a.query, isOwner = _a.isOwner, ownerField = _a.ownerField, ownerValue = _a.ownerValue, authMode = _a.authMode;\n                                                                            return [4 /*yield*/, getTokenForCustomAuth(authMode, this.amplifyConfig)];\n                                                                        case 1:\n                                                                            authToken = _b.sent();\n                                                                            variables = {};\n                                                                            customUserAgentDetails = {\n                                                                                category: Category.DataStore,\n                                                                                action: DataStoreAction.Subscribe,\n                                                                            };\n                                                                            if (addFilter && predicatesGroup) {\n                                                                                variables['filter'] =\n                                                                                    predicateToGraphQLFilter(predicatesGroup);\n                                                                            }\n                                                                            if (isOwner) {\n                                                                                if (!ownerValue) {\n                                                                                    observer.error('Owner field required, sign in is needed in order to perform this operation');\n                                                                                    return [2 /*return*/];\n                                                                                }\n                                                                                variables[ownerField] = ownerValue;\n                                                                            }\n                                                                            logger.debug(\"Attempting \" + operation + \" subscription with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                                            queryObservable = this.amplifyContext.InternalAPI.graphql(__assign(__assign({ query: query,\n                                                                                variables: variables }, { authMode: authMode }), { authToken: authToken }), undefined, customUserAgentDetails);\n                                                                            // TODO: consider onTerminate.then(() => API.cancel(...))\n                                                                            subscriptions[modelDefinition.name][transformerMutationType].push(queryObservable\n                                                                                .map(function (_a) {\n                                                                                var value = _a.value;\n                                                                                return value;\n                                                                            })\n                                                                                .subscribe({\n                                                                                next: function (_a) {\n                                                                                    var data = _a.data, errors = _a.errors;\n                                                                                    if (Array.isArray(errors) && errors.length > 0) {\n                                                                                        var messages = errors.map(function (_a) {\n                                                                                            var message = _a.message;\n                                                                                            return message;\n                                                                                        });\n                                                                                        logger.warn(\"Skipping incoming subscription. Messages: \" + messages.join('\\n'));\n                                                                                        _this.drainBuffer();\n                                                                                        return;\n                                                                                    }\n                                                                                    var predicatesGroup = ModelPredicateCreator.getPredicates(_this.syncPredicates.get(modelDefinition), false);\n                                                                                    // @ts-ignore\n                                                                                    var _b = data, _c = opName, record = _b[_c];\n                                                                                    // checking incoming subscription against syncPredicate.\n                                                                                    // once AppSync implements filters on subscriptions, we'll be\n                                                                                    // able to set these when establishing the subscription instead.\n                                                                                    // Until then, we'll need to filter inbound\n                                                                                    if (_this.passesPredicateValidation(record, predicatesGroup)) {\n                                                                                        _this.pushToBuffer(transformerMutationType, modelDefinition, record);\n                                                                                    }\n                                                                                    _this.drainBuffer();\n                                                                                },\n                                                                                error: function (subscriptionError) { return __awaiter(_this, void 0, void 0, function () {\n                                                                                    var _a, _b, _c, _d, message, isRTFError, e_1;\n                                                                                    return __generator(this, function (_e) {\n                                                                                        switch (_e.label) {\n                                                                                            case 0:\n                                                                                                _a = subscriptionError.error, _b = __read((_a === void 0 ? {\n                                                                                                    errors: [],\n                                                                                                } : _a).errors, 1), _c = _b[0], _d = (_c === void 0 ? {} : _c).message, message = _d === void 0 ? '' : _d;\n                                                                                                isRTFError = \n                                                                                                // only attempt catch if a filter variable was added to the subscription query\n                                                                                                addFilter &&\n                                                                                                    this.catchRTFError(message, modelDefinition, predicatesGroup);\n                                                                                                // Catch RTF errors\n                                                                                                if (isRTFError) {\n                                                                                                    // Unsubscribe and clear subscription array for model/operation\n                                                                                                    subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                                                                        return subscription.unsubscribe();\n                                                                                                    });\n                                                                                                    subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                                                                    // retry subscription connection without filter\n                                                                                                    subscriptionRetry(operation, false);\n                                                                                                    return [2 /*return*/];\n                                                                                                }\n                                                                                                if (message.includes(PUBSUB_CONTROL_MSG.REALTIME_SUBSCRIPTION_INIT_ERROR) ||\n                                                                                                    message.includes(PUBSUB_CONTROL_MSG.CONNECTION_FAILED)) {\n                                                                                                    // Unsubscribe and clear subscription array for model/operation\n                                                                                                    subscriptions[modelDefinition.name][transformerMutationType].forEach(function (subscription) {\n                                                                                                        return subscription.unsubscribe();\n                                                                                                    });\n                                                                                                    subscriptions[modelDefinition.name][transformerMutationType] = [];\n                                                                                                    operationAuthModeAttempts[operation]++;\n                                                                                                    if (operationAuthModeAttempts[operation] >=\n                                                                                                        readAuthModes.length) {\n                                                                                                        // last auth mode retry. Continue with error\n                                                                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1]);\n                                                                                                    }\n                                                                                                    else {\n                                                                                                        // retry with different auth mode. Do not trigger\n                                                                                                        // observer error or error handler\n                                                                                                        logger.debug(operation + \" subscription failed with authMode: \" + readAuthModes[operationAuthModeAttempts[operation] - 1] + \". Retrying with authMode: \" + readAuthModes[operationAuthModeAttempts[operation]]);\n                                                                                                        subscriptionRetry(operation);\n                                                                                                        return [2 /*return*/];\n                                                                                                    }\n                                                                                                }\n                                                                                                logger.warn('subscriptionError', message);\n                                                                                                _e.label = 1;\n                                                                                            case 1:\n                                                                                                _e.trys.push([1, 3, , 4]);\n                                                                                                return [4 /*yield*/, this.errorHandler({\n                                                                                                        recoverySuggestion: 'Ensure app code is up to date, auth directives exist and are correct on each model, and that server-side data has not been invalidated by a schema change. If the problem persists, search for or create an issue: https://github.com/aws-amplify/amplify-js/issues',\n                                                                                                        localModel: null,\n                                                                                                        message: message,\n                                                                                                        model: modelDefinition.name,\n                                                                                                        operation: operation,\n                                                                                                        errorType: getSubscriptionErrorType(subscriptionError),\n                                                                                                        process: ProcessName.subscribe,\n                                                                                                        remoteModel: null,\n                                                                                                        cause: subscriptionError,\n                                                                                                    })];\n                                                                                            case 2:\n                                                                                                _e.sent();\n                                                                                                return [3 /*break*/, 4];\n                                                                                            case 3:\n                                                                                                e_1 = _e.sent();\n                                                                                                logger.error('Subscription error handler failed with:', e_1);\n                                                                                                return [3 /*break*/, 4];\n                                                                                            case 4:\n                                                                                                if (typeof subscriptionReadyCallback === 'function') {\n                                                                                                    subscriptionReadyCallback();\n                                                                                                }\n                                                                                                if (message.includes('\"errorType\":\"Unauthorized\"') ||\n                                                                                                    message.includes('\"errorType\":\"OperationDisabled\"')) {\n                                                                                                    return [2 /*return*/];\n                                                                                                }\n                                                                                                observer.error(message);\n                                                                                                return [2 /*return*/];\n                                                                                        }\n                                                                                    });\n                                                                                }); },\n                                                                            }));\n                                                                            promises.push((function () { return __awaiter(_this, void 0, void 0, function () {\n                                                                                var boundFunction;\n                                                                                var _this = this;\n                                                                                return __generator(this, function (_a) {\n                                                                                    switch (_a.label) {\n                                                                                        case 0: return [4 /*yield*/, new Promise(function (res) {\n                                                                                                subscriptionReadyCallback = res;\n                                                                                                boundFunction = _this.hubQueryCompletionListener.bind(_this, res);\n                                                                                                Hub.listen('api', boundFunction);\n                                                                                            })];\n                                                                                        case 1:\n                                                                                            _a.sent();\n                                                                                            Hub.remove('api', boundFunction);\n                                                                                            return [2 /*return*/];\n                                                                                    }\n                                                                                });\n                                                                            }); })());\n                                                                            return [2 /*return*/];\n                                                                    }\n                                                                });\n                                                            });\n                                                        };\n                                                        operations.forEach(function (op) { return subscriptionRetry(op); });\n                                                        return [2 /*return*/];\n                                                }\n                                            });\n                                        }); });\n                                });\n                            });\n                            this.runningProcesses.isOpen &&\n                                this.runningProcesses.add(function () {\n                                    return Promise.all(promises).then(function () {\n                                        observer.next(CONTROL_MSG.CONNECTED);\n                                    });\n                                });\n                            return [2 /*return*/];\n                    }\n                });\n            }); }, 'subscription processor new subscriber');\n            return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    Object.keys(subscriptions).forEach(function (modelName) {\n                        subscriptions[modelName][TransformerMutationType.CREATE].forEach(function (subscription) { return subscription.unsubscribe(); });\n                        subscriptions[modelName][TransformerMutationType.UPDATE].forEach(function (subscription) { return subscription.unsubscribe(); });\n                        subscriptions[modelName][TransformerMutationType.DELETE].forEach(function (subscription) { return subscription.unsubscribe(); });\n                    });\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n        var dataObservable = new Observable(function (observer) {\n            _this.dataObserver = observer;\n            _this.drainBuffer();\n            return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    this.dataObserver = null;\n                    return [2 /*return*/];\n                });\n            }); });\n        });\n        return [ctlObservable, dataObservable];\n    };\n    SubscriptionProcessor.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 2:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    SubscriptionProcessor.prototype.passesPredicateValidation = function (record, predicatesGroup) {\n        if (!predicatesGroup) {\n            return true;\n        }\n        var predicates = predicatesGroup.predicates, type = predicatesGroup.type;\n        return validatePredicate(record, type, predicates);\n    };\n    SubscriptionProcessor.prototype.pushToBuffer = function (transformerMutationType, modelDefinition, data) {\n        this.buffer.push([transformerMutationType, modelDefinition, data]);\n    };\n    SubscriptionProcessor.prototype.drainBuffer = function () {\n        var _this = this;\n        if (this.dataObserver) {\n            this.buffer.forEach(function (data) { return _this.dataObserver.next(data); });\n            this.buffer = [];\n        }\n    };\n    /**\n     * @returns true if the service returned an RTF subscription error\n     * @remarks logs a warning with remediation instructions\n     *\n     */\n    SubscriptionProcessor.prototype.catchRTFError = function (message, modelDefinition, predicatesGroup) {\n        var header = 'Backend subscriptions filtering error.\\n' +\n            'Subscriptions filtering will be applied clientside.\\n';\n        var messageErrorTypeMap = {\n            'UnknownArgument: Unknown field argument filter': RTFError.UnknownField,\n            'Filters exceed maximum attributes limit': RTFError.MaxAttributes,\n            'Filters combination exceed maximum limit': RTFError.MaxCombinations,\n            'filter uses same fieldName multiple time': RTFError.RepeatedFieldname,\n            \"The variables input contains a field name 'not'\": RTFError.NotGroup,\n            'The variables input contains a field that is not defined for input object type': RTFError.FieldNotInType,\n        };\n        var _a = __read(Object.entries(messageErrorTypeMap).find(function (_a) {\n            var _b = __read(_a, 1), errorMsg = _b[0];\n            return message.includes(errorMsg);\n        }) || [], 2), _errorMsg = _a[0], errorType = _a[1];\n        if (errorType !== undefined) {\n            var remediationMessage = generateRTFRemediation(errorType, modelDefinition, predicatesGroup);\n            logger.warn(header + \"\\n\" + message + \"\\n\" + remediationMessage);\n            return true;\n        }\n        return false;\n    };\n    return SubscriptionProcessor;\n}());\nexport { SubscriptionProcessor };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}