{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tile } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmTile;\n\nfunction setup(backend) {\n  wasmTile = backend.wasm.cwrap(Tile, null\n  /* void */\n  , ['number', 'array', 'number', 'array', 'number', 'number' // out_id\n  ]);\n}\n\nfunction tile(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const {\n    reps\n  } = attrs;\n  const newShape = new Array(x.shape.length);\n\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[i] * reps[i];\n  }\n\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const newShapeBytes = new Uint8Array(new Int32Array(newShape).buffer);\n  const out = backend.makeOutput(newShape, x.dtype);\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  wasmTile(xId, xShapeBytes, x.shape.length, newShapeBytes, newShape.length, CppDType[out.dtype], outId);\n  return out;\n}\n\nexport const tileConfig = {\n  kernelName: Tile,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: tile\n};","map":{"version":3,"names":["Tile","CppDType","wasmTile","setup","backend","wasm","cwrap","tile","args","inputs","attrs","x","xId","dataIdMap","get","dataId","id","reps","newShape","Array","shape","length","i","xShapeBytes","Uint8Array","Int32Array","buffer","newShapeBytes","out","makeOutput","dtype","outId","tileConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Tile.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tile } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmTile;\nfunction setup(backend) {\n    wasmTile = backend.wasm.cwrap(Tile, null /* void */, [\n        'number',\n        'array',\n        'number',\n        'array',\n        'number',\n        'number' // out_id\n    ]);\n}\nfunction tile(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const { reps } = attrs;\n    const newShape = new Array(x.shape.length);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[i] * reps[i];\n    }\n    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n    const newShapeBytes = new Uint8Array(new Int32Array(newShape).buffer);\n    const out = backend.makeOutput(newShape, x.dtype);\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    wasmTile(xId, xShapeBytes, x.shape.length, newShapeBytes, newShape.length, CppDType[out.dtype], outId);\n    return out;\n}\nexport const tileConfig = {\n    kernelName: Tile,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: tile\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,IAAIC,QAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,QAAQ,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBN,IAAnB,EAAyB;EAAK;EAA9B,EAA0C,CACjD,QADiD,EAEjD,OAFiD,EAGjD,QAHiD,EAIjD,OAJiD,EAKjD,QALiD,EAMjD,QANiD,CAMxC;EANwC,CAA1C,CAAX;AAQH;;AACD,SAASO,IAAT,CAAcC,IAAd,EAAoB;EAChB,MAAM;IAAEC,MAAF;IAAUL,OAAV;IAAmBM;EAAnB,IAA6BF,IAAnC;EACA,MAAM;IAAEG;EAAF,IAAQF,MAAd;EACA,MAAMG,GAAG,GAAGR,OAAO,CAACS,SAAR,CAAkBC,GAAlB,CAAsBH,CAAC,CAACI,MAAxB,EAAgCC,EAA5C;EACA,MAAM;IAAEC;EAAF,IAAWP,KAAjB;EACA,MAAMQ,QAAQ,GAAG,IAAIC,KAAJ,CAAUR,CAAC,CAACS,KAAF,CAAQC,MAAlB,CAAjB;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACG,MAA7B,EAAqCC,CAAC,EAAtC,EAA0C;IACtCJ,QAAQ,CAACI,CAAD,CAAR,GAAcX,CAAC,CAACS,KAAF,CAAQE,CAAR,IAAaL,IAAI,CAACK,CAAD,CAA/B;EACH;;EACD,MAAMC,WAAW,GAAG,IAAIC,UAAJ,CAAe,IAAIC,UAAJ,CAAed,CAAC,CAACS,KAAjB,EAAwBM,MAAvC,CAApB;EACA,MAAMC,aAAa,GAAG,IAAIH,UAAJ,CAAe,IAAIC,UAAJ,CAAeP,QAAf,EAAyBQ,MAAxC,CAAtB;EACA,MAAME,GAAG,GAAGxB,OAAO,CAACyB,UAAR,CAAmBX,QAAnB,EAA6BP,CAAC,CAACmB,KAA/B,CAAZ;EACA,MAAMC,KAAK,GAAG3B,OAAO,CAACS,SAAR,CAAkBC,GAAlB,CAAsBc,GAAG,CAACb,MAA1B,EAAkCC,EAAhD;EACAd,QAAQ,CAACU,GAAD,EAAMW,WAAN,EAAmBZ,CAAC,CAACS,KAAF,CAAQC,MAA3B,EAAmCM,aAAnC,EAAkDT,QAAQ,CAACG,MAA3D,EAAmEpB,QAAQ,CAAC2B,GAAG,CAACE,KAAL,CAA3E,EAAwFC,KAAxF,CAAR;EACA,OAAOH,GAAP;AACH;;AACD,OAAO,MAAMI,UAAU,GAAG;EACtBC,UAAU,EAAEjC,IADU;EAEtBkC,WAAW,EAAE,MAFS;EAGtBC,SAAS,EAAEhC,KAHW;EAItBiC,UAAU,EAAE7B;AAJU,CAAnB"},"metadata":{},"sourceType":"module"}