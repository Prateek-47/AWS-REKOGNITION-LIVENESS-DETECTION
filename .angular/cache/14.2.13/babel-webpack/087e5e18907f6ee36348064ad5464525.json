{"ast":null,"code":"import partitionsInfo from \"./partitions.json\";\nlet selectedPartitionsInfo = partitionsInfo;\nlet selectedUserAgentPrefix = \"\";\nexport const partition = value => {\n  const {\n    partitions\n  } = selectedPartitionsInfo;\n\n  for (const partition of partitions) {\n    const {\n      regions,\n      outputs\n    } = partition;\n\n    for (const [region, regionData] of Object.entries(regions)) {\n      if (region === value) {\n        return { ...outputs,\n          ...regionData\n        };\n      }\n    }\n  }\n\n  for (const partition of partitions) {\n    const {\n      regionRegex,\n      outputs\n    } = partition;\n\n    if (new RegExp(regionRegex).test(value)) {\n      return { ...outputs\n      };\n    }\n  }\n\n  const DEFAULT_PARTITION = partitions.find(partition => partition.id === \"aws\");\n\n  if (!DEFAULT_PARTITION) {\n    throw new Error(\"Provided region was not found in the partition array or regex,\" + \" and default partition with id 'aws' doesn't exist.\");\n  }\n\n  return { ...DEFAULT_PARTITION.outputs\n  };\n};\nexport const setPartitionInfo = (partitionsInfo, userAgentPrefix = \"\") => {\n  selectedPartitionsInfo = partitionsInfo;\n  selectedUserAgentPrefix = userAgentPrefix;\n};\nexport const useDefaultPartitionInfo = () => {\n  setPartitionInfo(partitionsInfo, \"\");\n};\nexport const getUserAgentPrefix = () => selectedUserAgentPrefix;","map":{"version":3,"names":["partitionsInfo","selectedPartitionsInfo","selectedUserAgentPrefix","partition","value","partitions","regions","outputs","region","regionData","Object","entries","regionRegex","RegExp","test","DEFAULT_PARTITION","find","id","Error","setPartitionInfo","userAgentPrefix","useDefaultPartitionInfo","getUserAgentPrefix"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-sdk/util-endpoints/dist-es/lib/aws/partition.js"],"sourcesContent":["import partitionsInfo from \"./partitions.json\";\nlet selectedPartitionsInfo = partitionsInfo;\nlet selectedUserAgentPrefix = \"\";\nexport const partition = (value) => {\n    const { partitions } = selectedPartitionsInfo;\n    for (const partition of partitions) {\n        const { regions, outputs } = partition;\n        for (const [region, regionData] of Object.entries(regions)) {\n            if (region === value) {\n                return {\n                    ...outputs,\n                    ...regionData,\n                };\n            }\n        }\n    }\n    for (const partition of partitions) {\n        const { regionRegex, outputs } = partition;\n        if (new RegExp(regionRegex).test(value)) {\n            return {\n                ...outputs,\n            };\n        }\n    }\n    const DEFAULT_PARTITION = partitions.find((partition) => partition.id === \"aws\");\n    if (!DEFAULT_PARTITION) {\n        throw new Error(\"Provided region was not found in the partition array or regex,\" +\n            \" and default partition with id 'aws' doesn't exist.\");\n    }\n    return {\n        ...DEFAULT_PARTITION.outputs,\n    };\n};\nexport const setPartitionInfo = (partitionsInfo, userAgentPrefix = \"\") => {\n    selectedPartitionsInfo = partitionsInfo;\n    selectedUserAgentPrefix = userAgentPrefix;\n};\nexport const useDefaultPartitionInfo = () => {\n    setPartitionInfo(partitionsInfo, \"\");\n};\nexport const getUserAgentPrefix = () => selectedUserAgentPrefix;\n"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,mBAA3B;AACA,IAAIC,sBAAsB,GAAGD,cAA7B;AACA,IAAIE,uBAAuB,GAAG,EAA9B;AACA,OAAO,MAAMC,SAAS,GAAIC,KAAD,IAAW;EAChC,MAAM;IAAEC;EAAF,IAAiBJ,sBAAvB;;EACA,KAAK,MAAME,SAAX,IAAwBE,UAAxB,EAAoC;IAChC,MAAM;MAAEC,OAAF;MAAWC;IAAX,IAAuBJ,SAA7B;;IACA,KAAK,MAAM,CAACK,MAAD,EAASC,UAAT,CAAX,IAAmCC,MAAM,CAACC,OAAP,CAAeL,OAAf,CAAnC,EAA4D;MACxD,IAAIE,MAAM,KAAKJ,KAAf,EAAsB;QAClB,OAAO,EACH,GAAGG,OADA;UAEH,GAAGE;QAFA,CAAP;MAIH;IACJ;EACJ;;EACD,KAAK,MAAMN,SAAX,IAAwBE,UAAxB,EAAoC;IAChC,MAAM;MAAEO,WAAF;MAAeL;IAAf,IAA2BJ,SAAjC;;IACA,IAAI,IAAIU,MAAJ,CAAWD,WAAX,EAAwBE,IAAxB,CAA6BV,KAA7B,CAAJ,EAAyC;MACrC,OAAO,EACH,GAAGG;MADA,CAAP;IAGH;EACJ;;EACD,MAAMQ,iBAAiB,GAAGV,UAAU,CAACW,IAAX,CAAiBb,SAAD,IAAeA,SAAS,CAACc,EAAV,KAAiB,KAAhD,CAA1B;;EACA,IAAI,CAACF,iBAAL,EAAwB;IACpB,MAAM,IAAIG,KAAJ,CAAU,mEACZ,qDADE,CAAN;EAEH;;EACD,OAAO,EACH,GAAGH,iBAAiB,CAACR;EADlB,CAAP;AAGH,CA7BM;AA8BP,OAAO,MAAMY,gBAAgB,GAAG,CAACnB,cAAD,EAAiBoB,eAAe,GAAG,EAAnC,KAA0C;EACtEnB,sBAAsB,GAAGD,cAAzB;EACAE,uBAAuB,GAAGkB,eAA1B;AACH,CAHM;AAIP,OAAO,MAAMC,uBAAuB,GAAG,MAAM;EACzCF,gBAAgB,CAACnB,cAAD,EAAiB,EAAjB,CAAhB;AACH,CAFM;AAGP,OAAO,MAAMsB,kBAAkB,GAAG,MAAMpB,uBAAjC"},"metadata":{},"sourceType":"module"}