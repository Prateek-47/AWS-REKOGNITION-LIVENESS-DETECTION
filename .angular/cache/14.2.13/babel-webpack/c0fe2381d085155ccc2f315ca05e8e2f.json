{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger, Credentials, browserOrNode, AnalyticsAction } from '@aws-amplify/core';\nimport { PersonalizeEventsClient, PutEventsCommand } from '@aws-sdk/client-personalize-events';\nimport { SessionInfoManager, MediaAutoTrack } from './AmazonPersonalizeHelper';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { getAnalyticsUserAgent } from '../utils/UserAgent';\nvar logger = new Logger('AmazonPersonalizeProvider'); // events buffer\n\nvar FLUSH_SIZE = 5;\nvar FLUSH_SIZE_THRESHHOLD = 10;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\n\nvar IDENTIFY_EVENT = 'Identify';\n\nvar AmazonPersonalizeProvider =\n/** @class */\nfunction () {\n  function AmazonPersonalizeProvider(config) {\n    this._buffer = [];\n    this._config = config ? config : {};\n    this._config.flushSize = this._config.flushSize > 0 && this._config.flushSize <= FLUSH_SIZE_THRESHHOLD ? this._config.flushSize : FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._sessionManager = new SessionInfoManager();\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._isBrowser = browserOrNode().isBrowser; // flush event buffer\n\n    this._setupTimer();\n  }\n\n  AmazonPersonalizeProvider.prototype._setupTimer = function () {\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n\n    var flushInterval = this._config.flushInterval;\n    var that = this;\n    this._timer = setInterval(function () {\n      that._sendFromBuffer();\n    }, flushInterval);\n  };\n  /**\n   * Record event\n   * @param eventType      - type of the event action. e.g. \"Click\"\n   * @param properties     - properties of the event\n   * @return Promise\n   */\n\n\n  AmazonPersonalizeProvider.prototype.record = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, _a, eventType, properties, requestParams, isLoaded;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this._getCredentials()];\n\n          case 1:\n            credentials = _b.sent();\n            if (!credentials) return [2\n            /*return*/\n            , Promise.resolve(false)];\n            Object.assign(params, {\n              config: this._config,\n              credentials: credentials,\n              sentAt: new Date()\n            });\n            _a = params.event, eventType = _a.eventType, properties = _a.properties;\n\n            if (eventType === IDENTIFY_EVENT) {\n              this._sessionManager.updateSessionInfo(properties && properties.userId ? properties.userId : '', this._sessionInfo);\n\n              return [2\n              /*return*/\n              ];\n            } else if (!isEmpty(params.event.userId)) {\n              this._sessionManager.updateSessionInfo(params.event.userId, this._sessionInfo);\n            }\n\n            requestParams = this.generateRequestParams(params, this._sessionInfo);\n            if (!(eventType === 'MediaAutoTrack')) return [3\n            /*break*/\n            , 7];\n            if (!this._isBrowser) return [3\n            /*break*/\n            , 5];\n            if (!!isEmpty(get(requestParams, 'eventData.properties.domElementId', null))) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.isElementFullyLoaded(this.loadElement, requestParams.eventData.properties['domElementId'], 500, 5)];\n\n          case 2:\n            isLoaded = _b.sent();\n\n            if (isLoaded) {\n              new MediaAutoTrack(requestParams, this);\n            } else {\n              logger.debug('Cannot find the media element.');\n            }\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            logger.debug(\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\");\n            _b.label = 4;\n\n          case 4:\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            logger.debug('MediaAutoTrack only for browser');\n            _b.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            , this.putToBuffer(requestParams)];\n        }\n      });\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.loadElement = function (domId) {\n    return new Promise(function (resolve, reject) {\n      if (document.getElementById(domId) && document.getElementById(domId).clientHeight) {\n        return resolve(true);\n      } else {\n        return reject(true);\n      }\n    });\n  };\n\n  AmazonPersonalizeProvider.prototype.isElementFullyLoaded = function (operation, params, delay, times) {\n    var _this = this;\n\n    var wait = function (ms) {\n      return new Promise(function (r) {\n        return setTimeout(r, ms);\n      });\n    };\n\n    return new Promise(function (resolve, reject) {\n      return operation(params).then(resolve).catch(function (reason) {\n        if (times - 1 > 0) {\n          return wait(delay).then(_this.isElementFullyLoaded.bind(null, operation, params, delay, times - 1)).then(resolve).catch(reject);\n        }\n\n        return reject(reason);\n      });\n    });\n  };\n  /**\n   * get the category of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getCategory = function () {\n    return 'Analytics';\n  };\n  /**\n   * get provider name of the plugin\n   */\n\n\n  AmazonPersonalizeProvider.prototype.getProviderName = function () {\n    return 'AmazonPersonalize';\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n\n\n  AmazonPersonalizeProvider.prototype.configure = function (config) {\n    logger.debug('configure Analytics', config);\n    var conf = config ? config : {};\n    this._config = Object.assign({}, this._config, conf);\n\n    if (!isEmpty(this._config.trackingId)) {\n      this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n    }\n\n    this._setupTimer();\n\n    return this._config;\n  };\n  /**\n   * Generate the requestParams from customer input params and sessionInfo\n   * @private\n   * @param eventData      - customer input for event data\n   * @param api            - api name\n   * @return RequestParams - wrapper object with all information required for make request\n   */\n\n\n  AmazonPersonalizeProvider.prototype.generateRequestParams = function (params, sessionInfo) {\n    var requestParams = {};\n    var _a = params.event,\n        eventType = _a.eventType,\n        properties = _a.properties;\n    requestParams.eventData = {\n      eventType: eventType,\n      properties: properties\n    };\n    requestParams.sessionInfo = sessionInfo;\n    requestParams.sentAt = params.sentAt;\n    requestParams.credentials = params.credentials;\n    requestParams.config = params.config;\n    return requestParams;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendEvents = function (group) {\n    var groupLen = group.length;\n\n    if (groupLen === 0) {\n      logger.debug('events array is empty, directly return');\n      return;\n    }\n\n    var _a = group[0],\n        config = _a.config,\n        credentials = _a.credentials,\n        sessionInfo = _a.sessionInfo;\n\n    var initClients = this._init(config, credentials);\n\n    if (!initClients) return false;\n\n    if (groupLen > 0) {\n      var events = [];\n\n      for (var i = 0; i < groupLen; i += 1) {\n        var params = group.shift();\n\n        var eventPayload = this._generateSingleRecordPayload(params, sessionInfo);\n\n        events.push(eventPayload);\n      }\n\n      var payload_1 = {};\n      payload_1.trackingId = sessionInfo.trackingId;\n      payload_1.sessionId = sessionInfo.sessionId;\n      payload_1.userId = sessionInfo.userId;\n      payload_1.eventList = [];\n      events.forEach(function (event) {\n        // @ts-ignore\n        payload_1.eventList.push(event);\n      });\n      var command = new PutEventsCommand(payload_1);\n\n      this._personalize.send(command, function (err) {\n        if (err) logger.debug('Failed to call putEvents in Personalize', err);else logger.debug('Put events');\n      });\n    }\n  };\n  /**\n   * Put event into buffer\n   * @private\n   * @param params - params for the event recording\n   */\n\n\n  AmazonPersonalizeProvider.prototype.putToBuffer = function (params) {\n    if (this._buffer.length < this._config.flushSize) {\n      this._buffer.push(params);\n    } else {\n      this._buffer.push(params);\n\n      this._sendFromBuffer();\n    }\n\n    return Promise.resolve(true);\n  };\n  /**\n   * flush the buffer and batch sending the request\n   * @private\n   * @param eventsParams - the buffer for cache the payload\n   */\n\n\n  AmazonPersonalizeProvider.prototype._sendFromBuffer = function () {\n    var _this = this;\n\n    var size = this._buffer.length;\n    if (size <= 0) return;\n    var eventsGroups = [];\n    var preCred = null;\n    var group = [];\n\n    for (var i = 0; i < size; i += 1) {\n      var currRequestParams = this._buffer.shift();\n\n      var cred = currRequestParams.credentials;\n      var sessionInfo = currRequestParams.sessionInfo;\n\n      if (i === 0) {\n        group.push(currRequestParams);\n        preCred = cred;\n      } else {\n        if (isEqual(sessionInfo, this._sessionInfo) && cred.sessionToken === preCred.sessionToken && cred.identityId === preCred.identityId) {\n          logger.debug('no change for cred, put event in the same group');\n          group.push(currRequestParams);\n        } else {\n          eventsGroups.push(group);\n          group = [];\n          group.push(currRequestParams);\n          preCred = cred;\n          this._sessionInfo = sessionInfo;\n        }\n      }\n    }\n\n    eventsGroups.push(group);\n    eventsGroups.map(function (group) {\n      _this._sendEvents(group);\n    });\n  };\n  /**\n   * Generate the record payload for single event\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._generateSingleRecordPayload = function (params, sessionInfo) {\n    var eventData = params.eventData,\n        sentAt = params.sentAt;\n    var trackPayload = {};\n    trackPayload.sentAt = sentAt;\n    trackPayload.properties = eventData.properties && JSON.stringify(eventData.properties);\n    trackPayload.eventId = this._sessionManager.getTimerKey() + sessionInfo.sessionId;\n    trackPayload.eventType = eventData.eventType;\n    return trackPayload;\n  };\n  /**\n   * Initialize the personalize client\n   * @private\n   * @param params - RequestParams\n   */\n\n\n  AmazonPersonalizeProvider.prototype._init = function (config, credentials) {\n    logger.debug('init clients');\n\n    if (this._personalize && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n      logger.debug('no change for analytics config, directly return from init');\n      return true;\n    }\n\n    this._config.credentials = credentials;\n    var region = config.region;\n    logger.debug('initialize personalize with credentials', credentials);\n    this._personalize = new PersonalizeEventsClient({\n      region: region,\n      credentials: credentials,\n      customUserAgent: getAnalyticsUserAgent(AnalyticsAction.Record)\n    });\n    return true;\n  };\n  /**\n   * check if current credentials exists\n   * @private\n   */\n\n\n  AmazonPersonalizeProvider.prototype._getCredentials = function () {\n    var that = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', that._config.credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n\n  return AmazonPersonalizeProvider;\n}();\n\nexport { AmazonPersonalizeProvider };","map":{"version":3,"names":["__awaiter","__generator","ConsoleLogger","Logger","Credentials","browserOrNode","AnalyticsAction","PersonalizeEventsClient","PutEventsCommand","SessionInfoManager","MediaAutoTrack","get","isEmpty","isEqual","getAnalyticsUserAgent","logger","FLUSH_SIZE","FLUSH_SIZE_THRESHHOLD","FLUSH_INTERVAL","IDENTIFY_EVENT","AmazonPersonalizeProvider","config","_buffer","_config","flushSize","flushInterval","_sessionManager","trackingId","_sessionInfo","retrieveSessionInfo","_isBrowser","isBrowser","_setupTimer","prototype","_timer","clearInterval","that","setInterval","_sendFromBuffer","record","params","credentials","_a","eventType","properties","requestParams","isLoaded","_b","label","_getCredentials","sent","Promise","resolve","Object","assign","sentAt","Date","event","updateSessionInfo","userId","generateRequestParams","isElementFullyLoaded","loadElement","eventData","debug","putToBuffer","domId","reject","document","getElementById","clientHeight","operation","delay","times","_this","wait","ms","r","setTimeout","then","catch","reason","bind","getCategory","getProviderName","configure","conf","sessionInfo","_sendEvents","group","groupLen","length","initClients","_init","events","i","shift","eventPayload","_generateSingleRecordPayload","push","payload_1","sessionId","eventList","forEach","command","_personalize","send","err","size","eventsGroups","preCred","currRequestParams","cred","sessionToken","identityId","map","trackPayload","JSON","stringify","eventId","getTimerKey","region","customUserAgent","Record","shear"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/analytics/lib-esm/Providers/AmazonPersonalizeProvider.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __awaiter, __generator } from \"tslib\";\nimport { ConsoleLogger as Logger, Credentials, browserOrNode, AnalyticsAction, } from '@aws-amplify/core';\nimport { PersonalizeEventsClient, PutEventsCommand, } from '@aws-sdk/client-personalize-events';\nimport { SessionInfoManager, MediaAutoTrack, } from './AmazonPersonalizeHelper';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport { getAnalyticsUserAgent } from '../utils/UserAgent';\nvar logger = new Logger('AmazonPersonalizeProvider');\n// events buffer\nvar FLUSH_SIZE = 5;\nvar FLUSH_SIZE_THRESHHOLD = 10;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar IDENTIFY_EVENT = 'Identify';\nvar AmazonPersonalizeProvider = /** @class */ (function () {\n    function AmazonPersonalizeProvider(config) {\n        this._buffer = [];\n        this._config = config ? config : {};\n        this._config.flushSize =\n            this._config.flushSize > 0 &&\n                this._config.flushSize <= FLUSH_SIZE_THRESHHOLD\n                ? this._config.flushSize\n                : FLUSH_SIZE;\n        this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n        this._sessionManager = new SessionInfoManager();\n        if (!isEmpty(this._config.trackingId)) {\n            this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n        }\n        this._isBrowser = browserOrNode().isBrowser;\n        // flush event buffer\n        this._setupTimer();\n    }\n    AmazonPersonalizeProvider.prototype._setupTimer = function () {\n        if (this._timer) {\n            clearInterval(this._timer);\n        }\n        var flushInterval = this._config.flushInterval;\n        var that = this;\n        this._timer = setInterval(function () {\n            that._sendFromBuffer();\n        }, flushInterval);\n    };\n    /**\n     * Record event\n     * @param eventType      - type of the event action. e.g. \"Click\"\n     * @param properties     - properties of the event\n     * @return Promise\n     */\n    AmazonPersonalizeProvider.prototype.record = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, _a, eventType, properties, requestParams, isLoaded;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, this._getCredentials()];\n                    case 1:\n                        credentials = _b.sent();\n                        if (!credentials)\n                            return [2 /*return*/, Promise.resolve(false)];\n                        Object.assign(params, {\n                            config: this._config,\n                            credentials: credentials,\n                            sentAt: new Date(),\n                        });\n                        _a = params.event, eventType = _a.eventType, properties = _a.properties;\n                        if (eventType === IDENTIFY_EVENT) {\n                            this._sessionManager.updateSessionInfo(properties && properties.userId ? properties.userId : '', this._sessionInfo);\n                            return [2 /*return*/];\n                        }\n                        else if (!isEmpty(params.event.userId)) {\n                            this._sessionManager.updateSessionInfo(params.event.userId, this._sessionInfo);\n                        }\n                        requestParams = this.generateRequestParams(params, this._sessionInfo);\n                        if (!(eventType === 'MediaAutoTrack')) return [3 /*break*/, 7];\n                        if (!this._isBrowser) return [3 /*break*/, 5];\n                        if (!!isEmpty(get(requestParams, 'eventData.properties.domElementId', null))) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.isElementFullyLoaded(this.loadElement, requestParams.eventData.properties['domElementId'], 500, 5)];\n                    case 2:\n                        isLoaded = _b.sent();\n                        if (isLoaded) {\n                            new MediaAutoTrack(requestParams, this);\n                        }\n                        else {\n                            logger.debug('Cannot find the media element.');\n                        }\n                        return [3 /*break*/, 4];\n                    case 3:\n                        logger.debug(\"Missing domElementId field in 'properties' for MediaAutoTrack event type.\");\n                        _b.label = 4;\n                    case 4: return [3 /*break*/, 6];\n                    case 5:\n                        logger.debug('MediaAutoTrack only for browser');\n                        _b.label = 6;\n                    case 6: return [2 /*return*/];\n                    case 7: return [2 /*return*/, this.putToBuffer(requestParams)];\n                }\n            });\n        });\n    };\n    AmazonPersonalizeProvider.prototype.loadElement = function (domId) {\n        return new Promise(function (resolve, reject) {\n            if (document.getElementById(domId) &&\n                document.getElementById(domId).clientHeight) {\n                return resolve(true);\n            }\n            else {\n                return reject(true);\n            }\n        });\n    };\n    AmazonPersonalizeProvider.prototype.isElementFullyLoaded = function (operation, params, delay, times) {\n        var _this = this;\n        var wait = function (ms) { return new Promise(function (r) { return setTimeout(r, ms); }); };\n        return new Promise(function (resolve, reject) {\n            return operation(params)\n                .then(resolve)\n                .catch(function (reason) {\n                if (times - 1 > 0) {\n                    return wait(delay)\n                        .then(_this.isElementFullyLoaded.bind(null, operation, params, delay, times - 1))\n                        .then(resolve)\n                        .catch(reject);\n                }\n                return reject(reason);\n            });\n        });\n    };\n    /**\n     * get the category of the plugin\n     */\n    AmazonPersonalizeProvider.prototype.getCategory = function () {\n        return 'Analytics';\n    };\n    /**\n     * get provider name of the plugin\n     */\n    AmazonPersonalizeProvider.prototype.getProviderName = function () {\n        return 'AmazonPersonalize';\n    };\n    /**\n     * configure the plugin\n     * @param {Object} config - configuration\n     */\n    AmazonPersonalizeProvider.prototype.configure = function (config) {\n        logger.debug('configure Analytics', config);\n        var conf = config ? config : {};\n        this._config = Object.assign({}, this._config, conf);\n        if (!isEmpty(this._config.trackingId)) {\n            this._sessionInfo = this._sessionManager.retrieveSessionInfo(this._config.trackingId);\n        }\n        this._setupTimer();\n        return this._config;\n    };\n    /**\n     * Generate the requestParams from customer input params and sessionInfo\n     * @private\n     * @param eventData      - customer input for event data\n     * @param api            - api name\n     * @return RequestParams - wrapper object with all information required for make request\n     */\n    AmazonPersonalizeProvider.prototype.generateRequestParams = function (params, sessionInfo) {\n        var requestParams = {};\n        var _a = params.event, eventType = _a.eventType, properties = _a.properties;\n        requestParams.eventData = { eventType: eventType, properties: properties };\n        requestParams.sessionInfo = sessionInfo;\n        requestParams.sentAt = params.sentAt;\n        requestParams.credentials = params.credentials;\n        requestParams.config = params.config;\n        return requestParams;\n    };\n    /**\n     * record an event\n     * @param {Object} params - the params of an event\n     */\n    AmazonPersonalizeProvider.prototype._sendEvents = function (group) {\n        var groupLen = group.length;\n        if (groupLen === 0) {\n            logger.debug('events array is empty, directly return');\n            return;\n        }\n        var _a = group[0], config = _a.config, credentials = _a.credentials, sessionInfo = _a.sessionInfo;\n        var initClients = this._init(config, credentials);\n        if (!initClients)\n            return false;\n        if (groupLen > 0) {\n            var events = [];\n            for (var i = 0; i < groupLen; i += 1) {\n                var params = group.shift();\n                var eventPayload = this._generateSingleRecordPayload(params, sessionInfo);\n                events.push(eventPayload);\n            }\n            var payload_1 = {};\n            payload_1.trackingId = sessionInfo.trackingId;\n            payload_1.sessionId = sessionInfo.sessionId;\n            payload_1.userId = sessionInfo.userId;\n            payload_1.eventList = [];\n            events.forEach(function (event) {\n                // @ts-ignore\n                payload_1.eventList.push(event);\n            });\n            var command = new PutEventsCommand(payload_1);\n            this._personalize.send(command, function (err) {\n                if (err)\n                    logger.debug('Failed to call putEvents in Personalize', err);\n                else\n                    logger.debug('Put events');\n            });\n        }\n    };\n    /**\n     * Put event into buffer\n     * @private\n     * @param params - params for the event recording\n     */\n    AmazonPersonalizeProvider.prototype.putToBuffer = function (params) {\n        if (this._buffer.length < this._config.flushSize) {\n            this._buffer.push(params);\n        }\n        else {\n            this._buffer.push(params);\n            this._sendFromBuffer();\n        }\n        return Promise.resolve(true);\n    };\n    /**\n     * flush the buffer and batch sending the request\n     * @private\n     * @param eventsParams - the buffer for cache the payload\n     */\n    AmazonPersonalizeProvider.prototype._sendFromBuffer = function () {\n        var _this = this;\n        var size = this._buffer.length;\n        if (size <= 0)\n            return;\n        var eventsGroups = [];\n        var preCred = null;\n        var group = [];\n        for (var i = 0; i < size; i += 1) {\n            var currRequestParams = this._buffer.shift();\n            var cred = currRequestParams.credentials;\n            var sessionInfo = currRequestParams.sessionInfo;\n            if (i === 0) {\n                group.push(currRequestParams);\n                preCred = cred;\n            }\n            else {\n                if (isEqual(sessionInfo, this._sessionInfo) &&\n                    cred.sessionToken === preCred.sessionToken &&\n                    cred.identityId === preCred.identityId) {\n                    logger.debug('no change for cred, put event in the same group');\n                    group.push(currRequestParams);\n                }\n                else {\n                    eventsGroups.push(group);\n                    group = [];\n                    group.push(currRequestParams);\n                    preCred = cred;\n                    this._sessionInfo = sessionInfo;\n                }\n            }\n        }\n        eventsGroups.push(group);\n        eventsGroups.map(function (group) {\n            _this._sendEvents(group);\n        });\n    };\n    /**\n     * Generate the record payload for single event\n     * @private\n     * @param params - RequestParams\n     */\n    AmazonPersonalizeProvider.prototype._generateSingleRecordPayload = function (params, sessionInfo) {\n        var eventData = params.eventData, sentAt = params.sentAt;\n        var trackPayload = {};\n        trackPayload.sentAt = sentAt;\n        trackPayload.properties =\n            eventData.properties && JSON.stringify(eventData.properties);\n        trackPayload.eventId =\n            this._sessionManager.getTimerKey() + sessionInfo.sessionId;\n        trackPayload.eventType = eventData.eventType;\n        return trackPayload;\n    };\n    /**\n     * Initialize the personalize client\n     * @private\n     * @param params - RequestParams\n     */\n    AmazonPersonalizeProvider.prototype._init = function (config, credentials) {\n        logger.debug('init clients');\n        if (this._personalize &&\n            this._config.credentials &&\n            this._config.credentials.sessionToken === credentials.sessionToken &&\n            this._config.credentials.identityId === credentials.identityId) {\n            logger.debug('no change for analytics config, directly return from init');\n            return true;\n        }\n        this._config.credentials = credentials;\n        var region = config.region;\n        logger.debug('initialize personalize with credentials', credentials);\n        this._personalize = new PersonalizeEventsClient({\n            region: region,\n            credentials: credentials,\n            customUserAgent: getAnalyticsUserAgent(AnalyticsAction.Record),\n        });\n        return true;\n    };\n    /**\n     * check if current credentials exists\n     * @private\n     */\n    AmazonPersonalizeProvider.prototype._getCredentials = function () {\n        var that = this;\n        return Credentials.get()\n            .then(function (credentials) {\n            if (!credentials)\n                return null;\n            logger.debug('set credentials for analytics', that._config.credentials);\n            return Credentials.shear(credentials);\n        })\n            .catch(function (err) {\n            logger.debug('ensure credentials error', err);\n            return null;\n        });\n    };\n    return AmazonPersonalizeProvider;\n}());\nexport { AmazonPersonalizeProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}