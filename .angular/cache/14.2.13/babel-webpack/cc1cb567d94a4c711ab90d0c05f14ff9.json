{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const axis = util.parseAxisParam(args.attrs.axis, inputs[0].shape)[0];\n  let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis); // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend\n    });\n  }\n\n  const out = backend.makeOutput(outShape, inputs[0].dtype);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return out;\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, axis);\n\n  if ($inputs[0].dtype === 'string') {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const inputs2D = $inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({\n        inputs: {\n          x: t\n        },\n        backend,\n        attrs: {\n          shape\n        }\n      });\n    });\n    const inputsValShapes = inputs2D.map(t => {\n      return {\n        vals: backend.readSync(t.dataId),\n        shape: t.shape\n      };\n    }); // Concats 2d tensors along axis=1.\n\n    outShape = backend_util.computeOutShape(inputs2D.map(t => t.shape), 1\n    /* axis */\n    );\n    const simplyConcat = inputs2D[0].shape[0] === 1;\n    const outVals = concatImplCPU(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape($inputs.map(t => t.shape), axis);\n    out.shape = finalOutShape;\n    const outData = backend.dataIdMap.get(out.dataId);\n    outData.stringBytes = backend_util.fromStringArrayToUint8(outVals);\n    inputs2D.forEach(t => backend.disposeData(t.dataId));\n    return out;\n  }\n\n  const batchDim = util.sizeFromShape($inputs[0].shape.slice(0, axis));\n  let sumInnerDims = 0;\n  const innerDims = $inputs.map(input => {\n    const innerDim = util.sizeFromShape(input.shape.slice(axis));\n    sumInnerDims += innerDim;\n    return innerDim;\n  });\n  const inVals = $inputs.map(input => backend.typedArrayFromHeap(input));\n  const outVals = backend.typedArrayFromHeap(out);\n\n  for (let b = 0; b < batchDim; b++) {\n    let outOffset = b * sumInnerDims;\n\n    for (let i = 0; i < inVals.length; i++) {\n      const innerDim = innerDims[i];\n      const inOffset = b * innerDim;\n      const vals = inVals[i].subarray(inOffset, inOffset + innerDim);\n      outVals.set(vals, outOffset);\n      outOffset += innerDim;\n    }\n  }\n\n  return out;\n}\nexport const concatConfig = {\n  kernelName: Concat,\n  backendName: 'wasm',\n  kernelFunc: concat\n};","map":{"version":3,"names":["backend_util","Concat","util","concatImplCPU","identity","reshape","concat","args","inputs","backend","axis","parseAxisParam","attrs","shape","outShape","computeOutShape","map","t","$inputs","filter","sizeFromShape","length","x","out","makeOutput","dtype","shapes","assertParamsConsistent","inputs2D","innerSize","slice","inputsValShapes","vals","readSync","dataId","simplyConcat","outVals","finalOutShape","outData","dataIdMap","get","stringBytes","fromStringArrayToUint8","forEach","disposeData","batchDim","sumInnerDims","innerDims","input","innerDim","inVals","typedArrayFromHeap","b","outOffset","i","inOffset","subarray","set","concatConfig","kernelName","backendName","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/Concat.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n    const { inputs, backend } = args;\n    const axis = util.parseAxisParam(args.attrs.axis, inputs[0].shape)[0];\n    let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    const out = backend.makeOutput(outShape, inputs[0].dtype);\n    if (util.sizeFromShape(outShape) === 0) {\n        return out;\n    }\n    const shapes = $inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, axis);\n    if ($inputs[0].dtype === 'string') {\n        // Any concat of n-dimensional tensors across any axis can be reduced to\n        // a concatenation of two-dimensional tensors across the axis 1 by first\n        // partitioning the axes of the original tensors into those less than the\n        // axis to be concatenated and the rest. Then reshape the tensors\n        // into a two-dimensional tensor by collapsing these two sets of axes and\n        // concatenate the resulting matrices across the axis 1, finally reshaping\n        // the result to have the proper shape.\n        const inputs2D = $inputs.map(t => {\n            const innerSize = util.sizeFromShape(t.shape.slice(axis));\n            const shape = [-1, innerSize];\n            return reshape({ inputs: { x: t }, backend, attrs: { shape } });\n        });\n        const inputsValShapes = inputs2D.map(t => {\n            return { vals: backend.readSync(t.dataId), shape: t.shape };\n        });\n        // Concats 2d tensors along axis=1.\n        outShape =\n            backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n        const simplyConcat = inputs2D[0].shape[0] === 1;\n        const outVals = concatImplCPU(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n        const finalOutShape = backend_util.computeOutShape($inputs.map(t => t.shape), axis);\n        out.shape = finalOutShape;\n        const outData = backend.dataIdMap.get(out.dataId);\n        outData.stringBytes = backend_util.fromStringArrayToUint8(outVals);\n        inputs2D.forEach(t => backend.disposeData(t.dataId));\n        return out;\n    }\n    const batchDim = util.sizeFromShape($inputs[0].shape.slice(0, axis));\n    let sumInnerDims = 0;\n    const innerDims = $inputs.map(input => {\n        const innerDim = util.sizeFromShape(input.shape.slice(axis));\n        sumInnerDims += innerDim;\n        return innerDim;\n    });\n    const inVals = $inputs.map(input => backend.typedArrayFromHeap(input));\n    const outVals = backend.typedArrayFromHeap(out);\n    for (let b = 0; b < batchDim; b++) {\n        let outOffset = b * sumInnerDims;\n        for (let i = 0; i < inVals.length; i++) {\n            const innerDim = innerDims[i];\n            const inOffset = b * innerDim;\n            const vals = inVals[i].subarray(inOffset, inOffset + innerDim);\n            outVals.set(vals, outOffset);\n            outOffset += innerDim;\n        }\n    }\n    return out;\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'wasm',\n    kernelFunc: concat,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}