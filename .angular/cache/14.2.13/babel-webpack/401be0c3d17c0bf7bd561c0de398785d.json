{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast'; // Must match enum in CropAndResize.cc\n\nvar InterpolationMethod;\n\n(function (InterpolationMethod) {\n  InterpolationMethod[InterpolationMethod[\"bilinear\"] = 0] = \"bilinear\";\n  InterpolationMethod[InterpolationMethod[\"nearest\"] = 1] = \"nearest\";\n})(InterpolationMethod || (InterpolationMethod = {}));\n\nlet wasmCropAndResize;\n\nfunction setup(backend) {\n  wasmCropAndResize = backend.wasm.cwrap(CropAndResize, null\n  /*void*/\n  , ['number', 'number', 'number', 'number', 'array', 'number', 'number', 'number', 'number', 'number' // out id\n  ]);\n}\n\nfunction cropAndResize(args) {\n  const {\n    backend,\n    inputs,\n    attrs\n  } = args;\n  const {\n    method,\n    extrapolationValue,\n    cropSize\n  } = attrs;\n  const {\n    image,\n    boxes,\n    boxInd\n  } = inputs;\n  const numBoxes = boxes.shape[0];\n  const [cropHeight, cropWidth] = cropSize;\n  const outShape = [numBoxes, cropHeight, cropWidth, image.shape[3]];\n  let imagesData = backend.dataIdMap.get(image.dataId);\n  let castedData;\n\n  if (image.dtype !== 'float32') {\n    castedData = cast({\n      backend,\n      inputs: {\n        x: image\n      },\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    imagesData = backend.dataIdMap.get(castedData.dataId);\n  }\n\n  const imagesId = imagesData.id;\n  const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n  const boxIndId = backend.dataIdMap.get(boxInd.dataId).id;\n  const out = backend.makeOutput(outShape, 'float32');\n  const outId = backend.dataIdMap.get(out.dataId).id;\n  const imagesShapeBytes = new Uint8Array(new Int32Array(image.shape).buffer);\n  wasmCropAndResize(imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight, cropWidth, InterpolationMethod[method], extrapolationValue, outId);\n\n  if (castedData != null) {\n    backend.disposeData(castedData.dataId);\n  }\n\n  return out;\n}\n\nexport const cropAndResizeConfig = {\n  kernelName: CropAndResize,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: cropAndResize\n};","map":{"version":3,"names":["CropAndResize","cast","InterpolationMethod","wasmCropAndResize","setup","backend","wasm","cwrap","cropAndResize","args","inputs","attrs","method","extrapolationValue","cropSize","image","boxes","boxInd","numBoxes","shape","cropHeight","cropWidth","outShape","imagesData","dataIdMap","get","dataId","castedData","dtype","x","imagesId","id","boxesId","boxIndId","out","makeOutput","outId","imagesShapeBytes","Uint8Array","Int32Array","buffer","disposeData","cropAndResizeConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/CropAndResize.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { CropAndResize } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\n// Must match enum in CropAndResize.cc\nvar InterpolationMethod;\n(function (InterpolationMethod) {\n    InterpolationMethod[InterpolationMethod[\"bilinear\"] = 0] = \"bilinear\";\n    InterpolationMethod[InterpolationMethod[\"nearest\"] = 1] = \"nearest\";\n})(InterpolationMethod || (InterpolationMethod = {}));\nlet wasmCropAndResize;\nfunction setup(backend) {\n    wasmCropAndResize = backend.wasm.cwrap(CropAndResize, null /*void*/, [\n        'number',\n        'number',\n        'number',\n        'number',\n        'array',\n        'number',\n        'number',\n        'number',\n        'number',\n        'number' // out id\n    ]);\n}\nfunction cropAndResize(args) {\n    const { backend, inputs, attrs } = args;\n    const { method, extrapolationValue, cropSize } = attrs;\n    const { image, boxes, boxInd } = inputs;\n    const numBoxes = boxes.shape[0];\n    const [cropHeight, cropWidth] = cropSize;\n    const outShape = [numBoxes, cropHeight, cropWidth, image.shape[3]];\n    let imagesData = backend.dataIdMap.get(image.dataId);\n    let castedData;\n    if (image.dtype !== 'float32') {\n        castedData = cast({ backend, inputs: { x: image }, attrs: { dtype: 'float32' } });\n        imagesData = backend.dataIdMap.get(castedData.dataId);\n    }\n    const imagesId = imagesData.id;\n    const boxesId = backend.dataIdMap.get(boxes.dataId).id;\n    const boxIndId = backend.dataIdMap.get(boxInd.dataId).id;\n    const out = backend.makeOutput(outShape, 'float32');\n    const outId = backend.dataIdMap.get(out.dataId).id;\n    const imagesShapeBytes = new Uint8Array(new Int32Array(image.shape).buffer);\n    wasmCropAndResize(imagesId, boxesId, boxIndId, numBoxes, imagesShapeBytes, cropHeight, cropWidth, InterpolationMethod[method], extrapolationValue, outId);\n    if (castedData != null) {\n        backend.disposeData(castedData.dataId);\n    }\n    return out;\n}\nexport const cropAndResizeConfig = {\n    kernelName: CropAndResize,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: cropAndResize\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}