{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { customGrad } from '../../gradients';\nimport { FusedConv2D } from '../../kernel_names';\nimport { makeTypesMatch } from '../../tensor_util';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { add } from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport { conv2d as unfusedConv2d } from '../conv2d';\nimport { conv2DBackpropFilter } from '../conv2d_backprop_filter';\nimport { conv2DBackpropInput } from '../conv2d_backprop_input';\nimport * as conv_util from '../conv_util';\nimport { applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse } from '../fused_util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Computes a 2D convolution over the input x, optionally fused with adding a\n * bias and applying an activation.\n *\n * ```js\n * const inputDepth = 2;\n * const inShape = [2, 2, 2, inputDepth];\n * const outputDepth = 2;\n * const fSize = 1;\n * const pad = 0;\n * const strides = 1;\n *\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n * 16], inShape);\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\n * outputDepth]);\n *\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\n * ```\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`) to be\n *     applied\n *      after biasAdd.\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\n\nfunction fusedConv2d_({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha\n}) {\n  activation = activation || 'linear';\n\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedConv2d(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);\n  }\n\n  const $x = convertToTensor(x, 'x', 'conv2d', 'float32');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');\n  let x4D = $x;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ` + `${x4D.rank}.`);\n  util.assert($filter.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);\n\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), () => `Error in fused conv2d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n\n  util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` + `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(dataFormat === 'NHWC', () => `Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);\n  const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);\n  let $bias;\n\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights;\n\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused conv2d');\n  }\n\n  const grad = (dy, saved) => {\n    const [$filter, x4D, y, $bias] = saved;\n    const dyActivation = getFusedDyActivation(dy, y, activation);\n    util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused conv2D: ' + `dilation rates greater than 1 ` + `are not yet supported in gradients. Got dilations '${dilations}'`);\n    const xDer = conv2DBackpropInput(x4D.shape, dyActivation, $filter, strides, pad);\n    const filterDer = conv2DBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad);\n    const der = [xDer, filterDer];\n\n    if ($bias != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      der.push(biasDer);\n    }\n\n    return der;\n  };\n\n  const inputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  }; // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n\n  if (bias == null) {\n    const customOp = customGrad((x4D, filter, save) => {\n      let res = // tslint:disable-next-line: no-unnecessary-type-assertion\n      ENGINE.runKernel(FusedConv2D, inputs, attrs);\n      save([filter, x4D, res]);\n\n      if (reshapedTo4D) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n\n      return {\n        value: res,\n        gradFunc: grad\n      };\n    });\n    return customOp(x4D, $filter);\n  } else {\n    const customOpWithBias = customGrad((x4D, filter, bias, save) => {\n      let res = ENGINE.runKernel(FusedConv2D, inputs, attrs);\n      save([filter, x4D, res, bias]);\n\n      if (reshapedTo4D) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n\n      return {\n        value: res,\n        gradFunc: grad\n      };\n    });\n    return customOpWithBias(x4D, $filter, $bias);\n  }\n}\n\nexport const conv2d = op({\n  fusedConv2d_\n});","map":{"version":3,"names":["ENGINE","customGrad","FusedConv2D","makeTypesMatch","convertToTensor","util","add","broadcast_util","conv2d","unfusedConv2d","conv2DBackpropFilter","conv2DBackpropInput","conv_util","applyActivation","getFusedBiasGradient","getFusedDyActivation","shouldFuse","op","reshape","fusedConv2d_","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","bias","activation","preluActivationWeights","leakyreluAlpha","state","gradientDepth","result","$x","$filter","x4D","reshapedTo4D","rank","shape","assert","isInt","eitherStridesOrDilationsAreOne","convInfo","computeConv2DInfo","$bias","assertAndGetBroadcastShape","outShape","$preluActivationWeights","grad","dy","saved","y","dyActivation","tupleValuesAreOne","xDer","filterDer","der","biasDer","push","inputs","attrs","customOp","save","res","runKernel","value","gradFunc","customOpWithBias"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-core/dist/ops/fused/conv2d.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { customGrad } from '../../gradients';\nimport { FusedConv2D } from '../../kernel_names';\nimport { makeTypesMatch } from '../../tensor_util';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { add } from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport { conv2d as unfusedConv2d } from '../conv2d';\nimport { conv2DBackpropFilter } from '../conv2d_backprop_filter';\nimport { conv2DBackpropInput } from '../conv2d_backprop_input';\nimport * as conv_util from '../conv_util';\nimport { applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse } from '../fused_util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Computes a 2D convolution over the input x, optionally fused with adding a\n * bias and applying an activation.\n *\n * ```js\n * const inputDepth = 2;\n * const inShape = [2, 2, 2, inputDepth];\n * const outputDepth = 2;\n * const fSize = 1;\n * const pad = 0;\n * const strides = 1;\n *\n * const x = tf.tensor4d( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n * 16], inShape);\n * const w = tf.tensor4d([-1, 1, -2, 0.5], [fSize, fSize, inputDepth,\n * outputDepth]);\n *\n * tf.fused.conv2d({ x, filter: w, strides, pad, dataFormat: 'NHWC',\n * dilations: [1, 1], bias: tf.scalar(5), activation: 'relu' }).print();\n * ```\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid` output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`) to be\n *     applied\n *      after biasAdd.\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\nfunction fusedConv2d_({ x, filter, strides, pad, dataFormat = 'NHWC', dilations = [1, 1], dimRoundingMode, bias, activation = 'linear', preluActivationWeights, leakyreluAlpha }) {\n    activation = activation || 'linear';\n    if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n        let result = unfusedConv2d(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n        if (bias != null) {\n            result = add(result, bias);\n        }\n        return applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);\n    }\n    const $x = convertToTensor(x, 'x', 'conv2d', 'float32');\n    const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');\n    let x4D = $x;\n    let reshapedTo4D = false;\n    if ($x.rank === 3) {\n        reshapedTo4D = true;\n        x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    }\n    util.assert(x4D.rank === 4, () => `Error in fused conv2d: input must be rank 4, but got rank ` +\n        `${x4D.rank}.`);\n    util.assert($filter.rank === 4, () => `Error in fused conv2d: filter must be rank 4, but got rank ` +\n        `${$filter.rank}.`);\n    if (dimRoundingMode != null) {\n        util.assert(util.isInt(pad), () => `Error in fused conv2d: pad must be an integer when using, ` +\n            `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n    }\n    util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in conv2d: depth of input (${x4D.shape[3]}) must match ` +\n        `input depth for filter ${$filter.shape[2]}.`);\n    util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    util.assert(dataFormat === 'NHWC', () => `Error in conv2d: got dataFormat of ${dataFormat} but only NHWC is currently supported.`);\n    const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode);\n    let $bias;\n    if (bias != null) {\n        $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n        [$bias] = makeTypesMatch($bias, $x);\n        broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n    }\n    let $preluActivationWeights;\n    if (preluActivationWeights != null) {\n        $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused conv2d');\n    }\n    const grad = (dy, saved) => {\n        const [$filter, x4D, y, $bias] = saved;\n        const dyActivation = getFusedDyActivation(dy, y, activation);\n        util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused conv2D: ' +\n            `dilation rates greater than 1 ` +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n        const xDer = conv2DBackpropInput(x4D.shape, dyActivation, $filter, strides, pad);\n        const filterDer = conv2DBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad);\n        const der = [xDer, filterDer];\n        if ($bias != null) {\n            const biasDer = getFusedBiasGradient($bias, dyActivation);\n            der.push(biasDer);\n        }\n        return der;\n    };\n    const inputs = {\n        x: x4D,\n        filter: $filter,\n        bias: $bias,\n        preluActivationWeights: $preluActivationWeights\n    };\n    const attrs = {\n        strides,\n        pad,\n        dataFormat,\n        dilations,\n        dimRoundingMode,\n        activation,\n        leakyreluAlpha\n    };\n    // Depending on the the params passed in we will have different number of\n    // inputs and thus a a different number of elements in the gradient.\n    if (bias == null) {\n        const customOp = customGrad((x4D, filter, save) => {\n            let res = \n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            ENGINE.runKernel(FusedConv2D, inputs, attrs);\n            save([filter, x4D, res]);\n            if (reshapedTo4D) {\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n            }\n            return { value: res, gradFunc: grad };\n        });\n        return customOp(x4D, $filter);\n    }\n    else {\n        const customOpWithBias = customGrad((x4D, filter, bias, save) => {\n            let res = ENGINE.runKernel(FusedConv2D, inputs, attrs);\n            save([filter, x4D, res, bias]);\n            if (reshapedTo4D) {\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n            }\n            return { value: res, gradFunc: grad };\n        });\n        return customOpWithBias(x4D, $filter, $bias);\n    }\n}\nexport const conv2d = op({ fusedConv2d_ });\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,cAAvB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,SAASC,WAAT,QAA4B,oBAA5B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAO,KAAKC,cAAZ,MAAgC,mBAAhC;AACA,SAASC,MAAM,IAAIC,aAAnB,QAAwC,WAAxC;AACA,SAASC,oBAAT,QAAqC,2BAArC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAO,KAAKC,SAAZ,MAA2B,cAA3B;AACA,SAASC,eAAT,EAA0BC,oBAA1B,EAAgDC,oBAAhD,EAAsEC,UAAtE,QAAwF,eAAxF;AACA,SAASC,EAAT,QAAmB,cAAnB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,YAAT,CAAsB;EAAEC,CAAF;EAAKC,MAAL;EAAaC,OAAb;EAAsBC,GAAtB;EAA2BC,UAAU,GAAG,MAAxC;EAAgDC,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,CAA5D;EAAoEC,eAApE;EAAqFC,IAArF;EAA2FC,UAAU,GAAG,QAAxG;EAAkHC,sBAAlH;EAA0IC;AAA1I,CAAtB,EAAkL;EAC9KF,UAAU,GAAGA,UAAU,IAAI,QAA3B;;EACA,IAAIZ,UAAU,CAAChB,MAAM,CAAC+B,KAAP,CAAaC,aAAd,EAA6BJ,UAA7B,CAAV,KAAuD,KAA3D,EAAkE;IAC9D,IAAIK,MAAM,GAAGxB,aAAa,CAACW,CAAD,EAAIC,MAAJ,EAAYC,OAAZ,EAAqBC,GAArB,EAA0BC,UAA1B,EAAsCC,SAAtC,EAAiDC,eAAjD,CAA1B;;IACA,IAAIC,IAAI,IAAI,IAAZ,EAAkB;MACdM,MAAM,GAAG3B,GAAG,CAAC2B,MAAD,EAASN,IAAT,CAAZ;IACH;;IACD,OAAOd,eAAe,CAACoB,MAAD,EAASL,UAAT,EAAqBC,sBAArB,EAA6CC,cAA7C,CAAtB;EACH;;EACD,MAAMI,EAAE,GAAG9B,eAAe,CAACgB,CAAD,EAAI,GAAJ,EAAS,QAAT,EAAmB,SAAnB,CAA1B;EACA,MAAMe,OAAO,GAAG/B,eAAe,CAACiB,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAA6B,SAA7B,CAA/B;EACA,IAAIe,GAAG,GAAGF,EAAV;EACA,IAAIG,YAAY,GAAG,KAAnB;;EACA,IAAIH,EAAE,CAACI,IAAH,KAAY,CAAhB,EAAmB;IACfD,YAAY,GAAG,IAAf;IACAD,GAAG,GAAGlB,OAAO,CAACgB,EAAD,EAAK,CAAC,CAAD,EAAIA,EAAE,CAACK,KAAH,CAAS,CAAT,CAAJ,EAAiBL,EAAE,CAACK,KAAH,CAAS,CAAT,CAAjB,EAA8BL,EAAE,CAACK,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAb;EACH;;EACDlC,IAAI,CAACmC,MAAL,CAAYJ,GAAG,CAACE,IAAJ,KAAa,CAAzB,EAA4B,MAAO,4DAAD,GAC7B,GAAEF,GAAG,CAACE,IAAK,GADhB;EAEAjC,IAAI,CAACmC,MAAL,CAAYL,OAAO,CAACG,IAAR,KAAiB,CAA7B,EAAgC,MAAO,6DAAD,GACjC,GAAEH,OAAO,CAACG,IAAK,GADpB;;EAEA,IAAIZ,eAAe,IAAI,IAAvB,EAA6B;IACzBrB,IAAI,CAACmC,MAAL,CAAYnC,IAAI,CAACoC,KAAL,CAAWlB,GAAX,CAAZ,EAA6B,MAAO,4DAAD,GAC9B,mBAAkBG,eAAgB,gBAAeH,GAAI,GAD1D;EAEH;;EACDlB,IAAI,CAACmC,MAAL,CAAYJ,GAAG,CAACG,KAAJ,CAAU,CAAV,MAAiBJ,OAAO,CAACI,KAAR,CAAc,CAAd,CAA7B,EAA+C,MAAO,oCAAmCH,GAAG,CAACG,KAAJ,CAAU,CAAV,CAAa,eAAjD,GAChD,0BAAyBJ,OAAO,CAACI,KAAR,CAAc,CAAd,CAAiB,GAD/C;EAEAlC,IAAI,CAACmC,MAAL,CAAY5B,SAAS,CAAC8B,8BAAV,CAAyCpB,OAAzC,EAAkDG,SAAlD,CAAZ,EAA0E,MAAM,6DAC3E,eAAcH,OAAQ,mBAAkBG,SAAU,GADvD;EAEApB,IAAI,CAACmC,MAAL,CAAYhB,UAAU,KAAK,MAA3B,EAAmC,MAAO,sCAAqCA,UAAW,wCAA1F;EACA,MAAMmB,QAAQ,GAAG/B,SAAS,CAACgC,iBAAV,CAA4BR,GAAG,CAACG,KAAhC,EAAuCJ,OAAO,CAACI,KAA/C,EAAsDjB,OAAtD,EAA+DG,SAA/D,EAA0EF,GAA1E,EAA+EG,eAA/E,CAAjB;EACA,IAAImB,KAAJ;;EACA,IAAIlB,IAAI,IAAI,IAAZ,EAAkB;IACdkB,KAAK,GAAGzC,eAAe,CAACuB,IAAD,EAAO,MAAP,EAAe,cAAf,CAAvB;IACA,CAACkB,KAAD,IAAU1C,cAAc,CAAC0C,KAAD,EAAQX,EAAR,CAAxB;IACA3B,cAAc,CAACuC,0BAAf,CAA0CH,QAAQ,CAACI,QAAnD,EAA6DF,KAAK,CAACN,KAAnE;EACH;;EACD,IAAIS,uBAAJ;;EACA,IAAInB,sBAAsB,IAAI,IAA9B,EAAoC;IAChCmB,uBAAuB,GAAG5C,eAAe,CAACyB,sBAAD,EAAyB,eAAzB,EAA0C,cAA1C,CAAzC;EACH;;EACD,MAAMoB,IAAI,GAAG,CAACC,EAAD,EAAKC,KAAL,KAAe;IACxB,MAAM,CAAChB,OAAD,EAAUC,GAAV,EAAegB,CAAf,EAAkBP,KAAlB,IAA2BM,KAAjC;IACA,MAAME,YAAY,GAAGtC,oBAAoB,CAACmC,EAAD,EAAKE,CAAL,EAAQxB,UAAR,CAAzC;IACAvB,IAAI,CAACmC,MAAL,CAAY5B,SAAS,CAAC0C,iBAAV,CAA4B7B,SAA5B,CAAZ,EAAoD,MAAM,wCACrD,gCADqD,GAErD,sDAAqDA,SAAU,GAFpE;IAGA,MAAM8B,IAAI,GAAG5C,mBAAmB,CAACyB,GAAG,CAACG,KAAL,EAAYc,YAAZ,EAA0BlB,OAA1B,EAAmCb,OAAnC,EAA4CC,GAA5C,CAAhC;IACA,MAAMiC,SAAS,GAAG9C,oBAAoB,CAAC0B,GAAD,EAAMiB,YAAN,EAAoBlB,OAAO,CAACI,KAA5B,EAAmCjB,OAAnC,EAA4CC,GAA5C,CAAtC;IACA,MAAMkC,GAAG,GAAG,CAACF,IAAD,EAAOC,SAAP,CAAZ;;IACA,IAAIX,KAAK,IAAI,IAAb,EAAmB;MACf,MAAMa,OAAO,GAAG5C,oBAAoB,CAAC+B,KAAD,EAAQQ,YAAR,CAApC;MACAI,GAAG,CAACE,IAAJ,CAASD,OAAT;IACH;;IACD,OAAOD,GAAP;EACH,CAdD;;EAeA,MAAMG,MAAM,GAAG;IACXxC,CAAC,EAAEgB,GADQ;IAEXf,MAAM,EAAEc,OAFG;IAGXR,IAAI,EAAEkB,KAHK;IAIXhB,sBAAsB,EAAEmB;EAJb,CAAf;EAMA,MAAMa,KAAK,GAAG;IACVvC,OADU;IAEVC,GAFU;IAGVC,UAHU;IAIVC,SAJU;IAKVC,eALU;IAMVE,UANU;IAOVE;EAPU,CAAd,CA9D8K,CAuE9K;EACA;;EACA,IAAIH,IAAI,IAAI,IAAZ,EAAkB;IACd,MAAMmC,QAAQ,GAAG7D,UAAU,CAAC,CAACmC,GAAD,EAAMf,MAAN,EAAc0C,IAAd,KAAuB;MAC/C,IAAIC,GAAG,GACP;MACAhE,MAAM,CAACiE,SAAP,CAAiB/D,WAAjB,EAA8B0D,MAA9B,EAAsCC,KAAtC,CAFA;MAGAE,IAAI,CAAC,CAAC1C,MAAD,EAASe,GAAT,EAAc4B,GAAd,CAAD,CAAJ;;MACA,IAAI3B,YAAJ,EAAkB;QACd;QACA2B,GAAG,GAAG9C,OAAO,CAAC8C,GAAD,EAAM,CAACA,GAAG,CAACzB,KAAJ,CAAU,CAAV,CAAD,EAAeyB,GAAG,CAACzB,KAAJ,CAAU,CAAV,CAAf,EAA6ByB,GAAG,CAACzB,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAb;MACH;;MACD,OAAO;QAAE2B,KAAK,EAAEF,GAAT;QAAcG,QAAQ,EAAElB;MAAxB,CAAP;IACH,CAV0B,CAA3B;IAWA,OAAOa,QAAQ,CAAC1B,GAAD,EAAMD,OAAN,CAAf;EACH,CAbD,MAcK;IACD,MAAMiC,gBAAgB,GAAGnE,UAAU,CAAC,CAACmC,GAAD,EAAMf,MAAN,EAAcM,IAAd,EAAoBoC,IAApB,KAA6B;MAC7D,IAAIC,GAAG,GAAGhE,MAAM,CAACiE,SAAP,CAAiB/D,WAAjB,EAA8B0D,MAA9B,EAAsCC,KAAtC,CAAV;MACAE,IAAI,CAAC,CAAC1C,MAAD,EAASe,GAAT,EAAc4B,GAAd,EAAmBrC,IAAnB,CAAD,CAAJ;;MACA,IAAIU,YAAJ,EAAkB;QACd;QACA2B,GAAG,GAAG9C,OAAO,CAAC8C,GAAD,EAAM,CAACA,GAAG,CAACzB,KAAJ,CAAU,CAAV,CAAD,EAAeyB,GAAG,CAACzB,KAAJ,CAAU,CAAV,CAAf,EAA6ByB,GAAG,CAACzB,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAb;MACH;;MACD,OAAO;QAAE2B,KAAK,EAAEF,GAAT;QAAcG,QAAQ,EAAElB;MAAxB,CAAP;IACH,CARkC,CAAnC;IASA,OAAOmB,gBAAgB,CAAChC,GAAD,EAAMD,OAAN,EAAeU,KAAf,CAAvB;EACH;AACJ;;AACD,OAAO,MAAMrC,MAAM,GAAGS,EAAE,CAAC;EAAEE;AAAF,CAAD,CAAjB"},"metadata":{},"sourceType":"module"}