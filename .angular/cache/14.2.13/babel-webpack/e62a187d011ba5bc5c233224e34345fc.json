{"ast":null,"code":"import { __assign, __asyncValues, __awaiter, __extends, __generator, __read, __rest, __spread, __values } from \"tslib\"; // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { Amplify, ConsoleLogger as Logger, Hub, browserOrNode, BackgroundProcessManager } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ModelRelationship } from '../storage/relationship';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, isSchemaModelWithAttributes, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isIdentifierObject } from '../types';\nimport { DATASTORE, errorMessages, establishRelationAndKeys, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, inMemoryPagination, extractPrimaryKeyFieldNames, extractPrimaryKeysAndValues, isIdManaged, isIdOptionallyManaged, mergePatches, getTimestampFields } from '../util';\nimport { recursivePredicateFor, predicateFor, internals } from '../predicates/next';\nimport { getIdentifierValue } from '../sync/utils';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap();\n/**\n * Stores data for crafting the correct update mutation input for a model.\n *\n * - `Patch[]` - array of changed fields and metadata.\n * - `PersistentModel` - the source model, used for diffing object-type fields.\n */\n\nvar modelPatchesMap = new WeakMap();\n\nvar getModelDefinition = function (modelConstructor) {\n  var namespace = modelNamespaceMap.get(modelConstructor);\n  var definition = namespace ? schema.namespaces[namespace].models[modelConstructor.name] : undefined;\n  return definition;\n};\n/**\n * Determines whether the given object is a Model Constructor that DataStore can\n * safely use to construct objects and discover related metadata.\n *\n * @param obj The object to test.\n */\n\n\nvar isValidModelConstructor = function (obj) {\n  return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\n\nvar namespaceResolver = function (modelConstructor) {\n  var resolver = modelNamespaceMap.get(modelConstructor);\n\n  if (!resolver) {\n    throw new Error(\"Namespace Resolver for '\" + modelConstructor.name + \"' not found! This is probably a bug in '@amplify-js/datastore'.\");\n  }\n\n  return resolver;\n};\n/**\n * Creates a predicate without any conditions that can be passed to customer\n * code to have conditions added to it.\n *\n * For example, in this query:\n *\n * ```ts\n * await DataStore.query(\n * \tModel,\n * \titem => item.field.eq('value')\n * );\n * ```\n *\n * `buildSeedPredicate(Model)` is used to create `item`, which is passed to the\n * predicate function, which in turn uses that \"seed\" predicate (`item`) to build\n * a predicate tree.\n *\n * @param modelConstructor The model the predicate will query.\n */\n\n\nvar buildSeedPredicate = function (modelConstructor) {\n  if (!modelConstructor) throw new Error('Missing modelConstructor');\n  var modelSchema = getModelDefinition(modelConstructor);\n  if (!modelSchema) throw new Error('Missing modelSchema');\n  var pks = extractPrimaryKeyFieldNames(modelSchema);\n  if (!pks) throw new Error('Could not determine PK');\n  return recursivePredicateFor({\n    builder: modelConstructor,\n    schema: modelSchema,\n    pkField: pks\n  });\n}; // exporting syncClasses for testing outbox.test.ts\n\n\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\n/**\n * Maps a model to its related models for memoization/immutability.\n */\n\nvar modelInstanceAssociationsMap = new WeakMap();\n/**\n * Describes whether and to what a model is attached for lazy loading purposes.\n */\n\nvar ModelAttachment;\n\n(function (ModelAttachment) {\n  /**\n   * Model doesn't lazy load from any data source.\n   *\n   * Related entity properties provided at instantiation are returned\n   * via the respective lazy interfaces when their properties are invoked.\n   */\n  ModelAttachment[\"Detached\"] = \"Detached\";\n  /**\n   * Model lazy loads from the global DataStore.\n   */\n\n  ModelAttachment[\"DataStore\"] = \"DataStore\";\n  /**\n   * Demonstrative. Not yet implemented.\n   */\n\n  ModelAttachment[\"API\"] = \"API\";\n})(ModelAttachment || (ModelAttachment = {}));\n/**\n * Tells us which data source a model is attached to (lazy loads from).\n *\n * If `Deatched`, the model's lazy properties will only ever return properties\n * from memory provided at construction time.\n */\n\n\nvar attachedModelInstances = new WeakMap();\n/**\n * Registers a model instance against a data source (DataStore, API, or\n * Detached/None).\n *\n * The API option is demonstrative. Lazy loading against API is not yet\n * implemented.\n *\n * @param result A model instance or array of instances\n * @param attachment A ModelAttachment data source\n * @returns passes the `result` back through after attachment\n */\n\nexport function attached(result, attachment) {\n  if (Array.isArray(result)) {\n    result.map(function (record) {\n      return attached(record, attachment);\n    });\n  } else {\n    result && attachedModelInstances.set(result, attachment);\n  }\n\n  return result;\n}\n/**\n * Determines what source a model instance should lazy load from.\n *\n * If the instace was never explicitly registered, it is detached by default.\n *\n * @param instance A model instance\n */\n\nexport var getAttachment = function (instance) {\n  return attachedModelInstances.has(instance) ? attachedModelInstances.get(instance) : ModelAttachment.Detached;\n};\n\nvar initSchema = function (userSchema) {\n  var _a;\n\n  if (schema !== undefined) {\n    console.warn('The schema has already been initialized');\n    return userClasses;\n  }\n\n  logger.log('validating schema', {\n    schema: userSchema\n  });\n  checkSchemaCodegenVersion(userSchema.codegenVersion);\n\n  var internalUserNamespace = __assign({\n    name: USER\n  }, userSchema);\n\n  logger.log('DataStore', 'Init models');\n  userClasses = createTypeClasses(internalUserNamespace);\n  logger.log('DataStore', 'Models initialized');\n  var dataStoreNamespace = getNamespace();\n  var storageNamespace = Storage.getNamespace();\n  var syncNamespace = SyncEngine.getNamespace();\n  dataStoreClasses = createTypeClasses(dataStoreNamespace);\n  storageClasses = createTypeClasses(storageNamespace);\n  syncClasses = createTypeClasses(syncNamespace);\n  schema = {\n    namespaces: (_a = {}, _a[dataStoreNamespace.name] = dataStoreNamespace, _a[internalUserNamespace.name] = internalUserNamespace, _a[storageNamespace.name] = storageNamespace, _a[syncNamespace.name] = syncNamespace, _a),\n    version: userSchema.version,\n    codegenVersion: userSchema.codegenVersion\n  };\n  Object.keys(schema.namespaces).forEach(function (namespace) {\n    var e_1, _a;\n\n    var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2),\n        relations = _b[0],\n        keys = _b[1];\n\n    schema.namespaces[namespace].relationships = relations;\n    schema.namespaces[namespace].keys = keys;\n    var modelAssociations = new Map();\n    Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n      var e_2, _a, e_3, _b;\n\n      var connectedModels = [];\n      Object.values(model.fields).filter(function (field) {\n        return field.association && field.association.connectionType === 'BELONGS_TO' && field.type.model !== model.name;\n      }).forEach(function (field) {\n        return connectedModels.push(field.type.model);\n      });\n      modelAssociations.set(model.name, connectedModels); // Precompute model info (such as pk fields) so that downstream schema consumers\n      // (such as predicate builders) don't have to reach back into \"DataStore\" space\n      // to go looking for it.\n\n      Object.values(model.fields).forEach(function (field) {\n        var relatedModel = userClasses[field.type.model];\n\n        if (isModelConstructor(relatedModel)) {\n          Object.defineProperty(field.type, 'modelConstructor', {\n            get: function () {\n              var relatedModelDefinition = getModelDefinition(relatedModel);\n              if (!relatedModelDefinition) throw new Error(\"Could not find model definition for \" + relatedModel.name);\n              return {\n                builder: relatedModel,\n                schema: relatedModelDefinition,\n                pkField: extractPrimaryKeyFieldNames(relatedModelDefinition)\n              };\n            }\n          });\n        }\n      }); // compatibility with legacy/pre-PK codegen for lazy loading to inject\n      // index fields into the model definition.\n      // definition.cloudFields = { ...definition.fields };\n\n      var indexes = schema.namespaces[namespace].relationships[model.name].indexes;\n      var indexFields = new Set();\n\n      try {\n        for (var indexes_1 = __values(indexes), indexes_1_1 = indexes_1.next(); !indexes_1_1.done; indexes_1_1 = indexes_1.next()) {\n          var index = indexes_1_1.value;\n\n          try {\n            for (var _c = (e_3 = void 0, __values(index[1])), _d = _c.next(); !_d.done; _d = _c.next()) {\n              var indexField = _d.value;\n              indexFields.add(indexField);\n            }\n          } catch (e_3_1) {\n            e_3 = {\n              error: e_3_1\n            };\n          } finally {\n            try {\n              if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (indexes_1_1 && !indexes_1_1.done && (_a = indexes_1.return)) _a.call(indexes_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      model.allFields = __assign(__assign({}, Object.fromEntries(__spread(indexFields.values()).map(function (name) {\n        return [name, {\n          name: name,\n          type: 'ID',\n          isArray: false\n        }];\n      }))), model.fields);\n    });\n    var result = new Map();\n    var count = 1000;\n\n    while (true && count > 0) {\n      if (modelAssociations.size === 0) {\n        break;\n      }\n\n      count--;\n\n      if (count === 0) {\n        throw new Error('Models are not topologically sortable. Please verify your schema.');\n      }\n\n      try {\n        for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n          var modelName = _d.value;\n          var parents = modelAssociations.get(modelName);\n\n          if (parents === null || parents === void 0 ? void 0 : parents.every(function (x) {\n            return result.has(x);\n          })) {\n            result.set(modelName, parents);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      Array.from(result.keys()).forEach(function (x) {\n        return modelAssociations.delete(x);\n      });\n    }\n\n    schema.namespaces[namespace].modelTopologicalOrdering = result;\n  });\n  return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\n\n\nvar checkSchemaInitialized = function () {\n  if (schema === undefined) {\n    var message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n    logger.error(message);\n    throw new Error(message);\n  }\n};\n/**\n * Throws an exception if the schema is using a codegen version that is not supported.\n *\n * Set the supported version by setting majorVersion and minorVersion\n * This functions similar to ^ version range.\n * The tested codegenVersion major version must exactly match the set majorVersion\n * The tested codegenVersion minor version must be gt or equal to the set minorVersion\n * Example: For a min supported version of 5.4.0 set majorVersion = 5 and minorVersion = 4\n *\n * This regex will not work when setting a supported range with minor version\n * of 2 or more digits.\n * i.e. minorVersion = 10 will not work\n * The regex will work for testing a codegenVersion with multi digit minor\n * versions as long as the minimum minorVersion is single digit.\n * i.e. codegenVersion = 5.30.1, majorVersion = 5, minorVersion = 4 PASSES\n *\n * @param codegenVersion schema codegenVersion\n */\n\n\nvar checkSchemaCodegenVersion = function (codegenVersion) {\n  var majorVersion = 3;\n  var minorVersion = 2;\n  var isValid = false;\n\n  try {\n    var versionParts = codegenVersion.split('.');\n\n    var _a = __read(versionParts, 4),\n        major = _a[0],\n        minor = _a[1],\n        patch = _a[2],\n        patchrevision = _a[3];\n\n    isValid = Number(major) === majorVersion && Number(minor) >= minorVersion;\n  } catch (err) {\n    console.log(\"Error parsing codegen version: \" + codegenVersion + \"\\n\" + err);\n  }\n\n  if (!isValid) {\n    var message = \"Models were generated with an unsupported version of codegen. Codegen artifacts are from \" + (codegenVersion || 'an unknown version') + \", whereas ^\" + majorVersion + \".\" + minorVersion + \".0 is required. \" + \"Update to the latest CLI and run 'amplify codegen models'.\";\n    logger.error(message);\n    throw new Error(message);\n  }\n};\n\nvar createTypeClasses = function (namespace) {\n  var classes = {};\n  Object.entries(namespace.models).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        modelName = _b[0],\n        modelDefinition = _b[1];\n\n    var clazz = createModelClass(modelDefinition);\n    classes[modelName] = clazz;\n    modelNamespaceMap.set(clazz, namespace.name);\n  });\n  Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        typeName = _b[0],\n        typeDefinition = _b[1];\n\n    var clazz = createNonModelClass(typeDefinition);\n    classes[typeName] = clazz;\n  });\n  return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\n\n\nvar instancesMetadata = new WeakSet();\n\nfunction modelInstanceCreator(modelConstructor, init) {\n  instancesMetadata.add(init);\n  return new modelConstructor(init);\n}\n\nvar validateModelFields = function (modelDefinition) {\n  return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n\n    if (fieldDefinition !== undefined) {\n      var type_1 = fieldDefinition.type,\n          isRequired_1 = fieldDefinition.isRequired,\n          isArrayNullable = fieldDefinition.isArrayNullable,\n          name_1 = fieldDefinition.name,\n          isArray = fieldDefinition.isArray;\n      var timestamps = isSchemaModelWithAttributes(modelDefinition) ? getTimestampFields(modelDefinition) : {};\n      var isTimestampField = !!timestamps[name_1];\n\n      if ((!isArray && isRequired_1 || isArray && !isArrayNullable) && !isTimestampField && (v === null || v === undefined)) {\n        throw new Error(\"Field \" + name_1 + \" is required\");\n      }\n\n      if (isSchemaModelWithAttributes(modelDefinition) && !isIdManaged(modelDefinition)) {\n        var keys = extractPrimaryKeyFieldNames(modelDefinition);\n\n        if (keys.includes(k) && v === '') {\n          logger.error(errorMessages.idEmptyString, {\n            k: k,\n            value: v\n          });\n          throw new Error(errorMessages.idEmptyString);\n        }\n      }\n\n      if (isGraphQLScalarType(type_1)) {\n        var jsType_1 = GraphQLScalarType.getJSType(type_1);\n        var validateScalar_1 = GraphQLScalarType.getValidationFunction(type_1);\n\n        if (type_1 === 'AWSJSON') {\n          if (typeof v === jsType_1) {\n            return;\n          }\n\n          if (typeof v === 'string') {\n            try {\n              JSON.parse(v);\n              return;\n            } catch (error) {\n              throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n            }\n          }\n        }\n\n        if (isArray) {\n          var errorTypeText = jsType_1;\n\n          if (!isRequired_1) {\n            errorTypeText = jsType_1 + \" | null | undefined\";\n          }\n\n          if (!Array.isArray(v) && !isArrayNullable) {\n            throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n          }\n\n          if (!isNullOrUndefined(v) && v.some(function (e) {\n            return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n          })) {\n            var elemTypes = v.map(function (e) {\n              return e === null ? 'null' : typeof e;\n            }).join(',');\n            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n          }\n\n          if (validateScalar_1 && !isNullOrUndefined(v)) {\n            var validationStatus = v.map(function (e) {\n              if (!isNullOrUndefined(e)) {\n                return validateScalar_1(e);\n              } else if (isNullOrUndefined(e) && !isRequired_1) {\n                return true;\n              } else {\n                return false;\n              }\n            });\n\n            if (!validationStatus.every(function (s) {\n              return s;\n            })) {\n              throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1 + \", validation failed for one or more elements. \" + v);\n            }\n          }\n        } else if (!isRequired_1 && v === undefined) {\n          return;\n        } else if (typeof v !== jsType_1 && v !== null) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n        } else if (!isNullOrUndefined(v) && validateScalar_1 && !validateScalar_1(v) // TODO: why never, TS ... why ...\n        ) {\n          throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1 + \", validation failed. \" + v);\n        }\n      } else if (isNonModelFieldType(type_1)) {\n        // do not check non model fields if undefined or null\n        if (!isNullOrUndefined(v)) {\n          var subNonModelDefinition_1 = schema.namespaces.user.nonModels[type_1.nonModel];\n          var modelValidator_1 = validateModelFields(subNonModelDefinition_1);\n\n          if (isArray) {\n            var errorTypeText = type_1.nonModel;\n\n            if (!isRequired_1) {\n              errorTypeText = type_1.nonModel + \" | null | undefined\";\n            }\n\n            if (!Array.isArray(v)) {\n              throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n            }\n\n            v.forEach(function (item) {\n              if (isNullOrUndefined(item) && isRequired_1 || typeof item !== 'object' && typeof item !== 'undefined') {\n                throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1.nonModel + \", [\" + typeof item + \"] received. \" + item);\n              }\n\n              if (!isNullOrUndefined(item)) {\n                Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                  modelValidator_1(subKey, item[subKey]);\n                });\n              }\n            });\n          } else {\n            if (typeof v !== 'object') {\n              throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1.nonModel + \", \" + typeof v + \" recieved. \" + v);\n            }\n\n            Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n              modelValidator_1(subKey, v[subKey]);\n            });\n          }\n        }\n      }\n    }\n  };\n};\n\nvar castInstanceType = function (modelDefinition, k, v) {\n  var _a = modelDefinition.fields[k] || {},\n      isArray = _a.isArray,\n      type = _a.type; // attempt to parse stringified JSON\n\n\n  if (typeof v === 'string' && (isArray || type === 'AWSJSON' || isNonModelFieldType(type) || isModelFieldType(type))) {\n    try {\n      return JSON.parse(v);\n    } catch (_b) {// if JSON is invalid, don't throw and let modelValidator handle it\n    }\n  } // cast from numeric representation of boolean to JS boolean\n\n\n  if (typeof v === 'number' && type === 'Boolean') {\n    return Boolean(v);\n  }\n\n  return v;\n};\n/**\n * Records the patches (as if against an empty object) used to initialize\n * an instance of a Model. This can be used for determining which fields to\n * send to the cloud durnig a CREATE mutation.\n */\n\n\nvar initPatches = new WeakMap();\n/**\n * Attempts to apply type-aware, casted field values from a given `init`\n * object to the given `draft`.\n *\n * @param init The initialization object to extract field values from.\n * @param modelDefinition The definition describing the target object shape.\n * @param draft The draft to apply field values to.\n */\n\nvar initializeInstance = function (init, modelDefinition, draft) {\n  var modelValidator = validateModelFields(modelDefinition);\n  Object.entries(init).forEach(function (_a) {\n    var _b = __read(_a, 2),\n        k = _b[0],\n        v = _b[1];\n\n    var parsedValue = castInstanceType(modelDefinition, k, v);\n    modelValidator(k, parsedValue);\n    draft[k] = parsedValue;\n  });\n};\n/**\n * Updates a draft to standardize its customer-defined fields so that they are\n * consistent with the data as it would look after having been synchronized from\n * Cloud storage.\n *\n * The exceptions to this are:\n *\n * 1. Non-schema/Internal [sync] metadata fields.\n * 2. Cloud-managed fields, which are `null` until set by cloud storage.\n *\n * This function should be expanded if/when deviations between canonical Cloud\n * storage data and locally managed data are found. For now, the known areas\n * that require normalization are:\n *\n * 1. Ensuring all non-metadata fields are *defined*. (I.e., turn `undefined` -> `null`.)\n *\n * @param modelDefinition Definition for the draft. Used to discover all fields.\n * @param draft The instance draft to apply normalizations to.\n */\n\n\nvar normalize = function (modelDefinition, draft) {\n  var e_4, _a;\n\n  try {\n    for (var _b = __values(Object.keys(modelDefinition.fields)), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var k = _c.value;\n      if (draft[k] === undefined) draft[k] = null;\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n};\n\nvar createModelClass = function (modelDefinition) {\n  var e_5, _a;\n\n  var clazz =\n  /** @class */\n  function () {\n    function Model(init) {\n      // we create a base instance first so we can distinguish which fields were explicitly\n      // set by customer code versus those set by normalization. only those fields\n      // which are explicitly set by customers should be part of create mutations.\n      var patches = [];\n      var baseInstance = produce(this, function (draft) {\n        initializeInstance(init, modelDefinition, draft); // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n\n        var isInternallyInitialized = instancesMetadata.has(init);\n        var modelInstanceMetadata = isInternallyInitialized ? init : {};\n        var _id = modelInstanceMetadata.id;\n\n        if (isIdManaged(modelDefinition)) {\n          var isInternalModel = _id !== null && _id !== undefined;\n          var id = isInternalModel ? _id : modelDefinition.syncable ? uuid4() : ulid();\n          draft.id = id;\n        } else if (isIdOptionallyManaged(modelDefinition)) {\n          // only auto-populate if the id was not provided\n          draft.id = draft.id || uuid4();\n        }\n\n        if (!isInternallyInitialized) {\n          checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n        }\n\n        var _version = modelInstanceMetadata._version,\n            _lastChangedAt = modelInstanceMetadata._lastChangedAt,\n            _deleted = modelInstanceMetadata._deleted;\n\n        if (modelDefinition.syncable) {\n          draft._version = _version;\n          draft._lastChangedAt = _lastChangedAt;\n          draft._deleted = _deleted;\n        }\n      }, function (p) {\n        return patches = p;\n      }); // now that we have a list of patches that encapsulate the explicit, customer-provided\n      // fields, we can normalize. patches from normalization are ignored, because the changes\n      // are only create to provide a consistent view of the data for fields pre/post sync\n      // where possible. (not all fields can be normalized pre-sync, because they're generally\n      // \"cloud managed\" fields, like createdAt and updatedAt.)\n\n      var normalized = produce(baseInstance, function (draft) {\n        return normalize(modelDefinition, draft);\n      });\n      initPatches.set(normalized, patches);\n      return normalized;\n    }\n\n    Model.copyOf = function (source, fn) {\n      var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n\n      if (!isValidModelConstructor(modelConstructor)) {\n        var msg = 'The source object is not a valid model';\n        logger.error(msg, {\n          source: source\n        });\n        throw new Error(msg);\n      }\n\n      var patches = [];\n      var model = produce(source, function (draft) {\n        fn(draft);\n        var keyNames = extractPrimaryKeyFieldNames(modelDefinition); // Keys are immutable\n\n        keyNames.forEach(function (key) {\n          if (draft[key] !== source[key]) {\n            logger.warn(\"copyOf() does not update PK fields. The '\" + key + \"' update is being ignored.\", {\n              source: source\n            });\n          }\n\n          draft[key] = source[key];\n        });\n        var modelValidator = validateModelFields(modelDefinition);\n        Object.entries(draft).forEach(function (_a) {\n          var _b = __read(_a, 2),\n              k = _b[0],\n              v = _b[1];\n\n          var parsedValue = castInstanceType(modelDefinition, k, v);\n          modelValidator(k, parsedValue);\n        });\n        normalize(modelDefinition, draft);\n      }, function (p) {\n        return patches = p;\n      });\n      var hasExistingPatches = modelPatchesMap.has(source);\n\n      if (patches.length || hasExistingPatches) {\n        if (hasExistingPatches) {\n          var _a = __read(modelPatchesMap.get(source), 2),\n              existingPatches = _a[0],\n              existingSource = _a[1];\n\n          var mergedPatches = mergePatches(existingSource, existingPatches, patches);\n          modelPatchesMap.set(model, [mergedPatches, existingSource]);\n          checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n        } else {\n          modelPatchesMap.set(model, [patches, source]);\n          checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n        }\n      } else {\n        // always register patches when performing a copyOf, even if the\n        // patches list is empty. this allows `save()` to recognize when an\n        // instance is the result of a `copyOf()`. without more significant\n        // refactoring, this is the only way for `save()` to know which\n        // diffs (patches) are relevant for `storage` to use in building\n        // the list of \"changed\" fields for mutations.\n        modelPatchesMap.set(model, [[], source]);\n      }\n\n      return attached(model, ModelAttachment.DataStore);\n    }; // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n    // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n\n\n    Model.fromJSON = function (json) {\n      var _this = this;\n\n      if (Array.isArray(json)) {\n        return json.map(function (init) {\n          return _this.fromJSON(init);\n        });\n      }\n\n      var instance = modelInstanceCreator(clazz, json);\n      var modelValidator = validateModelFields(modelDefinition);\n      Object.entries(instance).forEach(function (_a) {\n        var _b = __read(_a, 2),\n            k = _b[0],\n            v = _b[1];\n\n        modelValidator(k, v);\n      });\n      return attached(instance, ModelAttachment.DataStore);\n    };\n\n    return Model;\n  }();\n\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: modelDefinition.name\n  }); // Add getters/setters for relationship fields.\n  //  getter - for lazy loading\n  //  setter - for FK management\n\n  var allModelRelationships = ModelRelationship.allFrom({\n    builder: clazz,\n    schema: modelDefinition,\n    pkField: extractPrimaryKeyFieldNames(modelDefinition)\n  });\n\n  var _loop_1 = function (relationship) {\n    var field = relationship.field;\n    Object.defineProperty(clazz.prototype, modelDefinition.fields[field].name, {\n      set: function (model) {\n        if (!(typeof model === 'object' || typeof model === 'undefined')) return; // if model is undefined or null, the connection should be removed\n\n        if (model) {\n          // Avoid validation error when processing AppSync response with nested\n          // selection set. Nested entitites lack version field and can not be validated\n          // TODO: explore a more reliable method to solve this\n          if (model.hasOwnProperty('_version')) {\n            var modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n\n            if (!isValidModelConstructor(modelConstructor)) {\n              var msg = \"Value passed to \" + modelDefinition.name + \".\" + field + \" is not a valid instance of a model\";\n              logger.error(msg, {\n                model: model\n              });\n              throw new Error(msg);\n            }\n\n            if (modelConstructor.name.toLowerCase() !== relationship.remoteModelConstructor.name.toLowerCase()) {\n              var msg = \"Value passed to \" + modelDefinition.name + \".\" + field + \" is not an instance of \" + relationship.remoteModelConstructor.name;\n              logger.error(msg, {\n                model: model\n              });\n              throw new Error(msg);\n            }\n          }\n        } // if the relationship can be managed automagically, set the FK's\n\n\n        if (relationship.isComplete) {\n          for (var i = 0; i < relationship.localJoinFields.length; i++) {\n            this[relationship.localJoinFields[i]] = model === null || model === void 0 ? void 0 : model[relationship.remoteJoinFields[i]];\n          }\n\n          var instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this);\n          instanceMemos[field] = model || undefined;\n        }\n      },\n      get: function () {\n        var _this = this;\n        /**\n         * Bucket for holding related models instances specific to `this` instance.\n         */\n\n\n        var instanceMemos = modelInstanceAssociationsMap.has(this) ? modelInstanceAssociationsMap.get(this) : modelInstanceAssociationsMap.set(this, {}).get(this); // if the memos already has a result for this field, we'll use it.\n        // there is no \"cache\" invalidation of any kind; memos are permanent to\n        // keep an immutable perception of the instance.\n\n        if (!instanceMemos.hasOwnProperty(field)) {\n          // before we populate the memo, we need to know where to look for relatives.\n          // today, this only supports DataStore. Models aren't managed elsewhere in Amplify.\n          if (getAttachment(this) === ModelAttachment.DataStore) {\n            // when we fetch the results using a query constructed under the guidance\n            // of the relationship metadata, we DO NOT AWAIT resolution. we want to\n            // drop the promise into the memo's synchronously, eliminating the chance\n            // for a race.\n            var resultPromise = instance.query(relationship.remoteModelConstructor, function (base) {\n              return base.and(function (q) {\n                return relationship.remoteJoinFields.map(function (field, index) {\n                  // TODO: anything we can use instead of `any` here?\n                  return q[field].eq(_this[relationship.localJoinFields[index]]);\n                });\n              });\n            }); // results in hand, how we return them to the caller depends on the relationship type.\n\n            if (relationship.type === 'HAS_MANY') {\n              // collections should support async iteration, even though we don't\n              // leverage it fully [yet].\n              instanceMemos[field] = new AsyncCollection(resultPromise);\n            } else {\n              // non-collections should only ever return 1 value *or nothing*.\n              // if we have more than 1 record, something's amiss. it's not our job\n              // pick a result for the customer. it's our job to say \"something's wrong.\"\n              instanceMemos[field] = resultPromise.then(function (rows) {\n                if (rows.length > 1) {\n                  // should never happen for a HAS_ONE or BELONGS_TO.\n                  var err = new Error(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tData integrity error.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tToo many records found for a HAS_ONE/BELONGS_TO field '\" + modelDefinition.name + \".\" + field + \"'\\n\\t\\t\\t\\t\\t\\t\\t\\t\");\n                  console.error(err);\n                  throw err;\n                } else {\n                  return rows[0];\n                }\n              });\n            }\n          } else if (getAttachment(this) === ModelAttachment.API) {\n            throw new Error('Lazy loading from API is not yet supported!');\n          } else {\n            if (relationship.type === 'HAS_MANY') {\n              return new AsyncCollection([]);\n            } else {\n              return Promise.resolve(undefined);\n            }\n          }\n        }\n\n        return instanceMemos[field];\n      }\n    });\n  };\n\n  try {\n    for (var allModelRelationships_1 = __values(allModelRelationships), allModelRelationships_1_1 = allModelRelationships_1.next(); !allModelRelationships_1_1.done; allModelRelationships_1_1 = allModelRelationships_1.next()) {\n      var relationship = allModelRelationships_1_1.value;\n\n      _loop_1(relationship);\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (allModelRelationships_1_1 && !allModelRelationships_1_1.done && (_a = allModelRelationships_1.return)) _a.call(allModelRelationships_1);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n\n  return clazz;\n};\n/**\n * An eventually loaded related model instance.\n */\n\n\nvar AsyncItem =\n/** @class */\nfunction (_super) {\n  __extends(AsyncItem, _super);\n\n  function AsyncItem() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return AsyncItem;\n}(Promise);\n\nexport { AsyncItem };\n/**\n * A collection of related model instances.\n *\n * This collection can be async-iterated or turned directly into an array using `toArray()`.\n */\n\nvar AsyncCollection =\n/** @class */\nfunction () {\n  function AsyncCollection(values) {\n    this.values = values;\n  }\n  /**\n   * Facilitates async iteration.\n   *\n   * ```ts\n   * for await (const item of collection) {\n   *   handle(item)\n   * }\n   * ```\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n   */\n\n\n  AsyncCollection.prototype[Symbol.asyncIterator] = function () {\n    var _this = this;\n\n    var values;\n    var index = 0;\n    return {\n      next: function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var result;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (!!values) return [3\n                /*break*/\n                , 2];\n                return [4\n                /*yield*/\n                , this.values];\n\n              case 1:\n                values = _a.sent();\n                _a.label = 2;\n\n              case 2:\n                if (index < values.length) {\n                  result = {\n                    value: values[index],\n                    done: false\n                  };\n                  index++;\n                  return [2\n                  /*return*/\n                  , result];\n                }\n\n                return [2\n                /*return*/\n                , {\n                  value: null,\n                  done: true\n                }];\n            }\n          });\n        });\n      }\n    };\n  };\n  /**\n   * Turns the collection into an array, up to the amount specified in `max` param.\n   *\n   * ```ts\n   * const all = await collection.toArray();\n   * const first100 = await collection.toArray({max: 100});\n   * ```\n   */\n\n\n  AsyncCollection.prototype.toArray = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).max,\n        max = _b === void 0 ? Number.MAX_SAFE_INTEGER : _b;\n\n    var e_6, _c;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var output, i, _d, _e, element, e_6_1;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            output = [];\n            i = 0;\n            _f.label = 1;\n\n          case 1:\n            _f.trys.push([1, 6, 7, 12]);\n\n            _d = __asyncValues(this);\n            _f.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , _d.next()];\n\n          case 3:\n            if (!(_e = _f.sent(), !_e.done)) return [3\n            /*break*/\n            , 5];\n            element = _e.value;\n\n            if (i < max) {\n              output.push(element);\n              i++;\n            } else {\n              return [3\n              /*break*/\n              , 5];\n            }\n\n            _f.label = 4;\n\n          case 4:\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 12];\n\n          case 6:\n            e_6_1 = _f.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3\n            /*break*/\n            , 12];\n\n          case 7:\n            _f.trys.push([7,, 10, 11]);\n\n            if (!(_e && !_e.done && (_c = _d.return))) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , _c.call(_d)];\n\n          case 8:\n            _f.sent();\n\n            _f.label = 9;\n\n          case 9:\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            if (e_6) throw e_6.error;\n            return [7\n            /*endfinally*/\n            ];\n\n          case 11:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 12:\n            return [2\n            /*return*/\n            , output];\n        }\n      });\n    });\n  };\n\n  return AsyncCollection;\n}();\n\nexport { AsyncCollection };\n\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n  var modelKeys = Object.keys(draft);\n  var fields = modelDefinition.fields;\n  modelKeys.forEach(function (key) {\n    if (fields[key] && fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\n\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n  var patchArray = patches.map(function (p) {\n    return [p.path[0], p.value];\n  });\n  var fields = modelDefinition.fields;\n  patchArray.forEach(function (_a) {\n    var _b = __read(_a, 2),\n        key = _b[0],\n        val = _b[1];\n\n    if (!val || !fields[key]) return;\n\n    if (fields[key].isReadOnly) {\n      throw new Error(key + \" is read-only.\");\n    }\n  });\n};\n\nvar createNonModelClass = function (typeDefinition) {\n  var clazz =\n  /** @class */\n  function () {\n    function Model(init) {\n      var instance = produce(this, function (draft) {\n        initializeInstance(init, typeDefinition, draft);\n      });\n      return instance;\n    }\n\n    return Model;\n  }();\n\n  clazz[immerable] = true;\n  Object.defineProperty(clazz, 'name', {\n    value: typeDefinition.name\n  });\n  registerNonModelClass(clazz);\n  return clazz;\n};\n\nfunction isQueryOne(obj) {\n  return typeof obj === 'string';\n}\n\nfunction defaultConflictHandler(conflictData) {\n  var localModel = conflictData.localModel,\n      modelConstructor = conflictData.modelConstructor,\n      remoteModel = conflictData.remoteModel;\n  var _version = remoteModel._version;\n  return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), {\n    _version: _version\n  }));\n}\n\nfunction defaultErrorHandler(error) {\n  logger.warn(error);\n}\n\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n  var result;\n\n  switch (namespaceName) {\n    case DATASTORE:\n      result = dataStoreClasses[modelName];\n      break;\n\n    case USER:\n      result = userClasses[modelName];\n      break;\n\n    case SYNC:\n      result = syncClasses[modelName];\n      break;\n\n    case STORAGE:\n      result = storageClasses[modelName];\n      break;\n\n    default:\n      throw new Error(\"Invalid namespace: \" + namespaceName);\n  }\n\n  if (isValidModelConstructor(result)) {\n    return result;\n  } else {\n    var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n    logger.error(msg);\n    throw new Error(msg);\n  }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\n\n\nfunction checkSchemaVersion(storage, version) {\n  return __awaiter(this, void 0, void 0, function () {\n    var Setting, modelDefinition;\n\n    var _this = this;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          Setting = dataStoreClasses.Setting;\n          modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n          return [4\n          /*yield*/\n          , storage.runExclusive(function (s) {\n            return __awaiter(_this, void 0, void 0, function () {\n              var _a, schemaVersionSetting, storedValue;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , s.query(Setting, ModelPredicateCreator.createFromAST(modelDefinition, {\n                      and: {\n                        key: {\n                          eq: SETTING_SCHEMA_VERSION\n                        }\n                      }\n                    }), {\n                      page: 0,\n                      limit: 1\n                    })];\n\n                  case 1:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                    if (!(schemaVersionSetting !== undefined && schemaVersionSetting.value !== undefined)) return [3\n                    /*break*/\n                    , 4];\n                    storedValue = JSON.parse(schemaVersionSetting.value);\n                    if (!(storedValue !== version)) return [3\n                    /*break*/\n                    , 3];\n                    return [4\n                    /*yield*/\n                    , s.clear(false)];\n\n                  case 2:\n                    _b.sent();\n\n                    _b.label = 3;\n\n                  case 3:\n                    return [3\n                    /*break*/\n                    , 6];\n\n                  case 4:\n                    return [4\n                    /*yield*/\n                    , s.save(modelInstanceCreator(Setting, {\n                      key: SETTING_SCHEMA_VERSION,\n                      value: JSON.stringify(version)\n                    }))];\n\n                  case 5:\n                    _b.sent();\n\n                    _b.label = 6;\n\n                  case 6:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          })];\n\n        case 1:\n          _a.sent();\n\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nvar syncSubscription;\n\nfunction getNamespace() {\n  var namespace = {\n    name: DATASTORE,\n    relationships: {},\n    enums: {},\n    nonModels: {},\n    models: {\n      Setting: {\n        name: 'Setting',\n        pluralName: 'Settings',\n        syncable: false,\n        fields: {\n          id: {\n            name: 'id',\n            type: 'ID',\n            isRequired: true,\n            isArray: false\n          },\n          key: {\n            name: 'key',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          },\n          value: {\n            name: 'value',\n            type: 'String',\n            isRequired: true,\n            isArray: false\n          }\n        }\n      }\n    }\n  };\n  return namespace;\n}\n\nvar DataStoreState;\n\n(function (DataStoreState) {\n  DataStoreState[\"NotRunning\"] = \"Not Running\";\n  DataStoreState[\"Starting\"] = \"Starting\";\n  DataStoreState[\"Running\"] = \"Running\";\n  DataStoreState[\"Stopping\"] = \"Stopping\";\n  DataStoreState[\"Clearing\"] = \"Clearing\";\n})(DataStoreState || (DataStoreState = {})); // TODO: How can we get rid of the non-null assertions?\n// https://github.com/aws-amplify/amplify-js/pull/10477/files#r1007363485\n\n\nvar DataStore =\n/** @class */\nfunction () {\n  function DataStore() {\n    var _this = this; // reference to configured category instances. Used for preserving SSR context\n\n\n    this.Auth = Auth;\n    this.InternalAPI = InternalAPI;\n    this.Cache = Cache; // Non-null assertions (bang operator) have been added to most of these properties\n    // to make TS happy. These properties are all expected to be set immediately after\n    // construction.\n    // TODO: Refactor to use proper DI if possible. If not possible, change these to\n    // optionals and implement conditional checks throughout. Rinse/repeat on all\n    // sync engine processors, storage engine, adapters, etc..\n\n    this.amplifyConfig = {};\n    this.syncPredicates = new WeakMap(); // object that gets passed to descendent classes. Allows us to pass these down by reference\n\n    this.amplifyContext = {\n      Auth: this.Auth,\n      InternalAPI: this.InternalAPI,\n      Cache: this.Cache\n    };\n    /**\n     * **IMPORTANT!**\n     *\n     * Accumulator for background things that can **and MUST** be called when\n     * DataStore stops.\n     *\n     * These jobs **MUST** be *idempotent promises* that resolve ONLY\n     * once the intended jobs are completely finished and/or otherwise destroyed\n     * and cleaned up with ZERO outstanding:\n     *\n     * 1. side effects (e.g., state changes)\n     * 1. callbacks\n     * 1. subscriptions\n     * 1. calls to storage\n     * 1. *etc.*\n     *\n     * Methods that create pending promises, subscriptions, callbacks, or any\n     * type of side effect **MUST** be registered with the manager. And, a new\n     * manager must be created after each `exit()`.\n     *\n     * Failure to comply will put DataStore into a highly unpredictable state\n     * when it needs to stop or clear -- which occurs when restarting with new\n     * sync expressions, during testing, and potentially during app code\n     * recovery handling, etc..\n     *\n     * It is up to the discretion of each disposer whether to wait for job\n     * completion or to cancel operations and issue failures *as long as the\n     * disposer returns in a reasonable amount of time.*\n     *\n     * (Reasonable = *seconds*, not minutes.)\n     */\n\n    this.runningProcesses = new BackgroundProcessManager();\n    /**\n     * Indicates what state DataStore is in.\n     *\n     * Not [yet?] used for actual state management; but for messaging\n     * when errors occur, to help troubleshoot.\n     */\n\n    this.state = DataStoreState.NotRunning;\n    /**\n     * If not already done:\n     * 1. Attaches and initializes storage.\n     * 2. Loads the schema and records metadata.\n     * 3. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n     * attaches a sync engine, starts it, and subscribes.\n     */\n\n    this.start = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n\n              var _this = this;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    this.state = DataStoreState.Starting;\n                    if (!(this.initialized === undefined)) return [3\n                    /*break*/\n                    , 1];\n                    logger.debug('Starting DataStore');\n                    this.initialized = new Promise(function (res, rej) {\n                      _this.initResolve = res;\n                      _this.initReject = rej;\n                    });\n                    return [3\n                    /*break*/\n                    , 3];\n\n                  case 1:\n                    return [4\n                    /*yield*/\n                    , this.initialized];\n\n                  case 2:\n                    _b.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n\n                  case 3:\n                    this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                    return [4\n                    /*yield*/\n                    , this.storage.init()];\n\n                  case 4:\n                    _b.sent();\n\n                    checkSchemaInitialized();\n                    return [4\n                    /*yield*/\n                    , checkSchemaVersion(this.storage, schema.version)];\n\n                  case 5:\n                    _b.sent();\n\n                    aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                    if (!aws_appsync_graphqlEndpoint) return [3\n                    /*break*/\n                    , 7];\n                    logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n                    _a = this;\n                    return [4\n                    /*yield*/\n                    , this.processSyncExpressions()];\n\n                  case 6:\n                    _a.syncPredicates = _b.sent();\n                    this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n                    fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n                    syncSubscription = this.sync.start({\n                      fullSyncInterval: fullSyncIntervalInMilliseconds\n                    }).subscribe({\n                      next: function (_a) {\n                        var type = _a.type,\n                            data = _a.data; // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                        // In the Browser, we can begin returning data once subscriptions are in place.\n\n                        var readyType = isNode ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n\n                        if (type === readyType) {\n                          _this.initResolve();\n                        }\n\n                        Hub.dispatch('datastore', {\n                          event: type,\n                          data: data\n                        });\n                      },\n                      error: function (err) {\n                        logger.warn('Sync error', err);\n\n                        _this.initReject();\n                      }\n                    });\n                    return [3\n                    /*break*/\n                    , 8];\n\n                  case 7:\n                    logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                      config: this.amplifyConfig\n                    });\n                    this.initResolve();\n                    _b.label = 8;\n\n                  case 8:\n                    return [4\n                    /*yield*/\n                    , this.initialized];\n\n                  case 9:\n                    _b.sent();\n\n                    this.state = DataStoreState.Running;\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            });\n          }, 'datastore start').catch(this.handleAddProcError('DataStore.start()'))];\n        });\n      });\n    };\n\n    this.query = function (modelConstructor, identifierOrCriteria, paginationProducer) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var result, msg, modelDefinition, pagination, keyFields, msg, predicate, predicate, seedPredicate, predicate, returnOne;\n\n              var _a;\n\n              var _b;\n\n              return __generator(this, function (_c) {\n                switch (_c.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.start()];\n\n                  case 1:\n                    _c.sent();\n\n                    if (!this.storage) {\n                      throw new Error('No storage to query');\n                    } //#region Input validation\n\n\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Constructor is not for a valid model';\n                      logger.error(msg, {\n                        modelConstructor: modelConstructor\n                      });\n                      throw new Error(msg);\n                    }\n\n                    if (typeof identifierOrCriteria === 'string') {\n                      if (paginationProducer !== undefined) {\n                        logger.warn('Pagination is ignored when querying by id');\n                      }\n                    }\n\n                    modelDefinition = getModelDefinition(modelConstructor);\n\n                    if (!modelDefinition) {\n                      throw new Error('Invalid model definition provided!');\n                    }\n\n                    pagination = this.processPagination(modelDefinition, paginationProducer);\n                    keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                    if (!isQueryOne(identifierOrCriteria)) return [3\n                    /*break*/\n                    , 3];\n\n                    if (keyFields.length > 1) {\n                      msg = errorMessages.queryByPkWithCompositeKeyPresent;\n                      logger.error(msg, {\n                        keyFields: keyFields\n                      });\n                      throw new Error(msg);\n                    }\n\n                    predicate = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, (_a = {}, _a[keyFields[0]] = identifierOrCriteria, _a));\n                    return [4\n                    /*yield*/\n                    , this.storage.query(modelConstructor, predicate, pagination)];\n\n                  case 2:\n                    result = _c.sent();\n                    return [3\n                    /*break*/\n                    , 9];\n\n                  case 3:\n                    if (!isIdentifierObject(identifierOrCriteria, modelDefinition)) return [3\n                    /*break*/\n                    , 5];\n                    predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                    return [4\n                    /*yield*/\n                    , this.storage.query(modelConstructor, predicate, pagination)];\n\n                  case 4:\n                    result = _c.sent();\n                    return [3\n                    /*break*/\n                    , 9];\n\n                  case 5:\n                    if (!(!identifierOrCriteria || isPredicatesAll(identifierOrCriteria))) return [3\n                    /*break*/\n                    , 7];\n                    return [4\n                    /*yield*/\n                    , (_b = this.storage) === null || _b === void 0 ? void 0 : _b.query(modelConstructor, undefined, pagination)];\n\n                  case 6:\n                    result = _c.sent();\n                    return [3\n                    /*break*/\n                    , 9];\n\n                  case 7:\n                    seedPredicate = recursivePredicateFor({\n                      builder: modelConstructor,\n                      schema: modelDefinition,\n                      pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                    });\n                    predicate = internals(identifierOrCriteria(seedPredicate));\n                    return [4\n                    /*yield*/\n                    , predicate.fetch(this.storage)];\n\n                  case 8:\n                    result = _c.sent();\n                    result = inMemoryPagination(result, pagination);\n                    _c.label = 9;\n\n                  case 9:\n                    returnOne = isQueryOne(identifierOrCriteria) || isIdentifierObject(identifierOrCriteria, modelDefinition);\n                    return [2\n                    /*return*/\n                    , attached(returnOne ? result[0] : result, ModelAttachment.DataStore)];\n                }\n              });\n            });\n          }, 'datastore query').catch(this.handleAddProcError('DataStore.query()'))];\n        });\n      });\n    };\n\n    this.save = function (model, condition) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var updatedPatchesTuple, initPatchesTuple, patchesTuple, modelConstructor, msg, modelDefinition, modelMeta, producedCondition, _a, savedModel;\n\n              var _this = this;\n\n              return __generator(this, function (_b) {\n                switch (_b.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.start()];\n\n                  case 1:\n                    _b.sent();\n\n                    if (!this.storage) {\n                      throw new Error('No storage to save to');\n                    }\n\n                    updatedPatchesTuple = modelPatchesMap.get(model);\n                    initPatchesTuple = initPatches.has(model) ? [initPatches.get(model), {}] : undefined;\n                    patchesTuple = updatedPatchesTuple || initPatchesTuple;\n                    modelConstructor = model ? model.constructor : undefined;\n\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n\n                    modelDefinition = getModelDefinition(modelConstructor);\n\n                    if (!modelDefinition) {\n                      throw new Error('Model Definition could not be found for model');\n                    }\n\n                    modelMeta = {\n                      builder: modelConstructor,\n                      schema: modelDefinition,\n                      pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                    };\n                    return [4\n                    /*yield*/\n                    , this.storage.runExclusive(function (s) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var nonHasManyRelationships, nonHasManyRelationships_1, nonHasManyRelationships_1_1, relationship, queryObject, related, e_7_1;\n\n                        var e_7, _a;\n\n                        var _b;\n\n                        return __generator(this, function (_c) {\n                          switch (_c.label) {\n                            case 0:\n                              nonHasManyRelationships = ModelRelationship.allFrom(modelMeta).filter(function (r) {\n                                return r.type === 'BELONGS_TO';\n                              });\n                              _c.label = 1;\n\n                            case 1:\n                              _c.trys.push([1, 6, 7, 8]);\n\n                              nonHasManyRelationships_1 = __values(nonHasManyRelationships), nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();\n                              _c.label = 2;\n\n                            case 2:\n                              if (!!nonHasManyRelationships_1_1.done) return [3\n                              /*break*/\n                              , 5];\n                              relationship = nonHasManyRelationships_1_1.value;\n                              queryObject = relationship.createRemoteQueryObject(model);\n                              if (!(queryObject !== null)) return [3\n                              /*break*/\n                              , 4];\n                              return [4\n                              /*yield*/\n                              , s.query(relationship.remoteModelConstructor, ModelPredicateCreator.createFromFlatEqualities(relationship.remoteDefinition, queryObject))];\n\n                            case 3:\n                              related = _c.sent();\n\n                              if (related.length === 0) {\n                                throw new Error([\"Data integrity error. You tried to save a \" + modelDefinition.name + \" (\" + JSON.stringify(model) + \")\", \"but the instance assigned to the \\\"\" + relationship.field + \"\\\" property\", \"does not exist in the local database. If you're trying to create the related\", \"\\\"\" + ((_b = relationship.remoteDefinition) === null || _b === void 0 ? void 0 : _b.name) + \"\\\", you must save it independently first.\"].join(' '));\n                              }\n\n                              _c.label = 4;\n\n                            case 4:\n                              nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();\n                              return [3\n                              /*break*/\n                              , 2];\n\n                            case 5:\n                              return [3\n                              /*break*/\n                              , 8];\n\n                            case 6:\n                              e_7_1 = _c.sent();\n                              e_7 = {\n                                error: e_7_1\n                              };\n                              return [3\n                              /*break*/\n                              , 8];\n\n                            case 7:\n                              try {\n                                if (nonHasManyRelationships_1_1 && !nonHasManyRelationships_1_1.done && (_a = nonHasManyRelationships_1.return)) _a.call(nonHasManyRelationships_1);\n                              } finally {\n                                if (e_7) throw e_7.error;\n                              }\n\n                              return [7\n                              /*endfinally*/\n                              ];\n\n                            case 8:\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    })];\n\n                  case 2:\n                    _b.sent();\n\n                    producedCondition = condition ? internals(condition(predicateFor(modelMeta))).toStoragePredicate() : undefined;\n                    return [4\n                    /*yield*/\n                    , this.storage.runExclusive(function (s) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var saved;\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              return [4\n                              /*yield*/\n                              , s.save(model, producedCondition, undefined, patchesTuple)];\n\n                            case 1:\n                              saved = _a.sent();\n                              return [2\n                              /*return*/\n                              , s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model))];\n                          }\n                        });\n                      });\n                    })];\n\n                  case 3:\n                    _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n                    return [2\n                    /*return*/\n                    , attached(savedModel, ModelAttachment.DataStore)];\n                }\n              });\n            });\n          }, 'datastore save').catch(this.handleAddProcError('DataStore.save()'))];\n        });\n      });\n    };\n\n    this.setConflictHandler = function (config) {\n      var configDataStore = config.DataStore;\n\n      var conflictHandlerIsDefault = function () {\n        return _this.conflictHandler === defaultConflictHandler;\n      };\n\n      if (configDataStore && configDataStore.conflictHandler) {\n        return configDataStore.conflictHandler;\n      }\n\n      if (conflictHandlerIsDefault() && config.conflictHandler) {\n        return config.conflictHandler;\n      }\n\n      return _this.conflictHandler || defaultConflictHandler;\n    };\n\n    this.setErrorHandler = function (config) {\n      var configDataStore = config.DataStore;\n\n      var errorHandlerIsDefault = function () {\n        return _this.errorHandler === defaultErrorHandler;\n      };\n\n      if (configDataStore && configDataStore.errorHandler) {\n        return configDataStore.errorHandler;\n      }\n\n      if (errorHandlerIsDefault() && config.errorHandler) {\n        return config.errorHandler;\n      }\n\n      return _this.errorHandler || defaultErrorHandler;\n    };\n\n    this.delete = function (modelOrConstructor, identifierOrCriteria) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          return [2\n          /*return*/\n          , this.runningProcesses.add(function () {\n            return __awaiter(_this, void 0, void 0, function () {\n              var condition, msg, modelConstructor, msg, modelDefinition, keyFields, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, pkPredicate, msg, _b, _c, deleted;\n\n              var _d;\n\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    return [4\n                    /*yield*/\n                    , this.start()];\n\n                  case 1:\n                    _e.sent();\n\n                    if (!this.storage) {\n                      throw new Error('No storage to delete from');\n                    }\n\n                    if (!modelOrConstructor) {\n                      msg = 'Model or Model Constructor required';\n                      logger.error(msg, {\n                        modelOrConstructor: modelOrConstructor\n                      });\n                      throw new Error(msg);\n                    }\n\n                    if (!isValidModelConstructor(modelOrConstructor)) return [3\n                    /*break*/\n                    , 3];\n                    modelConstructor = modelOrConstructor;\n\n                    if (!identifierOrCriteria) {\n                      msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                      logger.error(msg, {\n                        identifierOrCriteria: identifierOrCriteria\n                      });\n                      throw new Error(msg);\n                    }\n\n                    modelDefinition = getModelDefinition(modelConstructor);\n\n                    if (!modelDefinition) {\n                      throw new Error('Could not find model definition for modelConstructor.');\n                    }\n\n                    if (typeof identifierOrCriteria === 'string') {\n                      keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n\n                      if (keyFields.length > 1) {\n                        msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n                        logger.error(msg, {\n                          keyFields: keyFields\n                        });\n                        throw new Error(msg);\n                      }\n\n                      condition = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, (_d = {}, _d[keyFields[0]] = identifierOrCriteria, _d));\n                    } else {\n                      if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                        condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                      } else {\n                        condition = internals(identifierOrCriteria(predicateFor({\n                          builder: modelConstructor,\n                          schema: modelDefinition,\n                          pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                        }))).toStoragePredicate();\n                      }\n\n                      if (!condition || !ModelPredicateCreator.isValidPredicate(condition)) {\n                        msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                        logger.error(msg, {\n                          condition: condition\n                        });\n                        throw new Error(msg);\n                      }\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.storage.delete(modelConstructor, condition)];\n\n                  case 2:\n                    _a = __read.apply(void 0, [_e.sent(), 1]), deleted = _a[0];\n                    return [2\n                    /*return*/\n                    , attached(deleted, ModelAttachment.DataStore)];\n\n                  case 3:\n                    model = modelOrConstructor;\n                    modelConstructor = Object.getPrototypeOf(model || {}).constructor;\n\n                    if (!isValidModelConstructor(modelConstructor)) {\n                      msg = 'Object is not an instance of a valid model';\n                      logger.error(msg, {\n                        model: model\n                      });\n                      throw new Error(msg);\n                    }\n\n                    modelDefinition = getModelDefinition(modelConstructor);\n\n                    if (!modelDefinition) {\n                      throw new Error('Could not find model definition for modelConstructor.');\n                    }\n\n                    pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n\n                    if (identifierOrCriteria) {\n                      if (typeof identifierOrCriteria !== 'function') {\n                        msg = 'Invalid criteria';\n                        logger.error(msg, {\n                          identifierOrCriteria: identifierOrCriteria\n                        });\n                        throw new Error(msg);\n                      }\n\n                      condition = internals(identifierOrCriteria(predicateFor({\n                        builder: modelConstructor,\n                        schema: modelDefinition,\n                        pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                      }))).toStoragePredicate();\n                    } else {\n                      condition = pkPredicate;\n                    }\n\n                    return [4\n                    /*yield*/\n                    , this.storage.delete(model, condition)];\n\n                  case 4:\n                    _b = __read.apply(void 0, [_e.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n                    return [2\n                    /*return*/\n                    , attached(deleted, ModelAttachment.DataStore)];\n                }\n              });\n            });\n          }, 'datastore delete').catch(this.handleAddProcError('DataStore.delete()'))];\n        });\n      });\n    };\n\n    this.observe = function (modelOrConstructor, identifierOrCriteria) {\n      var executivePredicate;\n      var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor) ? modelOrConstructor : undefined;\n\n      if (modelOrConstructor && modelConstructor === undefined) {\n        var model = modelOrConstructor;\n        var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n\n        if (isValidModelConstructor(modelConstructor_1)) {\n          if (identifierOrCriteria) {\n            logger.warn('idOrCriteria is ignored when using a model instance', {\n              model: model,\n              identifierOrCriteria: identifierOrCriteria\n            });\n          }\n\n          return _this.observe(modelConstructor_1, model.id);\n        } else {\n          var msg = 'The model is not an instance of a PersistentModelConstructor';\n          logger.error(msg, {\n            model: model\n          });\n          throw new Error(msg);\n        }\n      } // observe should not accept object literal syntax\n\n\n      if (identifierOrCriteria && modelConstructor && isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n        var msg = errorMessages.observeWithObjectLiteral;\n        logger.error(msg, {\n          objectLiteral: identifierOrCriteria\n        });\n        throw new Error(msg);\n      }\n\n      if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n        var msg = 'Cannot provide criteria without a modelConstructor';\n        logger.error(msg, identifierOrCriteria);\n        throw new Error(msg);\n      }\n\n      if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n        var msg = 'Constructor is not for a valid model';\n        logger.error(msg, {\n          modelConstructor: modelConstructor\n        });\n        throw new Error(msg);\n      }\n\n      if (modelConstructor && typeof identifierOrCriteria === 'string') {\n        var buildIdPredicate = function (seed) {\n          return seed.id.eq(identifierOrCriteria);\n        };\n\n        executivePredicate = internals(buildIdPredicate(buildSeedPredicate(modelConstructor)));\n      } else if (modelConstructor && typeof identifierOrCriteria === 'function') {\n        executivePredicate = internals(identifierOrCriteria(buildSeedPredicate(modelConstructor)));\n      }\n\n      return new Observable(function (observer) {\n        var source;\n\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  return [4\n                  /*yield*/\n                  , this.start()];\n\n                case 1:\n                  _a.sent(); // Filter the events returned by Storage according to namespace,\n                  // append original element data, and subscribe to the observable\n\n\n                  source = this.storage.observe(modelConstructor).filter(function (_a) {\n                    var model = _a.model;\n                    return namespaceResolver(model) === USER;\n                  }).subscribe({\n                    next: function (item) {\n                      return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var message, modelDefinition, keyFields, primaryKeysAndValues, freshElement, _a;\n\n                          return __generator(this, function (_b) {\n                            switch (_b.label) {\n                              case 0:\n                                message = item;\n                                if (!(item.opType !== 'DELETE')) return [3\n                                /*break*/\n                                , 2];\n                                modelDefinition = getModelDefinition(item.model);\n                                keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                                return [4\n                                /*yield*/\n                                , this.query(item.model, primaryKeysAndValues)];\n\n                              case 1:\n                                freshElement = _b.sent();\n                                message = __assign(__assign({}, message), {\n                                  element: freshElement\n                                });\n                                _b.label = 2;\n\n                              case 2:\n                                _a = !executivePredicate;\n                                if (_a) return [3\n                                /*break*/\n                                , 4];\n                                return [4\n                                /*yield*/\n                                , executivePredicate.matches(message.element)];\n\n                              case 3:\n                                _a = _b.sent();\n                                _b.label = 4;\n\n                              case 4:\n                                if (_a) {\n                                  observer.next(message);\n                                }\n\n                                return [2\n                                /*return*/\n                                ];\n                            }\n                          });\n                        });\n                      }, 'datastore observe message handler');\n                    },\n                    error: function (err) {\n                      return observer.error(err);\n                    },\n                    complete: function () {\n                      return observer.complete();\n                    }\n                  });\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        }, 'datastore observe observable initialization').catch(_this.handleAddProcError('DataStore.observe()')).catch(function (error) {\n          observer.error(error);\n        }); // better than no cleaner, but if the subscriber is handling the\n        // complete() message async and not registering with the context,\n        // this will still be problematic.\n\n\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (source) {\n                source.unsubscribe();\n              }\n\n              return [2\n              /*return*/\n              ];\n            });\n          });\n        }, 'DataStore.observe() cleanup');\n      });\n    };\n\n    this.observeQuery = function (model, criteria, options) {\n      return new Observable(function (observer) {\n        var items = new Map();\n        var itemsChanged = new Map();\n        var deletedItemIds = [];\n        var handle; // let predicate: ModelPredicate<T> | undefined;\n\n        var executivePredicate;\n        /**\n         * As the name suggests, this geneates a snapshot in the form of\n         * \t`{items: T[], isSynced: boolean}`\n         * and sends it to the observer.\n         *\n         * SIDE EFFECT: The underlying generation and emission methods may touch:\n         * `items`, `itemsChanged`, and `deletedItemIds`.\n         *\n         * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n         */\n\n        var generateAndEmitSnapshot = function () {\n          var snapshot = generateSnapshot();\n          emitSnapshot(snapshot);\n        }; // a mechanism to return data after X amount of seconds OR after the\n        // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n\n\n        var limitTimerRace = new DeferredCallbackResolver({\n          callback: generateAndEmitSnapshot,\n          errorHandler: observer.error,\n          maxInterval: 2000\n        });\n        var sort = (options || {}).sort;\n        var sortOptions = sort ? {\n          sort: sort\n        } : undefined;\n        var modelDefinition = getModelDefinition(model);\n\n        if (!modelDefinition) {\n          throw new Error('Could not find model definition.');\n        }\n\n        if (model && typeof criteria === 'function') {\n          executivePredicate = internals(criteria(buildSeedPredicate(model)));\n        } else if (isPredicatesAll(criteria)) {\n          executivePredicate = undefined;\n        }\n\n        _this.runningProcesses.add(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            var err_1;\n\n            var _this = this;\n\n            return __generator(this, function (_a) {\n              switch (_a.label) {\n                case 0:\n                  _a.trys.push([0, 2,, 3]);\n\n                  return [4\n                  /*yield*/\n                  , this.query(model, criteria, sortOptions)];\n\n                case 1:\n                  // first, query and return any locally-available records\n                  _a.sent().forEach(function (item) {\n                    var itemModelDefinition = getModelDefinition(model);\n                    var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                    items.set(idOrPk, item);\n                  }); // Observe the model and send a stream of updates (debounced).\n                  // We need to post-filter results instead of passing criteria through\n                  // to have visibility into items that move from in-set to out-of-set.\n                  // We need to explicitly remove those items from the existing snapshot.\n\n\n                  handle = this.observe(model).subscribe(function (_a) {\n                    var element = _a.element,\n                        model = _a.model,\n                        opType = _a.opType;\n                    return _this.runningProcesses.isOpen && _this.runningProcesses.add(function () {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        var itemModelDefinition, idOrPk, _a, isSynced, limit;\n\n                        var _b, _c;\n\n                        return __generator(this, function (_d) {\n                          switch (_d.label) {\n                            case 0:\n                              itemModelDefinition = getModelDefinition(model);\n                              idOrPk = getIdentifierValue(itemModelDefinition, element);\n                              _a = executivePredicate;\n                              if (!_a) return [3\n                              /*break*/\n                              , 2];\n                              return [4\n                              /*yield*/\n                              , executivePredicate.matches(element)];\n\n                            case 1:\n                              _a = !_d.sent();\n                              _d.label = 2;\n\n                            case 2:\n                              if (_a) {\n                                if (opType === 'UPDATE' && (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                                  // tracking as a \"deleted item\" will include the item in\n                                  // page limit calculations and ensure it is removed from the\n                                  // final items collection, regardless of which collection(s)\n                                  // it is currently in. (I mean, it could be in both, right!?)\n                                  deletedItemIds.push(idOrPk);\n                                } else {\n                                  // ignore updates for irrelevant/filtered items.\n                                  return [2\n                                  /*return*/\n                                  ];\n                                }\n                              } // Flag items which have been recently deleted\n                              // NOTE: Merging of separate operations to the same model instance is handled upstream\n                              // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                              // depends on the LATEST record (for a given id).\n\n\n                              if (opType === 'DELETE') {\n                                deletedItemIds.push(idOrPk);\n                              } else {\n                                itemsChanged.set(idOrPk, element);\n                              }\n\n                              isSynced = (_c = (_b = this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                              limit = itemsChanged.size - deletedItemIds.length >= this.syncPageSize;\n\n                              if (limit || isSynced) {\n                                limitTimerRace.resolve();\n                              } // kicks off every subsequent race as results sync down\n\n\n                              limitTimerRace.start();\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    }, 'handle observeQuery observed event');\n                  }); // returns a set of initial/locally-available results\n\n                  generateAndEmitSnapshot();\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 2:\n                  err_1 = _a.sent();\n                  observer.error(err_1);\n                  return [3\n                  /*break*/\n                  , 3];\n\n                case 3:\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          });\n        }, 'datastore observequery startup').catch(_this.handleAddProcError('DataStore.observeQuery()')).catch(function (error) {\n          observer.error(error);\n        });\n        /**\n         * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n         * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n         *\n         * SIDE EFFECT: The shared `items` collection is recreated.\n         */\n\n\n        var generateSnapshot = function () {\n          var _a, _b;\n\n          var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n\n          var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n\n          items.clear();\n          itemsArray.forEach(function (item) {\n            var itemModelDefinition = getModelDefinition(model);\n            var idOrPk = getIdentifierValue(itemModelDefinition, item);\n            items.set(idOrPk, item);\n          }); // remove deleted items from the final result set\n\n          deletedItemIds.forEach(function (idOrPk) {\n            return items.delete(idOrPk);\n          });\n          var snapshot = Array.from(items.values()); // we sort after we merge the snapshots (items, itemsChanged)\n          // otherwise, the merge may not\n\n          if (options === null || options === void 0 ? void 0 : options.sort) {\n            sortItems(snapshot);\n          }\n\n          return {\n            items: snapshot,\n            isSynced: isSynced\n          };\n        };\n        /**\n         * Emits the list of items to the observer.\n         *\n         * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n         * for the next snapshot.\n         *\n         * @param snapshot The generated items data to emit.\n         */\n\n\n        var emitSnapshot = function (snapshot) {\n          // send the generated snapshot to the primary subscription.\n          // NOTE: This observer's handler *could* be async ...\n          observer.next(snapshot); // reset the changed items sets\n\n          itemsChanged.clear();\n          deletedItemIds = [];\n        };\n        /**\n         * Sorts an `Array` of `T` according to the sort instructions given in the\n         * original  `observeQuery()` call.\n         *\n         * @param itemsToSort A array of model type.\n         */\n\n\n        var sortItems = function (itemsToSort) {\n          var modelDefinition = getModelDefinition(model);\n\n          var pagination = _this.processPagination(modelDefinition, options);\n\n          var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n\n          if (sortPredicates.length) {\n            var compareFn = sortCompareFunction(sortPredicates);\n            itemsToSort.sort(compareFn);\n          }\n        };\n        /**\n         * Force one last snapshot when the model is fully synced.\n         *\n         * This reduces latency for that last snapshot, which will otherwise\n         * wait for the configured timeout.\n         *\n         * @param payload The payload from the Hub event.\n         */\n\n\n        var hubCallback = function (_a) {\n          var payload = _a.payload;\n\n          var _b;\n\n          var event = payload.event,\n              data = payload.data;\n\n          if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED && ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n            generateAndEmitSnapshot();\n            Hub.remove('datastore', hubCallback);\n          }\n        };\n\n        Hub.listen('datastore', hubCallback);\n        return _this.runningProcesses.addCleaner(function () {\n          return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n              if (handle) {\n                handle.unsubscribe();\n              }\n\n              return [2\n              /*return*/\n              ];\n            });\n          });\n        }, 'datastore observequery cleaner');\n      });\n    };\n\n    this.configure = function (config) {\n      if (config === void 0) {\n        config = {};\n      }\n\n      _this.amplifyContext.Auth = _this.Auth;\n      _this.amplifyContext.InternalAPI = _this.InternalAPI;\n      _this.amplifyContext.Cache = _this.Cache;\n\n      var configDataStore = config.DataStore,\n          configAuthModeStrategyType = config.authModeStrategyType,\n          configConflictHandler = config.conflictHandler,\n          configErrorHandler = config.errorHandler,\n          configMaxRecordsToSync = config.maxRecordsToSync,\n          configSyncPageSize = config.syncPageSize,\n          configFullSyncInterval = config.fullSyncInterval,\n          configSyncExpressions = config.syncExpressions,\n          configAuthProviders = config.authProviders,\n          configStorageAdapter = config.storageAdapter,\n          configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n\n      _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n      _this.conflictHandler = _this.setConflictHandler(config);\n      _this.errorHandler = _this.setErrorHandler(config);\n      var authModeStrategyType = configDataStore && configDataStore.authModeStrategyType || configAuthModeStrategyType || AuthModeStrategyType.DEFAULT;\n\n      switch (authModeStrategyType) {\n        case AuthModeStrategyType.MULTI_AUTH:\n          _this.authModeStrategy = multiAuthStrategy(_this.amplifyContext);\n          break;\n\n        case AuthModeStrategyType.DEFAULT:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n\n        default:\n          _this.authModeStrategy = defaultAuthStrategy;\n          break;\n      } // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n\n      _this.amplifyConfig.authProviders = configDataStore && configDataStore.authProviders || configAuthProviders;\n      _this.syncExpressions = configDataStore && configDataStore.syncExpressions || configSyncExpressions || _this.syncExpressions;\n      _this.maxRecordsToSync = configDataStore && configDataStore.maxRecordsToSync || configMaxRecordsToSync || _this.maxRecordsToSync || 10000; // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n      _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n      _this.syncPageSize = configDataStore && configDataStore.syncPageSize || configSyncPageSize || _this.syncPageSize || 1000; // store on config object, so that Sync, Subscription, and Mutation processors can have access\n\n      _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n      _this.fullSyncInterval = configDataStore && configDataStore.fullSyncInterval || configFullSyncInterval || _this.fullSyncInterval || 24 * 60; // 1 day\n\n      _this.storageAdapter = configDataStore && configDataStore.storageAdapter || configStorageAdapter || _this.storageAdapter || undefined;\n      _this.sessionId = _this.retrieveSessionId();\n    };\n  }\n\n  DataStore.prototype.getModuleName = function () {\n    return 'DataStore';\n  };\n  /**\n   * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n   * more instructive errors for customers.\n   *\n   * @param operation The name of the operation (usually a Datastore method) the customer\n   * tried to call.\n   */\n\n\n  DataStore.prototype.handleAddProcError = function (operation) {\n    var _this = this;\n    /**\n     * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n     * and replaced with a friendlier message that instructs the App Developer.\n     *\n     * @param err An error to test.\n     */\n\n\n    var handler = function (err) {\n      if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n        throw new Error([\"DataStoreStateError: Tried to execute `\" + operation + \"` while DataStore was \\\"\" + _this.state + \"\\\".\", \"This can only be done while DataStore is \\\"Started\\\" or \\\"Stopped\\\". To remedy:\", 'Ensure all calls to `stop()` and `clear()` have completed first.', 'If this is not possible, retry the operation until it succeeds.'].join('\\n'));\n      } else {\n        throw err;\n      }\n    };\n\n    return handler;\n  };\n  /**\n   * Clears all data from storage and removes all data, schema info, other\n   * initialization details, and then stops DataStore.\n   *\n   * That said, reinitialization is required after clearing. This can be done\n   * by explicitiliy calling `start()` or any method that implicitly starts\n   * DataStore, such as `query()`, `save()`, or `delete()`.\n   */\n\n\n  DataStore.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            checkSchemaInitialized();\n            this.state = DataStoreState.Clearing;\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            if (!(this.storage === undefined)) return [3\n            /*break*/\n            , 3]; // connect to storage so that it can be cleared without fully starting DataStore\n\n            this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n            return [4\n            /*yield*/\n            , this.storage.init()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n\n            if (!this.sync) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.sync.stop()];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [4\n            /*yield*/\n            , this.storage.clear()];\n\n          case 6:\n            _a.sent();\n\n            this.initialized = undefined; // Should re-initialize when start() is called.\n\n            this.storage = undefined;\n            this.sync = undefined;\n            this.syncPredicates = new WeakMap();\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 7:\n            _a.sent();\n\n            this.state = DataStoreState.NotRunning;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Stops all DataStore sync activities.\n   *\n   * TODO: \"Waits for graceful termination of\n   * running queries and terminates subscriptions.\"\n   */\n\n\n  DataStore.prototype.stop = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.state = DataStoreState.Stopping;\n            return [4\n            /*yield*/\n            , this.runningProcesses.close()];\n\n          case 1:\n            _a.sent();\n\n            if (syncSubscription && !syncSubscription.closed) {\n              syncSubscription.unsubscribe();\n            }\n\n            if (!this.sync) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.sync.stop()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            this.initialized = undefined; // Should re-initialize when start() is called.\n\n            this.sync = undefined;\n            return [4\n            /*yield*/\n            , this.runningProcesses.open()];\n\n          case 4:\n            _a.sent();\n\n            this.state = DataStoreState.NotRunning;\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Validates given pagination input from a query and creates a pagination\n   * argument for use against the storage layer.\n   *\n   * @param modelDefinition\n   * @param paginationProducer\n   */\n\n\n  DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n    var sortPredicate;\n\n    var _a = paginationProducer || {},\n        limit = _a.limit,\n        page = _a.page,\n        sort = _a.sort;\n\n    if (limit === undefined && page === undefined && sort === undefined) {\n      return undefined;\n    }\n\n    if (page !== undefined && limit === undefined) {\n      throw new Error('Limit is required when requesting a page');\n    }\n\n    if (page !== undefined) {\n      if (typeof page !== 'number') {\n        throw new Error('Page should be a number');\n      }\n\n      if (page < 0) {\n        throw new Error(\"Page can't be negative\");\n      }\n    }\n\n    if (limit !== undefined) {\n      if (typeof limit !== 'number') {\n        throw new Error('Limit should be a number');\n      }\n\n      if (limit < 0) {\n        throw new Error(\"Limit can't be negative\");\n      }\n    }\n\n    if (sort) {\n      sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, sort);\n    }\n\n    return {\n      limit: limit,\n      page: page,\n      sort: sortPredicate\n    };\n  };\n  /**\n   * Examines the configured `syncExpressions` and produces a WeakMap of\n   * SchemaModel -> predicate to use during sync.\n   */\n\n\n  DataStore.prototype.processSyncExpressions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var syncPredicates;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.syncExpressions || !this.syncExpressions.length) {\n              return [2\n              /*return*/\n              , new WeakMap()];\n            }\n\n            return [4\n            /*yield*/\n            , Promise.all(this.syncExpressions.map(function (syncExpression) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      return [4\n                      /*yield*/\n                      , syncExpression];\n\n                    case 1:\n                      _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                      modelDefinition = getModelDefinition(modelConstructor);\n                      return [4\n                      /*yield*/\n                      , this.unwrapPromise(conditionProducer)];\n\n                    case 2:\n                      condition = _b.sent();\n\n                      if (isPredicatesAll(condition)) {\n                        return [2\n                        /*return*/\n                        , [modelDefinition, null]];\n                      }\n\n                      predicate = internals(condition(predicateFor({\n                        builder: modelConstructor,\n                        schema: modelDefinition,\n                        pkField: extractPrimaryKeyFieldNames(modelDefinition)\n                      }))).toStoragePredicate();\n                      return [2\n                      /*return*/\n                      , [modelDefinition, predicate]];\n                  }\n                });\n              });\n            }))];\n\n          case 1:\n            syncPredicates = _a.sent();\n            return [2\n            /*return*/\n            , this.weakMapFromEntries(syncPredicates)];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.unwrapPromise = function (conditionProducer) {\n    return __awaiter(this, void 0, void 0, function () {\n      var condition, error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , conditionProducer()];\n\n          case 1:\n            condition = _a.sent();\n            return [2\n            /*return*/\n            , condition || conditionProducer];\n\n          case 2:\n            error_1 = _a.sent();\n\n            if (error_1 instanceof TypeError) {\n              return [2\n              /*return*/\n              , conditionProducer];\n            }\n\n            throw error_1;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  DataStore.prototype.weakMapFromEntries = function (entries) {\n    return entries.reduce(function (map, _a) {\n      var _b = __read(_a, 2),\n          modelDefinition = _b[0],\n          predicate = _b[1];\n\n      if (map.has(modelDefinition)) {\n        var name_2 = modelDefinition.name;\n        logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n        return map;\n      }\n\n      if (predicate) {\n        map.set(modelDefinition, predicate);\n      }\n\n      return map;\n    }, new WeakMap());\n  };\n  /**\n   * A session ID to allow CMS to open databases against multiple apps.\n   * This session ID is only expected be set by AWS Amplify Studio.\n   */\n\n\n  DataStore.prototype.retrieveSessionId = function () {\n    try {\n      var sessionId = sessionStorage.getItem('datastoreSessionId');\n\n      if (sessionId) {\n        var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n        var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n\n        var _a = __read(appSyncUrl.split('.'), 1),\n            appSyncId = _a[0];\n\n        return sessionId + \"-\" + appSyncId;\n      }\n    } catch (_b) {}\n\n    return undefined;\n  };\n\n  return DataStore;\n}();\n\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };","map":{"version":3,"names":["__assign","__asyncValues","__awaiter","__extends","__generator","__read","__rest","__spread","__values","InternalAPI","Auth","Cache","Amplify","ConsoleLogger","Logger","Hub","browserOrNode","BackgroundProcessManager","immerable","produce","setAutoFreeze","enablePatches","v4","uuid4","Observable","defaultAuthStrategy","multiAuthStrategy","isPredicatesAll","ModelPredicateCreator","ModelSortPredicateCreator","ExclusiveStorage","Storage","ModelRelationship","ControlMessage","SyncEngine","GraphQLScalarType","isGraphQLScalarType","isSchemaModelWithAttributes","AuthModeStrategyType","isNonModelFieldType","isModelFieldType","isIdentifierObject","DATASTORE","errorMessages","establishRelationAndKeys","isModelConstructor","monotonicUlidFactory","STORAGE","SYNC","USER","isNullOrUndefined","registerNonModelClass","sortCompareFunction","DeferredCallbackResolver","inMemoryPagination","extractPrimaryKeyFieldNames","extractPrimaryKeysAndValues","isIdManaged","isIdOptionallyManaged","mergePatches","getTimestampFields","recursivePredicateFor","predicateFor","internals","getIdentifierValue","logger","ulid","Date","now","isNode","SETTING_SCHEMA_VERSION","schema","modelNamespaceMap","WeakMap","modelPatchesMap","getModelDefinition","modelConstructor","namespace","get","definition","namespaces","models","name","undefined","isValidModelConstructor","obj","has","namespaceResolver","resolver","Error","buildSeedPredicate","modelSchema","pks","builder","pkField","syncClasses","userClasses","dataStoreClasses","storageClasses","modelInstanceAssociationsMap","ModelAttachment","attachedModelInstances","attached","result","attachment","Array","isArray","map","record","set","getAttachment","instance","Detached","initSchema","userSchema","_a","console","warn","log","checkSchemaCodegenVersion","codegenVersion","internalUserNamespace","createTypeClasses","dataStoreNamespace","getNamespace","storageNamespace","syncNamespace","version","Object","keys","forEach","e_1","_b","relations","relationships","modelAssociations","Map","values","model","e_2","e_3","connectedModels","fields","filter","field","association","connectionType","type","push","relatedModel","defineProperty","relatedModelDefinition","indexes","indexFields","Set","indexes_1","indexes_1_1","next","done","index","value","_c","_d","indexField","add","e_3_1","error","return","call","e_2_1","allFields","fromEntries","count","size","from","modelName","parents","every","x","e_1_1","delete","modelTopologicalOrdering","checkSchemaInitialized","message","majorVersion","minorVersion","isValid","versionParts","split","major","minor","patch","patchrevision","Number","err","classes","entries","modelDefinition","clazz","createModelClass","nonModels","typeName","typeDefinition","createNonModelClass","instancesMetadata","WeakSet","modelInstanceCreator","init","validateModelFields","k","v","fieldDefinition","type_1","isRequired_1","isRequired","isArrayNullable","name_1","timestamps","isTimestampField","includes","idEmptyString","jsType_1","getJSType","validateScalar_1","getValidationFunction","JSON","parse","errorTypeText","some","e","elemTypes","join","validationStatus","s","subNonModelDefinition_1","user","nonModel","modelValidator_1","item","subKey","castInstanceType","Boolean","initPatches","initializeInstance","draft","modelValidator","parsedValue","normalize","e_4","e_4_1","e_5","Model","patches","baseInstance","isInternallyInitialized","modelInstanceMetadata","_id","id","isInternalModel","syncable","checkReadOnlyPropertyOnCreate","_version","_lastChangedAt","_deleted","p","normalized","copyOf","source","fn","getPrototypeOf","constructor","msg","keyNames","key","hasExistingPatches","length","existingPatches","existingSource","mergedPatches","checkReadOnlyPropertyOnUpdate","DataStore","fromJSON","json","_this","allModelRelationships","allFrom","_loop_1","relationship","prototype","hasOwnProperty","toLowerCase","remoteModelConstructor","isComplete","i","localJoinFields","remoteJoinFields","instanceMemos","resultPromise","query","base","and","q","eq","AsyncCollection","then","rows","API","Promise","resolve","allModelRelationships_1","allModelRelationships_1_1","e_5_1","AsyncItem","_super","apply","arguments","Symbol","asyncIterator","label","sent","toArray","max","MAX_SAFE_INTEGER","e_6","output","_e","element","e_6_1","_f","trys","modelKeys","isReadOnly","patchArray","path","val","isQueryOne","defaultConflictHandler","conflictData","localModel","remoteModel","defaultErrorHandler","getModelConstructorByModelName","namespaceName","checkSchemaVersion","storage","Setting","runExclusive","schemaVersionSetting","storedValue","createFromAST","page","limit","clear","save","stringify","syncSubscription","enums","pluralName","DataStoreState","amplifyConfig","syncPredicates","amplifyContext","runningProcesses","state","NotRunning","start","aws_appsync_graphqlEndpoint","fullSyncIntervalInMilliseconds","Starting","initialized","debug","res","rej","initResolve","initReject","storageAdapter","sessionId","processSyncExpressions","sync","conflictHandler","errorHandler","authModeStrategy","connectivityMonitor","fullSyncInterval","subscribe","data","readyType","SYNC_ENGINE_SYNC_QUERIES_READY","SYNC_ENGINE_STORAGE_SUBSCRIBED","dispatch","event","config","Running","catch","handleAddProcError","identifierOrCriteria","paginationProducer","pagination","keyFields","predicate","seedPredicate","returnOne","processPagination","queryByPkWithCompositeKeyPresent","createFromFlatEqualities","createForPk","fetch","condition","updatedPatchesTuple","initPatchesTuple","patchesTuple","modelMeta","producedCondition","savedModel","nonHasManyRelationships","nonHasManyRelationships_1","nonHasManyRelationships_1_1","queryObject","related","e_7_1","e_7","r","createRemoteQueryObject","remoteDefinition","toStoragePredicate","saved","setConflictHandler","configDataStore","conflictHandlerIsDefault","setErrorHandler","errorHandlerIsDefault","modelOrConstructor","deleted","pkPredicate","deleteByPkWithCompositeKeyPresent","isValidPredicate","observe","executivePredicate","modelConstructor_1","observeWithObjectLiteral","objectLiteral","buildIdPredicate","seed","observer","isOpen","primaryKeysAndValues","freshElement","opType","matches","complete","addCleaner","unsubscribe","observeQuery","criteria","options","items","itemsChanged","deletedItemIds","handle","generateAndEmitSnapshot","snapshot","generateSnapshot","emitSnapshot","limitTimerRace","callback","maxInterval","sort","sortOptions","err_1","itemModelDefinition","idOrPk","isSynced","getModelSyncedStatus","syncPageSize","itemsArray","sortItems","itemsToSort","sortPredicates","getPredicates","compareFn","hubCallback","payload","SYNC_ENGINE_MODEL_SYNCED","remove","listen","configure","configAuthModeStrategyType","authModeStrategyType","configConflictHandler","configErrorHandler","configMaxRecordsToSync","maxRecordsToSync","configSyncPageSize","configFullSyncInterval","configSyncExpressions","syncExpressions","configAuthProviders","authProviders","configStorageAdapter","configFromAmplify","DEFAULT","MULTI_AUTH","retrieveSessionId","getModuleName","operation","handler","startsWith","Clearing","close","closed","stop","open","Stopping","sortPredicate","createFromExisting","all","syncExpression","conditionProducer","unwrapPromise","weakMapFromEntries","error_1","TypeError","reduce","name_2","sessionStorage","getItem","appSyncUrl","appSyncId","register","DataStoreClass"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@aws-amplify/datastore/lib-esm/datastore/datastore.js"],"sourcesContent":["import { __assign, __asyncValues, __awaiter, __extends, __generator, __read, __rest, __spread, __values } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { InternalAPI } from '@aws-amplify/api/internals';\nimport { Auth } from '@aws-amplify/auth';\nimport { Cache } from '@aws-amplify/cache';\nimport { Amplify, ConsoleLogger as Logger, Hub, browserOrNode, BackgroundProcessManager, } from '@aws-amplify/core';\nimport { immerable, produce, setAutoFreeze, enablePatches, } from 'immer';\nimport { v4 as uuid4 } from 'uuid';\nimport Observable from 'zen-observable-ts';\nimport { defaultAuthStrategy, multiAuthStrategy } from '../authModeStrategies';\nimport { isPredicatesAll, ModelPredicateCreator, ModelSortPredicateCreator, } from '../predicates';\nimport { ExclusiveStorage as Storage } from '../storage/storage';\nimport { ModelRelationship } from '../storage/relationship';\nimport { ControlMessage, SyncEngine } from '../sync';\nimport { GraphQLScalarType, isGraphQLScalarType, isSchemaModelWithAttributes, AuthModeStrategyType, isNonModelFieldType, isModelFieldType, isIdentifierObject, } from '../types';\nimport { DATASTORE, errorMessages, establishRelationAndKeys, isModelConstructor, monotonicUlidFactory, STORAGE, SYNC, USER, isNullOrUndefined, registerNonModelClass, sortCompareFunction, DeferredCallbackResolver, inMemoryPagination, extractPrimaryKeyFieldNames, extractPrimaryKeysAndValues, isIdManaged, isIdOptionallyManaged, mergePatches, getTimestampFields, } from '../util';\nimport { recursivePredicateFor, predicateFor, internals, } from '../predicates/next';\nimport { getIdentifierValue } from '../sync/utils';\nsetAutoFreeze(true);\nenablePatches();\nvar logger = new Logger('DataStore');\nvar ulid = monotonicUlidFactory(Date.now());\nvar isNode = browserOrNode().isNode;\nvar SETTING_SCHEMA_VERSION = 'schemaVersion';\nvar schema;\nvar modelNamespaceMap = new WeakMap();\n/**\n * Stores data for crafting the correct update mutation input for a model.\n *\n * - `Patch[]` - array of changed fields and metadata.\n * - `PersistentModel` - the source model, used for diffing object-type fields.\n */\nvar modelPatchesMap = new WeakMap();\nvar getModelDefinition = function (modelConstructor) {\n    var namespace = modelNamespaceMap.get(modelConstructor);\n    var definition = namespace\n        ? schema.namespaces[namespace].models[modelConstructor.name]\n        : undefined;\n    return definition;\n};\n/**\n * Determines whether the given object is a Model Constructor that DataStore can\n * safely use to construct objects and discover related metadata.\n *\n * @param obj The object to test.\n */\nvar isValidModelConstructor = function (obj) {\n    return isModelConstructor(obj) && modelNamespaceMap.has(obj);\n};\nvar namespaceResolver = function (modelConstructor) {\n    var resolver = modelNamespaceMap.get(modelConstructor);\n    if (!resolver) {\n        throw new Error(\"Namespace Resolver for '\" + modelConstructor.name + \"' not found! This is probably a bug in '@amplify-js/datastore'.\");\n    }\n    return resolver;\n};\n/**\n * Creates a predicate without any conditions that can be passed to customer\n * code to have conditions added to it.\n *\n * For example, in this query:\n *\n * ```ts\n * await DataStore.query(\n * \tModel,\n * \titem => item.field.eq('value')\n * );\n * ```\n *\n * `buildSeedPredicate(Model)` is used to create `item`, which is passed to the\n * predicate function, which in turn uses that \"seed\" predicate (`item`) to build\n * a predicate tree.\n *\n * @param modelConstructor The model the predicate will query.\n */\nvar buildSeedPredicate = function (modelConstructor) {\n    if (!modelConstructor)\n        throw new Error('Missing modelConstructor');\n    var modelSchema = getModelDefinition(modelConstructor);\n    if (!modelSchema)\n        throw new Error('Missing modelSchema');\n    var pks = extractPrimaryKeyFieldNames(modelSchema);\n    if (!pks)\n        throw new Error('Could not determine PK');\n    return recursivePredicateFor({\n        builder: modelConstructor,\n        schema: modelSchema,\n        pkField: pks,\n    });\n};\n// exporting syncClasses for testing outbox.test.ts\nexport var syncClasses;\nvar userClasses;\nvar dataStoreClasses;\nvar storageClasses;\n/**\n * Maps a model to its related models for memoization/immutability.\n */\nvar modelInstanceAssociationsMap = new WeakMap();\n/**\n * Describes whether and to what a model is attached for lazy loading purposes.\n */\nvar ModelAttachment;\n(function (ModelAttachment) {\n    /**\n     * Model doesn't lazy load from any data source.\n     *\n     * Related entity properties provided at instantiation are returned\n     * via the respective lazy interfaces when their properties are invoked.\n     */\n    ModelAttachment[\"Detached\"] = \"Detached\";\n    /**\n     * Model lazy loads from the global DataStore.\n     */\n    ModelAttachment[\"DataStore\"] = \"DataStore\";\n    /**\n     * Demonstrative. Not yet implemented.\n     */\n    ModelAttachment[\"API\"] = \"API\";\n})(ModelAttachment || (ModelAttachment = {}));\n/**\n * Tells us which data source a model is attached to (lazy loads from).\n *\n * If `Deatched`, the model's lazy properties will only ever return properties\n * from memory provided at construction time.\n */\nvar attachedModelInstances = new WeakMap();\n/**\n * Registers a model instance against a data source (DataStore, API, or\n * Detached/None).\n *\n * The API option is demonstrative. Lazy loading against API is not yet\n * implemented.\n *\n * @param result A model instance or array of instances\n * @param attachment A ModelAttachment data source\n * @returns passes the `result` back through after attachment\n */\nexport function attached(result, attachment) {\n    if (Array.isArray(result)) {\n        result.map(function (record) { return attached(record, attachment); });\n    }\n    else {\n        result && attachedModelInstances.set(result, attachment);\n    }\n    return result;\n}\n/**\n * Determines what source a model instance should lazy load from.\n *\n * If the instace was never explicitly registered, it is detached by default.\n *\n * @param instance A model instance\n */\nexport var getAttachment = function (instance) {\n    return attachedModelInstances.has(instance)\n        ? attachedModelInstances.get(instance)\n        : ModelAttachment.Detached;\n};\nvar initSchema = function (userSchema) {\n    var _a;\n    if (schema !== undefined) {\n        console.warn('The schema has already been initialized');\n        return userClasses;\n    }\n    logger.log('validating schema', { schema: userSchema });\n    checkSchemaCodegenVersion(userSchema.codegenVersion);\n    var internalUserNamespace = __assign({ name: USER }, userSchema);\n    logger.log('DataStore', 'Init models');\n    userClasses = createTypeClasses(internalUserNamespace);\n    logger.log('DataStore', 'Models initialized');\n    var dataStoreNamespace = getNamespace();\n    var storageNamespace = Storage.getNamespace();\n    var syncNamespace = SyncEngine.getNamespace();\n    dataStoreClasses = createTypeClasses(dataStoreNamespace);\n    storageClasses = createTypeClasses(storageNamespace);\n    syncClasses = createTypeClasses(syncNamespace);\n    schema = {\n        namespaces: (_a = {},\n            _a[dataStoreNamespace.name] = dataStoreNamespace,\n            _a[internalUserNamespace.name] = internalUserNamespace,\n            _a[storageNamespace.name] = storageNamespace,\n            _a[syncNamespace.name] = syncNamespace,\n            _a),\n        version: userSchema.version,\n        codegenVersion: userSchema.codegenVersion,\n    };\n    Object.keys(schema.namespaces).forEach(function (namespace) {\n        var e_1, _a;\n        var _b = __read(establishRelationAndKeys(schema.namespaces[namespace]), 2), relations = _b[0], keys = _b[1];\n        schema.namespaces[namespace].relationships = relations;\n        schema.namespaces[namespace].keys = keys;\n        var modelAssociations = new Map();\n        Object.values(schema.namespaces[namespace].models).forEach(function (model) {\n            var e_2, _a, e_3, _b;\n            var connectedModels = [];\n            Object.values(model.fields)\n                .filter(function (field) {\n                return field.association &&\n                    field.association.connectionType === 'BELONGS_TO' &&\n                    field.type.model !== model.name;\n            })\n                .forEach(function (field) {\n                return connectedModels.push(field.type.model);\n            });\n            modelAssociations.set(model.name, connectedModels);\n            // Precompute model info (such as pk fields) so that downstream schema consumers\n            // (such as predicate builders) don't have to reach back into \"DataStore\" space\n            // to go looking for it.\n            Object.values(model.fields).forEach(function (field) {\n                var relatedModel = userClasses[field.type.model];\n                if (isModelConstructor(relatedModel)) {\n                    Object.defineProperty(field.type, 'modelConstructor', {\n                        get: function () {\n                            var relatedModelDefinition = getModelDefinition(relatedModel);\n                            if (!relatedModelDefinition)\n                                throw new Error(\"Could not find model definition for \" + relatedModel.name);\n                            return {\n                                builder: relatedModel,\n                                schema: relatedModelDefinition,\n                                pkField: extractPrimaryKeyFieldNames(relatedModelDefinition),\n                            };\n                        },\n                    });\n                }\n            });\n            // compatibility with legacy/pre-PK codegen for lazy loading to inject\n            // index fields into the model definition.\n            // definition.cloudFields = { ...definition.fields };\n            var indexes = schema.namespaces[namespace].relationships[model.name].indexes;\n            var indexFields = new Set();\n            try {\n                for (var indexes_1 = __values(indexes), indexes_1_1 = indexes_1.next(); !indexes_1_1.done; indexes_1_1 = indexes_1.next()) {\n                    var index = indexes_1_1.value;\n                    try {\n                        for (var _c = (e_3 = void 0, __values(index[1])), _d = _c.next(); !_d.done; _d = _c.next()) {\n                            var indexField = _d.value;\n                            indexFields.add(indexField);\n                        }\n                    }\n                    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                    finally {\n                        try {\n                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n                        }\n                        finally { if (e_3) throw e_3.error; }\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (indexes_1_1 && !indexes_1_1.done && (_a = indexes_1.return)) _a.call(indexes_1);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            model.allFields = __assign(__assign({}, Object.fromEntries(__spread(indexFields.values()).map(function (name) { return [\n                name,\n                {\n                    name: name,\n                    type: 'ID',\n                    isArray: false,\n                },\n            ]; }))), model.fields);\n        });\n        var result = new Map();\n        var count = 1000;\n        while (true && count > 0) {\n            if (modelAssociations.size === 0) {\n                break;\n            }\n            count--;\n            if (count === 0) {\n                throw new Error('Models are not topologically sortable. Please verify your schema.');\n            }\n            try {\n                for (var _c = (e_1 = void 0, __values(Array.from(modelAssociations.keys()))), _d = _c.next(); !_d.done; _d = _c.next()) {\n                    var modelName = _d.value;\n                    var parents = modelAssociations.get(modelName);\n                    if (parents === null || parents === void 0 ? void 0 : parents.every(function (x) { return result.has(x); })) {\n                        result.set(modelName, parents);\n                    }\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            Array.from(result.keys()).forEach(function (x) { return modelAssociations.delete(x); });\n        }\n        schema.namespaces[namespace].modelTopologicalOrdering = result;\n    });\n    return userClasses;\n};\n/**\n * Throws an exception if the schema has *not* been initialized\n * by `initSchema()`.\n *\n * **To be called before trying to access schema.**\n *\n * Currently this only needs to be called in `start()` and `clear()` because\n * all other functions will call start first.\n */\nvar checkSchemaInitialized = function () {\n    if (schema === undefined) {\n        var message = 'Schema is not initialized. DataStore will not function as expected. This could happen if you have multiple versions of DataStore installed. Please see https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js/#check-for-duplicate-versions';\n        logger.error(message);\n        throw new Error(message);\n    }\n};\n/**\n * Throws an exception if the schema is using a codegen version that is not supported.\n *\n * Set the supported version by setting majorVersion and minorVersion\n * This functions similar to ^ version range.\n * The tested codegenVersion major version must exactly match the set majorVersion\n * The tested codegenVersion minor version must be gt or equal to the set minorVersion\n * Example: For a min supported version of 5.4.0 set majorVersion = 5 and minorVersion = 4\n *\n * This regex will not work when setting a supported range with minor version\n * of 2 or more digits.\n * i.e. minorVersion = 10 will not work\n * The regex will work for testing a codegenVersion with multi digit minor\n * versions as long as the minimum minorVersion is single digit.\n * i.e. codegenVersion = 5.30.1, majorVersion = 5, minorVersion = 4 PASSES\n *\n * @param codegenVersion schema codegenVersion\n */\nvar checkSchemaCodegenVersion = function (codegenVersion) {\n    var majorVersion = 3;\n    var minorVersion = 2;\n    var isValid = false;\n    try {\n        var versionParts = codegenVersion.split('.');\n        var _a = __read(versionParts, 4), major = _a[0], minor = _a[1], patch = _a[2], patchrevision = _a[3];\n        isValid = Number(major) === majorVersion && Number(minor) >= minorVersion;\n    }\n    catch (err) {\n        console.log(\"Error parsing codegen version: \" + codegenVersion + \"\\n\" + err);\n    }\n    if (!isValid) {\n        var message = \"Models were generated with an unsupported version of codegen. Codegen artifacts are from \" + (codegenVersion || 'an unknown version') + \", whereas ^\" + majorVersion + \".\" + minorVersion + \".0 is required. \" +\n            \"Update to the latest CLI and run 'amplify codegen models'.\";\n        logger.error(message);\n        throw new Error(message);\n    }\n};\nvar createTypeClasses = function (namespace) {\n    var classes = {};\n    Object.entries(namespace.models).forEach(function (_a) {\n        var _b = __read(_a, 2), modelName = _b[0], modelDefinition = _b[1];\n        var clazz = createModelClass(modelDefinition);\n        classes[modelName] = clazz;\n        modelNamespaceMap.set(clazz, namespace.name);\n    });\n    Object.entries(namespace.nonModels || {}).forEach(function (_a) {\n        var _b = __read(_a, 2), typeName = _b[0], typeDefinition = _b[1];\n        var clazz = createNonModelClass(typeDefinition);\n        classes[typeName] = clazz;\n    });\n    return classes;\n};\n/**\n * Collection of instantiated models to allow storage of metadata apart from\n * the model visible to the consuming app -- in case the app doesn't have\n * metadata fields (_version, _deleted, etc.) exposed on the model itself.\n */\nvar instancesMetadata = new WeakSet();\nfunction modelInstanceCreator(modelConstructor, init) {\n    instancesMetadata.add(init);\n    return new modelConstructor(init);\n}\nvar validateModelFields = function (modelDefinition) { return function (k, v) {\n    var fieldDefinition = modelDefinition.fields[k];\n    if (fieldDefinition !== undefined) {\n        var type_1 = fieldDefinition.type, isRequired_1 = fieldDefinition.isRequired, isArrayNullable = fieldDefinition.isArrayNullable, name_1 = fieldDefinition.name, isArray = fieldDefinition.isArray;\n        var timestamps = isSchemaModelWithAttributes(modelDefinition)\n            ? getTimestampFields(modelDefinition)\n            : {};\n        var isTimestampField = !!timestamps[name_1];\n        if (((!isArray && isRequired_1) || (isArray && !isArrayNullable)) &&\n            !isTimestampField &&\n            (v === null || v === undefined)) {\n            throw new Error(\"Field \" + name_1 + \" is required\");\n        }\n        if (isSchemaModelWithAttributes(modelDefinition) &&\n            !isIdManaged(modelDefinition)) {\n            var keys = extractPrimaryKeyFieldNames(modelDefinition);\n            if (keys.includes(k) && v === '') {\n                logger.error(errorMessages.idEmptyString, { k: k, value: v });\n                throw new Error(errorMessages.idEmptyString);\n            }\n        }\n        if (isGraphQLScalarType(type_1)) {\n            var jsType_1 = GraphQLScalarType.getJSType(type_1);\n            var validateScalar_1 = GraphQLScalarType.getValidationFunction(type_1);\n            if (type_1 === 'AWSJSON') {\n                if (typeof v === jsType_1) {\n                    return;\n                }\n                if (typeof v === 'string') {\n                    try {\n                        JSON.parse(v);\n                        return;\n                    }\n                    catch (error) {\n                        throw new Error(\"Field \" + name_1 + \" is an invalid JSON object. \" + v);\n                    }\n                }\n            }\n            if (isArray) {\n                var errorTypeText = jsType_1;\n                if (!isRequired_1) {\n                    errorTypeText = jsType_1 + \" | null | undefined\";\n                }\n                if (!Array.isArray(v) && !isArrayNullable) {\n                    throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n                }\n                if (!isNullOrUndefined(v) &&\n                    v.some(function (e) {\n                        return isNullOrUndefined(e) ? isRequired_1 : typeof e !== jsType_1;\n                    })) {\n                    var elemTypes = v\n                        .map(function (e) { return (e === null ? 'null' : typeof e); })\n                        .join(',');\n                    throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + errorTypeText + \", [\" + elemTypes + \"] received. \" + v);\n                }\n                if (validateScalar_1 && !isNullOrUndefined(v)) {\n                    var validationStatus = v.map(function (e) {\n                        if (!isNullOrUndefined(e)) {\n                            return validateScalar_1(e);\n                        }\n                        else if (isNullOrUndefined(e) && !isRequired_1) {\n                            return true;\n                        }\n                        else {\n                            return false;\n                        }\n                    });\n                    if (!validationStatus.every(function (s) { return s; })) {\n                        throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1 + \", validation failed for one or more elements. \" + v);\n                    }\n                }\n            }\n            else if (!isRequired_1 && v === undefined) {\n                return;\n            }\n            else if (typeof v !== jsType_1 && v !== null) {\n                throw new Error(\"Field \" + name_1 + \" should be of type \" + jsType_1 + \", \" + typeof v + \" received. \" + v);\n            }\n            else if (!isNullOrUndefined(v) &&\n                validateScalar_1 &&\n                !validateScalar_1(v) // TODO: why never, TS ... why ...\n            ) {\n                throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1 + \", validation failed. \" + v);\n            }\n        }\n        else if (isNonModelFieldType(type_1)) {\n            // do not check non model fields if undefined or null\n            if (!isNullOrUndefined(v)) {\n                var subNonModelDefinition_1 = schema.namespaces.user.nonModels[type_1.nonModel];\n                var modelValidator_1 = validateModelFields(subNonModelDefinition_1);\n                if (isArray) {\n                    var errorTypeText = type_1.nonModel;\n                    if (!isRequired_1) {\n                        errorTypeText = type_1.nonModel + \" | null | undefined\";\n                    }\n                    if (!Array.isArray(v)) {\n                        throw new Error(\"Field \" + name_1 + \" should be of type [\" + errorTypeText + \"], \" + typeof v + \" received. \" + v);\n                    }\n                    v.forEach(function (item) {\n                        if ((isNullOrUndefined(item) && isRequired_1) ||\n                            (typeof item !== 'object' && typeof item !== 'undefined')) {\n                            throw new Error(\"All elements in the \" + name_1 + \" array should be of type \" + type_1.nonModel + \", [\" + typeof item + \"] received. \" + item);\n                        }\n                        if (!isNullOrUndefined(item)) {\n                            Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                                modelValidator_1(subKey, item[subKey]);\n                            });\n                        }\n                    });\n                }\n                else {\n                    if (typeof v !== 'object') {\n                        throw new Error(\"Field \" + name_1 + \" should be of type \" + type_1.nonModel + \", \" + typeof v + \" recieved. \" + v);\n                    }\n                    Object.keys(subNonModelDefinition_1.fields).forEach(function (subKey) {\n                        modelValidator_1(subKey, v[subKey]);\n                    });\n                }\n            }\n        }\n    }\n}; };\nvar castInstanceType = function (modelDefinition, k, v) {\n    var _a = modelDefinition.fields[k] || {}, isArray = _a.isArray, type = _a.type;\n    // attempt to parse stringified JSON\n    if (typeof v === 'string' &&\n        (isArray ||\n            type === 'AWSJSON' ||\n            isNonModelFieldType(type) ||\n            isModelFieldType(type))) {\n        try {\n            return JSON.parse(v);\n        }\n        catch (_b) {\n            // if JSON is invalid, don't throw and let modelValidator handle it\n        }\n    }\n    // cast from numeric representation of boolean to JS boolean\n    if (typeof v === 'number' && type === 'Boolean') {\n        return Boolean(v);\n    }\n    return v;\n};\n/**\n * Records the patches (as if against an empty object) used to initialize\n * an instance of a Model. This can be used for determining which fields to\n * send to the cloud durnig a CREATE mutation.\n */\nvar initPatches = new WeakMap();\n/**\n * Attempts to apply type-aware, casted field values from a given `init`\n * object to the given `draft`.\n *\n * @param init The initialization object to extract field values from.\n * @param modelDefinition The definition describing the target object shape.\n * @param draft The draft to apply field values to.\n */\nvar initializeInstance = function (init, modelDefinition, draft) {\n    var modelValidator = validateModelFields(modelDefinition);\n    Object.entries(init).forEach(function (_a) {\n        var _b = __read(_a, 2), k = _b[0], v = _b[1];\n        var parsedValue = castInstanceType(modelDefinition, k, v);\n        modelValidator(k, parsedValue);\n        draft[k] = parsedValue;\n    });\n};\n/**\n * Updates a draft to standardize its customer-defined fields so that they are\n * consistent with the data as it would look after having been synchronized from\n * Cloud storage.\n *\n * The exceptions to this are:\n *\n * 1. Non-schema/Internal [sync] metadata fields.\n * 2. Cloud-managed fields, which are `null` until set by cloud storage.\n *\n * This function should be expanded if/when deviations between canonical Cloud\n * storage data and locally managed data are found. For now, the known areas\n * that require normalization are:\n *\n * 1. Ensuring all non-metadata fields are *defined*. (I.e., turn `undefined` -> `null`.)\n *\n * @param modelDefinition Definition for the draft. Used to discover all fields.\n * @param draft The instance draft to apply normalizations to.\n */\nvar normalize = function (modelDefinition, draft) {\n    var e_4, _a;\n    try {\n        for (var _b = __values(Object.keys(modelDefinition.fields)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var k = _c.value;\n            if (draft[k] === undefined)\n                draft[k] = null;\n        }\n    }\n    catch (e_4_1) { e_4 = { error: e_4_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_4) throw e_4.error; }\n    }\n};\nvar createModelClass = function (modelDefinition) {\n    var e_5, _a;\n    var clazz = /** @class */ (function () {\n        function Model(init) {\n            // we create a base instance first so we can distinguish which fields were explicitly\n            // set by customer code versus those set by normalization. only those fields\n            // which are explicitly set by customers should be part of create mutations.\n            var patches = [];\n            var baseInstance = produce(this, function (draft) {\n                initializeInstance(init, modelDefinition, draft);\n                // model is initialized inside a DataStore component (e.g. by Sync Engine, Storage Engine, etc.)\n                var isInternallyInitialized = instancesMetadata.has(init);\n                var modelInstanceMetadata = isInternallyInitialized\n                    ? init\n                    : {};\n                var _id = modelInstanceMetadata.id;\n                if (isIdManaged(modelDefinition)) {\n                    var isInternalModel = _id !== null && _id !== undefined;\n                    var id = isInternalModel\n                        ? _id\n                        : modelDefinition.syncable\n                            ? uuid4()\n                            : ulid();\n                    draft.id = id;\n                }\n                else if (isIdOptionallyManaged(modelDefinition)) {\n                    // only auto-populate if the id was not provided\n                    draft.id = draft.id || uuid4();\n                }\n                if (!isInternallyInitialized) {\n                    checkReadOnlyPropertyOnCreate(draft, modelDefinition);\n                }\n                var _version = modelInstanceMetadata._version, _lastChangedAt = modelInstanceMetadata._lastChangedAt, _deleted = modelInstanceMetadata._deleted;\n                if (modelDefinition.syncable) {\n                    draft._version = _version;\n                    draft._lastChangedAt = _lastChangedAt;\n                    draft._deleted = _deleted;\n                }\n            }, function (p) { return (patches = p); });\n            // now that we have a list of patches that encapsulate the explicit, customer-provided\n            // fields, we can normalize. patches from normalization are ignored, because the changes\n            // are only create to provide a consistent view of the data for fields pre/post sync\n            // where possible. (not all fields can be normalized pre-sync, because they're generally\n            // \"cloud managed\" fields, like createdAt and updatedAt.)\n            var normalized = produce(baseInstance, function (draft) {\n                return normalize(modelDefinition, draft);\n            });\n            initPatches.set(normalized, patches);\n            return normalized;\n        }\n        Model.copyOf = function (source, fn) {\n            var modelConstructor = Object.getPrototypeOf(source || {}).constructor;\n            if (!isValidModelConstructor(modelConstructor)) {\n                var msg = 'The source object is not a valid model';\n                logger.error(msg, { source: source });\n                throw new Error(msg);\n            }\n            var patches = [];\n            var model = produce(source, function (draft) {\n                fn(draft);\n                var keyNames = extractPrimaryKeyFieldNames(modelDefinition);\n                // Keys are immutable\n                keyNames.forEach(function (key) {\n                    if (draft[key] !== source[key]) {\n                        logger.warn(\"copyOf() does not update PK fields. The '\" + key + \"' update is being ignored.\", { source: source });\n                    }\n                    draft[key] = source[key];\n                });\n                var modelValidator = validateModelFields(modelDefinition);\n                Object.entries(draft).forEach(function (_a) {\n                    var _b = __read(_a, 2), k = _b[0], v = _b[1];\n                    var parsedValue = castInstanceType(modelDefinition, k, v);\n                    modelValidator(k, parsedValue);\n                });\n                normalize(modelDefinition, draft);\n            }, function (p) { return (patches = p); });\n            var hasExistingPatches = modelPatchesMap.has(source);\n            if (patches.length || hasExistingPatches) {\n                if (hasExistingPatches) {\n                    var _a = __read(modelPatchesMap.get(source), 2), existingPatches = _a[0], existingSource = _a[1];\n                    var mergedPatches = mergePatches(existingSource, existingPatches, patches);\n                    modelPatchesMap.set(model, [mergedPatches, existingSource]);\n                    checkReadOnlyPropertyOnUpdate(mergedPatches, modelDefinition);\n                }\n                else {\n                    modelPatchesMap.set(model, [patches, source]);\n                    checkReadOnlyPropertyOnUpdate(patches, modelDefinition);\n                }\n            }\n            else {\n                // always register patches when performing a copyOf, even if the\n                // patches list is empty. this allows `save()` to recognize when an\n                // instance is the result of a `copyOf()`. without more significant\n                // refactoring, this is the only way for `save()` to know which\n                // diffs (patches) are relevant for `storage` to use in building\n                // the list of \"changed\" fields for mutations.\n                modelPatchesMap.set(model, [[], source]);\n            }\n            return attached(model, ModelAttachment.DataStore);\n        };\n        // \"private\" method (that's hidden via `Setting`) for `withSSRContext` to use\n        // to gain access to `modelInstanceCreator` and `clazz` for persisting IDs from server to client.\n        Model.fromJSON = function (json) {\n            var _this = this;\n            if (Array.isArray(json)) {\n                return json.map(function (init) { return _this.fromJSON(init); });\n            }\n            var instance = modelInstanceCreator(clazz, json);\n            var modelValidator = validateModelFields(modelDefinition);\n            Object.entries(instance).forEach(function (_a) {\n                var _b = __read(_a, 2), k = _b[0], v = _b[1];\n                modelValidator(k, v);\n            });\n            return attached(instance, ModelAttachment.DataStore);\n        };\n        return Model;\n    }());\n    clazz[immerable] = true;\n    Object.defineProperty(clazz, 'name', { value: modelDefinition.name });\n    // Add getters/setters for relationship fields.\n    //  getter - for lazy loading\n    //  setter - for FK management\n    var allModelRelationships = ModelRelationship.allFrom({\n        builder: clazz,\n        schema: modelDefinition,\n        pkField: extractPrimaryKeyFieldNames(modelDefinition),\n    });\n    var _loop_1 = function (relationship) {\n        var field = relationship.field;\n        Object.defineProperty(clazz.prototype, modelDefinition.fields[field].name, {\n            set: function (model) {\n                if (!(typeof model === 'object' || typeof model === 'undefined'))\n                    return;\n                // if model is undefined or null, the connection should be removed\n                if (model) {\n                    // Avoid validation error when processing AppSync response with nested\n                    // selection set. Nested entitites lack version field and can not be validated\n                    // TODO: explore a more reliable method to solve this\n                    if (model.hasOwnProperty('_version')) {\n                        var modelConstructor = Object.getPrototypeOf(model || {})\n                            .constructor;\n                        if (!isValidModelConstructor(modelConstructor)) {\n                            var msg = \"Value passed to \" + modelDefinition.name + \".\" + field + \" is not a valid instance of a model\";\n                            logger.error(msg, { model: model });\n                            throw new Error(msg);\n                        }\n                        if (modelConstructor.name.toLowerCase() !==\n                            relationship.remoteModelConstructor.name.toLowerCase()) {\n                            var msg = \"Value passed to \" + modelDefinition.name + \".\" + field + \" is not an instance of \" + relationship.remoteModelConstructor.name;\n                            logger.error(msg, { model: model });\n                            throw new Error(msg);\n                        }\n                    }\n                }\n                // if the relationship can be managed automagically, set the FK's\n                if (relationship.isComplete) {\n                    for (var i = 0; i < relationship.localJoinFields.length; i++) {\n                        this[relationship.localJoinFields[i]] = model === null || model === void 0 ? void 0 : model[relationship.remoteJoinFields[i]];\n                    }\n                    var instanceMemos = modelInstanceAssociationsMap.has(this)\n                        ? modelInstanceAssociationsMap.get(this)\n                        : modelInstanceAssociationsMap.set(this, {}).get(this);\n                    instanceMemos[field] = model || undefined;\n                }\n            },\n            get: function () {\n                var _this = this;\n                /**\n                 * Bucket for holding related models instances specific to `this` instance.\n                 */\n                var instanceMemos = modelInstanceAssociationsMap.has(this)\n                    ? modelInstanceAssociationsMap.get(this)\n                    : modelInstanceAssociationsMap.set(this, {}).get(this);\n                // if the memos already has a result for this field, we'll use it.\n                // there is no \"cache\" invalidation of any kind; memos are permanent to\n                // keep an immutable perception of the instance.\n                if (!instanceMemos.hasOwnProperty(field)) {\n                    // before we populate the memo, we need to know where to look for relatives.\n                    // today, this only supports DataStore. Models aren't managed elsewhere in Amplify.\n                    if (getAttachment(this) === ModelAttachment.DataStore) {\n                        // when we fetch the results using a query constructed under the guidance\n                        // of the relationship metadata, we DO NOT AWAIT resolution. we want to\n                        // drop the promise into the memo's synchronously, eliminating the chance\n                        // for a race.\n                        var resultPromise = instance.query(relationship.remoteModelConstructor, function (base) {\n                            return base.and(function (q) {\n                                return relationship.remoteJoinFields.map(function (field, index) {\n                                    // TODO: anything we can use instead of `any` here?\n                                    return q[field].eq(_this[relationship.localJoinFields[index]]);\n                                });\n                            });\n                        });\n                        // results in hand, how we return them to the caller depends on the relationship type.\n                        if (relationship.type === 'HAS_MANY') {\n                            // collections should support async iteration, even though we don't\n                            // leverage it fully [yet].\n                            instanceMemos[field] = new AsyncCollection(resultPromise);\n                        }\n                        else {\n                            // non-collections should only ever return 1 value *or nothing*.\n                            // if we have more than 1 record, something's amiss. it's not our job\n                            // pick a result for the customer. it's our job to say \"something's wrong.\"\n                            instanceMemos[field] = resultPromise.then(function (rows) {\n                                if (rows.length > 1) {\n                                    // should never happen for a HAS_ONE or BELONGS_TO.\n                                    var err = new Error(\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tData integrity error.\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tToo many records found for a HAS_ONE/BELONGS_TO field '\" + modelDefinition.name + \".\" + field + \"'\\n\\t\\t\\t\\t\\t\\t\\t\\t\");\n                                    console.error(err);\n                                    throw err;\n                                }\n                                else {\n                                    return rows[0];\n                                }\n                            });\n                        }\n                    }\n                    else if (getAttachment(this) === ModelAttachment.API) {\n                        throw new Error('Lazy loading from API is not yet supported!');\n                    }\n                    else {\n                        if (relationship.type === 'HAS_MANY') {\n                            return new AsyncCollection([]);\n                        }\n                        else {\n                            return Promise.resolve(undefined);\n                        }\n                    }\n                }\n                return instanceMemos[field];\n            },\n        });\n    };\n    try {\n        for (var allModelRelationships_1 = __values(allModelRelationships), allModelRelationships_1_1 = allModelRelationships_1.next(); !allModelRelationships_1_1.done; allModelRelationships_1_1 = allModelRelationships_1.next()) {\n            var relationship = allModelRelationships_1_1.value;\n            _loop_1(relationship);\n        }\n    }\n    catch (e_5_1) { e_5 = { error: e_5_1 }; }\n    finally {\n        try {\n            if (allModelRelationships_1_1 && !allModelRelationships_1_1.done && (_a = allModelRelationships_1.return)) _a.call(allModelRelationships_1);\n        }\n        finally { if (e_5) throw e_5.error; }\n    }\n    return clazz;\n};\n/**\n * An eventually loaded related model instance.\n */\nvar AsyncItem = /** @class */ (function (_super) {\n    __extends(AsyncItem, _super);\n    function AsyncItem() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return AsyncItem;\n}(Promise));\nexport { AsyncItem };\n/**\n * A collection of related model instances.\n *\n * This collection can be async-iterated or turned directly into an array using `toArray()`.\n */\nvar AsyncCollection = /** @class */ (function () {\n    function AsyncCollection(values) {\n        this.values = values;\n    }\n    /**\n     * Facilitates async iteration.\n     *\n     * ```ts\n     * for await (const item of collection) {\n     *   handle(item)\n     * }\n     * ```\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of\n     */\n    AsyncCollection.prototype[Symbol.asyncIterator] = function () {\n        var _this = this;\n        var values;\n        var index = 0;\n        return {\n            next: function () { return __awaiter(_this, void 0, void 0, function () {\n                var result;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!!values) return [3 /*break*/, 2];\n                            return [4 /*yield*/, this.values];\n                        case 1:\n                            values = _a.sent();\n                            _a.label = 2;\n                        case 2:\n                            if (index < values.length) {\n                                result = {\n                                    value: values[index],\n                                    done: false,\n                                };\n                                index++;\n                                return [2 /*return*/, result];\n                            }\n                            return [2 /*return*/, {\n                                    value: null,\n                                    done: true,\n                                }];\n                    }\n                });\n            }); },\n        };\n    };\n    /**\n     * Turns the collection into an array, up to the amount specified in `max` param.\n     *\n     * ```ts\n     * const all = await collection.toArray();\n     * const first100 = await collection.toArray({max: 100});\n     * ```\n     */\n    AsyncCollection.prototype.toArray = function (_a) {\n        var _b = (_a === void 0 ? {} : _a).max, max = _b === void 0 ? Number.MAX_SAFE_INTEGER : _b;\n        var e_6, _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var output, i, _d, _e, element, e_6_1;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        output = [];\n                        i = 0;\n                        _f.label = 1;\n                    case 1:\n                        _f.trys.push([1, 6, 7, 12]);\n                        _d = __asyncValues(this);\n                        _f.label = 2;\n                    case 2: return [4 /*yield*/, _d.next()];\n                    case 3:\n                        if (!(_e = _f.sent(), !_e.done)) return [3 /*break*/, 5];\n                        element = _e.value;\n                        if (i < max) {\n                            output.push(element);\n                            i++;\n                        }\n                        else {\n                            return [3 /*break*/, 5];\n                        }\n                        _f.label = 4;\n                    case 4: return [3 /*break*/, 2];\n                    case 5: return [3 /*break*/, 12];\n                    case 6:\n                        e_6_1 = _f.sent();\n                        e_6 = { error: e_6_1 };\n                        return [3 /*break*/, 12];\n                    case 7:\n                        _f.trys.push([7, , 10, 11]);\n                        if (!(_e && !_e.done && (_c = _d.return))) return [3 /*break*/, 9];\n                        return [4 /*yield*/, _c.call(_d)];\n                    case 8:\n                        _f.sent();\n                        _f.label = 9;\n                    case 9: return [3 /*break*/, 11];\n                    case 10:\n                        if (e_6) throw e_6.error;\n                        return [7 /*endfinally*/];\n                    case 11: return [7 /*endfinally*/];\n                    case 12: return [2 /*return*/, output];\n                }\n            });\n        });\n    };\n    return AsyncCollection;\n}());\nexport { AsyncCollection };\nvar checkReadOnlyPropertyOnCreate = function (draft, modelDefinition) {\n    var modelKeys = Object.keys(draft);\n    var fields = modelDefinition.fields;\n    modelKeys.forEach(function (key) {\n        if (fields[key] && fields[key].isReadOnly) {\n            throw new Error(key + \" is read-only.\");\n        }\n    });\n};\nvar checkReadOnlyPropertyOnUpdate = function (patches, modelDefinition) {\n    var patchArray = patches.map(function (p) { return [p.path[0], p.value]; });\n    var fields = modelDefinition.fields;\n    patchArray.forEach(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], val = _b[1];\n        if (!val || !fields[key])\n            return;\n        if (fields[key].isReadOnly) {\n            throw new Error(key + \" is read-only.\");\n        }\n    });\n};\nvar createNonModelClass = function (typeDefinition) {\n    var clazz = /** @class */ (function () {\n        function Model(init) {\n            var instance = produce(this, function (draft) {\n                initializeInstance(init, typeDefinition, draft);\n            });\n            return instance;\n        }\n        return Model;\n    }());\n    clazz[immerable] = true;\n    Object.defineProperty(clazz, 'name', { value: typeDefinition.name });\n    registerNonModelClass(clazz);\n    return clazz;\n};\nfunction isQueryOne(obj) {\n    return typeof obj === 'string';\n}\nfunction defaultConflictHandler(conflictData) {\n    var localModel = conflictData.localModel, modelConstructor = conflictData.modelConstructor, remoteModel = conflictData.remoteModel;\n    var _version = remoteModel._version;\n    return modelInstanceCreator(modelConstructor, __assign(__assign({}, localModel), { _version: _version }));\n}\nfunction defaultErrorHandler(error) {\n    logger.warn(error);\n}\nfunction getModelConstructorByModelName(namespaceName, modelName) {\n    var result;\n    switch (namespaceName) {\n        case DATASTORE:\n            result = dataStoreClasses[modelName];\n            break;\n        case USER:\n            result = userClasses[modelName];\n            break;\n        case SYNC:\n            result = syncClasses[modelName];\n            break;\n        case STORAGE:\n            result = storageClasses[modelName];\n            break;\n        default:\n            throw new Error(\"Invalid namespace: \" + namespaceName);\n    }\n    if (isValidModelConstructor(result)) {\n        return result;\n    }\n    else {\n        var msg = \"Model name is not valid for namespace. modelName: \" + modelName + \", namespace: \" + namespaceName;\n        logger.error(msg);\n        throw new Error(msg);\n    }\n}\n/**\n * Queries the DataStore metadata tables to see if they are the expected\n * version. If not, clobbers the whole DB. If so, leaves them alone.\n * Otherwise, simply writes the schema version.\n *\n * SIDE EFFECT:\n * 1. Creates a transaction\n * 1. Updates data.\n *\n * @param storage Storage adapter containing the metadata.\n * @param version The expected schema version.\n */\nfunction checkSchemaVersion(storage, version) {\n    return __awaiter(this, void 0, void 0, function () {\n        var Setting, modelDefinition;\n        var _this = this;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    Setting = dataStoreClasses.Setting;\n                    modelDefinition = schema.namespaces[DATASTORE].models.Setting;\n                    return [4 /*yield*/, storage.runExclusive(function (s) { return __awaiter(_this, void 0, void 0, function () {\n                            var _a, schemaVersionSetting, storedValue;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0: return [4 /*yield*/, s.query(Setting, ModelPredicateCreator.createFromAST(modelDefinition, {\n                                            and: { key: { eq: SETTING_SCHEMA_VERSION } },\n                                        }), { page: 0, limit: 1 })];\n                                    case 1:\n                                        _a = __read.apply(void 0, [_b.sent(), 1]), schemaVersionSetting = _a[0];\n                                        if (!(schemaVersionSetting !== undefined &&\n                                            schemaVersionSetting.value !== undefined)) return [3 /*break*/, 4];\n                                        storedValue = JSON.parse(schemaVersionSetting.value);\n                                        if (!(storedValue !== version)) return [3 /*break*/, 3];\n                                        return [4 /*yield*/, s.clear(false)];\n                                    case 2:\n                                        _b.sent();\n                                        _b.label = 3;\n                                    case 3: return [3 /*break*/, 6];\n                                    case 4: return [4 /*yield*/, s.save(modelInstanceCreator(Setting, {\n                                            key: SETTING_SCHEMA_VERSION,\n                                            value: JSON.stringify(version),\n                                        }))];\n                                    case 5:\n                                        _b.sent();\n                                        _b.label = 6;\n                                    case 6: return [2 /*return*/];\n                                }\n                            });\n                        }); })];\n                case 1:\n                    _a.sent();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\nvar syncSubscription;\nfunction getNamespace() {\n    var namespace = {\n        name: DATASTORE,\n        relationships: {},\n        enums: {},\n        nonModels: {},\n        models: {\n            Setting: {\n                name: 'Setting',\n                pluralName: 'Settings',\n                syncable: false,\n                fields: {\n                    id: {\n                        name: 'id',\n                        type: 'ID',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                    key: {\n                        name: 'key',\n                        type: 'String',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                    value: {\n                        name: 'value',\n                        type: 'String',\n                        isRequired: true,\n                        isArray: false,\n                    },\n                },\n            },\n        },\n    };\n    return namespace;\n}\nvar DataStoreState;\n(function (DataStoreState) {\n    DataStoreState[\"NotRunning\"] = \"Not Running\";\n    DataStoreState[\"Starting\"] = \"Starting\";\n    DataStoreState[\"Running\"] = \"Running\";\n    DataStoreState[\"Stopping\"] = \"Stopping\";\n    DataStoreState[\"Clearing\"] = \"Clearing\";\n})(DataStoreState || (DataStoreState = {}));\n// TODO: How can we get rid of the non-null assertions?\n// https://github.com/aws-amplify/amplify-js/pull/10477/files#r1007363485\nvar DataStore = /** @class */ (function () {\n    function DataStore() {\n        var _this = this;\n        // reference to configured category instances. Used for preserving SSR context\n        this.Auth = Auth;\n        this.InternalAPI = InternalAPI;\n        this.Cache = Cache;\n        // Non-null assertions (bang operator) have been added to most of these properties\n        // to make TS happy. These properties are all expected to be set immediately after\n        // construction.\n        // TODO: Refactor to use proper DI if possible. If not possible, change these to\n        // optionals and implement conditional checks throughout. Rinse/repeat on all\n        // sync engine processors, storage engine, adapters, etc..\n        this.amplifyConfig = {};\n        this.syncPredicates = new WeakMap();\n        // object that gets passed to descendent classes. Allows us to pass these down by reference\n        this.amplifyContext = {\n            Auth: this.Auth,\n            InternalAPI: this.InternalAPI,\n            Cache: this.Cache,\n        };\n        /**\n         * **IMPORTANT!**\n         *\n         * Accumulator for background things that can **and MUST** be called when\n         * DataStore stops.\n         *\n         * These jobs **MUST** be *idempotent promises* that resolve ONLY\n         * once the intended jobs are completely finished and/or otherwise destroyed\n         * and cleaned up with ZERO outstanding:\n         *\n         * 1. side effects (e.g., state changes)\n         * 1. callbacks\n         * 1. subscriptions\n         * 1. calls to storage\n         * 1. *etc.*\n         *\n         * Methods that create pending promises, subscriptions, callbacks, or any\n         * type of side effect **MUST** be registered with the manager. And, a new\n         * manager must be created after each `exit()`.\n         *\n         * Failure to comply will put DataStore into a highly unpredictable state\n         * when it needs to stop or clear -- which occurs when restarting with new\n         * sync expressions, during testing, and potentially during app code\n         * recovery handling, etc..\n         *\n         * It is up to the discretion of each disposer whether to wait for job\n         * completion or to cancel operations and issue failures *as long as the\n         * disposer returns in a reasonable amount of time.*\n         *\n         * (Reasonable = *seconds*, not minutes.)\n         */\n        this.runningProcesses = new BackgroundProcessManager();\n        /**\n         * Indicates what state DataStore is in.\n         *\n         * Not [yet?] used for actual state management; but for messaging\n         * when errors occur, to help troubleshoot.\n         */\n        this.state = DataStoreState.NotRunning;\n        /**\n         * If not already done:\n         * 1. Attaches and initializes storage.\n         * 2. Loads the schema and records metadata.\n         * 3. If `this.amplifyConfig.aws_appsync_graphqlEndpoint` contains a URL,\n         * attaches a sync engine, starts it, and subscribes.\n         */\n        this.start = function () { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var aws_appsync_graphqlEndpoint, _a, fullSyncIntervalInMilliseconds;\n                        var _this = this;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0:\n                                    this.state = DataStoreState.Starting;\n                                    if (!(this.initialized === undefined)) return [3 /*break*/, 1];\n                                    logger.debug('Starting DataStore');\n                                    this.initialized = new Promise(function (res, rej) {\n                                        _this.initResolve = res;\n                                        _this.initReject = rej;\n                                    });\n                                    return [3 /*break*/, 3];\n                                case 1: return [4 /*yield*/, this.initialized];\n                                case 2:\n                                    _b.sent();\n                                    return [2 /*return*/];\n                                case 3:\n                                    this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                                    return [4 /*yield*/, this.storage.init()];\n                                case 4:\n                                    _b.sent();\n                                    checkSchemaInitialized();\n                                    return [4 /*yield*/, checkSchemaVersion(this.storage, schema.version)];\n                                case 5:\n                                    _b.sent();\n                                    aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                                    if (!aws_appsync_graphqlEndpoint) return [3 /*break*/, 7];\n                                    logger.debug('GraphQL endpoint available', aws_appsync_graphqlEndpoint);\n                                    _a = this;\n                                    return [4 /*yield*/, this.processSyncExpressions()];\n                                case 6:\n                                    _a.syncPredicates = _b.sent();\n                                    this.sync = new SyncEngine(schema, namespaceResolver, syncClasses, userClasses, this.storage, modelInstanceCreator, this.conflictHandler, this.errorHandler, this.syncPredicates, this.amplifyConfig, this.authModeStrategy, this.amplifyContext, this.connectivityMonitor);\n                                    fullSyncIntervalInMilliseconds = this.fullSyncInterval * 1000 * 60;\n                                    syncSubscription = this.sync\n                                        .start({ fullSyncInterval: fullSyncIntervalInMilliseconds })\n                                        .subscribe({\n                                        next: function (_a) {\n                                            var type = _a.type, data = _a.data;\n                                            // In Node, we need to wait for queries to be synced to prevent returning empty arrays.\n                                            // In the Browser, we can begin returning data once subscriptions are in place.\n                                            var readyType = isNode\n                                                ? ControlMessage.SYNC_ENGINE_SYNC_QUERIES_READY\n                                                : ControlMessage.SYNC_ENGINE_STORAGE_SUBSCRIBED;\n                                            if (type === readyType) {\n                                                _this.initResolve();\n                                            }\n                                            Hub.dispatch('datastore', {\n                                                event: type,\n                                                data: data,\n                                            });\n                                        },\n                                        error: function (err) {\n                                            logger.warn('Sync error', err);\n                                            _this.initReject();\n                                        },\n                                    });\n                                    return [3 /*break*/, 8];\n                                case 7:\n                                    logger.warn(\"Data won't be synchronized. No GraphQL endpoint configured. Did you forget `Amplify.configure(awsconfig)`?\", {\n                                        config: this.amplifyConfig,\n                                    });\n                                    this.initResolve();\n                                    _b.label = 8;\n                                case 8: return [4 /*yield*/, this.initialized];\n                                case 9:\n                                    _b.sent();\n                                    this.state = DataStoreState.Running;\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); }, 'datastore start')\n                        .catch(this.handleAddProcError('DataStore.start()'))];\n            });\n        }); };\n        this.query = function (modelConstructor, identifierOrCriteria, paginationProducer) { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var result, msg, modelDefinition, pagination, keyFields, msg, predicate, predicate, seedPredicate, predicate, returnOne;\n                        var _a;\n                        var _b;\n                        return __generator(this, function (_c) {\n                            switch (_c.label) {\n                                case 0: return [4 /*yield*/, this.start()];\n                                case 1:\n                                    _c.sent();\n                                    if (!this.storage) {\n                                        throw new Error('No storage to query');\n                                    }\n                                    //#region Input validation\n                                    if (!isValidModelConstructor(modelConstructor)) {\n                                        msg = 'Constructor is not for a valid model';\n                                        logger.error(msg, { modelConstructor: modelConstructor });\n                                        throw new Error(msg);\n                                    }\n                                    if (typeof identifierOrCriteria === 'string') {\n                                        if (paginationProducer !== undefined) {\n                                            logger.warn('Pagination is ignored when querying by id');\n                                        }\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    if (!modelDefinition) {\n                                        throw new Error('Invalid model definition provided!');\n                                    }\n                                    pagination = this.processPagination(modelDefinition, paginationProducer);\n                                    keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                    if (!isQueryOne(identifierOrCriteria)) return [3 /*break*/, 3];\n                                    if (keyFields.length > 1) {\n                                        msg = errorMessages.queryByPkWithCompositeKeyPresent;\n                                        logger.error(msg, { keyFields: keyFields });\n                                        throw new Error(msg);\n                                    }\n                                    predicate = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, (_a = {}, _a[keyFields[0]] = identifierOrCriteria, _a));\n                                    return [4 /*yield*/, this.storage.query(modelConstructor, predicate, pagination)];\n                                case 2:\n                                    result = _c.sent();\n                                    return [3 /*break*/, 9];\n                                case 3:\n                                    if (!isIdentifierObject(identifierOrCriteria, modelDefinition)) return [3 /*break*/, 5];\n                                    predicate = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                                    return [4 /*yield*/, this.storage.query(modelConstructor, predicate, pagination)];\n                                case 4:\n                                    result = _c.sent();\n                                    return [3 /*break*/, 9];\n                                case 5:\n                                    if (!(!identifierOrCriteria ||\n                                        isPredicatesAll(identifierOrCriteria))) return [3 /*break*/, 7];\n                                    return [4 /*yield*/, ((_b = this.storage) === null || _b === void 0 ? void 0 : _b.query(modelConstructor, undefined, pagination))];\n                                case 6:\n                                    result = _c.sent();\n                                    return [3 /*break*/, 9];\n                                case 7:\n                                    seedPredicate = recursivePredicateFor({\n                                        builder: modelConstructor,\n                                        schema: modelDefinition,\n                                        pkField: extractPrimaryKeyFieldNames(modelDefinition),\n                                    });\n                                    predicate = internals(identifierOrCriteria(seedPredicate));\n                                    return [4 /*yield*/, predicate.fetch(this.storage)];\n                                case 8:\n                                    result = (_c.sent());\n                                    result = inMemoryPagination(result, pagination);\n                                    _c.label = 9;\n                                case 9:\n                                    returnOne = isQueryOne(identifierOrCriteria) ||\n                                        isIdentifierObject(identifierOrCriteria, modelDefinition);\n                                    return [2 /*return*/, attached(returnOne ? result[0] : result, ModelAttachment.DataStore)];\n                            }\n                        });\n                    }); }, 'datastore query')\n                        .catch(this.handleAddProcError('DataStore.query()'))];\n            });\n        }); };\n        this.save = function (model, condition) { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var updatedPatchesTuple, initPatchesTuple, patchesTuple, modelConstructor, msg, modelDefinition, modelMeta, producedCondition, _a, savedModel;\n                        var _this = this;\n                        return __generator(this, function (_b) {\n                            switch (_b.label) {\n                                case 0: return [4 /*yield*/, this.start()];\n                                case 1:\n                                    _b.sent();\n                                    if (!this.storage) {\n                                        throw new Error('No storage to save to');\n                                    }\n                                    updatedPatchesTuple = modelPatchesMap.get(model);\n                                    initPatchesTuple = initPatches.has(model)\n                                        ? [initPatches.get(model), {}]\n                                        : undefined;\n                                    patchesTuple = updatedPatchesTuple || initPatchesTuple;\n                                    modelConstructor = model ? model.constructor : undefined;\n                                    if (!isValidModelConstructor(modelConstructor)) {\n                                        msg = 'Object is not an instance of a valid model';\n                                        logger.error(msg, { model: model });\n                                        throw new Error(msg);\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    if (!modelDefinition) {\n                                        throw new Error('Model Definition could not be found for model');\n                                    }\n                                    modelMeta = {\n                                        builder: modelConstructor,\n                                        schema: modelDefinition,\n                                        pkField: extractPrimaryKeyFieldNames(modelDefinition),\n                                    };\n                                    return [4 /*yield*/, this.storage.runExclusive(function (s) { return __awaiter(_this, void 0, void 0, function () {\n                                            var nonHasManyRelationships, nonHasManyRelationships_1, nonHasManyRelationships_1_1, relationship, queryObject, related, e_7_1;\n                                            var e_7, _a;\n                                            var _b;\n                                            return __generator(this, function (_c) {\n                                                switch (_c.label) {\n                                                    case 0:\n                                                        nonHasManyRelationships = ModelRelationship.allFrom(modelMeta).filter(function (r) { return r.type === 'BELONGS_TO'; });\n                                                        _c.label = 1;\n                                                    case 1:\n                                                        _c.trys.push([1, 6, 7, 8]);\n                                                        nonHasManyRelationships_1 = __values(nonHasManyRelationships), nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();\n                                                        _c.label = 2;\n                                                    case 2:\n                                                        if (!!nonHasManyRelationships_1_1.done) return [3 /*break*/, 5];\n                                                        relationship = nonHasManyRelationships_1_1.value;\n                                                        queryObject = relationship.createRemoteQueryObject(model);\n                                                        if (!(queryObject !== null)) return [3 /*break*/, 4];\n                                                        return [4 /*yield*/, s.query(relationship.remoteModelConstructor, ModelPredicateCreator.createFromFlatEqualities(relationship.remoteDefinition, queryObject))];\n                                                    case 3:\n                                                        related = _c.sent();\n                                                        if (related.length === 0) {\n                                                            throw new Error([\n                                                                \"Data integrity error. You tried to save a \" + modelDefinition.name + \" (\" + JSON.stringify(model) + \")\",\n                                                                \"but the instance assigned to the \\\"\" + relationship.field + \"\\\" property\",\n                                                                \"does not exist in the local database. If you're trying to create the related\",\n                                                                \"\\\"\" + ((_b = relationship.remoteDefinition) === null || _b === void 0 ? void 0 : _b.name) + \"\\\", you must save it independently first.\",\n                                                            ].join(' '));\n                                                        }\n                                                        _c.label = 4;\n                                                    case 4:\n                                                        nonHasManyRelationships_1_1 = nonHasManyRelationships_1.next();\n                                                        return [3 /*break*/, 2];\n                                                    case 5: return [3 /*break*/, 8];\n                                                    case 6:\n                                                        e_7_1 = _c.sent();\n                                                        e_7 = { error: e_7_1 };\n                                                        return [3 /*break*/, 8];\n                                                    case 7:\n                                                        try {\n                                                            if (nonHasManyRelationships_1_1 && !nonHasManyRelationships_1_1.done && (_a = nonHasManyRelationships_1.return)) _a.call(nonHasManyRelationships_1);\n                                                        }\n                                                        finally { if (e_7) throw e_7.error; }\n                                                        return [7 /*endfinally*/];\n                                                    case 8: return [2 /*return*/];\n                                                }\n                                            });\n                                        }); })];\n                                case 2:\n                                    _b.sent();\n                                    producedCondition = condition\n                                        ? internals(condition(predicateFor(modelMeta))).toStoragePredicate()\n                                        : undefined;\n                                    return [4 /*yield*/, this.storage.runExclusive(function (s) { return __awaiter(_this, void 0, void 0, function () {\n                                            var saved;\n                                            return __generator(this, function (_a) {\n                                                switch (_a.label) {\n                                                    case 0: return [4 /*yield*/, s.save(model, producedCondition, undefined, patchesTuple)];\n                                                    case 1:\n                                                        saved = _a.sent();\n                                                        return [2 /*return*/, s.query(modelConstructor, ModelPredicateCreator.createForPk(modelDefinition, model))];\n                                                }\n                                            });\n                                        }); })];\n                                case 3:\n                                    _a = __read.apply(void 0, [_b.sent(), 1]), savedModel = _a[0];\n                                    return [2 /*return*/, attached(savedModel, ModelAttachment.DataStore)];\n                            }\n                        });\n                    }); }, 'datastore save')\n                        .catch(this.handleAddProcError('DataStore.save()'))];\n            });\n        }); };\n        this.setConflictHandler = function (config) {\n            var configDataStore = config.DataStore;\n            var conflictHandlerIsDefault = function () {\n                return _this.conflictHandler === defaultConflictHandler;\n            };\n            if (configDataStore && configDataStore.conflictHandler) {\n                return configDataStore.conflictHandler;\n            }\n            if (conflictHandlerIsDefault() && config.conflictHandler) {\n                return config.conflictHandler;\n            }\n            return _this.conflictHandler || defaultConflictHandler;\n        };\n        this.setErrorHandler = function (config) {\n            var configDataStore = config.DataStore;\n            var errorHandlerIsDefault = function () {\n                return _this.errorHandler === defaultErrorHandler;\n            };\n            if (configDataStore && configDataStore.errorHandler) {\n                return configDataStore.errorHandler;\n            }\n            if (errorHandlerIsDefault() && config.errorHandler) {\n                return config.errorHandler;\n            }\n            return _this.errorHandler || defaultErrorHandler;\n        };\n        this.delete = function (modelOrConstructor, identifierOrCriteria) { return __awaiter(_this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                return [2 /*return*/, this.runningProcesses\n                        .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                        var condition, msg, modelConstructor, msg, modelDefinition, keyFields, msg, msg, _a, deleted, model, modelConstructor, msg, modelDefinition, pkPredicate, msg, _b, _c, deleted;\n                        var _d;\n                        return __generator(this, function (_e) {\n                            switch (_e.label) {\n                                case 0: return [4 /*yield*/, this.start()];\n                                case 1:\n                                    _e.sent();\n                                    if (!this.storage) {\n                                        throw new Error('No storage to delete from');\n                                    }\n                                    if (!modelOrConstructor) {\n                                        msg = 'Model or Model Constructor required';\n                                        logger.error(msg, { modelOrConstructor: modelOrConstructor });\n                                        throw new Error(msg);\n                                    }\n                                    if (!isValidModelConstructor(modelOrConstructor)) return [3 /*break*/, 3];\n                                    modelConstructor = modelOrConstructor;\n                                    if (!identifierOrCriteria) {\n                                        msg = 'Id to delete or criteria required. Do you want to delete all? Pass Predicates.ALL';\n                                        logger.error(msg, { identifierOrCriteria: identifierOrCriteria });\n                                        throw new Error(msg);\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    if (!modelDefinition) {\n                                        throw new Error('Could not find model definition for modelConstructor.');\n                                    }\n                                    if (typeof identifierOrCriteria === 'string') {\n                                        keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                        if (keyFields.length > 1) {\n                                            msg = errorMessages.deleteByPkWithCompositeKeyPresent;\n                                            logger.error(msg, { keyFields: keyFields });\n                                            throw new Error(msg);\n                                        }\n                                        condition = ModelPredicateCreator.createFromFlatEqualities(modelDefinition, (_d = {}, _d[keyFields[0]] = identifierOrCriteria, _d));\n                                    }\n                                    else {\n                                        if (isIdentifierObject(identifierOrCriteria, modelDefinition)) {\n                                            condition = ModelPredicateCreator.createForPk(modelDefinition, identifierOrCriteria);\n                                        }\n                                        else {\n                                            condition = internals(identifierOrCriteria(predicateFor({\n                                                builder: modelConstructor,\n                                                schema: modelDefinition,\n                                                pkField: extractPrimaryKeyFieldNames(modelDefinition),\n                                            }))).toStoragePredicate();\n                                        }\n                                        if (!condition ||\n                                            !ModelPredicateCreator.isValidPredicate(condition)) {\n                                            msg = 'Criteria required. Do you want to delete all? Pass Predicates.ALL';\n                                            logger.error(msg, { condition: condition });\n                                            throw new Error(msg);\n                                        }\n                                    }\n                                    return [4 /*yield*/, this.storage.delete(modelConstructor, condition)];\n                                case 2:\n                                    _a = __read.apply(void 0, [_e.sent(), 1]), deleted = _a[0];\n                                    return [2 /*return*/, attached(deleted, ModelAttachment.DataStore)];\n                                case 3:\n                                    model = modelOrConstructor;\n                                    modelConstructor = Object.getPrototypeOf(model || {})\n                                        .constructor;\n                                    if (!isValidModelConstructor(modelConstructor)) {\n                                        msg = 'Object is not an instance of a valid model';\n                                        logger.error(msg, { model: model });\n                                        throw new Error(msg);\n                                    }\n                                    modelDefinition = getModelDefinition(modelConstructor);\n                                    if (!modelDefinition) {\n                                        throw new Error('Could not find model definition for modelConstructor.');\n                                    }\n                                    pkPredicate = ModelPredicateCreator.createForPk(modelDefinition, model);\n                                    if (identifierOrCriteria) {\n                                        if (typeof identifierOrCriteria !== 'function') {\n                                            msg = 'Invalid criteria';\n                                            logger.error(msg, { identifierOrCriteria: identifierOrCriteria });\n                                            throw new Error(msg);\n                                        }\n                                        condition = internals(identifierOrCriteria(predicateFor({\n                                            builder: modelConstructor,\n                                            schema: modelDefinition,\n                                            pkField: extractPrimaryKeyFieldNames(modelDefinition),\n                                        }))).toStoragePredicate();\n                                    }\n                                    else {\n                                        condition = pkPredicate;\n                                    }\n                                    return [4 /*yield*/, this.storage.delete(model, condition)];\n                                case 4:\n                                    _b = __read.apply(void 0, [_e.sent(), 1]), _c = __read(_b[0], 1), deleted = _c[0];\n                                    return [2 /*return*/, attached(deleted, ModelAttachment.DataStore)];\n                            }\n                        });\n                    }); }, 'datastore delete')\n                        .catch(this.handleAddProcError('DataStore.delete()'))];\n            });\n        }); };\n        this.observe = function (modelOrConstructor, identifierOrCriteria) {\n            var executivePredicate;\n            var modelConstructor = modelOrConstructor && isValidModelConstructor(modelOrConstructor)\n                ? modelOrConstructor\n                : undefined;\n            if (modelOrConstructor && modelConstructor === undefined) {\n                var model = modelOrConstructor;\n                var modelConstructor_1 = model && Object.getPrototypeOf(model).constructor;\n                if (isValidModelConstructor(modelConstructor_1)) {\n                    if (identifierOrCriteria) {\n                        logger.warn('idOrCriteria is ignored when using a model instance', {\n                            model: model,\n                            identifierOrCriteria: identifierOrCriteria,\n                        });\n                    }\n                    return _this.observe(modelConstructor_1, model.id);\n                }\n                else {\n                    var msg = 'The model is not an instance of a PersistentModelConstructor';\n                    logger.error(msg, { model: model });\n                    throw new Error(msg);\n                }\n            }\n            // observe should not accept object literal syntax\n            if (identifierOrCriteria &&\n                modelConstructor &&\n                isIdentifierObject(identifierOrCriteria, getModelDefinition(modelConstructor))) {\n                var msg = errorMessages.observeWithObjectLiteral;\n                logger.error(msg, { objectLiteral: identifierOrCriteria });\n                throw new Error(msg);\n            }\n            if (identifierOrCriteria !== undefined && modelConstructor === undefined) {\n                var msg = 'Cannot provide criteria without a modelConstructor';\n                logger.error(msg, identifierOrCriteria);\n                throw new Error(msg);\n            }\n            if (modelConstructor && !isValidModelConstructor(modelConstructor)) {\n                var msg = 'Constructor is not for a valid model';\n                logger.error(msg, { modelConstructor: modelConstructor });\n                throw new Error(msg);\n            }\n            if (modelConstructor && typeof identifierOrCriteria === 'string') {\n                var buildIdPredicate = function (seed) { return seed.id.eq(identifierOrCriteria); };\n                executivePredicate = internals(buildIdPredicate(buildSeedPredicate(modelConstructor)));\n            }\n            else if (modelConstructor && typeof identifierOrCriteria === 'function') {\n                executivePredicate = internals(identifierOrCriteria(buildSeedPredicate(modelConstructor)));\n            }\n            return new Observable(function (observer) {\n                var source;\n                _this.runningProcesses\n                    .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0: return [4 /*yield*/, this.start()];\n                            case 1:\n                                _a.sent();\n                                // Filter the events returned by Storage according to namespace,\n                                // append original element data, and subscribe to the observable\n                                source = this.storage.observe(modelConstructor)\n                                    .filter(function (_a) {\n                                    var model = _a.model;\n                                    return namespaceResolver(model) === USER;\n                                })\n                                    .subscribe({\n                                    next: function (item) {\n                                        return _this.runningProcesses.isOpen &&\n                                            _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                                                var message, modelDefinition, keyFields, primaryKeysAndValues, freshElement, _a;\n                                                return __generator(this, function (_b) {\n                                                    switch (_b.label) {\n                                                        case 0:\n                                                            message = item;\n                                                            if (!(item.opType !== 'DELETE')) return [3 /*break*/, 2];\n                                                            modelDefinition = getModelDefinition(item.model);\n                                                            keyFields = extractPrimaryKeyFieldNames(modelDefinition);\n                                                            primaryKeysAndValues = extractPrimaryKeysAndValues(item.element, keyFields);\n                                                            return [4 /*yield*/, this.query(item.model, primaryKeysAndValues)];\n                                                        case 1:\n                                                            freshElement = _b.sent();\n                                                            message = __assign(__assign({}, message), { element: freshElement });\n                                                            _b.label = 2;\n                                                        case 2:\n                                                            _a = !executivePredicate;\n                                                            if (_a) return [3 /*break*/, 4];\n                                                            return [4 /*yield*/, executivePredicate.matches(message.element)];\n                                                        case 3:\n                                                            _a = (_b.sent());\n                                                            _b.label = 4;\n                                                        case 4:\n                                                            if (_a) {\n                                                                observer.next(message);\n                                                            }\n                                                            return [2 /*return*/];\n                                                    }\n                                                });\n                                            }); }, 'datastore observe message handler');\n                                    },\n                                    error: function (err) { return observer.error(err); },\n                                    complete: function () { return observer.complete(); },\n                                });\n                                return [2 /*return*/];\n                        }\n                    });\n                }); }, 'datastore observe observable initialization')\n                    .catch(_this.handleAddProcError('DataStore.observe()'))\n                    .catch(function (error) {\n                    observer.error(error);\n                });\n                // better than no cleaner, but if the subscriber is handling the\n                // complete() message async and not registering with the context,\n                // this will still be problematic.\n                return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        if (source) {\n                            source.unsubscribe();\n                        }\n                        return [2 /*return*/];\n                    });\n                }); }, 'DataStore.observe() cleanup');\n            });\n        };\n        this.observeQuery = function (model, criteria, options) {\n            return new Observable(function (observer) {\n                var items = new Map();\n                var itemsChanged = new Map();\n                var deletedItemIds = [];\n                var handle;\n                // let predicate: ModelPredicate<T> | undefined;\n                var executivePredicate;\n                /**\n                 * As the name suggests, this geneates a snapshot in the form of\n                 * \t`{items: T[], isSynced: boolean}`\n                 * and sends it to the observer.\n                 *\n                 * SIDE EFFECT: The underlying generation and emission methods may touch:\n                 * `items`, `itemsChanged`, and `deletedItemIds`.\n                 *\n                 * Refer to `generateSnapshot` and `emitSnapshot` for more details.\n                 */\n                var generateAndEmitSnapshot = function () {\n                    var snapshot = generateSnapshot();\n                    emitSnapshot(snapshot);\n                };\n                // a mechanism to return data after X amount of seconds OR after the\n                // \"limit\" (itemsChanged >= this.syncPageSize) has been reached, whichever comes first\n                var limitTimerRace = new DeferredCallbackResolver({\n                    callback: generateAndEmitSnapshot,\n                    errorHandler: observer.error,\n                    maxInterval: 2000,\n                });\n                var sort = (options || {}).sort;\n                var sortOptions = sort ? { sort: sort } : undefined;\n                var modelDefinition = getModelDefinition(model);\n                if (!modelDefinition) {\n                    throw new Error('Could not find model definition.');\n                }\n                if (model && typeof criteria === 'function') {\n                    executivePredicate = internals(criteria(buildSeedPredicate(model)));\n                }\n                else if (isPredicatesAll(criteria)) {\n                    executivePredicate = undefined;\n                }\n                _this.runningProcesses\n                    .add(function () { return __awaiter(_this, void 0, void 0, function () {\n                    var err_1;\n                    var _this = this;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                _a.trys.push([0, 2, , 3]);\n                                return [4 /*yield*/, this.query(model, criteria, sortOptions)];\n                            case 1:\n                                // first, query and return any locally-available records\n                                (_a.sent()).forEach(function (item) {\n                                    var itemModelDefinition = getModelDefinition(model);\n                                    var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                                    items.set(idOrPk, item);\n                                });\n                                // Observe the model and send a stream of updates (debounced).\n                                // We need to post-filter results instead of passing criteria through\n                                // to have visibility into items that move from in-set to out-of-set.\n                                // We need to explicitly remove those items from the existing snapshot.\n                                handle = this.observe(model).subscribe(function (_a) {\n                                    var element = _a.element, model = _a.model, opType = _a.opType;\n                                    return _this.runningProcesses.isOpen &&\n                                        _this.runningProcesses.add(function () { return __awaiter(_this, void 0, void 0, function () {\n                                            var itemModelDefinition, idOrPk, _a, isSynced, limit;\n                                            var _b, _c;\n                                            return __generator(this, function (_d) {\n                                                switch (_d.label) {\n                                                    case 0:\n                                                        itemModelDefinition = getModelDefinition(model);\n                                                        idOrPk = getIdentifierValue(itemModelDefinition, element);\n                                                        _a = executivePredicate;\n                                                        if (!_a) return [3 /*break*/, 2];\n                                                        return [4 /*yield*/, executivePredicate.matches(element)];\n                                                    case 1:\n                                                        _a = !(_d.sent());\n                                                        _d.label = 2;\n                                                    case 2:\n                                                        if (_a) {\n                                                            if (opType === 'UPDATE' &&\n                                                                (items.has(idOrPk) || itemsChanged.has(idOrPk))) {\n                                                                // tracking as a \"deleted item\" will include the item in\n                                                                // page limit calculations and ensure it is removed from the\n                                                                // final items collection, regardless of which collection(s)\n                                                                // it is currently in. (I mean, it could be in both, right!?)\n                                                                deletedItemIds.push(idOrPk);\n                                                            }\n                                                            else {\n                                                                // ignore updates for irrelevant/filtered items.\n                                                                return [2 /*return*/];\n                                                            }\n                                                        }\n                                                        // Flag items which have been recently deleted\n                                                        // NOTE: Merging of separate operations to the same model instance is handled upstream\n                                                        // in the `mergePage` method within src/sync/merger.ts. The final state of a model instance\n                                                        // depends on the LATEST record (for a given id).\n                                                        if (opType === 'DELETE') {\n                                                            deletedItemIds.push(idOrPk);\n                                                        }\n                                                        else {\n                                                            itemsChanged.set(idOrPk, element);\n                                                        }\n                                                        isSynced = (_c = (_b = this.sync) === null || _b === void 0 ? void 0 : _b.getModelSyncedStatus(model)) !== null && _c !== void 0 ? _c : false;\n                                                        limit = itemsChanged.size - deletedItemIds.length >=\n                                                            this.syncPageSize;\n                                                        if (limit || isSynced) {\n                                                            limitTimerRace.resolve();\n                                                        }\n                                                        // kicks off every subsequent race as results sync down\n                                                        limitTimerRace.start();\n                                                        return [2 /*return*/];\n                                                }\n                                            });\n                                        }); }, 'handle observeQuery observed event');\n                                });\n                                // returns a set of initial/locally-available results\n                                generateAndEmitSnapshot();\n                                return [3 /*break*/, 3];\n                            case 2:\n                                err_1 = _a.sent();\n                                observer.error(err_1);\n                                return [3 /*break*/, 3];\n                            case 3: return [2 /*return*/];\n                        }\n                    });\n                }); }, 'datastore observequery startup')\n                    .catch(_this.handleAddProcError('DataStore.observeQuery()'))\n                    .catch(function (error) {\n                    observer.error(error);\n                });\n                /**\n                 * Combines the `items`, `itemsChanged`, and `deletedItemIds` collections into\n                 * a snapshot in the form of `{ items: T[], isSynced: boolean}`.\n                 *\n                 * SIDE EFFECT: The shared `items` collection is recreated.\n                 */\n                var generateSnapshot = function () {\n                    var _a, _b;\n                    var isSynced = (_b = (_a = _this.sync) === null || _a === void 0 ? void 0 : _a.getModelSyncedStatus(model)) !== null && _b !== void 0 ? _b : false;\n                    var itemsArray = __spread(Array.from(items.values()), Array.from(itemsChanged.values()));\n                    items.clear();\n                    itemsArray.forEach(function (item) {\n                        var itemModelDefinition = getModelDefinition(model);\n                        var idOrPk = getIdentifierValue(itemModelDefinition, item);\n                        items.set(idOrPk, item);\n                    });\n                    // remove deleted items from the final result set\n                    deletedItemIds.forEach(function (idOrPk) { return items.delete(idOrPk); });\n                    var snapshot = Array.from(items.values());\n                    // we sort after we merge the snapshots (items, itemsChanged)\n                    // otherwise, the merge may not\n                    if (options === null || options === void 0 ? void 0 : options.sort) {\n                        sortItems(snapshot);\n                    }\n                    return {\n                        items: snapshot,\n                        isSynced: isSynced,\n                    };\n                };\n                /**\n                 * Emits the list of items to the observer.\n                 *\n                 * SIDE EFFECT: `itemsChanged` and `deletedItemIds` are cleared to prepare\n                 * for the next snapshot.\n                 *\n                 * @param snapshot The generated items data to emit.\n                 */\n                var emitSnapshot = function (snapshot) {\n                    // send the generated snapshot to the primary subscription.\n                    // NOTE: This observer's handler *could* be async ...\n                    observer.next(snapshot);\n                    // reset the changed items sets\n                    itemsChanged.clear();\n                    deletedItemIds = [];\n                };\n                /**\n                 * Sorts an `Array` of `T` according to the sort instructions given in the\n                 * original  `observeQuery()` call.\n                 *\n                 * @param itemsToSort A array of model type.\n                 */\n                var sortItems = function (itemsToSort) {\n                    var modelDefinition = getModelDefinition(model);\n                    var pagination = _this.processPagination(modelDefinition, options);\n                    var sortPredicates = ModelSortPredicateCreator.getPredicates(pagination.sort);\n                    if (sortPredicates.length) {\n                        var compareFn = sortCompareFunction(sortPredicates);\n                        itemsToSort.sort(compareFn);\n                    }\n                };\n                /**\n                 * Force one last snapshot when the model is fully synced.\n                 *\n                 * This reduces latency for that last snapshot, which will otherwise\n                 * wait for the configured timeout.\n                 *\n                 * @param payload The payload from the Hub event.\n                 */\n                var hubCallback = function (_a) {\n                    var payload = _a.payload;\n                    var _b;\n                    var event = payload.event, data = payload.data;\n                    if (event === ControlMessage.SYNC_ENGINE_MODEL_SYNCED &&\n                        ((_b = data === null || data === void 0 ? void 0 : data.model) === null || _b === void 0 ? void 0 : _b.name) === model.name) {\n                        generateAndEmitSnapshot();\n                        Hub.remove('datastore', hubCallback);\n                    }\n                };\n                Hub.listen('datastore', hubCallback);\n                return _this.runningProcesses.addCleaner(function () { return __awaiter(_this, void 0, void 0, function () {\n                    return __generator(this, function (_a) {\n                        if (handle) {\n                            handle.unsubscribe();\n                        }\n                        return [2 /*return*/];\n                    });\n                }); }, 'datastore observequery cleaner');\n            });\n        };\n        this.configure = function (config) {\n            if (config === void 0) { config = {}; }\n            _this.amplifyContext.Auth = _this.Auth;\n            _this.amplifyContext.InternalAPI = _this.InternalAPI;\n            _this.amplifyContext.Cache = _this.Cache;\n            var configDataStore = config.DataStore, configAuthModeStrategyType = config.authModeStrategyType, configConflictHandler = config.conflictHandler, configErrorHandler = config.errorHandler, configMaxRecordsToSync = config.maxRecordsToSync, configSyncPageSize = config.syncPageSize, configFullSyncInterval = config.fullSyncInterval, configSyncExpressions = config.syncExpressions, configAuthProviders = config.authProviders, configStorageAdapter = config.storageAdapter, configFromAmplify = __rest(config, [\"DataStore\", \"authModeStrategyType\", \"conflictHandler\", \"errorHandler\", \"maxRecordsToSync\", \"syncPageSize\", \"fullSyncInterval\", \"syncExpressions\", \"authProviders\", \"storageAdapter\"]);\n            _this.amplifyConfig = __assign(__assign({}, configFromAmplify), _this.amplifyConfig);\n            _this.conflictHandler = _this.setConflictHandler(config);\n            _this.errorHandler = _this.setErrorHandler(config);\n            var authModeStrategyType = (configDataStore && configDataStore.authModeStrategyType) ||\n                configAuthModeStrategyType ||\n                AuthModeStrategyType.DEFAULT;\n            switch (authModeStrategyType) {\n                case AuthModeStrategyType.MULTI_AUTH:\n                    _this.authModeStrategy = multiAuthStrategy(_this.amplifyContext);\n                    break;\n                case AuthModeStrategyType.DEFAULT:\n                    _this.authModeStrategy = defaultAuthStrategy;\n                    break;\n                default:\n                    _this.authModeStrategy = defaultAuthStrategy;\n                    break;\n            }\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            _this.amplifyConfig.authProviders =\n                (configDataStore && configDataStore.authProviders) || configAuthProviders;\n            _this.syncExpressions =\n                (configDataStore && configDataStore.syncExpressions) ||\n                    configSyncExpressions ||\n                    _this.syncExpressions;\n            _this.maxRecordsToSync =\n                (configDataStore && configDataStore.maxRecordsToSync) ||\n                    configMaxRecordsToSync ||\n                    _this.maxRecordsToSync ||\n                    10000;\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            _this.amplifyConfig.maxRecordsToSync = _this.maxRecordsToSync;\n            _this.syncPageSize =\n                (configDataStore && configDataStore.syncPageSize) ||\n                    configSyncPageSize ||\n                    _this.syncPageSize ||\n                    1000;\n            // store on config object, so that Sync, Subscription, and Mutation processors can have access\n            _this.amplifyConfig.syncPageSize = _this.syncPageSize;\n            _this.fullSyncInterval =\n                (configDataStore && configDataStore.fullSyncInterval) ||\n                    configFullSyncInterval ||\n                    _this.fullSyncInterval ||\n                    24 * 60; // 1 day\n            _this.storageAdapter =\n                (configDataStore && configDataStore.storageAdapter) ||\n                    configStorageAdapter ||\n                    _this.storageAdapter ||\n                    undefined;\n            _this.sessionId = _this.retrieveSessionId();\n        };\n    }\n    DataStore.prototype.getModuleName = function () {\n        return 'DataStore';\n    };\n    /**\n     * Builds a function to capture `BackgroundManagerNotOpenError`'s to produce friendlier,\n     * more instructive errors for customers.\n     *\n     * @param operation The name of the operation (usually a Datastore method) the customer\n     * tried to call.\n     */\n    DataStore.prototype.handleAddProcError = function (operation) {\n        var _this = this;\n        /**\n         * If the tested error is a `BackgroundManagerNotOpenError`, it will be captured\n         * and replaced with a friendlier message that instructs the App Developer.\n         *\n         * @param err An error to test.\n         */\n        var handler = function (err) {\n            if (err.message.startsWith('BackgroundManagerNotOpenError')) {\n                throw new Error([\n                    \"DataStoreStateError: Tried to execute `\" + operation + \"` while DataStore was \\\"\" + _this.state + \"\\\".\",\n                    \"This can only be done while DataStore is \\\"Started\\\" or \\\"Stopped\\\". To remedy:\",\n                    'Ensure all calls to `stop()` and `clear()` have completed first.',\n                    'If this is not possible, retry the operation until it succeeds.',\n                ].join('\\n'));\n            }\n            else {\n                throw err;\n            }\n        };\n        return handler;\n    };\n    /**\n     * Clears all data from storage and removes all data, schema info, other\n     * initialization details, and then stops DataStore.\n     *\n     * That said, reinitialization is required after clearing. This can be done\n     * by explicitiliy calling `start()` or any method that implicitly starts\n     * DataStore, such as `query()`, `save()`, or `delete()`.\n     */\n    DataStore.prototype.clear = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        checkSchemaInitialized();\n                        this.state = DataStoreState.Clearing;\n                        return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        if (!(this.storage === undefined)) return [3 /*break*/, 3];\n                        // connect to storage so that it can be cleared without fully starting DataStore\n                        this.storage = new Storage(schema, namespaceResolver, getModelConstructorByModelName, modelInstanceCreator, this.storageAdapter, this.sessionId);\n                        return [4 /*yield*/, this.storage.init()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        if (syncSubscription && !syncSubscription.closed) {\n                            syncSubscription.unsubscribe();\n                        }\n                        if (!this.sync) return [3 /*break*/, 5];\n                        return [4 /*yield*/, this.sync.stop()];\n                    case 4:\n                        _a.sent();\n                        _a.label = 5;\n                    case 5: return [4 /*yield*/, this.storage.clear()];\n                    case 6:\n                        _a.sent();\n                        this.initialized = undefined; // Should re-initialize when start() is called.\n                        this.storage = undefined;\n                        this.sync = undefined;\n                        this.syncPredicates = new WeakMap();\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 7:\n                        _a.sent();\n                        this.state = DataStoreState.NotRunning;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Stops all DataStore sync activities.\n     *\n     * TODO: \"Waits for graceful termination of\n     * running queries and terminates subscriptions.\"\n     */\n    DataStore.prototype.stop = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this.state = DataStoreState.Stopping;\n                        return [4 /*yield*/, this.runningProcesses.close()];\n                    case 1:\n                        _a.sent();\n                        if (syncSubscription && !syncSubscription.closed) {\n                            syncSubscription.unsubscribe();\n                        }\n                        if (!this.sync) return [3 /*break*/, 3];\n                        return [4 /*yield*/, this.sync.stop()];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3:\n                        this.initialized = undefined; // Should re-initialize when start() is called.\n                        this.sync = undefined;\n                        return [4 /*yield*/, this.runningProcesses.open()];\n                    case 4:\n                        _a.sent();\n                        this.state = DataStoreState.NotRunning;\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Validates given pagination input from a query and creates a pagination\n     * argument for use against the storage layer.\n     *\n     * @param modelDefinition\n     * @param paginationProducer\n     */\n    DataStore.prototype.processPagination = function (modelDefinition, paginationProducer) {\n        var sortPredicate;\n        var _a = paginationProducer || {}, limit = _a.limit, page = _a.page, sort = _a.sort;\n        if (limit === undefined && page === undefined && sort === undefined) {\n            return undefined;\n        }\n        if (page !== undefined && limit === undefined) {\n            throw new Error('Limit is required when requesting a page');\n        }\n        if (page !== undefined) {\n            if (typeof page !== 'number') {\n                throw new Error('Page should be a number');\n            }\n            if (page < 0) {\n                throw new Error(\"Page can't be negative\");\n            }\n        }\n        if (limit !== undefined) {\n            if (typeof limit !== 'number') {\n                throw new Error('Limit should be a number');\n            }\n            if (limit < 0) {\n                throw new Error(\"Limit can't be negative\");\n            }\n        }\n        if (sort) {\n            sortPredicate = ModelSortPredicateCreator.createFromExisting(modelDefinition, sort);\n        }\n        return {\n            limit: limit,\n            page: page,\n            sort: sortPredicate,\n        };\n    };\n    /**\n     * Examines the configured `syncExpressions` and produces a WeakMap of\n     * SchemaModel -> predicate to use during sync.\n     */\n    DataStore.prototype.processSyncExpressions = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var syncPredicates;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.syncExpressions || !this.syncExpressions.length) {\n                            return [2 /*return*/, new WeakMap()];\n                        }\n                        return [4 /*yield*/, Promise.all(this.syncExpressions.map(function (syncExpression) { return __awaiter(_this, void 0, void 0, function () {\n                                var _a, modelConstructor, conditionProducer, modelDefinition, condition, predicate;\n                                return __generator(this, function (_b) {\n                                    switch (_b.label) {\n                                        case 0: return [4 /*yield*/, syncExpression];\n                                        case 1:\n                                            _a = _b.sent(), modelConstructor = _a.modelConstructor, conditionProducer = _a.conditionProducer;\n                                            modelDefinition = getModelDefinition(modelConstructor);\n                                            return [4 /*yield*/, this.unwrapPromise(conditionProducer)];\n                                        case 2:\n                                            condition = _b.sent();\n                                            if (isPredicatesAll(condition)) {\n                                                return [2 /*return*/, [modelDefinition, null]];\n                                            }\n                                            predicate = internals(condition(predicateFor({\n                                                builder: modelConstructor,\n                                                schema: modelDefinition,\n                                                pkField: extractPrimaryKeyFieldNames(modelDefinition),\n                                            }))).toStoragePredicate();\n                                            return [2 /*return*/, [modelDefinition, predicate]];\n                                    }\n                                });\n                            }); }))];\n                    case 1:\n                        syncPredicates = _a.sent();\n                        return [2 /*return*/, this.weakMapFromEntries(syncPredicates)];\n                }\n            });\n        });\n    };\n    DataStore.prototype.unwrapPromise = function (conditionProducer) {\n        return __awaiter(this, void 0, void 0, function () {\n            var condition, error_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, conditionProducer()];\n                    case 1:\n                        condition = _a.sent();\n                        return [2 /*return*/, condition || conditionProducer];\n                    case 2:\n                        error_1 = _a.sent();\n                        if (error_1 instanceof TypeError) {\n                            return [2 /*return*/, conditionProducer];\n                        }\n                        throw error_1;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    DataStore.prototype.weakMapFromEntries = function (entries) {\n        return entries.reduce(function (map, _a) {\n            var _b = __read(_a, 2), modelDefinition = _b[0], predicate = _b[1];\n            if (map.has(modelDefinition)) {\n                var name_2 = modelDefinition.name;\n                logger.warn(\"You can only utilize one Sync Expression per model.\\n          Subsequent sync expressions for the \" + name_2 + \" model will be ignored.\");\n                return map;\n            }\n            if (predicate) {\n                map.set(modelDefinition, predicate);\n            }\n            return map;\n        }, new WeakMap());\n    };\n    /**\n     * A session ID to allow CMS to open databases against multiple apps.\n     * This session ID is only expected be set by AWS Amplify Studio.\n     */\n    DataStore.prototype.retrieveSessionId = function () {\n        try {\n            var sessionId = sessionStorage.getItem('datastoreSessionId');\n            if (sessionId) {\n                var aws_appsync_graphqlEndpoint = this.amplifyConfig.aws_appsync_graphqlEndpoint;\n                var appSyncUrl = aws_appsync_graphqlEndpoint.split('/')[2];\n                var _a = __read(appSyncUrl.split('.'), 1), appSyncId = _a[0];\n                return sessionId + \"-\" + appSyncId;\n            }\n        }\n        catch (_b) { }\n        return undefined;\n    };\n    return DataStore;\n}());\nvar instance = new DataStore();\nAmplify.register(instance);\nexport { DataStore as DataStoreClass, initSchema, instance as DataStore };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}