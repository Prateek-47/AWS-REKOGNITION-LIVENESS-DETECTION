{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TopK } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmTopK;\n\nfunction setup(backend) {\n  wasmTopK = backend.wasm.cwrap(TopK, null\n  /* void */\n  , ['number', 'array', 'number', 'number', 'number', 'bool', 'number', 'number']);\n}\n\nexport const topk = ({\n  inputs,\n  backend,\n  attrs\n}) => {\n  const {\n    x\n  } = inputs;\n  const {\n    k,\n    sorted\n  } = attrs;\n  const xId = backend.dataIdMap.get(x.dataId).id;\n  const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n  const outputShape = x.shape.slice();\n  outputShape[outputShape.length - 1] = k;\n  const outValues = backend.makeOutput(outputShape, x.dtype);\n  const outValuesId = backend.dataIdMap.get(outValues.dataId).id;\n  const outIndices = backend.makeOutput(outputShape, 'int32');\n  const outIndicesId = backend.dataIdMap.get(outIndices.dataId).id;\n  wasmTopK(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], k, sorted, outValuesId, outIndicesId);\n  return [outValues, outIndices];\n};\nexport const topKConfig = {\n  kernelName: TopK,\n  backendName: 'wasm',\n  setupFunc: setup,\n  kernelFunc: topk\n};","map":{"version":3,"names":["TopK","CppDType","wasmTopK","setup","backend","wasm","cwrap","topk","inputs","attrs","x","k","sorted","xId","dataIdMap","get","dataId","id","xShapeBytes","Uint8Array","Int32Array","shape","buffer","outputShape","slice","length","outValues","makeOutput","dtype","outValuesId","outIndices","outIndicesId","topKConfig","kernelName","backendName","setupFunc","kernelFunc"],"sources":["D:/aws-rekognition-liveness-detection-main/node_modules/@tensorflow/tfjs-backend-wasm/dist/kernels/TopK.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TopK } from '@tensorflow/tfjs-core';\nimport { CppDType } from './types';\nlet wasmTopK;\nfunction setup(backend) {\n    wasmTopK = backend.wasm.cwrap(TopK, null /* void */, [\n        'number',\n        'array',\n        'number',\n        'number',\n        'number',\n        'bool',\n        'number',\n        'number',\n    ]);\n}\nexport const topk = ({ inputs, backend, attrs }) => {\n    const { x } = inputs;\n    const { k, sorted } = attrs;\n    const xId = backend.dataIdMap.get(x.dataId).id;\n    const xShapeBytes = new Uint8Array(new Int32Array(x.shape).buffer);\n    const outputShape = x.shape.slice();\n    outputShape[outputShape.length - 1] = k;\n    const outValues = backend.makeOutput(outputShape, x.dtype);\n    const outValuesId = backend.dataIdMap.get(outValues.dataId).id;\n    const outIndices = backend.makeOutput(outputShape, 'int32');\n    const outIndicesId = backend.dataIdMap.get(outIndices.dataId).id;\n    wasmTopK(xId, xShapeBytes, x.shape.length, CppDType[x.dtype], k, sorted, outValuesId, outIndicesId);\n    return [outValues, outIndices];\n};\nexport const topKConfig = {\n    kernelName: TopK,\n    backendName: 'wasm',\n    setupFunc: setup,\n    kernelFunc: topk,\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,QAAqB,uBAArB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,IAAIC,QAAJ;;AACA,SAASC,KAAT,CAAeC,OAAf,EAAwB;EACpBF,QAAQ,GAAGE,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBN,IAAnB,EAAyB;EAAK;EAA9B,EAA0C,CACjD,QADiD,EAEjD,OAFiD,EAGjD,QAHiD,EAIjD,QAJiD,EAKjD,QALiD,EAMjD,MANiD,EAOjD,QAPiD,EAQjD,QARiD,CAA1C,CAAX;AAUH;;AACD,OAAO,MAAMO,IAAI,GAAG,CAAC;EAAEC,MAAF;EAAUJ,OAAV;EAAmBK;AAAnB,CAAD,KAAgC;EAChD,MAAM;IAAEC;EAAF,IAAQF,MAAd;EACA,MAAM;IAAEG,CAAF;IAAKC;EAAL,IAAgBH,KAAtB;EACA,MAAMI,GAAG,GAAGT,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBL,CAAC,CAACM,MAAxB,EAAgCC,EAA5C;EACA,MAAMC,WAAW,GAAG,IAAIC,UAAJ,CAAe,IAAIC,UAAJ,CAAeV,CAAC,CAACW,KAAjB,EAAwBC,MAAvC,CAApB;EACA,MAAMC,WAAW,GAAGb,CAAC,CAACW,KAAF,CAAQG,KAAR,EAApB;EACAD,WAAW,CAACA,WAAW,CAACE,MAAZ,GAAqB,CAAtB,CAAX,GAAsCd,CAAtC;EACA,MAAMe,SAAS,GAAGtB,OAAO,CAACuB,UAAR,CAAmBJ,WAAnB,EAAgCb,CAAC,CAACkB,KAAlC,CAAlB;EACA,MAAMC,WAAW,GAAGzB,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBW,SAAS,CAACV,MAAhC,EAAwCC,EAA5D;EACA,MAAMa,UAAU,GAAG1B,OAAO,CAACuB,UAAR,CAAmBJ,WAAnB,EAAgC,OAAhC,CAAnB;EACA,MAAMQ,YAAY,GAAG3B,OAAO,CAACU,SAAR,CAAkBC,GAAlB,CAAsBe,UAAU,CAACd,MAAjC,EAAyCC,EAA9D;EACAf,QAAQ,CAACW,GAAD,EAAMK,WAAN,EAAmBR,CAAC,CAACW,KAAF,CAAQI,MAA3B,EAAmCxB,QAAQ,CAACS,CAAC,CAACkB,KAAH,CAA3C,EAAsDjB,CAAtD,EAAyDC,MAAzD,EAAiEiB,WAAjE,EAA8EE,YAA9E,CAAR;EACA,OAAO,CAACL,SAAD,EAAYI,UAAZ,CAAP;AACH,CAbM;AAcP,OAAO,MAAME,UAAU,GAAG;EACtBC,UAAU,EAAEjC,IADU;EAEtBkC,WAAW,EAAE,MAFS;EAGtBC,SAAS,EAAEhC,KAHW;EAItBiC,UAAU,EAAE7B;AAJU,CAAnB"},"metadata":{},"sourceType":"module"}